
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008914  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002858  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f4  0800b2f4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2f4  0800b2f4  0001b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2fc  0800b2fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b300  0800b300  0001b300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800b304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00001c4c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c64  20001c64  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b8a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003399  00000000  00000000  00036bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00039f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237d4  00000000  00000000  0003c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019751  00000000  00000000  0005fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1418  00000000  00000000  00079515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a92d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052d0  00000000  00000000  0014a980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a84 	.word	0x08008a84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08008a84 	.word	0x08008a84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f006 f95a 	bl	80069b2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20001a48 	.word	0x20001a48

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f003 fdf0 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f003 f801 	bl	8003724 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f003 fde7 	bl	80042fc <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f003 fde1 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f002 fff2 	bl	8003724 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f003 fdd5 	bl	80042fc <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f003 fd7a 	bl	80042fc <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f003 fd74 	bl	80042fc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f003 fd6a 	bl	80042fc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f003 fcdc 	bl	80042fc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f003 fcd3 	bl	80042fc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000034 	.word	0x20000034

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f003 fb16 	bl	80042fc <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f003 fb10 	bl	80042fc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f003 fb07 	bl	80042fc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f003 fa6d 	bl	80042fc <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f003 fa43 	bl	80042fc <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f003 fa3a 	bl	80042fc <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f003 f9ee 	bl	80042fc <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f003 f9e5 	bl	80042fc <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f003 f999 	bl	80042fc <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f003 f990 	bl	80042fc <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	08009340 	.word	0x08009340
 8001068:	08009618 	.word	0x08009618

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f003 f940 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f003 f93a 	bl	80042fc <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f003 f92e 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f003 f928 	bl	80042fc <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:

uint8_t started = 0;


void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4831      	ldr	r0, [pc, #196]	; (8001180 <Si468x_init+0xcc>)
 80010bc:	f001 f8e2 	bl	8002284 <send_debug_msg>
	Si468x_reset();
 80010c0:	f000 f864 	bl	800118c <Si468x_reset>
	Si468x_power_up();
 80010c4:	f000 f87e 	bl	80011c4 <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010c8:	f000 f900 	bl	80012cc <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010cc:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d0:	f000 f970 	bl	80013b4 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d4:	f000 fa0e 	bl	80014f4 <Si468x_boot>
	Si468x_get_part_info();
 80010d8:	f000 fbbc 	bl	8001854 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010dc:	f000 fb36 	bl	800174c <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x00); //włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e0:	2100      	movs	r1, #0
 80010e2:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e6:	f000 fc25 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); //dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ea:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010ee:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f2:	f000 fc1f 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); //dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010fa:	f241 7011 	movw	r0, #5905	; 0x1711
 80010fe:	f000 fc19 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x05); //prog RSSI od kiedy łapie kanał, default 12
 8001102:	2105      	movs	r1, #5
 8001104:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001108:	f000 fc14 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); //określa które featury PAD będą przesyłane do hosta
 800110c:	f244 0105 	movw	r1, #16389	; 0x4005
 8001110:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8001114:	f000 fc0e 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x06); //określa co ile będzie aktualizowana lista usług, x100 ms
 8001118:	2106      	movs	r1, #6
 800111a:	f24b 3001 	movw	r0, #45825	; 0xb301
 800111e:	f000 fc09 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x06); //określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001122:	2106      	movs	r1, #6
 8001124:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001128:	f000 fc04 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);	//tylko soft mute włączone przy slabym sygnale
 800112c:	2101      	movs	r1, #1
 800112e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001132:	f000 fbff 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);	//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001136:	2105      	movs	r1, #5
 8001138:	f24b 5001 	movw	r0, #46337	; 0xb501
 800113c:	f000 fbfa 	bl	8001934 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); //limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001140:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001144:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001148:	f000 fbf4 	bl	8001934 <Si468x_set_property>
	Si468x_dab_get_freq_list(); //odczytujemy z ukladu liste czestotliwosci do tablicy
 800114c:	f000 fcde 	bl	8001b0c <Si468x_dab_get_freq_list>
	Si468x_dab_tune_freq(CH_11B);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 fdab 	bl	8001cac <Si468x_dab_tune_freq>
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001156:	f000 faf9 	bl	800174c <Si468x_get_sys_state>

	while(!valid && !acq)
 800115a:	e004      	b.n	8001166 <Si468x_init+0xb2>
	{
		Si468x_dab_digrad_status();
 800115c:	f000 fe48 	bl	8001df0 <Si468x_dab_digrad_status>
		HAL_Delay(200);
 8001160:	20c8      	movs	r0, #200	; 0xc8
 8001162:	f002 fadf 	bl	8003724 <HAL_Delay>
	while(!valid && !acq)
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <Si468x_init+0xd0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <Si468x_init+0xc2>
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <Si468x_init+0xd4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f2      	beq.n	800115c <Si468x_init+0xa8>
	}
	Si468x_dab_get_digital_service_list();
 8001176:	f000 feff 	bl	8001f78 <Si468x_dab_get_digital_service_list>
//			Si468x_dab_start_digital_service(12966, 4);
//			started = 1;
//		}
//		HAL_Delay(500);
//	}
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	08008a9c 	.word	0x08008a9c
 8001184:	2000191c 	.word	0x2000191c
 8001188:	2000191d 	.word	0x2000191d

0800118c <Si468x_reset>:

void Si468x_reset()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001190:	2101      	movs	r1, #1
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <Si468x_reset+0x30>)
 8001194:	f001 f876 	bl	8002284 <send_debug_msg>
	RESET_PIN_LOW;
 8001198:	2200      	movs	r2, #0
 800119a:	2120      	movs	r1, #32
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <Si468x_reset+0x34>)
 800119e:	f003 f8ad 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f002 fabe 	bl	8003724 <HAL_Delay>
	RESET_PIN_HIGH;
 80011a8:	2201      	movs	r2, #1
 80011aa:	2120      	movs	r1, #32
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <Si468x_reset+0x34>)
 80011ae:	f003 f8a5 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011b2:	20c8      	movs	r0, #200	; 0xc8
 80011b4:	f002 fab6 	bl	8003724 <HAL_Delay>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08008aec 	.word	0x08008aec
 80011c0:	40020800 	.word	0x40020800

080011c4 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 80011c8:	2101      	movs	r1, #1
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <Si468x_power_up+0xa0>)
 80011cc:	f001 f85a 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <Si468x_power_up+0xa4>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <Si468x_power_up+0xa4>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <Si468x_power_up+0xa4>)
 80011de:	2217      	movs	r2, #23
 80011e0:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <Si468x_power_up+0xa4>)
 80011e4:	2250      	movs	r2, #80	; 0x50
 80011e6:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <Si468x_power_up+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <Si468x_power_up+0xa4>)
 80011f0:	22f8      	movs	r2, #248	; 0xf8
 80011f2:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <Si468x_power_up+0xa4>)
 80011f6:	2224      	movs	r2, #36	; 0x24
 80011f8:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <Si468x_power_up+0xa4>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <Si468x_power_up+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <Si468x_power_up+0xa4>)
 8001208:	2210      	movs	r2, #16
 800120a:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <Si468x_power_up+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <Si468x_power_up+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <Si468x_power_up+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <Si468x_power_up+0xa4>)
 8001220:	2228      	movs	r2, #40	; 0x28
 8001222:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <Si468x_power_up+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <Si468x_power_up+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001230:	490d      	ldr	r1, [pc, #52]	; (8001268 <Si468x_power_up+0xa4>)
 8001232:	2010      	movs	r0, #16
 8001234:	f000 fa52 	bl	80016dc <Si468x_write_command>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <Si468x_power_up+0xa8>)
 800123e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f002 fa6f 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001246:	490a      	ldr	r1, [pc, #40]	; (8001270 <Si468x_power_up+0xac>)
 8001248:	2005      	movs	r0, #5
 800124a:	f000 fa6f 	bl	800172c <Si468x_read_reply>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <Si468x_power_up+0xa8>)
 8001254:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 8001256:	2101      	movs	r1, #1
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <Si468x_power_up+0xb0>)
 800125a:	f001 f813 	bl	8002284 <send_debug_msg>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	08008b00 	.word	0x08008b00
 8001268:	20000038 	.word	0x20000038
 800126c:	200018f4 	.word	0x200018f4
 8001270:	20001038 	.word	0x20001038
 8001274:	08008b3c 	.word	0x08008b3c

08001278 <Si468x_load_init>:

void Si468x_load_init()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 800127c:	2101      	movs	r1, #1
 800127e:	480f      	ldr	r0, [pc, #60]	; (80012bc <Si468x_load_init+0x44>)
 8001280:	f001 f800 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <Si468x_load_init+0x48>)
 8001286:	2206      	movs	r2, #6
 8001288:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <Si468x_load_init+0x48>)
 800128c:	2200      	movs	r2, #0
 800128e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001290:	490b      	ldr	r1, [pc, #44]	; (80012c0 <Si468x_load_init+0x48>)
 8001292:	2002      	movs	r0, #2
 8001294:	f000 fa22 	bl	80016dc <Si468x_write_command>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <Si468x_load_init+0x4c>)
 800129e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f002 fa3f 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <Si468x_load_init+0x50>)
 80012a8:	2005      	movs	r0, #5
 80012aa:	f000 fa3f 	bl	800172c <Si468x_read_reply>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <Si468x_load_init+0x4c>)
 80012b4:	701a      	strb	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08008b5c 	.word	0x08008b5c
 80012c0:	20000038 	.word	0x20000038
 80012c4:	200018f4 	.word	0x200018f4
 80012c8:	20001038 	.word	0x20001038

080012cc <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 80012d2:	2101      	movs	r1, #1
 80012d4:	4830      	ldr	r0, [pc, #192]	; (8001398 <Si468x_bootloader_load_host+0xcc>)
 80012d6:	f000 ffd5 	bl	8002284 <send_debug_msg>
	Si468x_load_init();
 80012da:	f7ff ffcd 	bl	8001278 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 80012de:	f241 63a4 	movw	r3, #5796	; 0x16a4
 80012e2:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <Si468x_bootloader_load_host+0xd0>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <Si468x_bootloader_load_host+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <Si468x_bootloader_load_host+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <Si468x_bootloader_load_host+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	e03e      	b.n	8001380 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001302:	2300      	movs	r3, #0
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	e014      	b.n	8001332 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001308:	88ba      	ldrh	r2, [r7, #4]
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	4924      	ldr	r1, [pc, #144]	; (80013a0 <Si468x_bootloader_load_host+0xd4>)
 800130e:	fba1 1303 	umull	r1, r3, r1, r3
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	b29b      	uxth	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	441a      	add	r2, r3
 8001320:	88bb      	ldrh	r3, [r7, #4]
 8001322:	3304      	adds	r3, #4
 8001324:	491f      	ldr	r1, [pc, #124]	; (80013a4 <Si468x_bootloader_load_host+0xd8>)
 8001326:	5c89      	ldrb	r1, [r1, r2]
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <Si468x_bootloader_load_host+0xd0>)
 800132a:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	80bb      	strh	r3, [r7, #4]
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <Si468x_bootloader_load_host+0xd4>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	085b      	lsrs	r3, r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3e1      	bcc.n	8001308 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <Si468x_bootloader_load_host+0xd4>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	3304      	adds	r3, #4
 8001352:	b29b      	uxth	r3, r3
 8001354:	4911      	ldr	r1, [pc, #68]	; (800139c <Si468x_bootloader_load_host+0xd0>)
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f9c0 	bl	80016dc <Si468x_write_command>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <Si468x_bootloader_load_host+0xdc>)
 8001362:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f002 f9dd 	bl	8003724 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800136a:	4910      	ldr	r1, [pc, #64]	; (80013ac <Si468x_bootloader_load_host+0xe0>)
 800136c:	2005      	movs	r0, #5
 800136e:	f000 f9dd 	bl	800172c <Si468x_read_reply>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <Si468x_bootloader_load_host+0xdc>)
 8001378:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	3301      	adds	r3, #1
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d9bd      	bls.n	8001302 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 8001386:	2101      	movs	r1, #1
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <Si468x_bootloader_load_host+0xe4>)
 800138a:	f000 ff7b 	bl	8002284 <send_debug_msg>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	08008b74 	.word	0x08008b74
 800139c:	20000038 	.word	0x20000038
 80013a0:	aaaaaaab 	.word	0xaaaaaaab
 80013a4:	08009c08 	.word	0x08009c08
 80013a8:	200018f4 	.word	0x200018f4
 80013ac:	20001038 	.word	0x20001038
 80013b0:	08008bb0 	.word	0x08008bb0

080013b4 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 80013bc:	2101      	movs	r1, #1
 80013be:	4845      	ldr	r0, [pc, #276]	; (80014d4 <Si468x_firmware_load_flash+0x120>)
 80013c0:	f000 ff60 	bl	8002284 <send_debug_msg>
	Si468x_load_init();
 80013c4:	f7ff ff58 	bl	8001278 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013dc:	2200      	movs	r2, #0
 80013de:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013e6:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013f0:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 80013fa:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0e1b      	lsrs	r3, r3, #24
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001404:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address", CRLF_SEND);
 8001406:	2101      	movs	r1, #1
 8001408:	4834      	ldr	r0, [pc, #208]	; (80014dc <Si468x_firmware_load_flash+0x128>)
 800140a:	f000 ff3b 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	2210      	movs	r2, #16
 8001414:	4932      	ldr	r1, [pc, #200]	; (80014e0 <Si468x_firmware_load_flash+0x12c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fae8 	bl	80089ec <itoa>
 800141c:	4603      	mov	r3, r0
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f000 ff2f 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_SEND);
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001428:	795b      	ldrb	r3, [r3, #5]
 800142a:	2210      	movs	r2, #16
 800142c:	492c      	ldr	r1, [pc, #176]	; (80014e0 <Si468x_firmware_load_flash+0x12c>)
 800142e:	4618      	mov	r0, r3
 8001430:	f007 fadc 	bl	80089ec <itoa>
 8001434:	4603      	mov	r3, r0
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f000 ff23 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_SEND);
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001440:	799b      	ldrb	r3, [r3, #6]
 8001442:	2210      	movs	r2, #16
 8001444:	4926      	ldr	r1, [pc, #152]	; (80014e0 <Si468x_firmware_load_flash+0x12c>)
 8001446:	4618      	mov	r0, r3
 8001448:	f007 fad0 	bl	80089ec <itoa>
 800144c:	4603      	mov	r3, r0
 800144e:	2101      	movs	r1, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f000 ff17 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001458:	79db      	ldrb	r3, [r3, #7]
 800145a:	2210      	movs	r2, #16
 800145c:	4920      	ldr	r1, [pc, #128]	; (80014e0 <Si468x_firmware_load_flash+0x12c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f007 fac4 	bl	80089ec <itoa>
 8001464:	4603      	mov	r3, r0
 8001466:	2101      	movs	r1, #1
 8001468:	4618      	mov	r0, r3
 800146a:	f000 ff0b 	bl	8002284 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001470:	2200      	movs	r2, #0
 8001472:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001476:	2200      	movs	r2, #0
 8001478:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 800147c:	2200      	movs	r2, #0
 800147e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001482:	2200      	movs	r2, #0
 8001484:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001486:	4914      	ldr	r1, [pc, #80]	; (80014d8 <Si468x_firmware_load_flash+0x124>)
 8001488:	200c      	movs	r0, #12
 800148a:	f000 f927 	bl	80016dc <Si468x_write_command>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <Si468x_firmware_load_flash+0x130>)
 8001494:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f002 f944 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800149c:	4912      	ldr	r1, [pc, #72]	; (80014e8 <Si468x_firmware_load_flash+0x134>)
 800149e:	2005      	movs	r0, #5
 80014a0:	f000 f944 	bl	800172c <Si468x_read_reply>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <Si468x_firmware_load_flash+0x130>)
 80014aa:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <Si468x_firmware_load_flash+0x134>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80014b8:	2101      	movs	r1, #1
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <Si468x_firmware_load_flash+0x138>)
 80014bc:	f000 fee2 	bl	8002284 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 80014c0:	e003      	b.n	80014ca <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 80014c2:	2101      	movs	r1, #1
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <Si468x_firmware_load_flash+0x13c>)
 80014c6:	f000 fedd 	bl	8002284 <send_debug_msg>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08008bd0 	.word	0x08008bd0
 80014d8:	20000038 	.word	0x20000038
 80014dc:	08008c0c 	.word	0x08008c0c
 80014e0:	200018f8 	.word	0x200018f8
 80014e4:	200018f4 	.word	0x200018f4
 80014e8:	20001038 	.word	0x20001038
 80014ec:	08008c1c 	.word	0x08008c1c
 80014f0:	08008c2c 	.word	0x08008c2c

080014f4 <Si468x_boot>:

void Si468x_boot()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014f8:	2101      	movs	r1, #1
 80014fa:	4816      	ldr	r0, [pc, #88]	; (8001554 <Si468x_boot+0x60>)
 80014fc:	f000 fec2 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <Si468x_boot+0x64>)
 8001502:	2207      	movs	r2, #7
 8001504:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Si468x_boot+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 800150c:	4912      	ldr	r1, [pc, #72]	; (8001558 <Si468x_boot+0x64>)
 800150e:	2002      	movs	r0, #2
 8001510:	f000 f8e4 	bl	80016dc <Si468x_write_command>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <Si468x_boot+0x68>)
 800151a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f002 f901 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001522:	490f      	ldr	r1, [pc, #60]	; (8001560 <Si468x_boot+0x6c>)
 8001524:	2005      	movs	r0, #5
 8001526:	f000 f901 	bl	800172c <Si468x_read_reply>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <Si468x_boot+0x68>)
 8001530:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <Si468x_boot+0x6c>)
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800153a:	2bc0      	cmp	r3, #192	; 0xc0
 800153c:	d104      	bne.n	8001548 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 800153e:	2101      	movs	r1, #1
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <Si468x_boot+0x70>)
 8001542:	f000 fe9f 	bl	8002284 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 8001546:	e003      	b.n	8001550 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001548:	2101      	movs	r1, #1
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <Si468x_boot+0x74>)
 800154c:	f000 fe9a 	bl	8002284 <send_debug_msg>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	08008c48 	.word	0x08008c48
 8001558:	20000038 	.word	0x20000038
 800155c:	200018f4 	.word	0x200018f4
 8001560:	20001038 	.word	0x20001038
 8001564:	08008c84 	.word	0x08008c84
 8001568:	08008ca0 	.word	0x08008ca0

0800156c <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 8001576:	1df9      	adds	r1, r7, #7
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	2201      	movs	r2, #1
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <Si468x_write_single_byte+0x20>)
 800157e:	f005 fa18 	bl	80069b2 <HAL_SPI_Transmit>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200019f0 	.word	0x200019f0

08001590 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800159a:	1df9      	adds	r1, r7, #7
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	2201      	movs	r2, #1
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <Si468x_read_single_byte+0x20>)
 80015a2:	f005 fb42 	bl	8006c2a <HAL_SPI_Receive>
	return data_buffer;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200019f0 	.word	0x200019f0

080015b4 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	e01c      	b.n	8001602 <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 80015c8:	f107 030d 	add.w	r3, r7, #13
 80015cc:	4619      	mov	r1, r3
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 f850 	bl	8001674 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 80015d4:	7b7b      	ldrb	r3, [r7, #13]
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da0c      	bge.n	80015f6 <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015e6:	2101      	movs	r1, #1
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <Si468x_wait_for_CTS+0x68>)
 80015ea:	f000 fe4b 	bl	8002284 <send_debug_msg>
				return COMMAND_ERROR;
 80015ee:	2320      	movs	r3, #32
 80015f0:	e010      	b.n	8001614 <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e00e      	b.n	8001614 <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f002 f894 	bl	8003724 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	3301      	adds	r3, #1
 8001600:	81fb      	strh	r3, [r7, #14]
 8001602:	89fa      	ldrh	r2, [r7, #14]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3de      	bcc.n	80015c8 <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 800160a:	2101      	movs	r1, #1
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <Si468x_wait_for_CTS+0x6c>)
 800160e:	f000 fe39 	bl	8002284 <send_debug_msg>
	return TIMEOUT;
 8001612:	2308      	movs	r3, #8
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08008cb4 	.word	0x08008cb4
 8001620:	08008cdc 	.word	0x08008cdc

08001624 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <Si468x_write_multiple+0x4c>)
 800163a:	f002 fe5f 	bl	80042fc <HAL_GPIO_WritePin>
	while(len--)
 800163e:	e009      	b.n	8001654 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	81fa      	strh	r2, [r7, #14]
 8001646:	461a      	mov	r2, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff8c 	bl	800156c <Si468x_write_single_byte>
	while(len--)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	80fa      	strh	r2, [r7, #6]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <Si468x_write_multiple+0x4c>)
 8001664:	f002 fe4a 	bl	80042fc <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020800 	.word	0x40020800

08001674 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001684:	2201      	movs	r2, #1
 8001686:	2110      	movs	r1, #16
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <Si468x_read_multiple+0x64>)
 800168a:	f002 fe37 	bl	80042fc <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800168e:	2003      	movs	r0, #3
 8001690:	f002 f848 	bl	8003724 <HAL_Delay>
	CS_PIN_LOW;
 8001694:	2200      	movs	r2, #0
 8001696:	2110      	movs	r1, #16
 8001698:	480f      	ldr	r0, [pc, #60]	; (80016d8 <Si468x_read_multiple+0x64>)
 800169a:	f002 fe2f 	bl	80042fc <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff ff64 	bl	800156c <Si468x_write_single_byte>
	while(len--)
 80016a4:	e009      	b.n	80016ba <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	81fa      	strh	r2, [r7, #14]
 80016ac:	461a      	mov	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	189c      	adds	r4, r3, r2
 80016b2:	f7ff ff6d 	bl	8001590 <Si468x_read_single_byte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	7023      	strb	r3, [r4, #0]
	while(len--)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	80fa      	strh	r2, [r7, #6]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 80016c4:	2201      	movs	r2, #1
 80016c6:	2110      	movs	r1, #16
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <Si468x_read_multiple+0x64>)
 80016ca:	f002 fe17 	bl	80042fc <HAL_GPIO_WritePin>
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40020800 	.word	0x40020800

080016dc <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ec:	f7ff ff62 	bl	80015b4 <Si468x_wait_for_CTS>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <Si468x_write_command+0x24>
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d10a      	bne.n	8001716 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff8d 	bl	8001624 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800170a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170e:	f7ff ff51 	bl	80015b4 <Si468x_wait_for_CTS>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
	}
	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
 8001716:	2101      	movs	r1, #1
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <Si468x_write_command+0x4c>)
 800171a:	f000 fdb3 	bl	8002284 <send_debug_msg>
	return ret;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	08008cec 	.word	0x08008cec

0800172c <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff99 	bl	8001674 <Si468x_read_multiple>
	return SUCCESS;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001750:	2101      	movs	r1, #1
 8001752:	4833      	ldr	r0, [pc, #204]	; (8001820 <Si468x_get_sys_state+0xd4>)
 8001754:	f000 fd96 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <Si468x_get_sys_state+0xd8>)
 800175a:	2209      	movs	r2, #9
 800175c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <Si468x_get_sys_state+0xd8>)
 8001760:	2200      	movs	r2, #0
 8001762:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001764:	492f      	ldr	r1, [pc, #188]	; (8001824 <Si468x_get_sys_state+0xd8>)
 8001766:	2002      	movs	r0, #2
 8001768:	f7ff ffb8 	bl	80016dc <Si468x_write_command>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <Si468x_get_sys_state+0xdc>)
 8001772:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f001 ffd5 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800177a:	492c      	ldr	r1, [pc, #176]	; (800182c <Si468x_get_sys_state+0xe0>)
 800177c:	2005      	movs	r0, #5
 800177e:	f7ff ffd5 	bl	800172c <Si468x_read_reply>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <Si468x_get_sys_state+0xdc>)
 8001788:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800178a:	2100      	movs	r1, #0
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <Si468x_get_sys_state+0xe4>)
 800178e:	f000 fd79 	bl	8002284 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <Si468x_get_sys_state+0xe0>)
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	2b07      	cmp	r3, #7
 8001798:	d83a      	bhi.n	8001810 <Si468x_get_sys_state+0xc4>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <Si468x_get_sys_state+0x54>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017c1 	.word	0x080017c1
 80017a4:	080017cb 	.word	0x080017cb
 80017a8:	080017d5 	.word	0x080017d5
 80017ac:	080017df 	.word	0x080017df
 80017b0:	080017e9 	.word	0x080017e9
 80017b4:	080017f3 	.word	0x080017f3
 80017b8:	080017fd 	.word	0x080017fd
 80017bc:	08001807 	.word	0x08001807
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 80017c0:	2101      	movs	r1, #1
 80017c2:	481c      	ldr	r0, [pc, #112]	; (8001834 <Si468x_get_sys_state+0xe8>)
 80017c4:	f000 fd5e 	bl	8002284 <send_debug_msg>
			break;
 80017c8:	e027      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 80017ca:	2101      	movs	r1, #1
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <Si468x_get_sys_state+0xec>)
 80017ce:	f000 fd59 	bl	8002284 <send_debug_msg>
			break;
 80017d2:	e022      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 80017d4:	2101      	movs	r1, #1
 80017d6:	4819      	ldr	r0, [pc, #100]	; (800183c <Si468x_get_sys_state+0xf0>)
 80017d8:	f000 fd54 	bl	8002284 <send_debug_msg>
			break;
 80017dc:	e01d      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017de:	2101      	movs	r1, #1
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <Si468x_get_sys_state+0xf4>)
 80017e2:	f000 fd4f 	bl	8002284 <send_debug_msg>
			break;
 80017e6:	e018      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017e8:	2101      	movs	r1, #1
 80017ea:	4816      	ldr	r0, [pc, #88]	; (8001844 <Si468x_get_sys_state+0xf8>)
 80017ec:	f000 fd4a 	bl	8002284 <send_debug_msg>
			break;
 80017f0:	e013      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017f2:	2101      	movs	r1, #1
 80017f4:	4814      	ldr	r0, [pc, #80]	; (8001848 <Si468x_get_sys_state+0xfc>)
 80017f6:	f000 fd45 	bl	8002284 <send_debug_msg>
			break;
 80017fa:	e00e      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017fc:	2101      	movs	r1, #1
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <Si468x_get_sys_state+0x100>)
 8001800:	f000 fd40 	bl	8002284 <send_debug_msg>
			break;
 8001804:	e009      	b.n	800181a <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 8001806:	2101      	movs	r1, #1
 8001808:	4811      	ldr	r0, [pc, #68]	; (8001850 <Si468x_get_sys_state+0x104>)
 800180a:	f000 fd3b 	bl	8002284 <send_debug_msg>
			break;
 800180e:	e004      	b.n	800181a <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001810:	2101      	movs	r1, #1
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <Si468x_get_sys_state+0xe8>)
 8001814:	f000 fd36 	bl	8002284 <send_debug_msg>
			break;
 8001818:	bf00      	nop
	}
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	08008d08 	.word	0x08008d08
 8001824:	20000038 	.word	0x20000038
 8001828:	200018f4 	.word	0x200018f4
 800182c:	20001038 	.word	0x20001038
 8001830:	08008d44 	.word	0x08008d44
 8001834:	08008d50 	.word	0x08008d50
 8001838:	08008d68 	.word	0x08008d68
 800183c:	08008d80 	.word	0x08008d80
 8001840:	08008d98 	.word	0x08008d98
 8001844:	08008dc0 	.word	0x08008dc0
 8001848:	08008ddc 	.word	0x08008ddc
 800184c:	08008df4 	.word	0x08008df4
 8001850:	08008e10 	.word	0x08008e10

08001854 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800185a:	2101      	movs	r1, #1
 800185c:	482d      	ldr	r0, [pc, #180]	; (8001914 <Si468x_get_part_info+0xc0>)
 800185e:	f000 fd11 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <Si468x_get_part_info+0xc4>)
 8001864:	2208      	movs	r2, #8
 8001866:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <Si468x_get_part_info+0xc4>)
 800186a:	2200      	movs	r2, #0
 800186c:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800186e:	492a      	ldr	r1, [pc, #168]	; (8001918 <Si468x_get_part_info+0xc4>)
 8001870:	2002      	movs	r0, #2
 8001872:	f7ff ff33 	bl	80016dc <Si468x_write_command>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <Si468x_get_part_info+0xc8>)
 800187c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800187e:	2001      	movs	r0, #1
 8001880:	f001 ff50 	bl	8003724 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fe71 	bl	800156c <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800188a:	4925      	ldr	r1, [pc, #148]	; (8001920 <Si468x_get_part_info+0xcc>)
 800188c:	200a      	movs	r0, #10
 800188e:	f7ff ff4d 	bl	800172c <Si468x_read_reply>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <Si468x_get_part_info+0xc8>)
 8001898:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800189a:	2100      	movs	r1, #0
 800189c:	4821      	ldr	r0, [pc, #132]	; (8001924 <Si468x_get_part_info+0xd0>)
 800189e:	f000 fcf1 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <Si468x_get_part_info+0xcc>)
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	220a      	movs	r2, #10
 80018a8:	491f      	ldr	r1, [pc, #124]	; (8001928 <Si468x_get_part_info+0xd4>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 f89e 	bl	80089ec <itoa>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2101      	movs	r1, #1
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fce5 	bl	8002284 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 80018ba:	2100      	movs	r1, #0
 80018bc:	481b      	ldr	r0, [pc, #108]	; (800192c <Si468x_get_part_info+0xd8>)
 80018be:	f000 fce1 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <Si468x_get_part_info+0xcc>)
 80018c4:	795b      	ldrb	r3, [r3, #5]
 80018c6:	220a      	movs	r2, #10
 80018c8:	4917      	ldr	r1, [pc, #92]	; (8001928 <Si468x_get_part_info+0xd4>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f007 f88e 	bl	80089ec <itoa>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2101      	movs	r1, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fcd5 	bl	8002284 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018da:	2100      	movs	r1, #0
 80018dc:	4814      	ldr	r0, [pc, #80]	; (8001930 <Si468x_get_part_info+0xdc>)
 80018de:	f000 fcd1 	bl	8002284 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <Si468x_get_part_info+0xcc>)
 80018e4:	7a5b      	ldrb	r3, [r3, #9]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <Si468x_get_part_info+0xcc>)
 80018ee:	7a1b      	ldrb	r3, [r3, #8]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	220a      	movs	r2, #10
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <Si468x_get_part_info+0xd4>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f007 f875 	bl	80089ec <itoa>
 8001902:	4603      	mov	r3, r0
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fcbc 	bl	8002284 <send_debug_msg>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08008e28 	.word	0x08008e28
 8001918:	20000038 	.word	0x20000038
 800191c:	200018f4 	.word	0x200018f4
 8001920:	20001038 	.word	0x20001038
 8001924:	08008e64 	.word	0x08008e64
 8001928:	200018f8 	.word	0x200018f8
 800192c:	08008e74 	.word	0x08008e74
 8001930:	08008e80 	.word	0x08008e80

08001934 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	460a      	mov	r2, r1
 800193e:	80fb      	strh	r3, [r7, #6]
 8001940:	4613      	mov	r3, r2
 8001942:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001944:	2101      	movs	r1, #1
 8001946:	4832      	ldr	r0, [pc, #200]	; (8001a10 <Si468x_set_property+0xdc>)
 8001948:	f000 fc9c 	bl	8002284 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 800194c:	2100      	movs	r1, #0
 800194e:	4831      	ldr	r0, [pc, #196]	; (8001a14 <Si468x_set_property+0xe0>)
 8001950:	f000 fc98 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	2210      	movs	r2, #16
 8001958:	492f      	ldr	r1, [pc, #188]	; (8001a18 <Si468x_set_property+0xe4>)
 800195a:	4618      	mov	r0, r3
 800195c:	f007 f846 	bl	80089ec <itoa>
 8001960:	4603      	mov	r3, r0
 8001962:	2101      	movs	r1, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc8d 	bl	8002284 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800196a:	2100      	movs	r1, #0
 800196c:	482b      	ldr	r0, [pc, #172]	; (8001a1c <Si468x_set_property+0xe8>)
 800196e:	f000 fc89 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	2210      	movs	r2, #16
 8001976:	4928      	ldr	r1, [pc, #160]	; (8001a18 <Si468x_set_property+0xe4>)
 8001978:	4618      	mov	r0, r3
 800197a:	f007 f837 	bl	80089ec <itoa>
 800197e:	4603      	mov	r3, r0
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fc7e 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <Si468x_set_property+0xec>)
 800198a:	2213      	movs	r2, #19
 800198c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <Si468x_set_property+0xec>)
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <Si468x_set_property+0xec>)
 800199a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <Si468x_set_property+0xec>)
 80019a6:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <Si468x_set_property+0xec>)
 80019ae:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <Si468x_set_property+0xec>)
 80019ba:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 80019bc:	4918      	ldr	r1, [pc, #96]	; (8001a20 <Si468x_set_property+0xec>)
 80019be:	2006      	movs	r0, #6
 80019c0:	f7ff fe8c 	bl	80016dc <Si468x_write_command>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <Si468x_set_property+0xf0>)
 80019ca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f001 fea9 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80019d2:	4915      	ldr	r1, [pc, #84]	; (8001a28 <Si468x_set_property+0xf4>)
 80019d4:	2005      	movs	r0, #5
 80019d6:	f7ff fea9 	bl	800172c <Si468x_read_reply>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <Si468x_set_property+0xf0>)
 80019e0:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f825 	bl	8001a34 <Si468x_get_property>
 80019ea:	4603      	mov	r3, r0
 80019ec:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019ee:	89fa      	ldrh	r2, [r7, #14]
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d104      	bne.n	8001a00 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019f6:	2101      	movs	r1, #1
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <Si468x_set_property+0xf8>)
 80019fa:	f000 fc43 	bl	8002284 <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 80019fe:	e003      	b.n	8001a08 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a00:	2101      	movs	r1, #1
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <Si468x_set_property+0xfc>)
 8001a04:	f000 fc3e 	bl	8002284 <send_debug_msg>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	08008e90 	.word	0x08008e90
 8001a14:	08008ed0 	.word	0x08008ed0
 8001a18:	200018f8 	.word	0x200018f8
 8001a1c:	08008ee0 	.word	0x08008ee0
 8001a20:	20000038 	.word	0x20000038
 8001a24:	200018f4 	.word	0x200018f4
 8001a28:	20001038 	.word	0x20001038
 8001a2c:	08008efc 	.word	0x08008efc
 8001a30:	08008f18 	.word	0x08008f18

08001a34 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	482b      	ldr	r0, [pc, #172]	; (8001af0 <Si468x_get_property+0xbc>)
 8001a42:	f000 fc1f 	bl	8002284 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a46:	2100      	movs	r1, #0
 8001a48:	482a      	ldr	r0, [pc, #168]	; (8001af4 <Si468x_get_property+0xc0>)
 8001a4a:	f000 fc1b 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	2210      	movs	r2, #16
 8001a52:	4929      	ldr	r1, [pc, #164]	; (8001af8 <Si468x_get_property+0xc4>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 ffc9 	bl	80089ec <itoa>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fc10 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <Si468x_get_property+0xc8>)
 8001a66:	2214      	movs	r2, #20
 8001a68:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <Si468x_get_property+0xc8>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <Si468x_get_property+0xc8>)
 8001a76:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <Si468x_get_property+0xc8>)
 8001a82:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a84:	491d      	ldr	r1, [pc, #116]	; (8001afc <Si468x_get_property+0xc8>)
 8001a86:	2004      	movs	r0, #4
 8001a88:	f7ff fe28 	bl	80016dc <Si468x_write_command>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <Si468x_get_property+0xcc>)
 8001a92:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f001 fe45 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a9a:	491a      	ldr	r1, [pc, #104]	; (8001b04 <Si468x_get_property+0xd0>)
 8001a9c:	2006      	movs	r0, #6
 8001a9e:	f7ff fe45 	bl	800172c <Si468x_read_reply>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <Si468x_get_property+0xcc>)
 8001aa8:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4816      	ldr	r0, [pc, #88]	; (8001b08 <Si468x_get_property+0xd4>)
 8001aae:	f000 fbe9 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <Si468x_get_property+0xd0>)
 8001ab4:	795b      	ldrb	r3, [r3, #5]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <Si468x_get_property+0xd0>)
 8001aba:	7912      	ldrb	r2, [r2, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	2210      	movs	r2, #16
 8001ac0:	490d      	ldr	r1, [pc, #52]	; (8001af8 <Si468x_get_property+0xc4>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 ff92 	bl	80089ec <itoa>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fbd9 	bl	8002284 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <Si468x_get_property+0xd0>)
 8001ad4:	795b      	ldrb	r3, [r3, #5]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <Si468x_get_property+0xd0>)
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08008f30 	.word	0x08008f30
 8001af4:	08008ed0 	.word	0x08008ed0
 8001af8:	200018f8 	.word	0x200018f8
 8001afc:	20000038 	.word	0x20000038
 8001b00:	200018f4 	.word	0x200018f4
 8001b04:	20001038 	.word	0x20001038
 8001b08:	08008f6c 	.word	0x08008f6c

08001b0c <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001b12:	2101      	movs	r1, #1
 8001b14:	4859      	ldr	r0, [pc, #356]	; (8001c7c <Si468x_dab_get_freq_list+0x170>)
 8001b16:	f000 fbb5 	bl	8002284 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001b1a:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <Si468x_dab_get_freq_list+0x174>)
 8001b1c:	22b9      	movs	r2, #185	; 0xb9
 8001b1e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001b20:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <Si468x_dab_get_freq_list+0x174>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001b26:	4956      	ldr	r1, [pc, #344]	; (8001c80 <Si468x_dab_get_freq_list+0x174>)
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7ff fdd7 	bl	80016dc <Si468x_write_command>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <Si468x_dab_get_freq_list+0x178>)
 8001b34:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f001 fdf4 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b3c:	4952      	ldr	r1, [pc, #328]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001b3e:	2005      	movs	r0, #5
 8001b40:	f7ff fdf4 	bl	800172c <Si468x_read_reply>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b4e      	ldr	r3, [pc, #312]	; (8001c84 <Si468x_dab_get_freq_list+0x178>)
 8001b4a:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b4c:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	484c      	ldr	r0, [pc, #304]	; (8001c8c <Si468x_dab_get_freq_list+0x180>)
 8001b5c:	f000 fb92 	bl	8002284 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b60:	e087      	b.n	8001c72 <Si468x_dab_get_freq_list+0x166>
		if(dab_spi_rx_buffer[4])
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d07f      	beq.n	8001c6a <Si468x_dab_get_freq_list+0x15e>
			uint8_t read_offset = 2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	70fb      	strb	r3, [r7, #3]
			uint8_t freq_cnt = dab_spi_rx_buffer[4];
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	70bb      	strb	r3, [r7, #2]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b74:	2100      	movs	r1, #0
 8001b76:	4846      	ldr	r0, [pc, #280]	; (8001c90 <Si468x_dab_get_freq_list+0x184>)
 8001b78:	f000 fb84 	bl	8002284 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b7c:	78bb      	ldrb	r3, [r7, #2]
 8001b7e:	220a      	movs	r2, #10
 8001b80:	4944      	ldr	r1, [pc, #272]	; (8001c94 <Si468x_dab_get_freq_list+0x188>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f006 ff32 	bl	80089ec <itoa>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fb79 	bl	8002284 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b92:	2101      	movs	r1, #1
 8001b94:	4840      	ldr	r0, [pc, #256]	; (8001c98 <Si468x_dab_get_freq_list+0x18c>)
 8001b96:	f000 fb75 	bl	8002284 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b9a:	493b      	ldr	r1, [pc, #236]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f7ff fdc5 	bl	800172c <Si468x_read_reply>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <Si468x_dab_get_freq_list+0x178>)
 8001ba8:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001baa:	78ba      	ldrb	r2, [r7, #2]
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4934      	ldr	r1, [pc, #208]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fdb7 	bl	800172c <Si468x_read_reply>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <Si468x_dab_get_freq_list+0x178>)
 8001bc4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e049      	b.n	8001c60 <Si468x_dab_get_freq_list+0x154>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	18ca      	adds	r2, r1, r3
 8001bec:	78f9      	ldrb	r1, [r7, #3]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	440b      	add	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	4924      	ldr	r1, [pc, #144]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	441a      	add	r2, r3
 8001bfe:	78f9      	ldrb	r1, [r7, #3]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	440b      	add	r3, r1
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3303      	adds	r3, #3
 8001c08:	491f      	ldr	r1, [pc, #124]	; (8001c88 <Si468x_dab_get_freq_list+0x17c>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	4413      	add	r3, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <Si468x_dab_get_freq_list+0x190>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001c1a:	220a      	movs	r2, #10
 8001c1c:	491d      	ldr	r1, [pc, #116]	; (8001c94 <Si468x_dab_get_freq_list+0x188>)
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f006 fee4 	bl	80089ec <itoa>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fb2b 	bl	8002284 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	481b      	ldr	r0, [pc, #108]	; (8001ca0 <Si468x_dab_get_freq_list+0x194>)
 8001c32:	f000 fb27 	bl	8002284 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <Si468x_dab_get_freq_list+0x190>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	220a      	movs	r2, #10
 8001c40:	4914      	ldr	r1, [pc, #80]	; (8001c94 <Si468x_dab_get_freq_list+0x188>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 fed2 	bl	80089ec <itoa>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fb19 	bl	8002284 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c52:	2101      	movs	r1, #1
 8001c54:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <Si468x_dab_get_freq_list+0x198>)
 8001c56:	f000 fb15 	bl	8002284 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	78bb      	ldrb	r3, [r7, #2]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbb1      	blt.n	8001bcc <Si468x_dab_get_freq_list+0xc0>
}
 8001c68:	e003      	b.n	8001c72 <Si468x_dab_get_freq_list+0x166>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <Si468x_dab_get_freq_list+0x19c>)
 8001c6e:	f000 fb09 	bl	8002284 <send_debug_msg>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08008f80 	.word	0x08008f80
 8001c80:	20000038 	.word	0x20000038
 8001c84:	200018f4 	.word	0x200018f4
 8001c88:	20001038 	.word	0x20001038
 8001c8c:	08008c1c 	.word	0x08008c1c
 8001c90:	08008fbc 	.word	0x08008fbc
 8001c94:	200018f8 	.word	0x200018f8
 8001c98:	08008fc4 	.word	0x08008fc4
 8001c9c:	20001838 	.word	0x20001838
 8001ca0:	08008fdc 	.word	0x08008fdc
 8001ca4:	08008fe0 	.word	0x08008fe0
 8001ca8:	08008fe8 	.word	0x08008fe8

08001cac <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4841      	ldr	r0, [pc, #260]	; (8001dc0 <Si468x_dab_tune_freq+0x114>)
 8001cba:	f000 fae3 	bl	8002284 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4840      	ldr	r0, [pc, #256]	; (8001dc4 <Si468x_dab_tune_freq+0x118>)
 8001cc2:	f000 fadf 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <Si468x_dab_tune_freq+0x11c>)
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	220a      	movs	r2, #10
 8001cd0:	493e      	ldr	r1, [pc, #248]	; (8001dcc <Si468x_dab_tune_freq+0x120>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 fe8a 	bl	80089ec <itoa>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fad1 	bl	8002284 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	483a      	ldr	r0, [pc, #232]	; (8001dd0 <Si468x_dab_tune_freq+0x124>)
 8001ce6:	f000 facd 	bl	8002284 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001cec:	22b0      	movs	r2, #176	; 0xb0
 8001cee:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cf0:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cf6:	4a37      	ldr	r2, [pc, #220]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001d0e:	4931      	ldr	r1, [pc, #196]	; (8001dd4 <Si468x_dab_tune_freq+0x128>)
 8001d10:	2006      	movs	r0, #6
 8001d12:	f7ff fce3 	bl	80016dc <Si468x_write_command>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <Si468x_dab_tune_freq+0x12c>)
 8001d1c:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d1e:	492f      	ldr	r1, [pc, #188]	; (8001ddc <Si468x_dab_tune_freq+0x130>)
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff fd03 	bl	800172c <Si468x_read_reply>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <Si468x_dab_tune_freq+0x12c>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <Si468x_dab_tune_freq+0x130>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <Si468x_dab_tune_freq+0x96>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4828      	ldr	r0, [pc, #160]	; (8001de0 <Si468x_dab_tune_freq+0x134>)
 8001d3e:	f000 faa1 	bl	8002284 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	81fb      	strh	r3, [r7, #14]
 8001d46:	e030      	b.n	8001daa <Si468x_dab_tune_freq+0xfe>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d48:	4924      	ldr	r1, [pc, #144]	; (8001ddc <Si468x_dab_tune_freq+0x130>)
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7ff fcee 	bl	800172c <Si468x_read_reply>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <Si468x_dab_tune_freq+0x12c>)
 8001d56:	701a      	strb	r2, [r3, #0]

		if(dab_spi_rx_buffer[0] & 0x01)
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <Si468x_dab_tune_freq+0x130>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <Si468x_dab_tune_freq+0xe0>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d64:	2100      	movs	r1, #0
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <Si468x_dab_tune_freq+0x138>)
 8001d68:	f000 fa8c 	bl	8002284 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	220a      	movs	r2, #10
 8001d70:	4916      	ldr	r1, [pc, #88]	; (8001dcc <Si468x_dab_tune_freq+0x120>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f006 fe3a 	bl	80089ec <itoa>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fa81 	bl	8002284 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d82:	2101      	movs	r1, #1
 8001d84:	4818      	ldr	r0, [pc, #96]	; (8001de8 <Si468x_dab_tune_freq+0x13c>)
 8001d86:	f000 fa7d 	bl	8002284 <send_debug_msg>
			break;
 8001d8a:	e014      	b.n	8001db6 <Si468x_dab_tune_freq+0x10a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
 8001d8e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d103      	bne.n	8001d9e <Si468x_dab_tune_freq+0xf2>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001d96:	2101      	movs	r1, #1
 8001d98:	4814      	ldr	r0, [pc, #80]	; (8001dec <Si468x_dab_tune_freq+0x140>)
 8001d9a:	f000 fa73 	bl	8002284 <send_debug_msg>
		}
		HAL_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f001 fcc0 	bl	8003724 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	3301      	adds	r3, #1
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	89fb      	ldrh	r3, [r7, #14]
 8001dac:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d9c9      	bls.n	8001d48 <Si468x_dab_tune_freq+0x9c>
	}
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	08009004 	.word	0x08009004
 8001dc4:	08009040 	.word	0x08009040
 8001dc8:	20001838 	.word	0x20001838
 8001dcc:	200018f8 	.word	0x200018f8
 8001dd0:	08008fe0 	.word	0x08008fe0
 8001dd4:	20000038 	.word	0x20000038
 8001dd8:	200018f4 	.word	0x200018f4
 8001ddc:	20001038 	.word	0x20001038
 8001de0:	08008c1c 	.word	0x08008c1c
 8001de4:	0800904c 	.word	0x0800904c
 8001de8:	08009068 	.word	0x08009068
 8001dec:	08009070 	.word	0x08009070

08001df0 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af04      	add	r7, sp, #16
	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);
 8001df6:	2101      	movs	r1, #1
 8001df8:	4852      	ldr	r0, [pc, #328]	; (8001f44 <Si468x_dab_digrad_status+0x154>)
 8001dfa:	f000 fa43 	bl	8002284 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//
 8001dfe:	4b52      	ldr	r3, [pc, #328]	; (8001f48 <Si468x_dab_digrad_status+0x158>)
 8001e00:	22b2      	movs	r2, #178	; 0xb2
 8001e02:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <Si468x_dab_digrad_status+0x158>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e0a:	494f      	ldr	r1, [pc, #316]	; (8001f48 <Si468x_dab_digrad_status+0x158>)
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7ff fc65 	bl	80016dc <Si468x_write_command>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <Si468x_dab_digrad_status+0x15c>)
 8001e18:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f001 fc82 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e20:	494b      	ldr	r1, [pc, #300]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e22:	2028      	movs	r0, #40	; 0x28
 8001e24:	f7ff fc82 	bl	800172c <Si468x_read_reply>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <Si468x_dab_digrad_status+0x15c>)
 8001e2e:	701a      	strb	r2, [r3, #0]
	rssi = dab_spi_rx_buffer[6];
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e32:	799a      	ldrb	r2, [r3, #6]
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <Si468x_dab_digrad_status+0x164>)
 8001e36:	701a      	strb	r2, [r3, #0]
	snr = dab_spi_rx_buffer[7];
 8001e38:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e3a:	79da      	ldrb	r2, [r3, #7]
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <Si468x_dab_digrad_status+0x168>)
 8001e3e:	701a      	strb	r2, [r3, #0]
	fib_error_count = (dab_spi_rx_buffer[11] << 8) + dab_spi_rx_buffer[10];
 8001e40:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e42:	7adb      	ldrb	r3, [r3, #11]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e4c:	7a9b      	ldrb	r3, [r3, #10]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <Si468x_dab_digrad_status+0x16c>)
 8001e56:	801a      	strh	r2, [r3, #0]
	fic_bit_cnt = dab_spi_rx_buffer[32] + (dab_spi_rx_buffer[33] << 8) + (dab_spi_rx_buffer[34] << 16) + (dab_spi_rx_buffer[35] << 24);
 8001e58:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	441a      	add	r2, r3
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e6c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	441a      	add	r2, r3
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e76:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4413      	add	r3, r2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <Si468x_dab_digrad_status+0x170>)
 8001e82:	601a      	str	r2, [r3, #0]
	fic_err_cnt = dab_spi_rx_buffer[36] + (dab_spi_rx_buffer[37] << 8) + (dab_spi_rx_buffer[38] << 16) + (dab_spi_rx_buffer[39] << 24);
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	441a      	add	r2, r3
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001e98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	441a      	add	r2, r3
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001ea2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	4413      	add	r3, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <Si468x_dab_digrad_status+0x174>)
 8001eae:	601a      	str	r2, [r3, #0]
	fic_quality = dab_spi_rx_buffer[8];
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001eb2:	7a1a      	ldrb	r2, [r3, #8]
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <Si468x_dab_digrad_status+0x178>)
 8001eb6:	701a      	strb	r2, [r3, #0]

	if(dab_spi_rx_buffer[5] & 0x01)
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001eba:	795b      	ldrb	r3, [r3, #5]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <Si468x_dab_digrad_status+0xdc>
	{
		valid = 1;
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <Si468x_dab_digrad_status+0x17c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e002      	b.n	8001ed2 <Si468x_dab_digrad_status+0xe2>
	}
	else
	{
		valid = 0;
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <Si468x_dab_digrad_status+0x17c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
	}

	if(dab_spi_rx_buffer[5] & 0x04)
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001ed4:	795b      	ldrb	r3, [r3, #5]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <Si468x_dab_digrad_status+0xf6>
	{
		acq = 1;
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <Si468x_dab_digrad_status+0x180>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e002      	b.n	8001eec <Si468x_dab_digrad_status+0xfc>
	}
	else
	{
		acq = 0;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <Si468x_dab_digrad_status+0x180>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
	}

	if(dab_spi_rx_buffer[4] & 0x04)
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <Si468x_dab_digrad_status+0x160>)
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <Si468x_dab_digrad_status+0x110>
	{
		acq_int = 1;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <Si468x_dab_digrad_status+0x184>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e002      	b.n	8001f06 <Si468x_dab_digrad_status+0x116>
	}
	else
	{
		acq_int = 0;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <Si468x_dab_digrad_status+0x184>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
	}


	DisplayDabStatus(rssi, snr, valid, acq, fic_bit_cnt, fic_err_cnt, fic_quality);
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <Si468x_dab_digrad_status+0x164>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <Si468x_dab_digrad_status+0x168>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461c      	mov	r4, r3
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <Si468x_dab_digrad_status+0x17c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461d      	mov	r5, r3
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <Si468x_dab_digrad_status+0x180>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461e      	mov	r6, r3
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <Si468x_dab_digrad_status+0x170>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <Si468x_dab_digrad_status+0x174>)
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4910      	ldr	r1, [pc, #64]	; (8001f68 <Si468x_dab_digrad_status+0x178>)
 8001f28:	7809      	ldrb	r1, [r1, #0]
 8001f2a:	9102      	str	r1, [sp, #8]
 8001f2c:	9201      	str	r2, [sp, #4]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	4633      	mov	r3, r6
 8001f32:	462a      	mov	r2, r5
 8001f34:	4621      	mov	r1, r4
 8001f36:	f000 fae5 	bl	8002504 <DisplayDabStatus>
}
 8001f3a:	bf00      	nop
 8001f3c:	3704      	adds	r7, #4
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	080090d0 	.word	0x080090d0
 8001f48:	20000038 	.word	0x20000038
 8001f4c:	200018f4 	.word	0x200018f4
 8001f50:	20001038 	.word	0x20001038
 8001f54:	20001918 	.word	0x20001918
 8001f58:	20001919 	.word	0x20001919
 8001f5c:	2000191a 	.word	0x2000191a
 8001f60:	20001920 	.word	0x20001920
 8001f64:	20001924 	.word	0x20001924
 8001f68:	2000191f 	.word	0x2000191f
 8001f6c:	2000191c 	.word	0x2000191c
 8001f70:	2000191d 	.word	0x2000191d
 8001f74:	2000191e 	.word	0x2000191e

08001f78 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	48ad      	ldr	r0, [pc, #692]	; (8002238 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f82:	f000 f97f 	bl	8002284 <send_debug_msg>

	uint16_t list_size = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	813b      	strh	r3, [r7, #8]
	uint8_t number_of_services = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	uint8_t pd_flag = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71bb      	strb	r3, [r7, #6]
	uint32_t srv_ref = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
	uint8_t country_id = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	74fb      	strb	r3, [r7, #19]
	uint8_t p_ty = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	717b      	strb	r3, [r7, #5]
	uint8_t number_of_components = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	713b      	strb	r3, [r7, #4]
	uint32_t service_id = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]

	#define LIST_READ_OFFSET 4

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001fa6:	4ba5      	ldr	r3, [pc, #660]	; (800223c <Si468x_dab_get_digital_service_list+0x2c4>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001fac:	4ba3      	ldr	r3, [pc, #652]	; (800223c <Si468x_dab_get_digital_service_list+0x2c4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001fb2:	49a2      	ldr	r1, [pc, #648]	; (800223c <Si468x_dab_get_digital_service_list+0x2c4>)
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fb91 	bl	80016dc <Si468x_write_command>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4ba0      	ldr	r3, [pc, #640]	; (8002240 <Si468x_dab_get_digital_service_list+0x2c8>)
 8001fc0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f001 fbae 	bl	8003724 <HAL_Delay>
	status = Si468x_read_reply(2048, dab_spi_rx_buffer);
 8001fc8:	499e      	ldr	r1, [pc, #632]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8001fca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fce:	f7ff fbad 	bl	800172c <Si468x_read_reply>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b9a      	ldr	r3, [pc, #616]	; (8002240 <Si468x_dab_get_digital_service_list+0x2c8>)
 8001fd8:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001fda:	4b9a      	ldr	r3, [pc, #616]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <Si468x_dab_get_digital_service_list+0x76>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4897      	ldr	r0, [pc, #604]	; (8002248 <Si468x_dab_get_digital_service_list+0x2d0>)
 8001fea:	f000 f94b 	bl	8002284 <send_debug_msg>
	}
	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001fee:	4b95      	ldr	r3, [pc, #596]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b93      	ldr	r3, [pc, #588]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	813b      	strh	r3, [r7, #8]
	send_debug_msg("Service list size: ", CRLF_NO_SEND);
 8002002:	2100      	movs	r1, #0
 8002004:	4891      	ldr	r0, [pc, #580]	; (800224c <Si468x_dab_get_digital_service_list+0x2d4>)
 8002006:	f000 f93d 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(list_size, itoa_buffer, 10), CRLF_NO_SEND);
 800200a:	893b      	ldrh	r3, [r7, #8]
 800200c:	220a      	movs	r2, #10
 800200e:	4990      	ldr	r1, [pc, #576]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 8002010:	4618      	mov	r0, r3
 8002012:	f006 fceb 	bl	80089ec <itoa>
 8002016:	4603      	mov	r3, r0
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f932 	bl	8002284 <send_debug_msg>
	send_debug_msg(" bytes.", CRLF_SEND);
 8002020:	2101      	movs	r1, #1
 8002022:	488c      	ldr	r0, [pc, #560]	; (8002254 <Si468x_dab_get_digital_service_list+0x2dc>)
 8002024:	f000 f92e 	bl	8002284 <send_debug_msg>

	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8002028:	4b86      	ldr	r3, [pc, #536]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 800202a:	7a1b      	ldrb	r3, [r3, #8]
 800202c:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("Number of services: ", CRLF_NO_SEND);
 800202e:	2100      	movs	r1, #0
 8002030:	4889      	ldr	r0, [pc, #548]	; (8002258 <Si468x_dab_get_digital_service_list+0x2e0>)
 8002032:	f000 f927 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(number_of_services, itoa_buffer, 10), CRLF_SEND);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	220a      	movs	r2, #10
 800203a:	4985      	ldr	r1, [pc, #532]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 800203c:	4618      	mov	r0, r3
 800203e:	f006 fcd5 	bl	80089ec <itoa>
 8002042:	4603      	mov	r3, r0
 8002044:	2101      	movs	r1, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f91c 	bl	8002284 <send_debug_msg>

	//---------test read service info---------------------------------------------------------------------------------------------------------------
	pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET] & 0x01;
 800204c:	4b7d      	ldr	r3, [pc, #500]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 800204e:	7c1b      	ldrb	r3, [r3, #16]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	71bb      	strb	r3, [r7, #6]
	send_debug_msg("PD Flag: ", CRLF_NO_SEND);
 8002056:	2100      	movs	r1, #0
 8002058:	4880      	ldr	r0, [pc, #512]	; (800225c <Si468x_dab_get_digital_service_list+0x2e4>)
 800205a:	f000 f913 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(pd_flag, itoa_buffer, 10), CRLF_SEND);
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	220a      	movs	r2, #10
 8002062:	497b      	ldr	r1, [pc, #492]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 8002064:	4618      	mov	r0, r3
 8002066:	f006 fcc1 	bl	80089ec <itoa>
 800206a:	4603      	mov	r3, r0
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f908 	bl	8002284 <send_debug_msg>

	p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET] & 0x3E) >> 1;
 8002074:	4b73      	ldr	r3, [pc, #460]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002076:	7c1b      	ldrb	r3, [r3, #16]
 8002078:	105b      	asrs	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	717b      	strb	r3, [r7, #5]
	send_debug_msg("Program Type: ", CRLF_NO_SEND);
 8002082:	2100      	movs	r1, #0
 8002084:	4876      	ldr	r0, [pc, #472]	; (8002260 <Si468x_dab_get_digital_service_list+0x2e8>)
 8002086:	f000 f8fd 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(p_ty, itoa_buffer, 10), CRLF_SEND);
 800208a:	797b      	ldrb	r3, [r7, #5]
 800208c:	220a      	movs	r2, #10
 800208e:	4970      	ldr	r1, [pc, #448]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 8002090:	4618      	mov	r0, r3
 8002092:	f006 fcab 	bl	80089ec <itoa>
 8002096:	4603      	mov	r3, r0
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f8f2 	bl	8002284 <send_debug_msg>

	number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET] & 0x0F;
 80020a0:	4b68      	ldr	r3, [pc, #416]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 80020a2:	7c5b      	ldrb	r3, [r3, #17]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	713b      	strb	r3, [r7, #4]
	send_debug_msg("Number of Components: ", CRLF_NO_SEND);
 80020aa:	2100      	movs	r1, #0
 80020ac:	486d      	ldr	r0, [pc, #436]	; (8002264 <Si468x_dab_get_digital_service_list+0x2ec>)
 80020ae:	f000 f8e9 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(number_of_components, itoa_buffer, 10), CRLF_SEND);
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	220a      	movs	r2, #10
 80020b6:	4966      	ldr	r1, [pc, #408]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f006 fc97 	bl	80089ec <itoa>
 80020be:	4603      	mov	r3, r0
 80020c0:	2101      	movs	r1, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f8de 	bl	8002284 <send_debug_msg>

	switch(p_ty)
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <Si468x_dab_get_digital_service_list+0x15c>
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d015      	beq.n	80020fe <Si468x_dab_get_digital_service_list+0x186>
			country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET] & 0xF0) >> 4;
			service_id = (country_id << 20) + srv_ref;
			break;

		default:
			break;
 80020d2:	e02d      	b.n	8002130 <Si468x_dab_get_digital_service_list+0x1b8>
			srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET] & 0x0F) << 8);
 80020d4:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 80020d6:	7b1b      	ldrb	r3, [r3, #12]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b5a      	ldr	r3, [pc, #360]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 80020dc:	7b5b      	ldrb	r3, [r3, #13]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020e4:	4413      	add	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
			country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET] & 0xF0) >> 4;
 80020e8:	4b56      	ldr	r3, [pc, #344]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 80020ea:	7b5b      	ldrb	r3, [r3, #13]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	74fb      	strb	r3, [r7, #19]
			service_id = (country_id << 12) + srv_ref;
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	031b      	lsls	r3, r3, #12
 80020f4:	461a      	mov	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4413      	add	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
			break;
 80020fc:	e018      	b.n	8002130 <Si468x_dab_get_digital_service_list+0x1b8>
			srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET] & 0x0F) << 16);
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002100:	7b1b      	ldrb	r3, [r3, #12]
 8002102:	461a      	mov	r2, r3
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002106:	7b5b      	ldrb	r3, [r3, #13]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	441a      	add	r2, r3
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 800210e:	7b9b      	ldrb	r3, [r3, #14]
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002116:	4413      	add	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
			country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET] & 0xF0) >> 4;
 800211a:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 800211c:	7b9b      	ldrb	r3, [r3, #14]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	74fb      	strb	r3, [r7, #19]
			service_id = (country_id << 20) + srv_ref;
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	051b      	lsls	r3, r3, #20
 8002126:	461a      	mov	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
			break;
 800212e:	bf00      	nop
	}
	send_debug_msg("Service Ref: ", CRLF_NO_SEND);
 8002130:	2100      	movs	r1, #0
 8002132:	484d      	ldr	r0, [pc, #308]	; (8002268 <Si468x_dab_get_digital_service_list+0x2f0>)
 8002134:	f000 f8a6 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(srv_ref, itoa_buffer, 16), CRLF_SEND);
 8002138:	2210      	movs	r2, #16
 800213a:	4945      	ldr	r1, [pc, #276]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 800213c:	6978      	ldr	r0, [r7, #20]
 800213e:	f006 fc55 	bl	80089ec <itoa>
 8002142:	4603      	mov	r3, r0
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f89c 	bl	8002284 <send_debug_msg>
	send_debug_msg("Country ID: ", CRLF_NO_SEND);
 800214c:	2100      	movs	r1, #0
 800214e:	4847      	ldr	r0, [pc, #284]	; (800226c <Si468x_dab_get_digital_service_list+0x2f4>)
 8002150:	f000 f898 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(country_id, itoa_buffer, 16), CRLF_SEND);
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2210      	movs	r2, #16
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 800215a:	4618      	mov	r0, r3
 800215c:	f006 fc46 	bl	80089ec <itoa>
 8002160:	4603      	mov	r3, r0
 8002162:	2101      	movs	r1, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f88d 	bl	8002284 <send_debug_msg>
	send_debug_msg("Service ID: ", CRLF_NO_SEND);
 800216a:	2100      	movs	r1, #0
 800216c:	4840      	ldr	r0, [pc, #256]	; (8002270 <Si468x_dab_get_digital_service_list+0x2f8>)
 800216e:	f000 f889 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(service_id, itoa_buffer, 16), CRLF_SEND);
 8002172:	2210      	movs	r2, #16
 8002174:	4936      	ldr	r1, [pc, #216]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f006 fc38 	bl	80089ec <itoa>
 800217c:	4603      	mov	r3, r0
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f87f 	bl	8002284 <send_debug_msg>


	send_debug_msg("Service Name: ", CRLF_SEND);
 8002186:	2101      	movs	r1, #1
 8002188:	483a      	ldr	r0, [pc, #232]	; (8002274 <Si468x_dab_get_digital_service_list+0x2fc>)
 800218a:	f000 f87b 	bl	8002284 <send_debug_msg>

	for(uint8_t i = 0; i <= 15; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	72fb      	strb	r3, [r7, #11]
 8002192:	e010      	b.n	80021b6 <Si468x_dab_get_digital_service_list+0x23e>
	{
		send_debug_msg(itoa(dab_spi_rx_buffer[16 + i + LIST_READ_OFFSET], itoa_buffer, 16), CRLF_SEND);
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	3314      	adds	r3, #20
 8002198:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	2210      	movs	r2, #16
 800219e:	492c      	ldr	r1, [pc, #176]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 fc23 	bl	80089ec <itoa>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f86a 	bl	8002284 <send_debug_msg>
	for(uint8_t i = 0; i <= 15; i++)
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	3301      	adds	r3, #1
 80021b4:	72fb      	strb	r3, [r7, #11]
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d9eb      	bls.n	8002194 <Si468x_dab_get_digital_service_list+0x21c>
	}

	send_debug_msg("End Of Service Name", CRLF_SEND);
 80021bc:	2101      	movs	r1, #1
 80021be:	482e      	ldr	r0, [pc, #184]	; (8002278 <Si468x_dab_get_digital_service_list+0x300>)
 80021c0:	f000 f860 	bl	8002284 <send_debug_msg>

//-------------------test read component info---------------------------------------------------------------------------------------------

	uint8_t tm_id = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	70fb      	strb	r3, [r7, #3]
	uint8_t sub_ch_id = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	70bb      	strb	r3, [r7, #2]

	tm_id = (dab_spi_rx_buffer[33] & 0xC0) >> 14;
 80021cc:	2300      	movs	r3, #0
 80021ce:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("TM ID : ", CRLF_NO_SEND);
 80021d0:	2100      	movs	r1, #0
 80021d2:	482a      	ldr	r0, [pc, #168]	; (800227c <Si468x_dab_get_digital_service_list+0x304>)
 80021d4:	f000 f856 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(tm_id, itoa_buffer, 10), CRLF_SEND);
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	220a      	movs	r2, #10
 80021dc:	491c      	ldr	r1, [pc, #112]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 fc04 	bl	80089ec <itoa>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2101      	movs	r1, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f84b 	bl	8002284 <send_debug_msg>

	sub_ch_id = dab_spi_rx_buffer[32] & 0x3F;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <Si468x_dab_get_digital_service_list+0x2cc>)
 80021f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f8:	70bb      	strb	r3, [r7, #2]
	send_debug_msg("Subchannel ID : ", CRLF_NO_SEND);
 80021fa:	2100      	movs	r1, #0
 80021fc:	4820      	ldr	r0, [pc, #128]	; (8002280 <Si468x_dab_get_digital_service_list+0x308>)
 80021fe:	f000 f841 	bl	8002284 <send_debug_msg>
	send_debug_msg(itoa(sub_ch_id, itoa_buffer, 10), CRLF_SEND);
 8002202:	78bb      	ldrb	r3, [r7, #2]
 8002204:	220a      	movs	r2, #10
 8002206:	4912      	ldr	r1, [pc, #72]	; (8002250 <Si468x_dab_get_digital_service_list+0x2d8>)
 8002208:	4618      	mov	r0, r3
 800220a:	f006 fbef 	bl	80089ec <itoa>
 800220e:	4603      	mov	r3, r0
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f836 	bl	8002284 <send_debug_msg>




	for(uint8_t i = 0; i < number_of_services; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	72bb      	strb	r3, [r7, #10]
 800221c:	e002      	b.n	8002224 <Si468x_dab_get_digital_service_list+0x2ac>
 800221e:	7abb      	ldrb	r3, [r7, #10]
 8002220:	3301      	adds	r3, #1
 8002222:	72bb      	strb	r3, [r7, #10]
 8002224:	7aba      	ldrb	r2, [r7, #10]
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3f8      	bcc.n	800221e <Si468x_dab_get_digital_service_list+0x2a6>

	}



}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	0800910c 	.word	0x0800910c
 800223c:	20000038 	.word	0x20000038
 8002240:	200018f4 	.word	0x200018f4
 8002244:	20001038 	.word	0x20001038
 8002248:	08008c1c 	.word	0x08008c1c
 800224c:	08009148 	.word	0x08009148
 8002250:	200018f8 	.word	0x200018f8
 8002254:	0800915c 	.word	0x0800915c
 8002258:	08009164 	.word	0x08009164
 800225c:	0800917c 	.word	0x0800917c
 8002260:	08009188 	.word	0x08009188
 8002264:	08009198 	.word	0x08009198
 8002268:	080091b0 	.word	0x080091b0
 800226c:	080091c0 	.word	0x080091c0
 8002270:	080091d0 	.word	0x080091d0
 8002274:	080091e0 	.word	0x080091e0
 8002278:	080091f0 	.word	0x080091f0
 800227c:	08009204 	.word	0x08009204
 8002280:	08009210 	.word	0x08009210

08002284 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fd ff99 	bl	80001c8 <strlen>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	b29a      	uxth	r2, r3
 800229e:	2364      	movs	r3, #100	; 0x64
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	480a      	ldr	r0, [pc, #40]	; (80022cc <send_debug_msg+0x48>)
 80022a4:	f005 fff1 	bl	800828a <HAL_UART_Transmit>

	if(is_crlf)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80022ae:	f640 230d 	movw	r3, #2573	; 0xa0d
 80022b2:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80022b4:	f107 010c 	add.w	r1, r7, #12
 80022b8:	2364      	movs	r3, #100	; 0x64
 80022ba:	2202      	movs	r2, #2
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <send_debug_msg+0x48>)
 80022be:	f005 ffe4 	bl	800828a <HAL_UART_Transmit>
	}
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20001c1c 	.word	0x20001c1c

080022d0 <DisplayMainScreen>:
#include "Si468x.h"

char char_buffer[32];

void DisplayMainScreen()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe faea 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 80022dc:	23eb      	movs	r3, #235	; 0xeb
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f240 133b 	movw	r3, #315	; 0x13b
 80022e4:	2219      	movs	r2, #25
 80022e6:	2105      	movs	r1, #5
 80022e8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80022ec:	f7fe fb6b 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 80022f0:	2302      	movs	r3, #2
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	4b7a      	ldr	r3, [pc, #488]	; (80024e0 <DisplayMainScreen+0x210>)
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2300      	movs	r3, #0
 80022fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fe:	2105      	movs	r1, #5
 8002300:	2041      	movs	r0, #65	; 0x41
 8002302:	f7fe fc0d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 8002306:	233c      	movs	r3, #60	; 0x3c
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f240 1331 	movw	r3, #305	; 0x131
 800230e:	2223      	movs	r2, #35	; 0x23
 8002310:	210f      	movs	r1, #15
 8002312:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002316:	f7fe fb56 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 800231a:	235f      	movs	r3, #95	; 0x5f
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f240 1331 	movw	r3, #305	; 0x131
 8002322:	2246      	movs	r2, #70	; 0x46
 8002324:	210f      	movs	r1, #15
 8002326:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800232a:	f7fe fb4c 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 800232e:	23a0      	movs	r3, #160	; 0xa0
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2369      	movs	r3, #105	; 0x69
 8002334:	226e      	movs	r2, #110	; 0x6e
 8002336:	210f      	movs	r1, #15
 8002338:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800233c:	f7fe fb43 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8002340:	239f      	movs	r3, #159	; 0x9f
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2368      	movs	r3, #104	; 0x68
 8002346:	226f      	movs	r2, #111	; 0x6f
 8002348:	2110      	movs	r1, #16
 800234a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800234e:	f7fe fb19 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8002352:	2302      	movs	r3, #2
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <DisplayMainScreen+0x214>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800235e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002362:	217f      	movs	r1, #127	; 0x7f
 8002364:	2023      	movs	r0, #35	; 0x23
 8002366:	f7fe fbdb 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 800236a:	23a0      	movs	r3, #160	; 0xa0
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	23cd      	movs	r3, #205	; 0xcd
 8002370:	226e      	movs	r2, #110	; 0x6e
 8002372:	2173      	movs	r1, #115	; 0x73
 8002374:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002378:	f7fe fb25 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 800237c:	239f      	movs	r3, #159	; 0x9f
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	23cc      	movs	r3, #204	; 0xcc
 8002382:	226f      	movs	r2, #111	; 0x6f
 8002384:	2174      	movs	r1, #116	; 0x74
 8002386:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800238a:	f7fe fafb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 800238e:	2302      	movs	r3, #2
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <DisplayMainScreen+0x218>)
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800239a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239e:	217f      	movs	r1, #127	; 0x7f
 80023a0:	2090      	movs	r0, #144	; 0x90
 80023a2:	f7fe fbbd 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 80023a6:	23a0      	movs	r3, #160	; 0xa0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f240 1331 	movw	r3, #305	; 0x131
 80023ae:	226e      	movs	r2, #110	; 0x6e
 80023b0:	21d7      	movs	r1, #215	; 0xd7
 80023b2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023b6:	f7fe fb06 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 80023ba:	239f      	movs	r3, #159	; 0x9f
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f44f 7398 	mov.w	r3, #304	; 0x130
 80023c2:	226f      	movs	r2, #111	; 0x6f
 80023c4:	21d8      	movs	r1, #216	; 0xd8
 80023c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80023ca:	f7fe fadb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 80023ce:	2302      	movs	r3, #2
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <DisplayMainScreen+0x21c>)
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023de:	217f      	movs	r1, #127	; 0x7f
 80023e0:	20ea      	movs	r0, #234	; 0xea
 80023e2:	f7fe fb9d 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 80023e6:	23dc      	movs	r3, #220	; 0xdc
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2369      	movs	r3, #105	; 0x69
 80023ec:	22aa      	movs	r2, #170	; 0xaa
 80023ee:	210f      	movs	r1, #15
 80023f0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023f4:	f7fe fae7 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 80023f8:	23db      	movs	r3, #219	; 0xdb
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2368      	movs	r3, #104	; 0x68
 80023fe:	22ab      	movs	r2, #171	; 0xab
 8002400:	2110      	movs	r1, #16
 8002402:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002406:	f7fe fabd 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 800240a:	2302      	movs	r3, #2
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <DisplayMainScreen+0x220>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241a:	21bb      	movs	r1, #187	; 0xbb
 800241c:	202d      	movs	r0, #45	; 0x2d
 800241e:	f7fe fb7f 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 8002422:	23dc      	movs	r3, #220	; 0xdc
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	23cd      	movs	r3, #205	; 0xcd
 8002428:	22aa      	movs	r2, #170	; 0xaa
 800242a:	2173      	movs	r1, #115	; 0x73
 800242c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002430:	f7fe fac9 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8002434:	23db      	movs	r3, #219	; 0xdb
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	23cc      	movs	r3, #204	; 0xcc
 800243a:	22ab      	movs	r2, #171	; 0xab
 800243c:	2174      	movs	r1, #116	; 0x74
 800243e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002442:	f7fe fa9f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 8002446:	2302      	movs	r3, #2
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <DisplayMainScreen+0x224>)
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002456:	21b4      	movs	r1, #180	; 0xb4
 8002458:	2081      	movs	r0, #129	; 0x81
 800245a:	f7fe fb61 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 800245e:	2302      	movs	r3, #2
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <DisplayMainScreen+0x228>)
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800246a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246e:	21c3      	movs	r1, #195	; 0xc3
 8002470:	2084      	movs	r0, #132	; 0x84
 8002472:	f7fe fb55 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 8002476:	23dc      	movs	r3, #220	; 0xdc
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	f240 1331 	movw	r3, #305	; 0x131
 800247e:	22aa      	movs	r2, #170	; 0xaa
 8002480:	21d7      	movs	r1, #215	; 0xd7
 8002482:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002486:	f7fe fa9e 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 800248a:	23db      	movs	r3, #219	; 0xdb
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002492:	22ab      	movs	r2, #171	; 0xab
 8002494:	21d8      	movs	r1, #216	; 0xd8
 8002496:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800249a:	f7fe fa73 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 800249e:	2302      	movs	r3, #2
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <DisplayMainScreen+0x22c>)
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ae:	21b4      	movs	r1, #180	; 0xb4
 80024b0:	20f5      	movs	r0, #245	; 0xf5
 80024b2:	f7fe fb35 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 80024b6:	2302      	movs	r3, #2
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <DisplayMainScreen+0x228>)
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c6:	21c3      	movs	r1, #195	; 0xc3
 80024c8:	20e8      	movs	r0, #232	; 0xe8
 80024ca:	f7fe fb29 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d4:	480a      	ldr	r0, [pc, #40]	; (8002500 <DisplayMainScreen+0x230>)
 80024d6:	f001 ff11 	bl	80042fc <HAL_GPIO_WritePin>
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08009280 	.word	0x08009280
 80024e4:	08009294 	.word	0x08009294
 80024e8:	0800929c 	.word	0x0800929c
 80024ec:	080092a4 	.word	0x080092a4
 80024f0:	080092ac 	.word	0x080092ac
 80024f4:	080092b4 	.word	0x080092b4
 80024f8:	080092c0 	.word	0x080092c0
 80024fc:	080092c8 	.word	0x080092c8
 8002500:	40020c00 	.word	0x40020c00

08002504 <DisplayDabStatus>:
{
	ILI9341_Draw_String(290, 40, WHITE, BLACK, "E", 2);
}

void DisplayDabStatus(uint8_t rssi_val, uint8_t snr_val, uint8_t valid_val, uint8_t acq_val, uint32_t fic_bit_val, uint32_t fic_err_val, uint8_t fic_quality_val)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af02      	add	r7, sp, #8
 800250a:	4604      	mov	r4, r0
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	4603      	mov	r3, r0
 8002518:	71bb      	strb	r3, [r7, #6]
 800251a:	460b      	mov	r3, r1
 800251c:	717b      	strb	r3, [r7, #5]
 800251e:	4613      	mov	r3, r2
 8002520:	713b      	strb	r3, [r7, #4]
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Valid:", 2);
 8002522:	2302      	movs	r3, #2
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	4b80      	ldr	r3, [pc, #512]	; (8002728 <DisplayDabStatus+0x224>)
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2300      	movs	r3, #0
 800252c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002530:	2128      	movs	r1, #40	; 0x28
 8002532:	2014      	movs	r0, #20
 8002534:	f7fe faf4 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(69, 40, WHITE, BLACK, itoa(valid_val, char_buffer, 10), 2);
 8002538:	797b      	ldrb	r3, [r7, #5]
 800253a:	220a      	movs	r2, #10
 800253c:	497b      	ldr	r1, [pc, #492]	; (800272c <DisplayDabStatus+0x228>)
 800253e:	4618      	mov	r0, r3
 8002540:	f006 fa54 	bl	80089ec <itoa>
 8002544:	4603      	mov	r3, r0
 8002546:	2202      	movs	r2, #2
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002552:	2128      	movs	r1, #40	; 0x28
 8002554:	2045      	movs	r0, #69	; 0x45
 8002556:	f7fe fae3 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(82, 40, WHITE, BLACK, "ACQ:", 2);
 800255a:	2302      	movs	r3, #2
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	4b74      	ldr	r3, [pc, #464]	; (8002730 <DisplayDabStatus+0x22c>)
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002568:	2128      	movs	r1, #40	; 0x28
 800256a:	2052      	movs	r0, #82	; 0x52
 800256c:	f7fe fad8 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 40, WHITE, BLACK, itoa(acq_val, char_buffer, 10), 2);
 8002570:	793b      	ldrb	r3, [r7, #4]
 8002572:	220a      	movs	r2, #10
 8002574:	496d      	ldr	r1, [pc, #436]	; (800272c <DisplayDabStatus+0x228>)
 8002576:	4618      	mov	r0, r3
 8002578:	f006 fa38 	bl	80089ec <itoa>
 800257c:	4603      	mov	r3, r0
 800257e:	2202      	movs	r2, #2
 8002580:	9201      	str	r2, [sp, #4]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258a:	2128      	movs	r1, #40	; 0x28
 800258c:	2073      	movs	r0, #115	; 0x73
 800258e:	f7fe fac7 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(131, 40, WHITE, BLACK, "RSSI:" , 2);
 8002592:	2302      	movs	r3, #2
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <DisplayDabStatus+0x230>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a0:	2128      	movs	r1, #40	; 0x28
 80025a2:	2083      	movs	r0, #131	; 0x83
 80025a4:	f7fe fabc 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, "   ", 2);
 80025a8:	2302      	movs	r3, #2
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	4b62      	ldr	r3, [pc, #392]	; (8002738 <DisplayDabStatus+0x234>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b6:	2128      	movs	r1, #40	; 0x28
 80025b8:	20ac      	movs	r0, #172	; 0xac
 80025ba:	f7fe fab1 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, itoa(rssi_val, char_buffer, 10), 2);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	220a      	movs	r2, #10
 80025c2:	495a      	ldr	r1, [pc, #360]	; (800272c <DisplayDabStatus+0x228>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f006 fa11 	bl	80089ec <itoa>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2202      	movs	r2, #2
 80025ce:	9201      	str	r2, [sp, #4]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d8:	2128      	movs	r1, #40	; 0x28
 80025da:	20ac      	movs	r0, #172	; 0xac
 80025dc:	f7fe faa0 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 40, WHITE, BLACK, "SNR:" , 2);
 80025e0:	2302      	movs	r3, #2
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <DisplayDabStatus+0x238>)
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ee:	2128      	movs	r1, #40	; 0x28
 80025f0:	20c0      	movs	r0, #192	; 0xc0
 80025f2:	f7fe fa95 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, "   ", 2);
 80025f6:	2302      	movs	r3, #2
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <DisplayDabStatus+0x234>)
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002604:	2128      	movs	r1, #40	; 0x28
 8002606:	20e1      	movs	r0, #225	; 0xe1
 8002608:	f7fe fa8a 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, itoa(snr_val, char_buffer, 10), 2);
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	220a      	movs	r2, #10
 8002610:	4946      	ldr	r1, [pc, #280]	; (800272c <DisplayDabStatus+0x228>)
 8002612:	4618      	mov	r0, r3
 8002614:	f006 f9ea 	bl	80089ec <itoa>
 8002618:	4603      	mov	r3, r0
 800261a:	2202      	movs	r2, #2
 800261c:	9201      	str	r2, [sp, #4]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002626:	2128      	movs	r1, #40	; 0x28
 8002628:	20e1      	movs	r0, #225	; 0xe1
 800262a:	f7fe fa79 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 40, WHITE, BLACK, "FQ:" , 2);
 800262e:	2302      	movs	r3, #2
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <DisplayDabStatus+0x23c>)
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263c:	2128      	movs	r1, #40	; 0x28
 800263e:	20f0      	movs	r0, #240	; 0xf0
 8002640:	f7fe fa6e 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, "   ", 2);
 8002644:	2302      	movs	r3, #2
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <DisplayDabStatus+0x234>)
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002652:	2128      	movs	r1, #40	; 0x28
 8002654:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002658:	f7fe fa62 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, itoa(fic_quality_val, char_buffer, 10), 2);
 800265c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002660:	220a      	movs	r2, #10
 8002662:	4932      	ldr	r1, [pc, #200]	; (800272c <DisplayDabStatus+0x228>)
 8002664:	4618      	mov	r0, r3
 8002666:	f006 f9c1 	bl	80089ec <itoa>
 800266a:	4603      	mov	r3, r0
 800266c:	2202      	movs	r2, #2
 800266e:	9201      	str	r2, [sp, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2300      	movs	r3, #0
 8002674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002678:	2128      	movs	r1, #40	; 0x28
 800267a:	f44f 7088 	mov.w	r0, #272	; 0x110
 800267e:	f7fe fa4f 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(20, 75, WHITE, BLACK, "FIC Er:", 2);
 8002682:	2302      	movs	r3, #2
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <DisplayDabStatus+0x240>)
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2300      	movs	r3, #0
 800268c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002690:	214b      	movs	r1, #75	; 0x4b
 8002692:	2014      	movs	r0, #20
 8002694:	f7fe fa44 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, "          ", 2);
 8002698:	2302      	movs	r3, #2
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <DisplayDabStatus+0x244>)
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2300      	movs	r3, #0
 80026a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a6:	214b      	movs	r1, #75	; 0x4b
 80026a8:	2050      	movs	r0, #80	; 0x50
 80026aa:	f7fe fa39 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, itoa(fic_err_val, char_buffer, 10), 2);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	220a      	movs	r2, #10
 80026b2:	491e      	ldr	r1, [pc, #120]	; (800272c <DisplayDabStatus+0x228>)
 80026b4:	4618      	mov	r0, r3
 80026b6:	f006 f999 	bl	80089ec <itoa>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2202      	movs	r2, #2
 80026be:	9201      	str	r2, [sp, #4]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c8:	214b      	movs	r1, #75	; 0x4b
 80026ca:	2050      	movs	r0, #80	; 0x50
 80026cc:	f7fe fa28 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 75, WHITE, BLACK, "FIC Tot:", 2);
 80026d0:	2302      	movs	r3, #2
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <DisplayDabStatus+0x248>)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	214b      	movs	r1, #75	; 0x4b
 80026e0:	2096      	movs	r0, #150	; 0x96
 80026e2:	f7fe fa1d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, "          ", 2);
 80026e6:	2302      	movs	r3, #2
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <DisplayDabStatus+0x244>)
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f4:	214b      	movs	r1, #75	; 0x4b
 80026f6:	20dc      	movs	r0, #220	; 0xdc
 80026f8:	f7fe fa12 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, itoa(fic_bit_val, char_buffer, 10), 2);
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	220a      	movs	r2, #10
 8002700:	490a      	ldr	r1, [pc, #40]	; (800272c <DisplayDabStatus+0x228>)
 8002702:	4618      	mov	r0, r3
 8002704:	f006 f972 	bl	80089ec <itoa>
 8002708:	4603      	mov	r3, r0
 800270a:	2202      	movs	r2, #2
 800270c:	9201      	str	r2, [sp, #4]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002716:	214b      	movs	r1, #75	; 0x4b
 8002718:	20dc      	movs	r0, #220	; 0xdc
 800271a:	f7fe fa01 	bl	8000b20 <ILI9341_Draw_String>
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	bf00      	nop
 8002728:	080092ec 	.word	0x080092ec
 800272c:	20001928 	.word	0x20001928
 8002730:	080092f4 	.word	0x080092f4
 8002734:	080092fc 	.word	0x080092fc
 8002738:	080092d0 	.word	0x080092d0
 800273c:	08009304 	.word	0x08009304
 8002740:	0800930c 	.word	0x0800930c
 8002744:	08009310 	.word	0x08009310
 8002748:	08009318 	.word	0x08009318
 800274c:	08009324 	.word	0x08009324

08002750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_DMA_Init+0x3c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <MX_DMA_Init+0x3c>)
 8002760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_DMA_Init+0x3c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	200f      	movs	r0, #15
 8002778:	f001 f8d3 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800277c:	200f      	movs	r0, #15
 800277e:	f001 f8ec 	bl	800395a <HAL_NVIC_EnableIRQ>

}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	4b65      	ldr	r3, [pc, #404]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a64      	ldr	r2, [pc, #400]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b62      	ldr	r3, [pc, #392]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a56      	ldr	r2, [pc, #344]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b54      	ldr	r3, [pc, #336]	; (8002940 <MX_GPIO_Init+0x1b0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <MX_GPIO_Init+0x1b0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <MX_GPIO_Init+0x1b0>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <MX_GPIO_Init+0x1b0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <MX_GPIO_Init+0x1b0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a48      	ldr	r2, [pc, #288]	; (8002940 <MX_GPIO_Init+0x1b0>)
 8002820:	f043 0310 	orr.w	r3, r3, #16
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <MX_GPIO_Init+0x1b0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b42      	ldr	r3, [pc, #264]	; (8002940 <MX_GPIO_Init+0x1b0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a41      	ldr	r2, [pc, #260]	; (8002940 <MX_GPIO_Init+0x1b0>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <MX_GPIO_Init+0x1b0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 800284e:	2200      	movs	r2, #0
 8002850:	2130      	movs	r1, #48	; 0x30
 8002852:	483c      	ldr	r0, [pc, #240]	; (8002944 <MX_GPIO_Init+0x1b4>)
 8002854:	f001 fd52 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285e:	483a      	ldr	r0, [pc, #232]	; (8002948 <MX_GPIO_Init+0x1b8>)
 8002860:	f001 fd4c 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8002864:	2200      	movs	r2, #0
 8002866:	f24f 7180 	movw	r1, #63360	; 0xf780
 800286a:	4838      	ldr	r0, [pc, #224]	; (800294c <MX_GPIO_Init+0x1bc>)
 800286c:	f001 fd46 	bl	80042fc <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	2128      	movs	r1, #40	; 0x28
 8002874:	4836      	ldr	r0, [pc, #216]	; (8002950 <MX_GPIO_Init+0x1c0>)
 8002876:	f001 fd41 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 800287a:	2310      	movs	r3, #16
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	4831      	ldr	r0, [pc, #196]	; (8002954 <MX_GPIO_Init+0x1c4>)
 800288e:	f001 fb99 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8002892:	2330      	movs	r3, #48	; 0x30
 8002894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4826      	ldr	r0, [pc, #152]	; (8002944 <MX_GPIO_Init+0x1b4>)
 80028aa:	f001 fb8b 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 80028ae:	2311      	movs	r3, #17
 80028b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	4823      	ldr	r0, [pc, #140]	; (8002950 <MX_GPIO_Init+0x1c0>)
 80028c2:	f001 fb7f 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80028c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028cc:	2301      	movs	r3, #1
 80028ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	481a      	ldr	r0, [pc, #104]	; (8002948 <MX_GPIO_Init+0x1b8>)
 80028e0:	f001 fb70 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80028e4:	f24f 7380 	movw	r3, #63360	; 0xf780
 80028e8:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4813      	ldr	r0, [pc, #76]	; (800294c <MX_GPIO_Init+0x1bc>)
 80028fe:	f001 fb61 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4619      	mov	r1, r3
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_GPIO_Init+0x1bc>)
 8002916:	f001 fb55 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 800291a:	2328      	movs	r3, #40	; 0x28
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <MX_GPIO_Init+0x1c0>)
 8002932:	f001 fb47 	bl	8003fc4 <HAL_GPIO_Init>

}
 8002936:	bf00      	nop
 8002938:	3730      	adds	r7, #48	; 0x30
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40020800 	.word	0x40020800
 8002948:	40021000 	.word	0x40021000
 800294c:	40020c00 	.word	0x40020c00
 8002950:	40020400 	.word	0x40020400
 8002954:	40020000 	.word	0x40020000

08002958 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <MX_I2C1_Init+0x50>)
 800295e:	4a13      	ldr	r2, [pc, #76]	; (80029ac <MX_I2C1_Init+0x54>)
 8002960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <MX_I2C1_Init+0x58>)
 8002966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <MX_I2C1_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800297a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <MX_I2C1_Init+0x50>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <MX_I2C1_Init+0x50>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002996:	f001 fccb 	bl	8004330 <HAL_I2C_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029a0:	f000 fa10 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20001948 	.word	0x20001948
 80029ac:	40005400 	.word	0x40005400
 80029b0:	000186a0 	.word	0x000186a0

080029b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <MX_I2C3_Init+0x54>)
 80029bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029c0:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <MX_I2C3_Init+0x58>)
 80029c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <MX_I2C3_Init+0x50>)
 80029f2:	f001 fc9d 	bl	8004330 <HAL_I2C_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80029fc:	f000 f9e2 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000199c 	.word	0x2000199c
 8002a08:	40005c00 	.word	0x40005c00
 8002a0c:	000186a0 	.word	0x000186a0

08002a10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_I2C_MspInit+0x148>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12c      	bne.n	8002a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a48      	ldr	r2, [pc, #288]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8002a4e:	23c0      	movs	r3, #192	; 0xc0
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a52:	2312      	movs	r3, #18
 8002a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	483d      	ldr	r0, [pc, #244]	; (8002b60 <HAL_I2C_MspInit+0x150>)
 8002a6a:	f001 faab 	bl	8003fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002a8a:	e060      	b.n	8002b4e <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_I2C_MspInit+0x154>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d15b      	bne.n	8002b4e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8002ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481f      	ldr	r0, [pc, #124]	; (8002b68 <HAL_I2C_MspInit+0x158>)
 8002aec:	f001 fa6a 	bl	8003fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8002af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af6:	2312      	movs	r3, #18
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b02:	2304      	movs	r3, #4
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4817      	ldr	r0, [pc, #92]	; (8002b6c <HAL_I2C_MspInit+0x15c>)
 8002b0e:	f001 fa59 	bl	8003fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002b1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_I2C_MspInit+0x14c>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2048      	movs	r0, #72	; 0x48
 8002b34:	f000 fef5 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002b38:	2048      	movs	r0, #72	; 0x48
 8002b3a:	f000 ff0e 	bl	800395a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2049      	movs	r0, #73	; 0x49
 8002b44:	f000 feed 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002b48:	2049      	movs	r0, #73	; 0x49
 8002b4a:	f000 ff06 	bl	800395a <HAL_NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3730      	adds	r7, #48	; 0x30
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40005400 	.word	0x40005400
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40005c00 	.word	0x40005c00
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	led_number++;
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <Leds_Control_Blink+0x110>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <Leds_Control_Blink+0x110>)
 8002b7e:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <Leds_Control_Blink+0x110>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d102      	bne.n	8002b8e <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8002b88:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <Leds_Control_Blink+0x110>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <Leds_Control_Blink+0x110>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d86f      	bhi.n	8002c78 <Leds_Control_Blink+0x108>
 8002b98:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <Leds_Control_Blink+0x30>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002be3 	.word	0x08002be3
 8002ba8:	08002c15 	.word	0x08002c15
 8002bac:	08002c47 	.word	0x08002c47
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb6:	4833      	ldr	r0, [pc, #204]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002bb8:	f001 fba0 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc2:	4830      	ldr	r0, [pc, #192]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002bc4:	f001 fb9a 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002bd0:	f001 fb94 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bda:	482a      	ldr	r0, [pc, #168]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002bdc:	f001 fb8e 	bl	80042fc <HAL_GPIO_WritePin>
		break;
 8002be0:	e04b      	b.n	8002c7a <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002be2:	2200      	movs	r2, #0
 8002be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002be8:	4826      	ldr	r0, [pc, #152]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002bea:	f001 fb87 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf4:	4823      	ldr	r0, [pc, #140]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002bf6:	f001 fb81 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c00:	4820      	ldr	r0, [pc, #128]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c02:	f001 fb7b 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0c:	481d      	ldr	r0, [pc, #116]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c0e:	f001 fb75 	bl	80042fc <HAL_GPIO_WritePin>
		break;
 8002c12:	e032      	b.n	8002c7a <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002c14:	2200      	movs	r2, #0
 8002c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c1a:	481a      	ldr	r0, [pc, #104]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c1c:	f001 fb6e 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002c20:	2200      	movs	r2, #0
 8002c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c26:	4817      	ldr	r0, [pc, #92]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c28:	f001 fb68 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c32:	4814      	ldr	r0, [pc, #80]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c34:	f001 fb62 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c3e:	4811      	ldr	r0, [pc, #68]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c40:	f001 fb5c 	bl	80042fc <HAL_GPIO_WritePin>
		break;
 8002c44:	e019      	b.n	8002c7a <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002c46:	2200      	movs	r2, #0
 8002c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c4c:	480d      	ldr	r0, [pc, #52]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c4e:	f001 fb55 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002c52:	2200      	movs	r2, #0
 8002c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c58:	480a      	ldr	r0, [pc, #40]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c5a:	f001 fb4f 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c64:	4807      	ldr	r0, [pc, #28]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c66:	f001 fb49 	bl	80042fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c70:	4804      	ldr	r0, [pc, #16]	; (8002c84 <Leds_Control_Blink+0x114>)
 8002c72:	f001 fb43 	bl	80042fc <HAL_GPIO_WritePin>
		break;
 8002c76:	e000      	b.n	8002c7a <Leds_Control_Blink+0x10a>
	default:

		break;
 8002c78:	bf00      	nop
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000008 	.word	0x20000008
 8002c84:	40020c00 	.word	0x40020c00

08002c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c8c:	f000 fcd8 	bl	8003640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c90:	f000 f82e 	bl	8002cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c94:	f7ff fd7c 	bl	8002790 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c98:	f7ff fd5a 	bl	8002750 <MX_DMA_Init>
  MX_I2C1_Init();
 8002c9c:	f7ff fe5c 	bl	8002958 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002ca0:	f7ff fe88 	bl	80029b4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002ca4:	f000 f894 	bl	8002dd0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002ca8:	f000 f8c8 	bl	8002e3c <MX_SPI2_Init>
  MX_TIM3_Init();
 8002cac:	f000 fa66 	bl	800317c <MX_TIM3_Init>
  MX_UART5_Init();
 8002cb0:	f000 fba8 	bl	8003404 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002cb4:	f000 fbd0 	bl	8003458 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002cb8:	f000 faba 	bl	8003230 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002cbc:	f000 fadc 	bl	8003278 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <main+0x5c>)
 8002cc4:	f7ff fade 	bl	8002284 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim10);
 8002cc8:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <main+0x60>)
 8002cca:	f004 fcff 	bl	80076cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8002cce:	4807      	ldr	r0, [pc, #28]	; (8002cec <main+0x64>)
 8002cd0:	f004 fcfc 	bl	80076cc <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8002cd4:	f7fd fc02 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 8002cd8:	f7ff fafa 	bl	80022d0 <DisplayMainScreen>

  Si468x_init();
 8002cdc:	f7fe f9ea 	bl	80010b4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <main+0x58>
 8002ce2:	bf00      	nop
 8002ce4:	08009330 	.word	0x08009330
 8002ce8:	20001b48 	.word	0x20001b48
 8002cec:	20001b90 	.word	0x20001b90

08002cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b094      	sub	sp, #80	; 0x50
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 0320 	add.w	r3, r7, #32
 8002cfa:	2230      	movs	r2, #48	; 0x30
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 fe76 	bl	80089f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <SystemClock_Config+0xcc>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <SystemClock_Config+0xcc>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <SystemClock_Config+0xcc>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d30:	2300      	movs	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <SystemClock_Config+0xd0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <SystemClock_Config+0xd0>)
 8002d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <SystemClock_Config+0xd0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d56:	2302      	movs	r3, #2
 8002d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d60:	2304      	movs	r3, #4
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002d64:	23a0      	movs	r3, #160	; 0xa0
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d70:	f107 0320 	add.w	r3, r7, #32
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 f8fb 	bl	8005f70 <HAL_RCC_OscConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d80:	f000 f820 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d84:	230f      	movs	r3, #15
 8002d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	2105      	movs	r1, #5
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fb5c 	bl	8006460 <HAL_RCC_ClockConfig>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002dae:	f000 f809 	bl	8002dc4 <Error_Handler>
  }
}
 8002db2:	bf00      	nop
 8002db4:	3750      	adds	r7, #80	; 0x50
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <Error_Handler+0x8>
	...

08002dd0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <MX_SPI1_Init+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002e04:	2218      	movs	r2, #24
 8002e06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e20:	4804      	ldr	r0, [pc, #16]	; (8002e34 <MX_SPI1_Init+0x64>)
 8002e22:	f003 fd3d 	bl	80068a0 <HAL_SPI_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e2c:	f7ff ffca 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	200019f0 	.word	0x200019f0
 8002e38:	40013000 	.word	0x40013000

08002e3c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <MX_SPI2_Init+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e88:	220a      	movs	r2, #10
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e8c:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <MX_SPI2_Init+0x64>)
 8002e8e:	f003 fd07 	bl	80068a0 <HAL_SPI_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e98:	f7ff ff94 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20001a48 	.word	0x20001a48
 8002ea4:	40003800 	.word	0x40003800

08002ea8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <HAL_SPI_MspInit+0x154>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12c      	bne.n	8002f24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a4b      	ldr	r2, [pc, #300]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b49      	ldr	r3, [pc, #292]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	4b45      	ldr	r3, [pc, #276]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a44      	ldr	r2, [pc, #272]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8002f02:	23e0      	movs	r3, #224	; 0xe0
 8002f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f12:	2305      	movs	r3, #5
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4839      	ldr	r0, [pc, #228]	; (8003004 <HAL_SPI_MspInit+0x15c>)
 8002f1e:	f001 f851 	bl	8003fc4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f22:	e066      	b.n	8002ff2 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a37      	ldr	r2, [pc, #220]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d161      	bne.n	8002ff2 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a32      	ldr	r2, [pc, #200]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b30      	ldr	r3, [pc, #192]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_SPI_MspInit+0x158>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002f66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 031c 	add.w	r3, r7, #28
 8002f80:	4619      	mov	r1, r3
 8002f82:	4822      	ldr	r0, [pc, #136]	; (800300c <HAL_SPI_MspInit+0x164>)
 8002f84:	f001 f81e 	bl	8003fc4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002f8a:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_SPI_MspInit+0x16c>)
 8002f8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002fc6:	4812      	ldr	r0, [pc, #72]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fc8:	f000 fce2 	bl	8003990 <HAL_DMA_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002fd2:	f7ff fef7 	bl	8002dc4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fda:	649a      	str	r2, [r3, #72]	; 0x48
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2024      	movs	r0, #36	; 0x24
 8002fe8:	f000 fc9b 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002fec:	2024      	movs	r0, #36	; 0x24
 8002fee:	f000 fcb4 	bl	800395a <HAL_NVIC_EnableIRQ>
}
 8002ff2:	bf00      	nop
 8002ff4:	3730      	adds	r7, #48	; 0x30
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40013000 	.word	0x40013000
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	40003800 	.word	0x40003800
 800300c:	40020400 	.word	0x40020400
 8003010:	20001aa0 	.word	0x20001aa0
 8003014:	40026070 	.word	0x40026070

08003018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_MspInit+0x4c>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_MspInit+0x4c>)
 8003028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_MspInit+0x4c>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_MspInit+0x4c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_MspInit+0x4c>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_MspInit+0x4c>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800306c:	e7fe      	b.n	800306c <NMI_Handler+0x4>

0800306e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003072:	e7fe      	b.n	8003072 <HardFault_Handler+0x4>

08003074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <MemManage_Handler+0x4>

0800307a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <BusFault_Handler+0x4>

08003080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <UsageFault_Handler+0x4>

08003086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b4:	f000 fb16 	bl	80036e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}

080030bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <DMA1_Stream4_IRQHandler+0x10>)
 80030c2:	f000 fd35 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20001aa0 	.word	0x20001aa0

080030d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030d6:	f004 fbb8 	bl	800784a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20001b48 	.word	0x20001b48

080030e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80030ea:	f004 fbae 	bl	800784a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20001b90 	.word	0x20001b90

080030f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <SPI2_IRQHandler+0x10>)
 80030fe:	f004 f847 	bl	8007190 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20001a48 	.word	0x20001a48

0800310c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <I2C3_EV_IRQHandler+0x10>)
 8003112:	f001 fa51 	bl	80045b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000199c 	.word	0x2000199c

08003120 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <I2C3_ER_IRQHandler+0x10>)
 8003126:	f001 fbb8 	bl	800489a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	2000199c 	.word	0x2000199c

08003134 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 8003146:	f7ff fd13 	bl	8002b70 <Leds_Control_Blink>
//		Si468x_dab_reset_interrupts();
//		Si468x_dab_digrad_status();

	}
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40014800 	.word	0x40014800

08003158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <SystemInit+0x20>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <SystemInit+0x20>)
 8003164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003182:	f107 0320 	add.w	r3, r7, #32
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	611a      	str	r2, [r3, #16]
 800319a:	615a      	str	r2, [r3, #20]
 800319c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <MX_TIM3_Init+0xac>)
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <MX_TIM3_Init+0xb0>)
 80031a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <MX_TIM3_Init+0xac>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <MX_TIM3_Init+0xac>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <MX_TIM3_Init+0xac>)
 80031b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <MX_TIM3_Init+0xac>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <MX_TIM3_Init+0xac>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031c4:	4818      	ldr	r0, [pc, #96]	; (8003228 <MX_TIM3_Init+0xac>)
 80031c6:	f004 faf1 	bl	80077ac <HAL_TIM_PWM_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80031d0:	f7ff fdf8 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031dc:	f107 0320 	add.w	r3, r7, #32
 80031e0:	4619      	mov	r1, r3
 80031e2:	4811      	ldr	r0, [pc, #68]	; (8003228 <MX_TIM3_Init+0xac>)
 80031e4:	f004 ff74 	bl	80080d0 <HAL_TIMEx_MasterConfigSynchronization>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80031ee:	f7ff fde9 	bl	8002dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031f2:	2360      	movs	r3, #96	; 0x60
 80031f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	2208      	movs	r2, #8
 8003206:	4619      	mov	r1, r3
 8003208:	4807      	ldr	r0, [pc, #28]	; (8003228 <MX_TIM3_Init+0xac>)
 800320a:	f004 fc27 	bl	8007a5c <HAL_TIM_PWM_ConfigChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003214:	f7ff fdd6 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003218:	4803      	ldr	r0, [pc, #12]	; (8003228 <MX_TIM3_Init+0xac>)
 800321a:	f000 f8b9 	bl	8003390 <HAL_TIM_MspPostInit>

}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20001b00 	.word	0x20001b00
 800322c:	40000400 	.word	0x40000400

08003230 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <MX_TIM10_Init+0x40>)
 8003236:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <MX_TIM10_Init+0x44>)
 8003238:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <MX_TIM10_Init+0x40>)
 800323c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003240:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <MX_TIM10_Init+0x40>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <MX_TIM10_Init+0x40>)
 800324a:	f240 2257 	movw	r2, #599	; 0x257
 800324e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <MX_TIM10_Init+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <MX_TIM10_Init+0x40>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800325c:	4804      	ldr	r0, [pc, #16]	; (8003270 <MX_TIM10_Init+0x40>)
 800325e:	f004 f9e5 	bl	800762c <HAL_TIM_Base_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003268:	f7ff fdac 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20001b48 	.word	0x20001b48
 8003274:	40014400 	.word	0x40014400

08003278 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_TIM11_Init+0x40>)
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <MX_TIM11_Init+0x44>)
 8003280:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <MX_TIM11_Init+0x40>)
 8003284:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003288:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_TIM11_Init+0x40>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_TIM11_Init+0x40>)
 8003292:	f240 5213 	movw	r2, #1299	; 0x513
 8003296:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003298:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <MX_TIM11_Init+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_TIM11_Init+0x40>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80032a4:	4804      	ldr	r0, [pc, #16]	; (80032b8 <MX_TIM11_Init+0x40>)
 80032a6:	f004 f9c1 	bl	800762c <HAL_TIM_Base_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80032b0:	f7ff fd88 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20001b90 	.word	0x20001b90
 80032bc:	40014800 	.word	0x40014800

080032c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_TIM_PWM_MspInit+0x3c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10d      	bne.n	80032ee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_TIM_PWM_MspInit+0x40>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <HAL_TIM_PWM_MspInit+0x40>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_TIM_PWM_MspInit+0x40>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40000400 	.word	0x40000400
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_TIM_Base_MspInit+0x80>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d116      	bne.n	8003344 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_TIM_Base_MspInit+0x84>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <HAL_TIM_Base_MspInit+0x84>)
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_TIM_Base_MspInit+0x84>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	2019      	movs	r0, #25
 8003338:	f000 faf3 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800333c:	2019      	movs	r0, #25
 800333e:	f000 fb0c 	bl	800395a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003342:	e01a      	b.n	800337a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_TIM_Base_MspInit+0x88>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d115      	bne.n	800337a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_TIM_Base_MspInit+0x84>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <HAL_TIM_Base_MspInit+0x84>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_TIM_Base_MspInit+0x84>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	201a      	movs	r0, #26
 8003370:	f000 fad7 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003374:	201a      	movs	r0, #26
 8003376:	f000 faf0 	bl	800395a <HAL_NVIC_EnableIRQ>
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40014400 	.word	0x40014400
 8003388:	40023800 	.word	0x40023800
 800338c:	40014800 	.word	0x40014800

08003390 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 030c 	add.w	r3, r7, #12
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <HAL_TIM_MspPostInit+0x68>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d11e      	bne.n	80033f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_TIM_MspPostInit+0x6c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_TIM_MspPostInit+0x6c>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_TIM_MspPostInit+0x6c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 80033ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033e0:	2302      	movs	r3, #2
 80033e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	4619      	mov	r1, r3
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <HAL_TIM_MspPostInit+0x70>)
 80033ec:	f000 fdea 	bl	8003fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020800 	.word	0x40020800

08003404 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_UART5_Init+0x4c>)
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <MX_UART5_Init+0x50>)
 800340c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <MX_UART5_Init+0x4c>)
 8003410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003414:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_UART5_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <MX_UART5_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <MX_UART5_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <MX_UART5_Init+0x4c>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <MX_UART5_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <MX_UART5_Init+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800343a:	4805      	ldr	r0, [pc, #20]	; (8003450 <MX_UART5_Init+0x4c>)
 800343c:	f004 fed8 	bl	80081f0 <HAL_UART_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003446:	f7ff fcbd 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20001bd8 	.word	0x20001bd8
 8003454:	40005000 	.word	0x40005000

08003458 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_USART3_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 8003464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003468:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_USART3_UART_Init+0x4c>)
 8003490:	f004 feae 	bl	80081f0 <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f7ff fc93 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20001c1c 	.word	0x20001c1c
 80034a8:	40004800 	.word	0x40004800

080034ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 031c 	add.w	r3, r7, #28
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a42      	ldr	r2, [pc, #264]	; (80035d4 <HAL_UART_MspInit+0x128>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d14b      	bne.n	8003566 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a40      	ldr	r2, [pc, #256]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 80034d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003534:	2308      	movs	r3, #8
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	4619      	mov	r1, r3
 800353e:	4827      	ldr	r0, [pc, #156]	; (80035dc <HAL_UART_MspInit+0x130>)
 8003540:	f000 fd40 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003544:	2304      	movs	r3, #4
 8003546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003554:	2308      	movs	r3, #8
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	4820      	ldr	r0, [pc, #128]	; (80035e0 <HAL_UART_MspInit+0x134>)
 8003560:	f000 fd30 	bl	8003fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003564:	e031      	b.n	80035ca <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_UART_MspInit+0x138>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d12c      	bne.n	80035ca <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 800357a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357e:	6413      	str	r3, [r2, #64]	; 0x40
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	6313      	str	r3, [r2, #48]	; 0x30
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_UART_MspInit+0x12c>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80035a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035ba:	2307      	movs	r3, #7
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 031c 	add.w	r3, r7, #28
 80035c2:	4619      	mov	r1, r3
 80035c4:	4808      	ldr	r0, [pc, #32]	; (80035e8 <HAL_UART_MspInit+0x13c>)
 80035c6:	f000 fcfd 	bl	8003fc4 <HAL_GPIO_Init>
}
 80035ca:	bf00      	nop
 80035cc:	3730      	adds	r7, #48	; 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40005000 	.word	0x40005000
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020c00 	.word	0x40020c00
 80035e4:	40004800 	.word	0x40004800
 80035e8:	40020400 	.word	0x40020400

080035ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035f0:	480d      	ldr	r0, [pc, #52]	; (8003628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035f2:	490e      	ldr	r1, [pc, #56]	; (800362c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035f4:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003608:	4c0b      	ldr	r4, [pc, #44]	; (8003638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003616:	f7ff fd9f 	bl	8003158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800361a:	f005 f9ab 	bl	8008974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800361e:	f7ff fb33 	bl	8002c88 <main>
  bx  lr    
 8003622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800362c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003630:	0800b304 	.word	0x0800b304
  ldr r2, =_sbss
 8003634:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003638:	20001c64 	.word	0x20001c64

0800363c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800363c:	e7fe      	b.n	800363c <ADC_IRQHandler>
	...

08003640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_Init+0x40>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_Init+0x40>)
 800364a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_Init+0x40>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <HAL_Init+0x40>)
 8003656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800365a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_Init+0x40>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_Init+0x40>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003668:	2003      	movs	r0, #3
 800366a:	f000 f94f 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800366e:	200f      	movs	r0, #15
 8003670:	f000 f808 	bl	8003684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003674:	f7ff fcd0 	bl	8003018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00

08003684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_InitTick+0x54>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_InitTick+0x58>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369a:	fbb3 f3f1 	udiv	r3, r3, r1
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f967 	bl	8003976 <HAL_SYSTICK_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00e      	b.n	80036d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d80a      	bhi.n	80036ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b8:	2200      	movs	r2, #0
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f000 f92f 	bl	8003922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c4:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <HAL_InitTick+0x5c>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	20000014 	.word	0x20000014
 80036e0:	20000010 	.word	0x20000010

080036e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_IncTick+0x20>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_IncTick+0x24>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_IncTick+0x24>)
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000014 	.word	0x20000014
 8003708:	20001c60 	.word	0x20001c60

0800370c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return uwTick;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_GetTick+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20001c60 	.word	0x20001c60

08003724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800372c:	f7ff ffee 	bl	800370c <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d005      	beq.n	800374a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_Delay+0x44>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800374a:	bf00      	nop
 800374c:	f7ff ffde 	bl	800370c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d8f7      	bhi.n	800374c <HAL_Delay+0x28>
  {
  }
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000014 	.word	0x20000014

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	; (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	; (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	; (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff29 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003934:	f7ff ff3e 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 8003938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	6978      	ldr	r0, [r7, #20]
 8003940:	f7ff ff8e 	bl	8003860 <NVIC_EncodePriority>
 8003944:	4602      	mov	r2, r0
 8003946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff5d 	bl	800380c <__NVIC_SetPriority>
}
 8003952:	bf00      	nop
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff31 	bl	80037d0 <__NVIC_EnableIRQ>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffa2 	bl	80038c8 <SysTick_Config>
 8003984:	4603      	mov	r3, r0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff feb6 	bl	800370c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e099      	b.n	8003ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039cc:	e00f      	b.n	80039ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ce:	f7ff fe9d 	bl	800370c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d908      	bls.n	80039ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e078      	b.n	8003ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e8      	bne.n	80039ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_DMA_Init+0x158>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d107      	bne.n	8003a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4313      	orrs	r3, r2
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d117      	bne.n	8003ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa19 	bl	8003ecc <DMA_CheckFifoParam>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f9d0 	bl	8003e60 <DMA_CalcBaseAndBitshift>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	223f      	movs	r2, #63	; 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	f010803f 	.word	0xf010803f

08003aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00c      	b.n	8003b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b3c:	4b8e      	ldr	r3, [pc, #568]	; (8003d78 <HAL_DMA_IRQHandler+0x248>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a8e      	ldr	r2, [pc, #568]	; (8003d7c <HAL_DMA_IRQHandler+0x24c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01a      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	2208      	movs	r2, #8
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d012      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d012      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d043      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d024      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
 8003c5e:	e01f      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e016      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0208 	bic.w	r2, r2, #8
 8003c8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 808f 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8087 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d136      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0216 	bic.w	r2, r2, #22
 8003ce8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_DMA_IRQHandler+0x1da>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0208 	bic.w	r2, r2, #8
 8003d18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	223f      	movs	r2, #63	; 0x3f
 8003d20:	409a      	lsls	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d07e      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
        }
        return;
 8003d46:	e079      	b.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01d      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d031      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e02c      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c
 8003d7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d023      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
 8003d90:	e01e      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0210 	bic.w	r2, r2, #16
 8003dae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d032      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d022      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2205      	movs	r2, #5
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d307      	bcc.n	8003e18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f2      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x2cc>
 8003e16:	e000      	b.n	8003e1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e000      	b.n	8003e3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e3c:	bf00      	nop
    }
  }
}
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e52:	b2db      	uxtb	r3, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3b10      	subs	r3, #16
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d909      	bls.n	8003ea2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003ea0:	e007      	b.n	8003eb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	aaaaaaab 	.word	0xaaaaaaab
 8003ec8:	0800b2c4 	.word	0x0800b2c4

08003ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11f      	bne.n	8003f26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d856      	bhi.n	8003f9a <DMA_CheckFifoParam+0xce>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <DMA_CheckFifoParam+0x28>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f17 	.word	0x08003f17
 8003efc:	08003f05 	.word	0x08003f05
 8003f00:	08003f9b 	.word	0x08003f9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d046      	beq.n	8003f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f14:	e043      	b.n	8003f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f1e:	d140      	bne.n	8003fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e03d      	b.n	8003fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2e:	d121      	bne.n	8003f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d837      	bhi.n	8003fa6 <DMA_CheckFifoParam+0xda>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <DMA_CheckFifoParam+0x70>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f53 	.word	0x08003f53
 8003f44:	08003f4d 	.word	0x08003f4d
 8003f48:	08003f65 	.word	0x08003f65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f50:	e030      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d025      	beq.n	8003faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f62:	e022      	b.n	8003faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f6c:	d11f      	bne.n	8003fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f72:	e01c      	b.n	8003fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d903      	bls.n	8003f82 <DMA_CheckFifoParam+0xb6>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f80:	e018      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
      break;
 8003f86:	e015      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      break;
 8003f98:	e00b      	b.n	8003fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e00a      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e008      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e006      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop

08003fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	; 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e16b      	b.n	80042b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 815a 	bne.w	80042b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d005      	beq.n	8004016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004012:	2b02      	cmp	r3, #2
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d017      	beq.n	80040b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d123      	bne.n	8004108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80b4 	beq.w	80042b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b60      	ldr	r3, [pc, #384]	; (80042d0 <HAL_GPIO_Init+0x30c>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a5f      	ldr	r2, [pc, #380]	; (80042d0 <HAL_GPIO_Init+0x30c>)
 8004154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b5d      	ldr	r3, [pc, #372]	; (80042d0 <HAL_GPIO_Init+0x30c>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004166:	4a5b      	ldr	r2, [pc, #364]	; (80042d4 <HAL_GPIO_Init+0x310>)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a52      	ldr	r2, [pc, #328]	; (80042d8 <HAL_GPIO_Init+0x314>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02b      	beq.n	80041ea <HAL_GPIO_Init+0x226>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a51      	ldr	r2, [pc, #324]	; (80042dc <HAL_GPIO_Init+0x318>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d025      	beq.n	80041e6 <HAL_GPIO_Init+0x222>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a50      	ldr	r2, [pc, #320]	; (80042e0 <HAL_GPIO_Init+0x31c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <HAL_GPIO_Init+0x21e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4f      	ldr	r2, [pc, #316]	; (80042e4 <HAL_GPIO_Init+0x320>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d019      	beq.n	80041de <HAL_GPIO_Init+0x21a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4e      	ldr	r2, [pc, #312]	; (80042e8 <HAL_GPIO_Init+0x324>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_Init+0x216>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4d      	ldr	r2, [pc, #308]	; (80042ec <HAL_GPIO_Init+0x328>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00d      	beq.n	80041d6 <HAL_GPIO_Init+0x212>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4c      	ldr	r2, [pc, #304]	; (80042f0 <HAL_GPIO_Init+0x32c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_Init+0x20e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4b      	ldr	r2, [pc, #300]	; (80042f4 <HAL_GPIO_Init+0x330>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_GPIO_Init+0x20a>
 80041ca:	2307      	movs	r3, #7
 80041cc:	e00e      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041ce:	2308      	movs	r3, #8
 80041d0:	e00c      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041d2:	2306      	movs	r3, #6
 80041d4:	e00a      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e008      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041da:	2304      	movs	r3, #4
 80041dc:	e006      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041de:	2303      	movs	r3, #3
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041ea:	2300      	movs	r3, #0
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f002 0203 	and.w	r2, r2, #3
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	4093      	lsls	r3, r2
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fc:	4935      	ldr	r1, [pc, #212]	; (80042d4 <HAL_GPIO_Init+0x310>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420a:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <HAL_GPIO_Init+0x334>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800422e:	4a32      	ldr	r2, [pc, #200]	; (80042f8 <HAL_GPIO_Init+0x334>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004234:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <HAL_GPIO_Init+0x334>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004258:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <HAL_GPIO_Init+0x334>)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <HAL_GPIO_Init+0x334>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <HAL_GPIO_Init+0x334>)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_GPIO_Init+0x334>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ac:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <HAL_GPIO_Init+0x334>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f ae90 	bls.w	8003fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3724      	adds	r7, #36	; 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40021400 	.word	0x40021400
 80042f0:	40021800 	.word	0x40021800
 80042f4:	40021c00 	.word	0x40021c00
 80042f8:	40013c00 	.word	0x40013c00

080042fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
 8004308:	4613      	mov	r3, r2
 800430a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800430c:	787b      	ldrb	r3, [r7, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004318:	e003      	b.n	8004322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800431a:	887b      	ldrh	r3, [r7, #2]
 800431c:	041a      	lsls	r2, r3, #16
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	619a      	str	r2, [r3, #24]
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e12b      	b.n	800459a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fe fb5a 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004394:	f002 fa5c 	bl	8006850 <HAL_RCC_GetPCLK1Freq>
 8004398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a81      	ldr	r2, [pc, #516]	; (80045a4 <HAL_I2C_Init+0x274>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d807      	bhi.n	80043b4 <HAL_I2C_Init+0x84>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a80      	ldr	r2, [pc, #512]	; (80045a8 <HAL_I2C_Init+0x278>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e006      	b.n	80043c2 <HAL_I2C_Init+0x92>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a7d      	ldr	r2, [pc, #500]	; (80045ac <HAL_I2C_Init+0x27c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bf94      	ite	ls
 80043bc:	2301      	movls	r3, #1
 80043be:	2300      	movhi	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0e7      	b.n	800459a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a78      	ldr	r2, [pc, #480]	; (80045b0 <HAL_I2C_Init+0x280>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <HAL_I2C_Init+0x274>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <HAL_I2C_Init+0xd4>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3301      	adds	r3, #1
 8004402:	e009      	b.n	8004418 <HAL_I2C_Init+0xe8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_I2C_Init+0x284>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	3301      	adds	r3, #1
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800442a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	495c      	ldr	r1, [pc, #368]	; (80045a4 <HAL_I2C_Init+0x274>)
 8004434:	428b      	cmp	r3, r1
 8004436:	d819      	bhi.n	800446c <HAL_I2C_Init+0x13c>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1e59      	subs	r1, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	fbb1 f3f3 	udiv	r3, r1, r3
 8004446:	1c59      	adds	r1, r3, #1
 8004448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800444c:	400b      	ands	r3, r1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_I2C_Init+0x138>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e59      	subs	r1, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004466:	e051      	b.n	800450c <HAL_I2C_Init+0x1dc>
 8004468:	2304      	movs	r3, #4
 800446a:	e04f      	b.n	800450c <HAL_I2C_Init+0x1dc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d111      	bne.n	8004498 <HAL_I2C_Init+0x168>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e012      	b.n	80044be <HAL_I2C_Init+0x18e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e58      	subs	r0, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	0099      	lsls	r1, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Init+0x196>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_I2C_Init+0x1dc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10e      	bne.n	80044ec <HAL_I2C_Init+0x1bc>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e58      	subs	r0, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	440b      	add	r3, r1
 80044dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Init+0x1dc>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e58      	subs	r0, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	0099      	lsls	r1, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	6809      	ldr	r1, [r1, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800453a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6911      	ldr	r1, [r2, #16]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	000186a0 	.word	0x000186a0
 80045a8:	001e847f 	.word	0x001e847f
 80045ac:	003d08ff 	.word	0x003d08ff
 80045b0:	431bde83 	.word	0x431bde83
 80045b4:	10624dd3 	.word	0x10624dd3

080045b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d003      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x38>
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	f040 80c1 	bne.w	8004772 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10d      	bne.n	8004626 <HAL_I2C_EV_IRQHandler+0x6e>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004610:	d003      	beq.n	800461a <HAL_I2C_EV_IRQHandler+0x62>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004618:	d101      	bne.n	800461e <HAL_I2C_EV_IRQHandler+0x66>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x68>
 800461e:	2300      	movs	r3, #0
 8004620:	2b01      	cmp	r3, #1
 8004622:	f000 8132 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_I2C_EV_IRQHandler+0x92>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	0a5b      	lsrs	r3, r3, #9
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d006      	beq.n	800464a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 fc7b 	bl	8005f38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fd83 	bl	800514e <I2C_Master_SB>
 8004648:	e092      	b.n	8004770 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_I2C_EV_IRQHandler+0xb2>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	0a5b      	lsrs	r3, r3, #9
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fdf9 	bl	800525a <I2C_Master_ADD10>
 8004668:	e082      	b.n	8004770 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0xd2>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	0a5b      	lsrs	r3, r3, #9
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fe13 	bl	80052ae <I2C_Master_ADDR>
 8004688:	e072      	b.n	8004770 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d03b      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a4:	f000 80f3 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	09db      	lsrs	r3, r3, #7
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9f3 	bl	8004ab8 <I2C_MasterTransmit_TXE>
 80046d2:	e04d      	b.n	8004770 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80d6 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80cf 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b21      	cmp	r3, #33	; 0x21
 80046f4:	d103      	bne.n	80046fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa7a 	bl	8004bf0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fc:	e0c7      	b.n	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	f040 80c4 	bne.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fae8 	bl	8004cdc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470c:	e0bf      	b.n	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471c:	f000 80b7 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00f      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x194>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	0a9b      	lsrs	r3, r3, #10
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x194>
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fb5d 	bl	8004e04 <I2C_MasterReceive_RXNE>
 800474a:	e011      	b.n	8004770 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 809a 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a5b      	lsrs	r3, r3, #9
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8093 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fc06 	bl	8004f7a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800476e:	e08e      	b.n	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004770:	e08d      	b.n	800488e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e007      	b.n	8004794 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d012      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x20e>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	0a5b      	lsrs	r3, r3, #9
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00c      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 ffc4 	bl	800574c <I2C_Slave_ADDR>
 80047c4:	e066      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0x22e>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fffe 	bl	80057e0 <I2C_Slave_STOPF>
 80047e4:	e056      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047e6:	7bbb      	ldrb	r3, [r7, #14]
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d002      	beq.n	80047f2 <HAL_I2C_EV_IRQHandler+0x23a>
 80047ec:	7bbb      	ldrb	r3, [r7, #14]
 80047ee:	2b29      	cmp	r3, #41	; 0x29
 80047f0:	d125      	bne.n	800483e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	09db      	lsrs	r3, r3, #7
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00f      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x266>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	0a9b      	lsrs	r3, r3, #10
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x266>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 feda 	bl	80055d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800481c:	e039      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d033      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x2da>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	0a5b      	lsrs	r3, r3, #9
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d02d      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 ff07 	bl	800564a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483c:	e029      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00f      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x2b2>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	0a9b      	lsrs	r3, r3, #10
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 ff12 	bl	800568c <I2C_SlaveReceive_RXNE>
 8004868:	e014      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00e      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 ff40 	bl	8005708 <I2C_SlaveReceive_BTF>
 8004888:	e004      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004892:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b08a      	sub	sp, #40	; 0x28
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <HAL_I2C_ER_IRQHandler+0x4e>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	0a5b      	lsrs	r3, r3, #9
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <HAL_I2C_ER_IRQHandler+0x78>
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	f043 0302 	orr.w	r3, r3, #2
 8004906:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004910:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	0a9b      	lsrs	r3, r3, #10
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d03f      	beq.n	800499e <HAL_I2C_ER_IRQHandler+0x104>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d039      	beq.n	800499e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800492a:	7efb      	ldrb	r3, [r7, #27]
 800492c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004944:	7ebb      	ldrb	r3, [r7, #26]
 8004946:	2b20      	cmp	r3, #32
 8004948:	d112      	bne.n	8004970 <HAL_I2C_ER_IRQHandler+0xd6>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10f      	bne.n	8004970 <HAL_I2C_ER_IRQHandler+0xd6>
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	2b21      	cmp	r3, #33	; 0x21
 8004954:	d008      	beq.n	8004968 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	2b29      	cmp	r3, #41	; 0x29
 800495a:	d005      	beq.n	8004968 <HAL_I2C_ER_IRQHandler+0xce>
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	2b28      	cmp	r3, #40	; 0x28
 8004960:	d106      	bne.n	8004970 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b21      	cmp	r3, #33	; 0x21
 8004966:	d103      	bne.n	8004970 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 f869 	bl	8005a40 <I2C_Slave_AF>
 800496e:	e016      	b.n	800499e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004978:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004982:	7efb      	ldrb	r3, [r7, #27]
 8004984:	2b10      	cmp	r3, #16
 8004986:	d002      	beq.n	800498e <HAL_I2C_ER_IRQHandler+0xf4>
 8004988:	7efb      	ldrb	r3, [r7, #27]
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d107      	bne.n	800499e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	0adb      	lsrs	r3, r3, #11
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <HAL_I2C_ER_IRQHandler+0x12e>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80049c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f001 f8a0 	bl	8005b20 <I2C_ITError>
  }
}
 80049e0:	bf00      	nop
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
 8004a44:	4613      	mov	r3, r2
 8004a46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d150      	bne.n	8004b80 <I2C_MasterTransmit_TXE+0xc8>
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b21      	cmp	r3, #33	; 0x21
 8004ae2:	d14d      	bne.n	8004b80 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d01d      	beq.n	8004b26 <I2C_MasterTransmit_TXE+0x6e>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d01a      	beq.n	8004b26 <I2C_MasterTransmit_TXE+0x6e>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af6:	d016      	beq.n	8004b26 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2211      	movs	r2, #17
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff ff62 	bl	80049e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b24:	e060      	b.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b34:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b44:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d107      	bne.n	8004b70 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff7d 	bl	8004a68 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6e:	e03b      	b.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ff35 	bl	80049e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b7e:	e033      	b.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b21      	cmp	r3, #33	; 0x21
 8004b84:	d005      	beq.n	8004b92 <I2C_MasterTransmit_TXE+0xda>
 8004b86:	7bbb      	ldrb	r3, [r7, #14]
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d12d      	bne.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b22      	cmp	r3, #34	; 0x22
 8004b90:	d12a      	bne.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d108      	bne.n	8004bae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004baa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bac:	e01c      	b.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d103      	bne.n	8004bc2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f88e 	bl	8004cdc <I2C_MemoryTransmit_TXE_BTF>
}
 8004bc0:	e012      	b.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	781a      	ldrb	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004be6:	e7ff      	b.n	8004be8 <I2C_MasterTransmit_TXE+0x130>
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b21      	cmp	r3, #33	; 0x21
 8004c08:	d164      	bne.n	8004cd4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d012      	beq.n	8004c3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c38:	e04c      	b.n	8004cd4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d01d      	beq.n	8004c7c <I2C_MasterTransmit_BTF+0x8c>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d01a      	beq.n	8004c7c <I2C_MasterTransmit_BTF+0x8c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c4c:	d016      	beq.n	8004c7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2211      	movs	r2, #17
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff feb7 	bl	80049e8 <HAL_I2C_MasterTxCpltCallback>
}
 8004c7a:	e02b      	b.n	8004cd4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d107      	bne.n	8004cc6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fed2 	bl	8004a68 <HAL_I2C_MemTxCpltCallback>
}
 8004cc4:	e006      	b.n	8004cd4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fe8a 	bl	80049e8 <HAL_I2C_MasterTxCpltCallback>
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11d      	bne.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10b      	bne.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d12:	e073      	b.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	121b      	asrs	r3, r3, #8
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d2e:	e065      	b.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10b      	bne.n	8004d50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d4e:	e055      	b.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d151      	bne.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b22      	cmp	r3, #34	; 0x22
 8004d5c:	d10d      	bne.n	8004d7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d78:	e040      	b.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b21      	cmp	r3, #33	; 0x21
 8004d88:	d112      	bne.n	8004db0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dae:	e025      	b.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d120      	bne.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b21      	cmp	r3, #33	; 0x21
 8004dbe:	d11d      	bne.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fe36 	bl	8004a68 <HAL_I2C_MemTxCpltCallback>
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b22      	cmp	r3, #34	; 0x22
 8004e16:	f040 80ac 	bne.w	8004f72 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d921      	bls.n	8004e6c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	f040 808c 	bne.w	8004f72 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e6a:	e082      	b.n	8004f72 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d075      	beq.n	8004f60 <I2C_MasterReceive_RXNE+0x15c>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d002      	beq.n	8004e80 <I2C_MasterReceive_RXNE+0x7c>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d16f      	bne.n	8004f60 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f827 	bl	8005ed4 <I2C_WaitOnSTOPRequestThroughIT>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d142      	bne.n	8004f12 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eaa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d10a      	bne.n	8004efc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fdc1 	bl	8004a7c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004efa:	e03a      	b.n	8004f72 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2212      	movs	r2, #18
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fd76 	bl	80049fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f10:	e02f      	b.n	8004f72 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f20:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fd99 	bl	8004a90 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f5e:	e008      	b.n	8004f72 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6e:	605a      	str	r2, [r3, #4]
}
 8004f70:	e7ff      	b.n	8004f72 <I2C_MasterReceive_RXNE+0x16e>
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d11b      	bne.n	8004fca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fc8:	e0bd      	b.n	8005146 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d129      	bne.n	8005028 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d00a      	beq.n	8005000 <I2C_MasterReceive_BTF+0x86>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d007      	beq.n	8005000 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005026:	e08e      	b.n	8005146 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d176      	bne.n	8005120 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d002      	beq.n	800503e <I2C_MasterReceive_BTF+0xc4>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b10      	cmp	r3, #16
 800503c:	d108      	bne.n	8005050 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e019      	b.n	8005084 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d002      	beq.n	800505c <I2C_MasterReceive_BTF+0xe2>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d108      	bne.n	800506e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e00a      	b.n	8005084 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b10      	cmp	r3, #16
 8005072:	d007      	beq.n	8005084 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005082:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d10a      	bne.n	800510a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff fcba 	bl	8004a7c <HAL_I2C_MemRxCpltCallback>
}
 8005108:	e01d      	b.n	8005146 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2212      	movs	r2, #18
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fc6f 	bl	80049fc <HAL_I2C_MasterRxCpltCallback>
}
 800511e:	e012      	b.n	8005146 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d117      	bne.n	8005192 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800517a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800517c:	e067      	b.n	800524e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
}
 8005190:	e05d      	b.n	800524e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519a:	d133      	bne.n	8005204 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b21      	cmp	r3, #33	; 0x21
 80051a6:	d109      	bne.n	80051bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e008      	b.n	80051ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <I2C_Master_SB+0x92>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d108      	bne.n	80051f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d032      	beq.n	800524e <I2C_Master_SB+0x100>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02d      	beq.n	800524e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005200:	605a      	str	r2, [r3, #4]
}
 8005202:	e024      	b.n	800524e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10e      	bne.n	800522a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	b29b      	uxth	r3, r3
 8005212:	11db      	asrs	r3, r3, #7
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f063 030f 	orn	r3, r3, #15
 8005220:	b2da      	uxtb	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]
}
 8005228:	e011      	b.n	800524e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10d      	bne.n	800524e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	b29b      	uxth	r3, r3
 8005238:	11db      	asrs	r3, r3, #7
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0306 	and.w	r3, r3, #6
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f063 030e 	orn	r3, r3, #14
 8005246:	b2da      	uxtb	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	611a      	str	r2, [r3, #16]
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	b2da      	uxtb	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <I2C_Master_ADD10+0x26>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d108      	bne.n	8005292 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <I2C_Master_ADD10+0x48>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a0:	605a      	str	r2, [r3, #4]
  }
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b091      	sub	sp, #68	; 0x44
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b22      	cmp	r3, #34	; 0x22
 80052d6:	f040 8169 	bne.w	80055ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <I2C_Master_ADDR+0x54>
 80052e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d10b      	bne.n	8005302 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ea:	2300      	movs	r3, #0
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	e160      	b.n	80055c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	2b00      	cmp	r3, #0
 8005308:	d11d      	bne.n	8005346 <I2C_Master_ADDR+0x98>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005312:	d118      	bne.n	8005346 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005338:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	651a      	str	r2, [r3, #80]	; 0x50
 8005344:	e13e      	b.n	80055c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d113      	bne.n	8005378 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e115      	b.n	80055a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	f040 808a 	bne.w	8005498 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800538a:	d137      	bne.n	80053fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053aa:	d113      	bne.n	80053d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	e0e7      	b.n	80055a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d4:	2300      	movs	r3, #0
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	623b      	str	r3, [r7, #32]
 80053e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e0d3      	b.n	80055a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d02e      	beq.n	8005460 <I2C_Master_ADDR+0x1b2>
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b20      	cmp	r3, #32
 8005406:	d02b      	beq.n	8005460 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b12      	cmp	r3, #18
 800540c:	d102      	bne.n	8005414 <I2C_Master_ADDR+0x166>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	2b01      	cmp	r3, #1
 8005412:	d125      	bne.n	8005460 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	2b04      	cmp	r3, #4
 8005418:	d00e      	beq.n	8005438 <I2C_Master_ADDR+0x18a>
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	2b02      	cmp	r3, #2
 800541e:	d00b      	beq.n	8005438 <I2C_Master_ADDR+0x18a>
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	2b10      	cmp	r3, #16
 8005424:	d008      	beq.n	8005438 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e007      	b.n	8005448 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005446:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	e0a1      	b.n	80055a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e085      	b.n	80055a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d14d      	bne.n	800553e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d016      	beq.n	80054d6 <I2C_Master_ADDR+0x228>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d013      	beq.n	80054d6 <I2C_Master_ADDR+0x228>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d010      	beq.n	80054d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e007      	b.n	80054e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f4:	d117      	bne.n	8005526 <I2C_Master_ADDR+0x278>
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054fc:	d00b      	beq.n	8005516 <I2C_Master_ADDR+0x268>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d008      	beq.n	8005516 <I2C_Master_ADDR+0x268>
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b08      	cmp	r3, #8
 8005508:	d005      	beq.n	8005516 <I2C_Master_ADDR+0x268>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	2b10      	cmp	r3, #16
 800550e:	d002      	beq.n	8005516 <I2C_Master_ADDR+0x268>
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	2b20      	cmp	r3, #32
 8005514:	d107      	bne.n	8005526 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005524:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	e032      	b.n	80055a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800554c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d117      	bne.n	800558e <I2C_Master_ADDR+0x2e0>
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005564:	d00b      	beq.n	800557e <I2C_Master_ADDR+0x2d0>
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b01      	cmp	r3, #1
 800556a:	d008      	beq.n	800557e <I2C_Master_ADDR+0x2d0>
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b08      	cmp	r3, #8
 8005570:	d005      	beq.n	800557e <I2C_Master_ADDR+0x2d0>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b10      	cmp	r3, #16
 8005576:	d002      	beq.n	800557e <I2C_Master_ADDR+0x2d0>
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b20      	cmp	r3, #32
 800557c:	d107      	bne.n	800558e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800558c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055aa:	e00b      	b.n	80055c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
}
 80055c2:	e7ff      	b.n	80055c4 <I2C_Master_ADDR+0x316>
 80055c4:	bf00      	nop
 80055c6:	3744      	adds	r7, #68	; 0x44
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02b      	beq.n	8005642 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d114      	bne.n	8005642 <I2C_SlaveTransmit_TXE+0x72>
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b29      	cmp	r3, #41	; 0x29
 800561c:	d111      	bne.n	8005642 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2228      	movs	r2, #40	; 0x28
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff f9e7 	bl	8004a10 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d011      	beq.n	8005680 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d02c      	beq.n	8005700 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d114      	bne.n	8005700 <I2C_SlaveReceive_RXNE+0x74>
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b2a      	cmp	r3, #42	; 0x2a
 80056da:	d111      	bne.n	8005700 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2222      	movs	r2, #34	; 0x22
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2228      	movs	r2, #40	; 0x28
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff f992 	bl	8004a24 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d012      	beq.n	8005740 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005766:	2b28      	cmp	r3, #40	; 0x28
 8005768:	d127      	bne.n	80057ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005778:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	09db      	lsrs	r3, r3, #7
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	81bb      	strh	r3, [r7, #12]
 800579c:	e002      	b.n	80057a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057ac:	89ba      	ldrh	r2, [r7, #12]
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff f940 	bl	8004a38 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057b8:	e00e      	b.n	80057d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583c:	d172      	bne.n	8005924 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b22      	cmp	r3, #34	; 0x22
 8005842:	d002      	beq.n	800584a <I2C_Slave_STOPF+0x6a>
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b2a      	cmp	r3, #42	; 0x2a
 8005848:	d135      	bne.n	80058b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0204 	orr.w	r2, r3, #4
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800587c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fade 	bl	8003e44 <HAL_DMA_GetState>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d049      	beq.n	8005922 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	4a69      	ldr	r2, [pc, #420]	; (8005a38 <I2C_Slave_STOPF+0x258>)
 8005894:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe f926 	bl	8003aec <HAL_DMA_Abort_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03d      	beq.n	8005922 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058b0:	4610      	mov	r0, r2
 80058b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058b4:	e035      	b.n	8005922 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f043 0204 	orr.w	r2, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe faa8 	bl	8003e44 <HAL_DMA_GetState>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d014      	beq.n	8005924 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	4a4e      	ldr	r2, [pc, #312]	; (8005a38 <I2C_Slave_STOPF+0x258>)
 8005900:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe f8f0 	bl	8003aec <HAL_DMA_Abort_IT>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800591c:	4610      	mov	r0, r2
 800591e:	4798      	blx	r3
 8005920:	e000      	b.n	8005924 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005922:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d03e      	beq.n	80059ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d112      	bne.n	8005962 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d112      	bne.n	8005996 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f043 0204 	orr.w	r2, r3, #4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f8b3 	bl	8005b20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059ba:	e039      	b.n	8005a30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b2a      	cmp	r3, #42	; 0x2a
 80059c0:	d109      	bne.n	80059d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2228      	movs	r2, #40	; 0x28
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff f827 	bl	8004a24 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b28      	cmp	r3, #40	; 0x28
 80059e0:	d111      	bne.n	8005a06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <I2C_Slave_STOPF+0x25c>)
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff f828 	bl	8004a54 <HAL_I2C_ListenCpltCallback>
}
 8005a04:	e014      	b.n	8005a30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	2b22      	cmp	r3, #34	; 0x22
 8005a0c:	d002      	beq.n	8005a14 <I2C_Slave_STOPF+0x234>
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b22      	cmp	r3, #34	; 0x22
 8005a12:	d10d      	bne.n	8005a30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fe fffa 	bl	8004a24 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	08005d85 	.word	0x08005d85
 8005a3c:	ffff0000 	.word	0xffff0000

08005a40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d002      	beq.n	8005a62 <I2C_Slave_AF+0x22>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d129      	bne.n	8005ab6 <I2C_Slave_AF+0x76>
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b28      	cmp	r3, #40	; 0x28
 8005a66:	d126      	bne.n	8005ab6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a2c      	ldr	r2, [pc, #176]	; (8005b1c <I2C_Slave_AF+0xdc>)
 8005a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fe ffd0 	bl	8004a54 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ab4:	e02e      	b.n	8005b14 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b21      	cmp	r3, #33	; 0x21
 8005aba:	d126      	bne.n	8005b0a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <I2C_Slave_AF+0xdc>)
 8005ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2221      	movs	r2, #33	; 0x21
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ae6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005af0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b00:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fe ff84 	bl	8004a10 <HAL_I2C_SlaveTxCpltCallback>
}
 8005b08:	e004      	b.n	8005b14 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b12:	615a      	str	r2, [r3, #20]
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	ffff0000 	.word	0xffff0000

08005b20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d002      	beq.n	8005b44 <I2C_ITError+0x24>
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d10a      	bne.n	8005b5a <I2C_ITError+0x3a>
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b22      	cmp	r3, #34	; 0x22
 8005b48:	d107      	bne.n	8005b5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b60:	2b28      	cmp	r3, #40	; 0x28
 8005b62:	d107      	bne.n	8005b74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2228      	movs	r2, #40	; 0x28
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b72:	e015      	b.n	8005ba0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d00a      	beq.n	8005b9a <I2C_ITError+0x7a>
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b60      	cmp	r3, #96	; 0x60
 8005b88:	d007      	beq.n	8005b9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bae:	d162      	bne.n	8005c76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bbe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d020      	beq.n	8005c10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	4a6a      	ldr	r2, [pc, #424]	; (8005d7c <I2C_ITError+0x25c>)
 8005bd4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fd ff86 	bl	8003aec <HAL_DMA_Abort_IT>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8089 	beq.w	8005cfa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4798      	blx	r3
 8005c0e:	e074      	b.n	8005cfa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	4a59      	ldr	r2, [pc, #356]	; (8005d7c <I2C_ITError+0x25c>)
 8005c16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fd ff65 	bl	8003aec <HAL_DMA_Abort_IT>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d068      	beq.n	8005cfa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d10b      	bne.n	8005c4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c70:	4610      	mov	r0, r2
 8005c72:	4798      	blx	r3
 8005c74:	e041      	b.n	8005cfa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b60      	cmp	r3, #96	; 0x60
 8005c80:	d125      	bne.n	8005cce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d10b      	bne.n	8005cb6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fe feec 	bl	8004aa4 <HAL_I2C_AbortCpltCallback>
 8005ccc:	e015      	b.n	8005cfa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	d10b      	bne.n	8005cf4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fe fecb 	bl	8004a90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10e      	bne.n	8005d28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d113      	bne.n	8005d74 <I2C_ITError+0x254>
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b28      	cmp	r3, #40	; 0x28
 8005d50:	d110      	bne.n	8005d74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <I2C_ITError+0x260>)
 8005d56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fe fe70 	bl	8004a54 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	08005d85 	.word	0x08005d85
 8005d80:	ffff0000 	.word	0xffff0000

08005d84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d9e:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <I2C_DMAAbort+0x148>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	4a4a      	ldr	r2, [pc, #296]	; (8005ed0 <I2C_DMAAbort+0x14c>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	0a1a      	lsrs	r2, r3, #8
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00da      	lsls	r2, r3, #3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005dca:	e00a      	b.n	8005de2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de0:	d0ea      	beq.n	8005db8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	2200      	movs	r2, #0
 8005df0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	2200      	movs	r2, #0
 8005e00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	2200      	movs	r2, #0
 8005e26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	2200      	movs	r2, #0
 8005e36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b60      	cmp	r3, #96	; 0x60
 8005e52:	d10e      	bne.n	8005e72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2200      	movs	r2, #0
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f7fe fe1a 	bl	8004aa4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e70:	e027      	b.n	8005ec2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e72:	7cfb      	ldrb	r3, [r7, #19]
 8005e74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e78:	2b28      	cmp	r3, #40	; 0x28
 8005e7a:	d117      	bne.n	8005eac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2228      	movs	r2, #40	; 0x28
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eaa:	e007      	b.n	8005ebc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005ebc:	6978      	ldr	r0, [r7, #20]
 8005ebe:	f7fe fde7 	bl	8004a90 <HAL_I2C_ErrorCallback>
}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	2000000c 	.word	0x2000000c
 8005ed0:	14f8b589 	.word	0x14f8b589

08005ed4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ee0:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	0a1a      	lsrs	r2, r3, #8
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e008      	b.n	8005f24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f20:	d0e9      	beq.n	8005ef6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	2000000c 	.word	0x2000000c
 8005f34:	14f8b589 	.word	0x14f8b589

08005f38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f48:	d103      	bne.n	8005f52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f50:	e007      	b.n	8005f62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f5a:	d102      	bne.n	8005f62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e267      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d075      	beq.n	800607a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d00c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d112      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb2:	d10b      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05b      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d157      	bne.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e242      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x74>
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e01d      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCC_OscConfig+0x98>
 8005fee:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6c      	ldr	r2, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e00b      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8006008:	4b69      	ldr	r3, [pc, #420]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fd fb70 	bl	800370c <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006030:	f7fd fb6c 	bl	800370c <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	; 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e207      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0xc0>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fd fb5c 	bl	800370c <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fd fb58 	bl	800370c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e1f3      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d063      	beq.n	800614e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d116      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1c7      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4937      	ldr	r1, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	e03a      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fd fb11 	bl	800370c <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fd fb0d 	bl	800370c <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e1a8      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610c:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4925      	ldr	r1, [pc, #148]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	e015      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006122:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fd faf0 	bl	800370c <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006130:	f7fd faec 	bl	800370c <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e187      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d036      	beq.n	80061c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fd fad0 	bl	800370c <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006170:	f7fd facc 	bl	800370c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e167      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x200>
 800618e:	e01b      	b.n	80061c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006196:	f7fd fab9 	bl	800370c <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	e00e      	b.n	80061bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619e:	f7fd fab5 	bl	800370c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d907      	bls.n	80061bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e150      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ea      	bne.n	800619e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8097 	beq.w	8006304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b7d      	ldr	r3, [pc, #500]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	4a7c      	ldr	r2, [pc, #496]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	; 0x40
 80061f6:	4b7a      	ldr	r3, [pc, #488]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	4b77      	ldr	r3, [pc, #476]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d118      	bne.n	8006244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006212:	4b74      	ldr	r3, [pc, #464]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a73      	ldr	r2, [pc, #460]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621e:	f7fd fa75 	bl	800370c <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fd fa71 	bl	800370c <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e10c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006238:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <HAL_RCC_OscConfig+0x2ea>
 800624c:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a63      	ldr	r2, [pc, #396]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e01c      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b05      	cmp	r3, #5
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0x30c>
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a5e      	ldr	r2, [pc, #376]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
 800626e:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a5b      	ldr	r2, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800627c:	4b58      	ldr	r3, [pc, #352]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a57      	ldr	r2, [pc, #348]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	4a54      	ldr	r2, [pc, #336]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 0304 	bic.w	r3, r3, #4
 8006292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fd fa36 	bl	800370c <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fd fa32 	bl	800370c <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0cb      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RCC_OscConfig+0x334>
 80062c6:	e014      	b.n	80062f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c8:	f7fd fa20 	bl	800370c <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fd fa1c 	bl	800370c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0b5      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1ee      	bne.n	80062d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d105      	bne.n	8006304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f8:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	4a38      	ldr	r2, [pc, #224]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a1 	beq.w	8006450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b08      	cmp	r3, #8
 8006318:	d05c      	beq.n	80063d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d141      	bne.n	80063a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fd f9f0 	bl	800370c <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fd f9ec 	bl	800370c <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e087      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	3b01      	subs	r3, #1
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	491b      	ldr	r1, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fd f9c5 	bl	800370c <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006386:	f7fd f9c1 	bl	800370c <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e05c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x416>
 80063a4:	e054      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fd f9ae 	bl	800370c <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fd f9aa 	bl	800370c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e045      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x444>
 80063d2:	e03d      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d107      	bne.n	80063ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e038      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000
 80063e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x4ec>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d028      	beq.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006404:	429a      	cmp	r2, r3
 8006406:	d121      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d11a      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006424:	4293      	cmp	r3, r2
 8006426:	d111      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	3b01      	subs	r3, #1
 8006436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800

08006460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0cc      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b68      	ldr	r3, [pc, #416]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d90c      	bls.n	800649c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b65      	ldr	r3, [pc, #404]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b8      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a58      	ldr	r2, [pc, #352]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4a52      	ldr	r2, [pc, #328]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	494d      	ldr	r1, [pc, #308]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d044      	beq.n	8006580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d119      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e07f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d003      	beq.n	800651e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	2b03      	cmp	r3, #3
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651e:	4b3f      	ldr	r3, [pc, #252]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e067      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0203 	bic.w	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4934      	ldr	r1, [pc, #208]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006550:	f7fd f8dc 	bl	800370c <HAL_GetTick>
 8006554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	e00a      	b.n	800656e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006558:	f7fd f8d8 	bl	800370c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e04f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 020c 	and.w	r2, r3, #12
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d1eb      	bne.n	8006558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d20c      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b22      	ldr	r3, [pc, #136]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e032      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4916      	ldr	r1, [pc, #88]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065e6:	f000 f821 	bl	800662c <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490a      	ldr	r1, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x1c0>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1c8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd f83c 	bl	8003684 <HAL_InitTick>

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00
 800661c:	40023800 	.word	0x40023800
 8006620:	0800b2ac 	.word	0x0800b2ac
 8006624:	2000000c 	.word	0x2000000c
 8006628:	20000010 	.word	0x20000010

0800662c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b094      	sub	sp, #80	; 0x50
 8006632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	647b      	str	r3, [r7, #68]	; 0x44
 8006638:	2300      	movs	r3, #0
 800663a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800663c:	2300      	movs	r3, #0
 800663e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006644:	4b79      	ldr	r3, [pc, #484]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b08      	cmp	r3, #8
 800664e:	d00d      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x40>
 8006650:	2b08      	cmp	r3, #8
 8006652:	f200 80e1 	bhi.w	8006818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x34>
 800665a:	2b04      	cmp	r3, #4
 800665c:	d003      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x3a>
 800665e:	e0db      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b73      	ldr	r3, [pc, #460]	; (8006830 <HAL_RCC_GetSysClockFreq+0x204>)
 8006662:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006664:	e0db      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006666:	4b73      	ldr	r3, [pc, #460]	; (8006834 <HAL_RCC_GetSysClockFreq+0x208>)
 8006668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800666a:	e0d8      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800666c:	4b6f      	ldr	r3, [pc, #444]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006676:	4b6d      	ldr	r3, [pc, #436]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d063      	beq.n	800674a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006682:	4b6a      	ldr	r3, [pc, #424]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	2200      	movs	r2, #0
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
 800668c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	633b      	str	r3, [r7, #48]	; 0x30
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
 800669a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	0159      	lsls	r1, r3, #5
 80066ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b0:	0150      	lsls	r0, r2, #5
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4621      	mov	r1, r4
 80066b8:	1a51      	subs	r1, r2, r1
 80066ba:	6139      	str	r1, [r7, #16]
 80066bc:	4629      	mov	r1, r5
 80066be:	eb63 0301 	sbc.w	r3, r3, r1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066d0:	4659      	mov	r1, fp
 80066d2:	018b      	lsls	r3, r1, #6
 80066d4:	4651      	mov	r1, sl
 80066d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066da:	4651      	mov	r1, sl
 80066dc:	018a      	lsls	r2, r1, #6
 80066de:	4651      	mov	r1, sl
 80066e0:	ebb2 0801 	subs.w	r8, r2, r1
 80066e4:	4659      	mov	r1, fp
 80066e6:	eb63 0901 	sbc.w	r9, r3, r1
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fe:	4690      	mov	r8, r2
 8006700:	4699      	mov	r9, r3
 8006702:	4623      	mov	r3, r4
 8006704:	eb18 0303 	adds.w	r3, r8, r3
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	462b      	mov	r3, r5
 800670c:	eb49 0303 	adc.w	r3, r9, r3
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800671e:	4629      	mov	r1, r5
 8006720:	024b      	lsls	r3, r1, #9
 8006722:	4621      	mov	r1, r4
 8006724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006728:	4621      	mov	r1, r4
 800672a:	024a      	lsls	r2, r1, #9
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006732:	2200      	movs	r2, #0
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
 8006736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800673c:	f7f9 fd4c 	bl	80001d8 <__aeabi_uldivmod>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4613      	mov	r3, r2
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	e058      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	099b      	lsrs	r3, r3, #6
 8006750:	2200      	movs	r2, #0
 8006752:	4618      	mov	r0, r3
 8006754:	4611      	mov	r1, r2
 8006756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	2300      	movs	r3, #0
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	f04f 0000 	mov.w	r0, #0
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	0159      	lsls	r1, r3, #5
 8006772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006776:	0150      	lsls	r0, r2, #5
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4641      	mov	r1, r8
 800677e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006782:	4649      	mov	r1, r9
 8006784:	eb63 0b01 	sbc.w	fp, r3, r1
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800679c:	ebb2 040a 	subs.w	r4, r2, sl
 80067a0:	eb63 050b 	sbc.w	r5, r3, fp
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	00eb      	lsls	r3, r5, #3
 80067ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067b2:	00e2      	lsls	r2, r4, #3
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	4643      	mov	r3, r8
 80067ba:	18e3      	adds	r3, r4, r3
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	464b      	mov	r3, r9
 80067c0:	eb45 0303 	adc.w	r3, r5, r3
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067d2:	4629      	mov	r1, r5
 80067d4:	028b      	lsls	r3, r1, #10
 80067d6:	4621      	mov	r1, r4
 80067d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067dc:	4621      	mov	r1, r4
 80067de:	028a      	lsls	r2, r1, #10
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e6:	2200      	movs	r2, #0
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	61fa      	str	r2, [r7, #28]
 80067ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f0:	f7f9 fcf2 	bl	80001d8 <__aeabi_uldivmod>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4613      	mov	r3, r2
 80067fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	3301      	adds	r3, #1
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800680c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800680e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006816:	e002      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <HAL_RCC_GetSysClockFreq+0x204>)
 800681a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800681c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800681e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006820:	4618      	mov	r0, r3
 8006822:	3750      	adds	r7, #80	; 0x50
 8006824:	46bd      	mov	sp, r7
 8006826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	00f42400 	.word	0x00f42400
 8006834:	007a1200 	.word	0x007a1200

08006838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_RCC_GetHCLKFreq+0x14>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	2000000c 	.word	0x2000000c

08006850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006854:	f7ff fff0 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8006858:	4602      	mov	r2, r0
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	0a9b      	lsrs	r3, r3, #10
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	4903      	ldr	r1, [pc, #12]	; (8006874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006866:	5ccb      	ldrb	r3, [r1, r3]
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40023800 	.word	0x40023800
 8006874:	0800b2bc 	.word	0x0800b2bc

08006878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800687c:	f7ff ffdc 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8006880:	4602      	mov	r2, r0
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	0b5b      	lsrs	r3, r3, #13
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	4903      	ldr	r1, [pc, #12]	; (800689c <HAL_RCC_GetPCLK2Freq+0x24>)
 800688e:	5ccb      	ldrb	r3, [r1, r3]
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40023800 	.word	0x40023800
 800689c:	0800b2bc 	.word	0x0800b2bc

080068a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e07b      	b.n	80069aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d108      	bne.n	80068cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c2:	d009      	beq.n	80068d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	61da      	str	r2, [r3, #28]
 80068ca:	e005      	b.n	80068d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fc fad8 	bl	8002ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695c:	ea42 0103 	orr.w	r1, r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	f003 0104 	and.w	r1, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	f003 0210 	and.w	r2, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b088      	sub	sp, #32
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	4613      	mov	r3, r2
 80069c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_SPI_Transmit+0x22>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e126      	b.n	8006c22 <HAL_SPI_Transmit+0x270>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069dc:	f7fc fe96 	bl	800370c <HAL_GetTick>
 80069e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
 80069f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069f6:	e10b      	b.n	8006c10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <HAL_SPI_Transmit+0x52>
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a08:	e102      	b.n	8006c10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	88fa      	ldrh	r2, [r7, #6]
 8006a28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a50:	d10f      	bne.n	8006a72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d007      	beq.n	8006a90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a98:	d14b      	bne.n	8006b32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_SPI_Transmit+0xf6>
 8006aa2:	8afb      	ldrh	r3, [r7, #22]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d13e      	bne.n	8006b26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006acc:	e02b      	b.n	8006b26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d112      	bne.n	8006b02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b00:	e011      	b.n	8006b26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b02:	f7fc fe03 	bl	800370c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d803      	bhi.n	8006b1a <HAL_SPI_Transmit+0x168>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d102      	bne.n	8006b20 <HAL_SPI_Transmit+0x16e>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b24:	e074      	b.n	8006c10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1ce      	bne.n	8006ace <HAL_SPI_Transmit+0x11c>
 8006b30:	e04c      	b.n	8006bcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <HAL_SPI_Transmit+0x18e>
 8006b3a:	8afb      	ldrh	r3, [r7, #22]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d140      	bne.n	8006bc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	7812      	ldrb	r2, [r2, #0]
 8006b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b66:	e02c      	b.n	8006bc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d113      	bne.n	8006b9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b9c:	e011      	b.n	8006bc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b9e:	f7fc fdb5 	bl	800370c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d803      	bhi.n	8006bb6 <HAL_SPI_Transmit+0x204>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d102      	bne.n	8006bbc <HAL_SPI_Transmit+0x20a>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bc0:	e026      	b.n	8006c10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1cd      	bne.n	8006b68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fce9 	bl	80075a8 <SPI_EndRxTxTransaction>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e000      	b.n	8006c10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b088      	sub	sp, #32
 8006c2e:	af02      	add	r7, sp, #8
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	603b      	str	r3, [r7, #0]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c46:	d112      	bne.n	8006c6e <HAL_SPI_Receive+0x44>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10e      	bne.n	8006c6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2204      	movs	r2, #4
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c58:	88fa      	ldrh	r2, [r7, #6]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f8f1 	bl	8006e4c <HAL_SPI_TransmitReceive>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	e0ea      	b.n	8006e44 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_SPI_Receive+0x52>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e0e3      	b.n	8006e44 <HAL_SPI_Receive+0x21a>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c84:	f7fc fd42 	bl	800370c <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d002      	beq.n	8006c9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c96:	2302      	movs	r3, #2
 8006c98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c9a:	e0ca      	b.n	8006e32 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_SPI_Receive+0x7e>
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cac:	e0c1      	b.n	8006e32 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf4:	d10f      	bne.n	8006d16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d007      	beq.n	8006d34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d162      	bne.n	8006e02 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d3c:	e02e      	b.n	8006d9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d115      	bne.n	8006d78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f103 020c 	add.w	r2, r3, #12
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	7812      	ldrb	r2, [r2, #0]
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d76:	e011      	b.n	8006d9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d78:	f7fc fcc8 	bl	800370c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d803      	bhi.n	8006d90 <HAL_SPI_Receive+0x166>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d102      	bne.n	8006d96 <HAL_SPI_Receive+0x16c>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d9a:	e04a      	b.n	8006e32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1cb      	bne.n	8006d3e <HAL_SPI_Receive+0x114>
 8006da6:	e031      	b.n	8006e0c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d113      	bne.n	8006dde <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	b292      	uxth	r2, r2
 8006dc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ddc:	e011      	b.n	8006e02 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dde:	f7fc fc95 	bl	800370c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d803      	bhi.n	8006df6 <HAL_SPI_Receive+0x1cc>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d102      	bne.n	8006dfc <HAL_SPI_Receive+0x1d2>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e00:	e017      	b.n	8006e32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1cd      	bne.n	8006da8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fb63 	bl	80074dc <SPI_EndRxTransaction>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	75fb      	strb	r3, [r7, #23]
 8006e2e:	e000      	b.n	8006e32 <HAL_SPI_Receive+0x208>
  }

error :
 8006e30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x26>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e18a      	b.n	8007188 <HAL_SPI_TransmitReceive+0x33c>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e7a:	f7fc fc47 	bl	800370c <HAL_GetTick>
 8006e7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e90:	887b      	ldrh	r3, [r7, #2]
 8006e92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d00f      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x70>
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea2:	d107      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x68>
 8006eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d003      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006eba:	e15b      	b.n	8007174 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x82>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x82>
 8006ec8:	887b      	ldrh	r3, [r7, #2]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ed4:	e14e      	b.n	8007174 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d003      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2205      	movs	r2, #5
 8006ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	887a      	ldrh	r2, [r7, #2]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	887a      	ldrh	r2, [r7, #2]
 8006f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	887a      	ldrh	r2, [r7, #2]
 8006f0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	887a      	ldrh	r2, [r7, #2]
 8006f12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d007      	beq.n	8006f3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f46:	d178      	bne.n	800703a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x10a>
 8006f50:	8b7b      	ldrh	r3, [r7, #26]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d166      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	881a      	ldrh	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	1c9a      	adds	r2, r3, #2
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f7a:	e053      	b.n	8007024 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d11b      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x176>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <HAL_SPI_TransmitReceive+0x176>
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d113      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	881a      	ldrh	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d119      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x1b8>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d014      	beq.n	8007004 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007000:	2301      	movs	r3, #1
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007004:	f7fc fb82 	bl	800370c <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007010:	429a      	cmp	r2, r3
 8007012:	d807      	bhi.n	8007024 <HAL_SPI_TransmitReceive+0x1d8>
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d003      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007022:	e0a7      	b.n	8007174 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1a6      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x130>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1a1      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x130>
 8007038:	e07c      	b.n	8007134 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x1fc>
 8007042:	8b7b      	ldrh	r3, [r7, #26]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d16b      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	7812      	ldrb	r2, [r2, #0]
 8007054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800706e:	e057      	b.n	8007120 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d11c      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x26c>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d017      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0x26c>
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2b01      	cmp	r3, #1
 800708c:	d114      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d119      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x2ae>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d014      	beq.n	80070fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070f6:	2301      	movs	r3, #1
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070fa:	f7fc fb07 	bl	800370c <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007106:	429a      	cmp	r2, r3
 8007108:	d803      	bhi.n	8007112 <HAL_SPI_TransmitReceive+0x2c6>
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d102      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2cc>
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800711e:	e029      	b.n	8007174 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1a2      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x224>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d19d      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fa35 	bl	80075a8 <SPI_EndRxTxTransaction>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d006      	beq.n	8007152 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007150:	e010      	b.n	8007174 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	e000      	b.n	8007174 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007172:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007184:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007188:	4618      	mov	r0, r3
 800718a:	3730      	adds	r7, #48	; 0x30
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	099b      	lsrs	r3, r3, #6
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10f      	bne.n	80071d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	099b      	lsrs	r3, r3, #6
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
    return;
 80071d2:	e0d7      	b.n	8007384 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <HAL_SPI_IRQHandler+0x66>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	09db      	lsrs	r3, r3, #7
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
    return;
 80071f4:	e0c6      	b.n	8007384 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10c      	bne.n	800721c <HAL_SPI_IRQHandler+0x8c>
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	099b      	lsrs	r3, r3, #6
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80b4 	beq.w	8007384 <HAL_SPI_IRQHandler+0x1f4>
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80ad 	beq.w	8007384 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	099b      	lsrs	r3, r3, #6
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d023      	beq.n	800727e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d011      	beq.n	8007266 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	e00b      	b.n	800727e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	693b      	ldr	r3, [r7, #16]
        return;
 800727c:	e082      	b.n	8007384 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d014      	beq.n	80072b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	f043 0201 	orr.w	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	0a1b      	lsrs	r3, r3, #8
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00c      	beq.n	80072da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	f043 0208 	orr.w	r2, r3, #8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072cc:	2300      	movs	r3, #0
 80072ce:	60bb      	str	r3, [r7, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d04f      	beq.n	8007382 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <HAL_SPI_IRQHandler+0x17e>
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d034      	beq.n	8007378 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0203 	bic.w	r2, r2, #3
 800731c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d011      	beq.n	800734a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	4a18      	ldr	r2, [pc, #96]	; (800738c <HAL_SPI_IRQHandler+0x1fc>)
 800732c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007332:	4618      	mov	r0, r3
 8007334:	f7fc fbda 	bl	8003aec <HAL_DMA_Abort_IT>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007356:	4a0d      	ldr	r2, [pc, #52]	; (800738c <HAL_SPI_IRQHandler+0x1fc>)
 8007358:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fbc4 	bl	8003aec <HAL_DMA_Abort_IT>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007376:	e003      	b.n	8007380 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f809 	bl	8007390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800737e:	e000      	b.n	8007382 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007380:	bf00      	nop
    return;
 8007382:	bf00      	nop
  }
}
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	080073a5 	.word	0x080073a5

08007390 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff ffe6 	bl	8007390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073dc:	f7fc f996 	bl	800370c <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	4413      	add	r3, r2
 80073ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073ec:	f7fc f98e 	bl	800370c <HAL_GetTick>
 80073f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073f2:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	015b      	lsls	r3, r3, #5
 80073f8:	0d1b      	lsrs	r3, r3, #20
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007402:	e054      	b.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740a:	d050      	beq.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800740c:	f7fc f97e 	bl	800370c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	429a      	cmp	r2, r3
 800741a:	d902      	bls.n	8007422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d13d      	bne.n	800749e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800743a:	d111      	bne.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007444:	d004      	beq.n	8007450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744e:	d107      	bne.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007468:	d10f      	bne.n	800748a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e017      	b.n	80074ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d19b      	bne.n	8007404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000000c 	.word	0x2000000c

080074dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f0:	d111      	bne.n	8007516 <SPI_EndRxTransaction+0x3a>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fa:	d004      	beq.n	8007506 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007504:	d107      	bne.n	8007516 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007514:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800751e:	d12a      	bne.n	8007576 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007528:	d012      	beq.n	8007550 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2200      	movs	r2, #0
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff ff49 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02d      	beq.n	800759c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007544:	f043 0220 	orr.w	r2, r3, #32
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e026      	b.n	800759e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	2101      	movs	r1, #1
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff ff36 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01a      	beq.n	800759c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e013      	b.n	800759e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	2101      	movs	r1, #1
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff ff23 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e000      	b.n	800759e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <SPI_EndRxTxTransaction+0x7c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1b      	ldr	r2, [pc, #108]	; (8007628 <SPI_EndRxTxTransaction+0x80>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	0d5b      	lsrs	r3, r3, #21
 80075c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075c4:	fb02 f303 	mul.w	r3, r2, r3
 80075c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d2:	d112      	bne.n	80075fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fef4 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f043 0220 	orr.w	r2, r3, #32
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e00f      	b.n	800761a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	3b01      	subs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d0f2      	beq.n	80075fa <SPI_EndRxTxTransaction+0x52>
 8007614:	e000      	b.n	8007618 <SPI_EndRxTxTransaction+0x70>
        break;
 8007616:	bf00      	nop
  }

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	2000000c 	.word	0x2000000c
 8007628:	165e9f81 	.word	0x165e9f81

0800762c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e041      	b.n	80076c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fb fe56 	bl	8003304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f000 fae0 	bl	8007c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d001      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e04e      	b.n	8007782 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a23      	ldr	r2, [pc, #140]	; (8007790 <HAL_TIM_Base_Start_IT+0xc4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d022      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770e:	d01d      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <HAL_TIM_Base_Start_IT+0xc8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d018      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <HAL_TIM_Base_Start_IT+0xcc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1c      	ldr	r2, [pc, #112]	; (800779c <HAL_TIM_Base_Start_IT+0xd0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d111      	bne.n	8007770 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b06      	cmp	r3, #6
 800775c:	d010      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0201 	orr.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776e:	e007      	b.n	8007780 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40000c00 	.word	0x40000c00
 80077a0:	40010400 	.word	0x40010400
 80077a4:	40014000 	.word	0x40014000
 80077a8:	40001800 	.word	0x40001800

080077ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e041      	b.n	8007842 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fb fd74 	bl	80032c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f000 fa20 	bl	8007c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b02      	cmp	r3, #2
 800785e:	d122      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b02      	cmp	r3, #2
 800786c:	d11b      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f06f 0202 	mvn.w	r2, #2
 8007876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f9b1 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 8007892:	e005      	b.n	80078a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f9a3 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f9b4 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d122      	bne.n	80078fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d11b      	bne.n	80078fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f06f 0204 	mvn.w	r2, #4
 80078ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f987 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 80078e6:	e005      	b.n	80078f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f979 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f98a 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b08      	cmp	r3, #8
 8007906:	d122      	bne.n	800794e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b08      	cmp	r3, #8
 8007914:	d11b      	bne.n	800794e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0208 	mvn.w	r2, #8
 800791e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f95d 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 800793a:	e005      	b.n	8007948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f94f 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f960 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b10      	cmp	r3, #16
 800795a:	d122      	bne.n	80079a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b10      	cmp	r3, #16
 8007968:	d11b      	bne.n	80079a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f06f 0210 	mvn.w	r2, #16
 8007972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2208      	movs	r2, #8
 8007978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f933 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 800798e:	e005      	b.n	800799c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f925 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f936 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10e      	bne.n	80079ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d107      	bne.n	80079ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f06f 0201 	mvn.w	r2, #1
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fb fbb3 	bl	8003134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d10e      	bne.n	80079fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d107      	bne.n	80079fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fbf1 	bl	80081dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d10e      	bne.n	8007a26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d107      	bne.n	8007a26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8fb 	bl	8007c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d10e      	bne.n	8007a52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d107      	bne.n	8007a52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f06f 0220 	mvn.w	r2, #32
 8007a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fbbb 	bl	80081c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e0ae      	b.n	8007bd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	f200 809f 	bhi.w	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ac5 	.word	0x08007ac5
 8007a94:	08007bc9 	.word	0x08007bc9
 8007a98:	08007bc9 	.word	0x08007bc9
 8007a9c:	08007bc9 	.word	0x08007bc9
 8007aa0:	08007b05 	.word	0x08007b05
 8007aa4:	08007bc9 	.word	0x08007bc9
 8007aa8:	08007bc9 	.word	0x08007bc9
 8007aac:	08007bc9 	.word	0x08007bc9
 8007ab0:	08007b47 	.word	0x08007b47
 8007ab4:	08007bc9 	.word	0x08007bc9
 8007ab8:	08007bc9 	.word	0x08007bc9
 8007abc:	08007bc9 	.word	0x08007bc9
 8007ac0:	08007b87 	.word	0x08007b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 f950 	bl	8007d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0208 	orr.w	r2, r2, #8
 8007ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0204 	bic.w	r2, r2, #4
 8007aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6999      	ldr	r1, [r3, #24]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	619a      	str	r2, [r3, #24]
      break;
 8007b02:	e064      	b.n	8007bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68b9      	ldr	r1, [r7, #8]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f9a0 	bl	8007e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6999      	ldr	r1, [r3, #24]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	021a      	lsls	r2, r3, #8
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	619a      	str	r2, [r3, #24]
      break;
 8007b44:	e043      	b.n	8007bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f9f5 	bl	8007f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69da      	ldr	r2, [r3, #28]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0208 	orr.w	r2, r2, #8
 8007b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0204 	bic.w	r2, r2, #4
 8007b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69d9      	ldr	r1, [r3, #28]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	61da      	str	r2, [r3, #28]
      break;
 8007b84:	e023      	b.n	8007bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fa49 	bl	8008024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69d9      	ldr	r1, [r3, #28]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	021a      	lsls	r2, r3, #8
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	61da      	str	r2, [r3, #28]
      break;
 8007bc6:	e002      	b.n	8007bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	75fb      	strb	r3, [r7, #23]
      break;
 8007bcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a40      	ldr	r2, [pc, #256]	; (8007d44 <TIM_Base_SetConfig+0x114>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4e:	d00f      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a3d      	ldr	r2, [pc, #244]	; (8007d48 <TIM_Base_SetConfig+0x118>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a3c      	ldr	r2, [pc, #240]	; (8007d4c <TIM_Base_SetConfig+0x11c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a3b      	ldr	r2, [pc, #236]	; (8007d50 <TIM_Base_SetConfig+0x120>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a3a      	ldr	r2, [pc, #232]	; (8007d54 <TIM_Base_SetConfig+0x124>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d108      	bne.n	8007c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a2f      	ldr	r2, [pc, #188]	; (8007d44 <TIM_Base_SetConfig+0x114>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d02b      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c90:	d027      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a2c      	ldr	r2, [pc, #176]	; (8007d48 <TIM_Base_SetConfig+0x118>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d023      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a2b      	ldr	r2, [pc, #172]	; (8007d4c <TIM_Base_SetConfig+0x11c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01f      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a2a      	ldr	r2, [pc, #168]	; (8007d50 <TIM_Base_SetConfig+0x120>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01b      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <TIM_Base_SetConfig+0x124>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d017      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a28      	ldr	r2, [pc, #160]	; (8007d58 <TIM_Base_SetConfig+0x128>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d013      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a27      	ldr	r2, [pc, #156]	; (8007d5c <TIM_Base_SetConfig+0x12c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00f      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a26      	ldr	r2, [pc, #152]	; (8007d60 <TIM_Base_SetConfig+0x130>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00b      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <TIM_Base_SetConfig+0x134>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d007      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <TIM_Base_SetConfig+0x138>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d003      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a23      	ldr	r2, [pc, #140]	; (8007d6c <TIM_Base_SetConfig+0x13c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d108      	bne.n	8007cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <TIM_Base_SetConfig+0x114>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_Base_SetConfig+0xf8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a0c      	ldr	r2, [pc, #48]	; (8007d54 <TIM_Base_SetConfig+0x124>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d103      	bne.n	8007d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	615a      	str	r2, [r3, #20]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40000400 	.word	0x40000400
 8007d4c:	40000800 	.word	0x40000800
 8007d50:	40000c00 	.word	0x40000c00
 8007d54:	40010400 	.word	0x40010400
 8007d58:	40014000 	.word	0x40014000
 8007d5c:	40014400 	.word	0x40014400
 8007d60:	40014800 	.word	0x40014800
 8007d64:	40001800 	.word	0x40001800
 8007d68:	40001c00 	.word	0x40001c00
 8007d6c:	40002000 	.word	0x40002000

08007d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f023 0302 	bic.w	r3, r3, #2
 8007db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <TIM_OC1_SetConfig+0xd8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d003      	beq.n	8007dd4 <TIM_OC1_SetConfig+0x64>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <TIM_OC1_SetConfig+0xdc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d10c      	bne.n	8007dee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f023 0308 	bic.w	r3, r3, #8
 8007dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f023 0304 	bic.w	r3, r3, #4
 8007dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <TIM_OC1_SetConfig+0xd8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC1_SetConfig+0x8e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a14      	ldr	r2, [pc, #80]	; (8007e4c <TIM_OC1_SetConfig+0xdc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d111      	bne.n	8007e22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	621a      	str	r2, [r3, #32]
}
 8007e3c:	bf00      	nop
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40010400 	.word	0x40010400

08007e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f023 0210 	bic.w	r2, r3, #16
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0320 	bic.w	r3, r3, #32
 8007e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a22      	ldr	r2, [pc, #136]	; (8007f34 <TIM_OC2_SetConfig+0xe4>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d003      	beq.n	8007eb8 <TIM_OC2_SetConfig+0x68>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a21      	ldr	r2, [pc, #132]	; (8007f38 <TIM_OC2_SetConfig+0xe8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10d      	bne.n	8007ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a17      	ldr	r2, [pc, #92]	; (8007f34 <TIM_OC2_SetConfig+0xe4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_OC2_SetConfig+0x94>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <TIM_OC2_SetConfig+0xe8>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d113      	bne.n	8007f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40010400 	.word	0x40010400

08007f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a21      	ldr	r2, [pc, #132]	; (800801c <TIM_OC3_SetConfig+0xe0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_OC3_SetConfig+0x66>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a20      	ldr	r2, [pc, #128]	; (8008020 <TIM_OC3_SetConfig+0xe4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d10d      	bne.n	8007fbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <TIM_OC3_SetConfig+0xe0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d003      	beq.n	8007fce <TIM_OC3_SetConfig+0x92>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a15      	ldr	r2, [pc, #84]	; (8008020 <TIM_OC3_SetConfig+0xe4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d113      	bne.n	8007ff6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	621a      	str	r2, [r3, #32]
}
 8008010:	bf00      	nop
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	40010000 	.word	0x40010000
 8008020:	40010400 	.word	0x40010400

08008024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800805a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800806e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	031b      	lsls	r3, r3, #12
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <TIM_OC4_SetConfig+0xa4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_OC4_SetConfig+0x68>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a11      	ldr	r2, [pc, #68]	; (80080cc <TIM_OC4_SetConfig+0xa8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d109      	bne.n	80080a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	019b      	lsls	r3, r3, #6
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40010400 	.word	0x40010400

080080d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e05a      	b.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a21      	ldr	r2, [pc, #132]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d022      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008134:	d01d      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1d      	ldr	r2, [pc, #116]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d018      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1b      	ldr	r2, [pc, #108]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d013      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a1a      	ldr	r2, [pc, #104]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00e      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a18      	ldr	r2, [pc, #96]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d009      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d004      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a15      	ldr	r2, [pc, #84]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d10c      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4313      	orrs	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40010000 	.word	0x40010000
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	40010400 	.word	0x40010400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40001800 	.word	0x40001800

080081c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e03f      	b.n	8008282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fb f948 	bl	80034ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2224      	movs	r2, #36	; 0x24
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f929 	bl	800848c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08a      	sub	sp, #40	; 0x28
 800828e:	af02      	add	r7, sp, #8
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	d17c      	bne.n	80083a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_UART_Transmit+0x2c>
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e075      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_UART_Transmit+0x3e>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e06e      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2221      	movs	r2, #33	; 0x21
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082de:	f7fb fa15 	bl	800370c <HAL_GetTick>
 80082e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d108      	bne.n	800830c <HAL_UART_Transmit+0x82>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e003      	b.n	8008314 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800831c:	e02a      	b.n	8008374 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	2180      	movs	r1, #128	; 0x80
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f840 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e036      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800834c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	3302      	adds	r3, #2
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	e007      	b.n	8008366 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	3301      	adds	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1cf      	bne.n	800831e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	2140      	movs	r1, #64	; 0x40
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f810 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e006      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e000      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083a4:	2302      	movs	r3, #2
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b090      	sub	sp, #64	; 0x40
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083be:	e050      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d04c      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0x30>
 80083ce:	f7fb f99d 	bl	800370c <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083da:	429a      	cmp	r2, r3
 80083dc:	d241      	bcs.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	330c      	adds	r3, #12
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	330c      	adds	r3, #12
 80083fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083fe:	637a      	str	r2, [r7, #52]	; 0x34
 8008400:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	613b      	str	r3, [r7, #16]
   return(result);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	63bb      	str	r3, [r7, #56]	; 0x38
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008432:	623a      	str	r2, [r7, #32]
 8008434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	69f9      	ldr	r1, [r7, #28]
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e00f      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4013      	ands	r3, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	429a      	cmp	r2, r3
 800847e:	d09f      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3740      	adds	r7, #64	; 0x40
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800848c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008490:	b0c0      	sub	sp, #256	; 0x100
 8008492:	af00      	add	r7, sp, #0
 8008494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	68d9      	ldr	r1, [r3, #12]
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	ea40 0301 	orr.w	r3, r0, r1
 80084b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084e4:	f021 010c 	bic.w	r1, r1, #12
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084f2:	430b      	orrs	r3, r1
 80084f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008506:	6999      	ldr	r1, [r3, #24]
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	ea40 0301 	orr.w	r3, r0, r1
 8008512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	4b8f      	ldr	r3, [pc, #572]	; (8008758 <UART_SetConfig+0x2cc>)
 800851c:	429a      	cmp	r2, r3
 800851e:	d005      	beq.n	800852c <UART_SetConfig+0xa0>
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b8d      	ldr	r3, [pc, #564]	; (800875c <UART_SetConfig+0x2d0>)
 8008528:	429a      	cmp	r2, r3
 800852a:	d104      	bne.n	8008536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800852c:	f7fe f9a4 	bl	8006878 <HAL_RCC_GetPCLK2Freq>
 8008530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008534:	e003      	b.n	800853e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008536:	f7fe f98b 	bl	8006850 <HAL_RCC_GetPCLK1Freq>
 800853a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800853e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008548:	f040 810c 	bne.w	8008764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800854c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008550:	2200      	movs	r2, #0
 8008552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800855a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800855e:	4622      	mov	r2, r4
 8008560:	462b      	mov	r3, r5
 8008562:	1891      	adds	r1, r2, r2
 8008564:	65b9      	str	r1, [r7, #88]	; 0x58
 8008566:	415b      	adcs	r3, r3
 8008568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800856a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800856e:	4621      	mov	r1, r4
 8008570:	eb12 0801 	adds.w	r8, r2, r1
 8008574:	4629      	mov	r1, r5
 8008576:	eb43 0901 	adc.w	r9, r3, r1
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800858a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800858e:	4690      	mov	r8, r2
 8008590:	4699      	mov	r9, r3
 8008592:	4623      	mov	r3, r4
 8008594:	eb18 0303 	adds.w	r3, r8, r3
 8008598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800859c:	462b      	mov	r3, r5
 800859e:	eb49 0303 	adc.w	r3, r9, r3
 80085a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085ba:	460b      	mov	r3, r1
 80085bc:	18db      	adds	r3, r3, r3
 80085be:	653b      	str	r3, [r7, #80]	; 0x50
 80085c0:	4613      	mov	r3, r2
 80085c2:	eb42 0303 	adc.w	r3, r2, r3
 80085c6:	657b      	str	r3, [r7, #84]	; 0x54
 80085c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085d0:	f7f7 fe02 	bl	80001d8 <__aeabi_uldivmod>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4b61      	ldr	r3, [pc, #388]	; (8008760 <UART_SetConfig+0x2d4>)
 80085da:	fba3 2302 	umull	r2, r3, r3, r2
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	011c      	lsls	r4, r3, #4
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	1891      	adds	r1, r2, r2
 80085fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80085fc:	415b      	adcs	r3, r3
 80085fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008604:	4641      	mov	r1, r8
 8008606:	eb12 0a01 	adds.w	sl, r2, r1
 800860a:	4649      	mov	r1, r9
 800860c:	eb43 0b01 	adc.w	fp, r3, r1
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800861c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008624:	4692      	mov	sl, r2
 8008626:	469b      	mov	fp, r3
 8008628:	4643      	mov	r3, r8
 800862a:	eb1a 0303 	adds.w	r3, sl, r3
 800862e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008632:	464b      	mov	r3, r9
 8008634:	eb4b 0303 	adc.w	r3, fp, r3
 8008638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800864c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008650:	460b      	mov	r3, r1
 8008652:	18db      	adds	r3, r3, r3
 8008654:	643b      	str	r3, [r7, #64]	; 0x40
 8008656:	4613      	mov	r3, r2
 8008658:	eb42 0303 	adc.w	r3, r2, r3
 800865c:	647b      	str	r3, [r7, #68]	; 0x44
 800865e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008666:	f7f7 fdb7 	bl	80001d8 <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4611      	mov	r1, r2
 8008670:	4b3b      	ldr	r3, [pc, #236]	; (8008760 <UART_SetConfig+0x2d4>)
 8008672:	fba3 2301 	umull	r2, r3, r3, r1
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	2264      	movs	r2, #100	; 0x64
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	1acb      	subs	r3, r1, r3
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008686:	4b36      	ldr	r3, [pc, #216]	; (8008760 <UART_SetConfig+0x2d4>)
 8008688:	fba3 2302 	umull	r2, r3, r3, r2
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008694:	441c      	add	r4, r3
 8008696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869a:	2200      	movs	r2, #0
 800869c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	1891      	adds	r1, r2, r2
 80086ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80086b0:	415b      	adcs	r3, r3
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086b8:	4641      	mov	r1, r8
 80086ba:	1851      	adds	r1, r2, r1
 80086bc:	6339      	str	r1, [r7, #48]	; 0x30
 80086be:	4649      	mov	r1, r9
 80086c0:	414b      	adcs	r3, r1
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086d0:	4659      	mov	r1, fp
 80086d2:	00cb      	lsls	r3, r1, #3
 80086d4:	4651      	mov	r1, sl
 80086d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086da:	4651      	mov	r1, sl
 80086dc:	00ca      	lsls	r2, r1, #3
 80086de:	4610      	mov	r0, r2
 80086e0:	4619      	mov	r1, r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	4642      	mov	r2, r8
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086ec:	464b      	mov	r3, r9
 80086ee:	460a      	mov	r2, r1
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800870c:	460b      	mov	r3, r1
 800870e:	18db      	adds	r3, r3, r3
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
 8008712:	4613      	mov	r3, r2
 8008714:	eb42 0303 	adc.w	r3, r2, r3
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800871a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800871e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008722:	f7f7 fd59 	bl	80001d8 <__aeabi_uldivmod>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <UART_SetConfig+0x2d4>)
 800872c:	fba3 1302 	umull	r1, r3, r3, r2
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	2164      	movs	r1, #100	; 0x64
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	3332      	adds	r3, #50	; 0x32
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <UART_SetConfig+0x2d4>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	f003 0207 	and.w	r2, r3, #7
 800874a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4422      	add	r2, r4
 8008752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008754:	e105      	b.n	8008962 <UART_SetConfig+0x4d6>
 8008756:	bf00      	nop
 8008758:	40011000 	.word	0x40011000
 800875c:	40011400 	.word	0x40011400
 8008760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008768:	2200      	movs	r2, #0
 800876a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800876e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008776:	4642      	mov	r2, r8
 8008778:	464b      	mov	r3, r9
 800877a:	1891      	adds	r1, r2, r2
 800877c:	6239      	str	r1, [r7, #32]
 800877e:	415b      	adcs	r3, r3
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
 8008782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008786:	4641      	mov	r1, r8
 8008788:	1854      	adds	r4, r2, r1
 800878a:	4649      	mov	r1, r9
 800878c:	eb43 0501 	adc.w	r5, r3, r1
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	00eb      	lsls	r3, r5, #3
 800879a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800879e:	00e2      	lsls	r2, r4, #3
 80087a0:	4614      	mov	r4, r2
 80087a2:	461d      	mov	r5, r3
 80087a4:	4643      	mov	r3, r8
 80087a6:	18e3      	adds	r3, r4, r3
 80087a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087ac:	464b      	mov	r3, r9
 80087ae:	eb45 0303 	adc.w	r3, r5, r3
 80087b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	f04f 0300 	mov.w	r3, #0
 80087ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087d2:	4629      	mov	r1, r5
 80087d4:	008b      	lsls	r3, r1, #2
 80087d6:	4621      	mov	r1, r4
 80087d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087dc:	4621      	mov	r1, r4
 80087de:	008a      	lsls	r2, r1, #2
 80087e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087e4:	f7f7 fcf8 	bl	80001d8 <__aeabi_uldivmod>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4b60      	ldr	r3, [pc, #384]	; (8008970 <UART_SetConfig+0x4e4>)
 80087ee:	fba3 2302 	umull	r2, r3, r3, r2
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	011c      	lsls	r4, r3, #4
 80087f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	1891      	adds	r1, r2, r2
 800880e:	61b9      	str	r1, [r7, #24]
 8008810:	415b      	adcs	r3, r3
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008818:	4641      	mov	r1, r8
 800881a:	1851      	adds	r1, r2, r1
 800881c:	6139      	str	r1, [r7, #16]
 800881e:	4649      	mov	r1, r9
 8008820:	414b      	adcs	r3, r1
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008830:	4659      	mov	r1, fp
 8008832:	00cb      	lsls	r3, r1, #3
 8008834:	4651      	mov	r1, sl
 8008836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800883a:	4651      	mov	r1, sl
 800883c:	00ca      	lsls	r2, r1, #3
 800883e:	4610      	mov	r0, r2
 8008840:	4619      	mov	r1, r3
 8008842:	4603      	mov	r3, r0
 8008844:	4642      	mov	r2, r8
 8008846:	189b      	adds	r3, r3, r2
 8008848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800884c:	464b      	mov	r3, r9
 800884e:	460a      	mov	r2, r1
 8008850:	eb42 0303 	adc.w	r3, r2, r3
 8008854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	67bb      	str	r3, [r7, #120]	; 0x78
 8008862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008870:	4649      	mov	r1, r9
 8008872:	008b      	lsls	r3, r1, #2
 8008874:	4641      	mov	r1, r8
 8008876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800887a:	4641      	mov	r1, r8
 800887c:	008a      	lsls	r2, r1, #2
 800887e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008882:	f7f7 fca9 	bl	80001d8 <__aeabi_uldivmod>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4b39      	ldr	r3, [pc, #228]	; (8008970 <UART_SetConfig+0x4e4>)
 800888c:	fba3 1302 	umull	r1, r3, r3, r2
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	2164      	movs	r1, #100	; 0x64
 8008894:	fb01 f303 	mul.w	r3, r1, r3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	3332      	adds	r3, #50	; 0x32
 800889e:	4a34      	ldr	r2, [pc, #208]	; (8008970 <UART_SetConfig+0x4e4>)
 80088a0:	fba2 2303 	umull	r2, r3, r2, r3
 80088a4:	095b      	lsrs	r3, r3, #5
 80088a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088aa:	441c      	add	r4, r3
 80088ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b0:	2200      	movs	r2, #0
 80088b2:	673b      	str	r3, [r7, #112]	; 0x70
 80088b4:	677a      	str	r2, [r7, #116]	; 0x74
 80088b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088ba:	4642      	mov	r2, r8
 80088bc:	464b      	mov	r3, r9
 80088be:	1891      	adds	r1, r2, r2
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	415b      	adcs	r3, r3
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ca:	4641      	mov	r1, r8
 80088cc:	1851      	adds	r1, r2, r1
 80088ce:	6039      	str	r1, [r7, #0]
 80088d0:	4649      	mov	r1, r9
 80088d2:	414b      	adcs	r3, r1
 80088d4:	607b      	str	r3, [r7, #4]
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088e2:	4659      	mov	r1, fp
 80088e4:	00cb      	lsls	r3, r1, #3
 80088e6:	4651      	mov	r1, sl
 80088e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ec:	4651      	mov	r1, sl
 80088ee:	00ca      	lsls	r2, r1, #3
 80088f0:	4610      	mov	r0, r2
 80088f2:	4619      	mov	r1, r3
 80088f4:	4603      	mov	r3, r0
 80088f6:	4642      	mov	r2, r8
 80088f8:	189b      	adds	r3, r3, r2
 80088fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80088fc:	464b      	mov	r3, r9
 80088fe:	460a      	mov	r2, r1
 8008900:	eb42 0303 	adc.w	r3, r2, r3
 8008904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	663b      	str	r3, [r7, #96]	; 0x60
 8008910:	667a      	str	r2, [r7, #100]	; 0x64
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	f04f 0300 	mov.w	r3, #0
 800891a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800891e:	4649      	mov	r1, r9
 8008920:	008b      	lsls	r3, r1, #2
 8008922:	4641      	mov	r1, r8
 8008924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008928:	4641      	mov	r1, r8
 800892a:	008a      	lsls	r2, r1, #2
 800892c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008930:	f7f7 fc52 	bl	80001d8 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <UART_SetConfig+0x4e4>)
 800893a:	fba3 1302 	umull	r1, r3, r3, r2
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	2164      	movs	r1, #100	; 0x64
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	3332      	adds	r3, #50	; 0x32
 800894c:	4a08      	ldr	r2, [pc, #32]	; (8008970 <UART_SetConfig+0x4e4>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	f003 020f 	and.w	r2, r3, #15
 8008958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4422      	add	r2, r4
 8008960:	609a      	str	r2, [r3, #8]
}
 8008962:	bf00      	nop
 8008964:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896e:	bf00      	nop
 8008970:	51eb851f 	.word	0x51eb851f

08008974 <__libc_init_array>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4d0d      	ldr	r5, [pc, #52]	; (80089ac <__libc_init_array+0x38>)
 8008978:	4c0d      	ldr	r4, [pc, #52]	; (80089b0 <__libc_init_array+0x3c>)
 800897a:	1b64      	subs	r4, r4, r5
 800897c:	10a4      	asrs	r4, r4, #2
 800897e:	2600      	movs	r6, #0
 8008980:	42a6      	cmp	r6, r4
 8008982:	d109      	bne.n	8008998 <__libc_init_array+0x24>
 8008984:	4d0b      	ldr	r5, [pc, #44]	; (80089b4 <__libc_init_array+0x40>)
 8008986:	4c0c      	ldr	r4, [pc, #48]	; (80089b8 <__libc_init_array+0x44>)
 8008988:	f000 f87c 	bl	8008a84 <_init>
 800898c:	1b64      	subs	r4, r4, r5
 800898e:	10a4      	asrs	r4, r4, #2
 8008990:	2600      	movs	r6, #0
 8008992:	42a6      	cmp	r6, r4
 8008994:	d105      	bne.n	80089a2 <__libc_init_array+0x2e>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	f855 3b04 	ldr.w	r3, [r5], #4
 800899c:	4798      	blx	r3
 800899e:	3601      	adds	r6, #1
 80089a0:	e7ee      	b.n	8008980 <__libc_init_array+0xc>
 80089a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a6:	4798      	blx	r3
 80089a8:	3601      	adds	r6, #1
 80089aa:	e7f2      	b.n	8008992 <__libc_init_array+0x1e>
 80089ac:	0800b2fc 	.word	0x0800b2fc
 80089b0:	0800b2fc 	.word	0x0800b2fc
 80089b4:	0800b2fc 	.word	0x0800b2fc
 80089b8:	0800b300 	.word	0x0800b300

080089bc <__itoa>:
 80089bc:	1e93      	subs	r3, r2, #2
 80089be:	2b22      	cmp	r3, #34	; 0x22
 80089c0:	b510      	push	{r4, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	d904      	bls.n	80089d0 <__itoa+0x14>
 80089c6:	2300      	movs	r3, #0
 80089c8:	700b      	strb	r3, [r1, #0]
 80089ca:	461c      	mov	r4, r3
 80089cc:	4620      	mov	r0, r4
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	2a0a      	cmp	r2, #10
 80089d2:	d109      	bne.n	80089e8 <__itoa+0x2c>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	da07      	bge.n	80089e8 <__itoa+0x2c>
 80089d8:	232d      	movs	r3, #45	; 0x2d
 80089da:	700b      	strb	r3, [r1, #0]
 80089dc:	4240      	negs	r0, r0
 80089de:	2101      	movs	r1, #1
 80089e0:	4421      	add	r1, r4
 80089e2:	f000 f80d 	bl	8008a00 <__utoa>
 80089e6:	e7f1      	b.n	80089cc <__itoa+0x10>
 80089e8:	2100      	movs	r1, #0
 80089ea:	e7f9      	b.n	80089e0 <__itoa+0x24>

080089ec <itoa>:
 80089ec:	f7ff bfe6 	b.w	80089bc <__itoa>

080089f0 <memset>:
 80089f0:	4402      	add	r2, r0
 80089f2:	4603      	mov	r3, r0
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d100      	bne.n	80089fa <memset+0xa>
 80089f8:	4770      	bx	lr
 80089fa:	f803 1b01 	strb.w	r1, [r3], #1
 80089fe:	e7f9      	b.n	80089f4 <memset+0x4>

08008a00 <__utoa>:
 8008a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a02:	4c1f      	ldr	r4, [pc, #124]	; (8008a80 <__utoa+0x80>)
 8008a04:	b08b      	sub	sp, #44	; 0x2c
 8008a06:	4605      	mov	r5, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	466e      	mov	r6, sp
 8008a0c:	f104 0c20 	add.w	ip, r4, #32
 8008a10:	6820      	ldr	r0, [r4, #0]
 8008a12:	6861      	ldr	r1, [r4, #4]
 8008a14:	4637      	mov	r7, r6
 8008a16:	c703      	stmia	r7!, {r0, r1}
 8008a18:	3408      	adds	r4, #8
 8008a1a:	4564      	cmp	r4, ip
 8008a1c:	463e      	mov	r6, r7
 8008a1e:	d1f7      	bne.n	8008a10 <__utoa+0x10>
 8008a20:	7921      	ldrb	r1, [r4, #4]
 8008a22:	7139      	strb	r1, [r7, #4]
 8008a24:	1e91      	subs	r1, r2, #2
 8008a26:	6820      	ldr	r0, [r4, #0]
 8008a28:	6038      	str	r0, [r7, #0]
 8008a2a:	2922      	cmp	r1, #34	; 0x22
 8008a2c:	f04f 0100 	mov.w	r1, #0
 8008a30:	d904      	bls.n	8008a3c <__utoa+0x3c>
 8008a32:	7019      	strb	r1, [r3, #0]
 8008a34:	460b      	mov	r3, r1
 8008a36:	4618      	mov	r0, r3
 8008a38:	b00b      	add	sp, #44	; 0x2c
 8008a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3c:	1e58      	subs	r0, r3, #1
 8008a3e:	4684      	mov	ip, r0
 8008a40:	fbb5 f7f2 	udiv	r7, r5, r2
 8008a44:	fb02 5617 	mls	r6, r2, r7, r5
 8008a48:	3628      	adds	r6, #40	; 0x28
 8008a4a:	446e      	add	r6, sp
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008a52:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008a56:	462e      	mov	r6, r5
 8008a58:	42b2      	cmp	r2, r6
 8008a5a:	f101 0101 	add.w	r1, r1, #1
 8008a5e:	463d      	mov	r5, r7
 8008a60:	d9ee      	bls.n	8008a40 <__utoa+0x40>
 8008a62:	2200      	movs	r2, #0
 8008a64:	545a      	strb	r2, [r3, r1]
 8008a66:	1919      	adds	r1, r3, r4
 8008a68:	1aa5      	subs	r5, r4, r2
 8008a6a:	42aa      	cmp	r2, r5
 8008a6c:	dae3      	bge.n	8008a36 <__utoa+0x36>
 8008a6e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008a72:	780e      	ldrb	r6, [r1, #0]
 8008a74:	7006      	strb	r6, [r0, #0]
 8008a76:	3201      	adds	r2, #1
 8008a78:	f801 5901 	strb.w	r5, [r1], #-1
 8008a7c:	e7f4      	b.n	8008a68 <__utoa+0x68>
 8008a7e:	bf00      	nop
 8008a80:	0800b2cc 	.word	0x0800b2cc

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
