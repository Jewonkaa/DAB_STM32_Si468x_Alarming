
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da0  0800a01c  0800a01c  0001a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdbc  0800cdbc  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc4  0800cdc4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800cdcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000027ec  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200028a8  200028a8  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a86  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000346c  00000000  00000000  00037b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0003afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023904  00000000  00000000  0003d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a455  00000000  00000000  00060fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d17de  00000000  00000000  0007b3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cbd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005370  00000000  00000000  0014cc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a004 	.word	0x0800a004

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	0800a004 	.word	0x0800a004

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f007 fc1a 	bl	8007f32 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000268c 	.word	0x2000268c

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f005 f8b0 	bl	800587c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f004 faa9 	bl	8004c74 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f005 f8a7 	bl	800587c <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f005 f8a1 	bl	800587c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f004 fa9a 	bl	8004c74 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f005 f895 	bl	800587c <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f005 f83a 	bl	800587c <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f005 f834 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f005 f82a 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f004 ff9c 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f004 ff93 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000d8 	.word	0x200000d8

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f004 fe02 	bl	800587c <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f004 fdfc 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f004 fdf3 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f004 fd59 	bl	800587c <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f004 fd2f 	bl	800587c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f004 fd26 	bl	800587c <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f004 fcda 	bl	800587c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f004 fcd1 	bl	800587c <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f004 fc85 	bl	800587c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f004 fc7c 	bl	800587c <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800ae08 	.word	0x0800ae08
 8001010:	0800b0e0 	.word	0x0800b0e0

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f004 fc2c 	bl	800587c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f004 fc26 	bl	800587c <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f004 fc1a 	bl	800587c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f004 fc14 	bl	800587c <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_init>:
uint8_t actual_freq_id = 0;							//frequency table index of the frequency to which the Si468x is currently tuned in kHz

uint8_t actual_station = 0;

void Si468x_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	4833      	ldr	r0, [pc, #204]	; (8001130 <Si468x_init+0xd4>)
 8001064:	f001 ffe0 	bl	8003028 <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f866 	bl	8001138 <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f880 	bl	8001170 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f902 	bl	8001278 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f972 	bl	8001360 <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa10 	bl	80014a0 <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbc8 	bl	8001814 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb40 	bl	8001708 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc31 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc2b 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc25 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc20 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc1b 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc15 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc0f 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fc0a 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fc05 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fc00 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fbfb 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbf5 	bl	80018f4 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbf0 	bl	80018f4 <Si468x_set_property>

	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
 8001114:	f000 fcda 	bl	8001acc <Si468x_dab_get_freq_list>

	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001118:	f000 faf6 	bl	8001708 <Si468x_get_sys_state>

	Display_dab_digrad_status_background();
 800111c:	f001 ffbe 	bl	800309c <Display_dab_digrad_status_background>

	HAL_TIM_Base_Start_IT(&htim10);	//enable this timer = enable continuously show signal info
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <Si468x_init+0xd8>)
 8001122:	f007 fd93 	bl	8008c4c <HAL_TIM_Base_Start_IT>

	Si468x_dab_full_scan();
 8001126:	f001 fa6b 	bl	8002600 <Si468x_dab_full_scan>
//			Si468x_dab_start_digital_service(services_list[i].service_id, services_list[i].components[0].subchannel_id);
//			break;
//		}
//	}

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	0800a170 	.word	0x0800a170
 8001134:	2000278c 	.word	0x2000278c

08001138 <Si468x_reset>:

void Si468x_reset()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 800113c:	2101      	movs	r1, #1
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <Si468x_reset+0x30>)
 8001140:	f001 ff72 	bl	8003028 <send_debug_msg>
	RESET_PIN_LOW;
 8001144:	2200      	movs	r2, #0
 8001146:	2120      	movs	r1, #32
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <Si468x_reset+0x34>)
 800114a:	f004 fb97 	bl	800587c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f003 fd90 	bl	8004c74 <HAL_Delay>
	RESET_PIN_HIGH;
 8001154:	2201      	movs	r2, #1
 8001156:	2120      	movs	r1, #32
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <Si468x_reset+0x34>)
 800115a:	f004 fb8f 	bl	800587c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800115e:	20c8      	movs	r0, #200	; 0xc8
 8001160:	f003 fd88 	bl	8004c74 <HAL_Delay>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0800a1c0 	.word	0x0800a1c0
 800116c:	40020800 	.word	0x40020800

08001170 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001174:	2101      	movs	r1, #1
 8001176:	4826      	ldr	r0, [pc, #152]	; (8001210 <Si468x_power_up+0xa0>)
 8001178:	f001 ff56 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <Si468x_power_up+0xa4>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <Si468x_power_up+0xa4>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <Si468x_power_up+0xa4>)
 800118a:	2217      	movs	r2, #23
 800118c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <Si468x_power_up+0xa4>)
 8001190:	2250      	movs	r2, #80	; 0x50
 8001192:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <Si468x_power_up+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <Si468x_power_up+0xa4>)
 800119c:	22f8      	movs	r2, #248	; 0xf8
 800119e:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <Si468x_power_up+0xa4>)
 80011a2:	2224      	movs	r2, #36	; 0x24
 80011a4:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <Si468x_power_up+0xa4>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <Si468x_power_up+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <Si468x_power_up+0xa4>)
 80011b4:	2210      	movs	r2, #16
 80011b6:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <Si468x_power_up+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <Si468x_power_up+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <Si468x_power_up+0xa4>)
 80011cc:	2228      	movs	r2, #40	; 0x28
 80011ce:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <Si468x_power_up+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <Si468x_power_up+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011dc:	490d      	ldr	r1, [pc, #52]	; (8001214 <Si468x_power_up+0xa4>)
 80011de:	2010      	movs	r0, #16
 80011e0:	f000 fa58 	bl	8001694 <Si468x_write_command>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <Si468x_power_up+0xa8>)
 80011ea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f003 fd41 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011f2:	490a      	ldr	r1, [pc, #40]	; (800121c <Si468x_power_up+0xac>)
 80011f4:	2005      	movs	r0, #5
 80011f6:	f000 fa6f 	bl	80016d8 <Si468x_read_reply>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <Si468x_power_up+0xa8>)
 8001200:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 8001202:	2101      	movs	r1, #1
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <Si468x_power_up+0xb0>)
 8001206:	f001 ff0f 	bl	8003028 <send_debug_msg>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0800a1d4 	.word	0x0800a1d4
 8001214:	200000dc 	.word	0x200000dc
 8001218:	2000191c 	.word	0x2000191c
 800121c:	200010dc 	.word	0x200010dc
 8001220:	0800a210 	.word	0x0800a210

08001224 <Si468x_load_init>:

void Si468x_load_init()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001228:	2101      	movs	r1, #1
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <Si468x_load_init+0x44>)
 800122c:	f001 fefc 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Si468x_load_init+0x48>)
 8001232:	2206      	movs	r2, #6
 8001234:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <Si468x_load_init+0x48>)
 8001238:	2200      	movs	r2, #0
 800123a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800123c:	490b      	ldr	r1, [pc, #44]	; (800126c <Si468x_load_init+0x48>)
 800123e:	2002      	movs	r0, #2
 8001240:	f000 fa28 	bl	8001694 <Si468x_write_command>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <Si468x_load_init+0x4c>)
 800124a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f003 fd11 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <Si468x_load_init+0x50>)
 8001254:	2005      	movs	r0, #5
 8001256:	f000 fa3f 	bl	80016d8 <Si468x_read_reply>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <Si468x_load_init+0x4c>)
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800a230 	.word	0x0800a230
 800126c:	200000dc 	.word	0x200000dc
 8001270:	2000191c 	.word	0x2000191c
 8001274:	200010dc 	.word	0x200010dc

08001278 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800127e:	2101      	movs	r1, #1
 8001280:	4830      	ldr	r0, [pc, #192]	; (8001344 <Si468x_bootloader_load_host+0xcc>)
 8001282:	f001 fed1 	bl	8003028 <send_debug_msg>
	Si468x_load_init();
 8001286:	f7ff ffcd 	bl	8001224 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 800128a:	f241 63a4 	movw	r3, #5796	; 0x16a4
 800128e:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <Si468x_bootloader_load_host+0xd0>)
 8001292:	2204      	movs	r2, #4
 8001294:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <Si468x_bootloader_load_host+0xd0>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <Si468x_bootloader_load_host+0xd0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <Si468x_bootloader_load_host+0xd0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	80fb      	strh	r3, [r7, #6]
 80012ac:	e03e      	b.n	800132c <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	e014      	b.n	80012de <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	4924      	ldr	r1, [pc, #144]	; (800134c <Si468x_bootloader_load_host+0xd4>)
 80012ba:	fba1 1303 	umull	r1, r3, r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	441a      	add	r2, r3
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	3304      	adds	r3, #4
 80012d0:	491f      	ldr	r1, [pc, #124]	; (8001350 <Si468x_bootloader_load_host+0xd8>)
 80012d2:	5c89      	ldrb	r1, [r1, r2]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <Si468x_bootloader_load_host+0xd0>)
 80012d6:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	80bb      	strh	r3, [r7, #4]
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	4a1a      	ldr	r2, [pc, #104]	; (800134c <Si468x_bootloader_load_host+0xd4>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	085b      	lsrs	r3, r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	88ba      	ldrh	r2, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3e1      	bcc.n	80012b4 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <Si468x_bootloader_load_host+0xd4>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3304      	adds	r3, #4
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4911      	ldr	r1, [pc, #68]	; (8001348 <Si468x_bootloader_load_host+0xd0>)
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f9c6 	bl	8001694 <Si468x_write_command>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <Si468x_bootloader_load_host+0xdc>)
 800130e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f003 fcaf 	bl	8004c74 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <Si468x_bootloader_load_host+0xe0>)
 8001318:	2005      	movs	r0, #5
 800131a:	f000 f9dd 	bl	80016d8 <Si468x_read_reply>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <Si468x_bootloader_load_host+0xdc>)
 8001324:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	3301      	adds	r3, #1
 800132a:	80fb      	strh	r3, [r7, #6]
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d9bd      	bls.n	80012ae <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 8001332:	2101      	movs	r1, #1
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <Si468x_bootloader_load_host+0xe4>)
 8001336:	f001 fe77 	bl	8003028 <send_debug_msg>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800a248 	.word	0x0800a248
 8001348:	200000dc 	.word	0x200000dc
 800134c:	aaaaaaab 	.word	0xaaaaaaab
 8001350:	0800b6d0 	.word	0x0800b6d0
 8001354:	2000191c 	.word	0x2000191c
 8001358:	200010dc 	.word	0x200010dc
 800135c:	0800a284 	.word	0x0800a284

08001360 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001368:	2101      	movs	r1, #1
 800136a:	4845      	ldr	r0, [pc, #276]	; (8001480 <Si468x_firmware_load_flash+0x120>)
 800136c:	f001 fe5c 	bl	8003028 <send_debug_msg>
	Si468x_load_init();
 8001370:	f7ff ff58 	bl	8001224 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001376:	2205      	movs	r2, #5
 8001378:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 800137c:	2200      	movs	r2, #0
 800137e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001382:	2200      	movs	r2, #0
 8001384:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001386:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001388:	2200      	movs	r2, #0
 800138a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001392:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 800139c:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b37      	ldr	r3, [pc, #220]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 80013a6:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0e1b      	lsrs	r3, r3, #24
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 80013b0:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013b2:	2100      	movs	r1, #0
 80013b4:	4834      	ldr	r0, [pc, #208]	; (8001488 <Si468x_firmware_load_flash+0x128>)
 80013b6:	f001 fe37 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	2210      	movs	r2, #16
 80013c0:	4932      	ldr	r1, [pc, #200]	; (800148c <Si468x_firmware_load_flash+0x12c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fdd2 	bl	8009f6c <itoa>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fe2b 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 80013d4:	795b      	ldrb	r3, [r3, #5]
 80013d6:	2210      	movs	r2, #16
 80013d8:	492c      	ldr	r1, [pc, #176]	; (800148c <Si468x_firmware_load_flash+0x12c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 fdc6 	bl	8009f6c <itoa>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fe1f 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 80013ec:	799b      	ldrb	r3, [r3, #6]
 80013ee:	2210      	movs	r2, #16
 80013f0:	4926      	ldr	r1, [pc, #152]	; (800148c <Si468x_firmware_load_flash+0x12c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f008 fdba 	bl	8009f6c <itoa>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fe13 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001404:	79db      	ldrb	r3, [r3, #7]
 8001406:	2210      	movs	r2, #16
 8001408:	4920      	ldr	r1, [pc, #128]	; (800148c <Si468x_firmware_load_flash+0x12c>)
 800140a:	4618      	mov	r0, r3
 800140c:	f008 fdae 	bl	8009f6c <itoa>
 8001410:	4603      	mov	r3, r0
 8001412:	2101      	movs	r1, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fe07 	bl	8003028 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 800141c:	2200      	movs	r2, #0
 800141e:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001422:	2200      	movs	r2, #0
 8001424:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001428:	2200      	movs	r2, #0
 800142a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 800142e:	2200      	movs	r2, #0
 8001430:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001432:	4914      	ldr	r1, [pc, #80]	; (8001484 <Si468x_firmware_load_flash+0x124>)
 8001434:	200c      	movs	r0, #12
 8001436:	f000 f92d 	bl	8001694 <Si468x_write_command>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <Si468x_firmware_load_flash+0x130>)
 8001440:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f003 fc16 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001448:	4912      	ldr	r1, [pc, #72]	; (8001494 <Si468x_firmware_load_flash+0x134>)
 800144a:	2005      	movs	r0, #5
 800144c:	f000 f944 	bl	80016d8 <Si468x_read_reply>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Si468x_firmware_load_flash+0x130>)
 8001456:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <Si468x_firmware_load_flash+0x134>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001464:	2101      	movs	r1, #1
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <Si468x_firmware_load_flash+0x138>)
 8001468:	f001 fdde 	bl	8003028 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 800146c:	e003      	b.n	8001476 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800146e:	2101      	movs	r1, #1
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <Si468x_firmware_load_flash+0x13c>)
 8001472:	f001 fdd9 	bl	8003028 <send_debug_msg>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800a2a4 	.word	0x0800a2a4
 8001484:	200000dc 	.word	0x200000dc
 8001488:	0800a2e0 	.word	0x0800a2e0
 800148c:	200018dc 	.word	0x200018dc
 8001490:	2000191c 	.word	0x2000191c
 8001494:	200010dc 	.word	0x200010dc
 8001498:	0800a2f4 	.word	0x0800a2f4
 800149c:	0800a304 	.word	0x0800a304

080014a0 <Si468x_boot>:

void Si468x_boot()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014a4:	2101      	movs	r1, #1
 80014a6:	4816      	ldr	r0, [pc, #88]	; (8001500 <Si468x_boot+0x60>)
 80014a8:	f001 fdbe 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <Si468x_boot+0x64>)
 80014ae:	2207      	movs	r2, #7
 80014b0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <Si468x_boot+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014b8:	4912      	ldr	r1, [pc, #72]	; (8001504 <Si468x_boot+0x64>)
 80014ba:	2002      	movs	r0, #2
 80014bc:	f000 f8ea 	bl	8001694 <Si468x_write_command>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <Si468x_boot+0x68>)
 80014c6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f003 fbd3 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014ce:	490f      	ldr	r1, [pc, #60]	; (800150c <Si468x_boot+0x6c>)
 80014d0:	2005      	movs	r0, #5
 80014d2:	f000 f901 	bl	80016d8 <Si468x_read_reply>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <Si468x_boot+0x68>)
 80014dc:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <Si468x_boot+0x6c>)
 80014e0:	78db      	ldrb	r3, [r3, #3]
 80014e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014e6:	2bc0      	cmp	r3, #192	; 0xc0
 80014e8:	d104      	bne.n	80014f4 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014ea:	2101      	movs	r1, #1
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <Si468x_boot+0x70>)
 80014ee:	f001 fd9b 	bl	8003028 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014f2:	e003      	b.n	80014fc <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014f4:	2101      	movs	r1, #1
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <Si468x_boot+0x74>)
 80014f8:	f001 fd96 	bl	8003028 <send_debug_msg>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	0800a320 	.word	0x0800a320
 8001504:	200000dc 	.word	0x200000dc
 8001508:	2000191c 	.word	0x2000191c
 800150c:	200010dc 	.word	0x200010dc
 8001510:	0800a35c 	.word	0x0800a35c
 8001514:	0800a378 	.word	0x0800a378

08001518 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 8001522:	1df9      	adds	r1, r7, #7
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <Si468x_write_single_byte+0x20>)
 800152a:	f006 fd02 	bl	8007f32 <HAL_SPI_Transmit>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20002634 	.word	0x20002634

0800153c <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001546:	1df9      	adds	r1, r7, #7
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	2201      	movs	r2, #1
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <Si468x_read_single_byte+0x20>)
 800154e:	f006 fe2c 	bl	80081aa <HAL_SPI_Receive>
	return data_buffer;
 8001552:	79fb      	ldrb	r3, [r7, #7]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20002634 	.word	0x20002634

08001560 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	81fb      	strh	r3, [r7, #14]
 800156e:	e01f      	b.n	80015b0 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <Si468x_wait_for_CTS+0x6c>)
 8001572:	2001      	movs	r0, #1
 8001574:	f000 f8b0 	bl	80016d8 <Si468x_read_reply>
		if(rd_reply.cts)
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <Si468x_wait_for_CTS+0x70>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00e      	beq.n	80015a4 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <Si468x_wait_for_CTS+0x70>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001594:	2101      	movs	r1, #1
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <Si468x_wait_for_CTS+0x74>)
 8001598:	f001 fd46 	bl	8003028 <send_debug_msg>
				return COMMAND_ERROR;
 800159c:	2320      	movs	r3, #32
 800159e:	e010      	b.n	80015c2 <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e00e      	b.n	80015c2 <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f003 fb65 	bl	8004c74 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	3301      	adds	r3, #1
 80015ae:	81fb      	strh	r3, [r7, #14]
 80015b0:	89fa      	ldrh	r2, [r7, #14]
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3db      	bcc.n	8001570 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015b8:	2101      	movs	r1, #1
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <Si468x_wait_for_CTS+0x78>)
 80015bc:	f001 fd34 	bl	8003028 <send_debug_msg>
	return TIMEOUT;
 80015c0:	2308      	movs	r3, #8
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200010dc 	.word	0x200010dc
 80015d0:	20001a0c 	.word	0x20001a0c
 80015d4:	0800a38c 	.word	0x0800a38c
 80015d8:	0800a3b4 	.word	0x0800a3b4

080015dc <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015ec:	2200      	movs	r2, #0
 80015ee:	2110      	movs	r1, #16
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <Si468x_write_multiple+0x4c>)
 80015f2:	f004 f943 	bl	800587c <HAL_GPIO_WritePin>
	while(len--)
 80015f6:	e009      	b.n	800160c <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	81fa      	strh	r2, [r7, #14]
 80015fe:	461a      	mov	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff86 	bl	8001518 <Si468x_write_single_byte>
	while(len--)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	80fa      	strh	r2, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001616:	2201      	movs	r2, #1
 8001618:	2110      	movs	r1, #16
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <Si468x_write_multiple+0x4c>)
 800161c:	f004 f92e 	bl	800587c <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40020800 	.word	0x40020800

0800162c <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 800163c:	2201      	movs	r2, #1
 800163e:	2110      	movs	r1, #16
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <Si468x_read_multiple+0x64>)
 8001642:	f004 f91b 	bl	800587c <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001646:	2003      	movs	r0, #3
 8001648:	f003 fb14 	bl	8004c74 <HAL_Delay>
	CS_PIN_LOW;
 800164c:	2200      	movs	r2, #0
 800164e:	2110      	movs	r1, #16
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <Si468x_read_multiple+0x64>)
 8001652:	f004 f913 	bl	800587c <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff ff5e 	bl	8001518 <Si468x_write_single_byte>
	while(len--)
 800165c:	e009      	b.n	8001672 <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	81fa      	strh	r2, [r7, #14]
 8001664:	461a      	mov	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	189c      	adds	r4, r3, r2
 800166a:	f7ff ff67 	bl	800153c <Si468x_read_single_byte>
 800166e:	4603      	mov	r3, r0
 8001670:	7023      	strb	r3, [r4, #0]
	while(len--)
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	80fa      	strh	r2, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 800167c:	2201      	movs	r2, #1
 800167e:	2110      	movs	r1, #16
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <Si468x_read_multiple+0x64>)
 8001682:	f004 f8fb 	bl	800587c <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	40020800 	.word	0x40020800

08001694 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a4:	f7ff ff5c 	bl	8001560 <Si468x_wait_for_CTS>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <Si468x_write_command+0x24>
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d10a      	bne.n	80016ce <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff8d 	bl	80015dc <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c6:	f7ff ff4b 	bl	8001560 <Si468x_wait_for_CTS>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff9f 	bl	800162c <Si468x_read_multiple>
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <Si468x_read_reply+0x28>)
 80016f0:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <Si468x_read_reply+0x2c>)
 80016f4:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200010dc 	.word	0x200010dc
 8001704:	20001a0c 	.word	0x20001a0c

08001708 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 800170c:	2101      	movs	r1, #1
 800170e:	4833      	ldr	r0, [pc, #204]	; (80017dc <Si468x_get_sys_state+0xd4>)
 8001710:	f001 fc8a 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <Si468x_get_sys_state+0xd8>)
 8001716:	2209      	movs	r2, #9
 8001718:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <Si468x_get_sys_state+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001720:	492f      	ldr	r1, [pc, #188]	; (80017e0 <Si468x_get_sys_state+0xd8>)
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff ffb6 	bl	8001694 <Si468x_write_command>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <Si468x_get_sys_state+0xdc>)
 800172e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f003 fa9f 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001736:	492c      	ldr	r1, [pc, #176]	; (80017e8 <Si468x_get_sys_state+0xe0>)
 8001738:	2005      	movs	r0, #5
 800173a:	f7ff ffcd 	bl	80016d8 <Si468x_read_reply>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <Si468x_get_sys_state+0xdc>)
 8001744:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001746:	2100      	movs	r1, #0
 8001748:	4828      	ldr	r0, [pc, #160]	; (80017ec <Si468x_get_sys_state+0xe4>)
 800174a:	f001 fc6d 	bl	8003028 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <Si468x_get_sys_state+0xe0>)
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	2b07      	cmp	r3, #7
 8001754:	d83a      	bhi.n	80017cc <Si468x_get_sys_state+0xc4>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <Si468x_get_sys_state+0x54>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800177d 	.word	0x0800177d
 8001760:	08001787 	.word	0x08001787
 8001764:	08001791 	.word	0x08001791
 8001768:	0800179b 	.word	0x0800179b
 800176c:	080017a5 	.word	0x080017a5
 8001770:	080017af 	.word	0x080017af
 8001774:	080017b9 	.word	0x080017b9
 8001778:	080017c3 	.word	0x080017c3
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 800177c:	2101      	movs	r1, #1
 800177e:	481c      	ldr	r0, [pc, #112]	; (80017f0 <Si468x_get_sys_state+0xe8>)
 8001780:	f001 fc52 	bl	8003028 <send_debug_msg>
			break;
 8001784:	e027      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001786:	2101      	movs	r1, #1
 8001788:	481a      	ldr	r0, [pc, #104]	; (80017f4 <Si468x_get_sys_state+0xec>)
 800178a:	f001 fc4d 	bl	8003028 <send_debug_msg>
			break;
 800178e:	e022      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001790:	2101      	movs	r1, #1
 8001792:	4819      	ldr	r0, [pc, #100]	; (80017f8 <Si468x_get_sys_state+0xf0>)
 8001794:	f001 fc48 	bl	8003028 <send_debug_msg>
			break;
 8001798:	e01d      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 800179a:	2101      	movs	r1, #1
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <Si468x_get_sys_state+0xf4>)
 800179e:	f001 fc43 	bl	8003028 <send_debug_msg>
			break;
 80017a2:	e018      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017a4:	2101      	movs	r1, #1
 80017a6:	4816      	ldr	r0, [pc, #88]	; (8001800 <Si468x_get_sys_state+0xf8>)
 80017a8:	f001 fc3e 	bl	8003028 <send_debug_msg>
			break;
 80017ac:	e013      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017ae:	2101      	movs	r1, #1
 80017b0:	4814      	ldr	r0, [pc, #80]	; (8001804 <Si468x_get_sys_state+0xfc>)
 80017b2:	f001 fc39 	bl	8003028 <send_debug_msg>
			break;
 80017b6:	e00e      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017b8:	2101      	movs	r1, #1
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <Si468x_get_sys_state+0x100>)
 80017bc:	f001 fc34 	bl	8003028 <send_debug_msg>
			break;
 80017c0:	e009      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017c2:	2101      	movs	r1, #1
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <Si468x_get_sys_state+0x104>)
 80017c6:	f001 fc2f 	bl	8003028 <send_debug_msg>
			break;
 80017ca:	e004      	b.n	80017d6 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017cc:	2101      	movs	r1, #1
 80017ce:	4810      	ldr	r0, [pc, #64]	; (8001810 <Si468x_get_sys_state+0x108>)
 80017d0:	f001 fc2a 	bl	8003028 <send_debug_msg>
			break;
 80017d4:	bf00      	nop
	}
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0800a3c4 	.word	0x0800a3c4
 80017e0:	200000dc 	.word	0x200000dc
 80017e4:	2000191c 	.word	0x2000191c
 80017e8:	200010dc 	.word	0x200010dc
 80017ec:	0800a400 	.word	0x0800a400
 80017f0:	0800a40c 	.word	0x0800a40c
 80017f4:	0800a424 	.word	0x0800a424
 80017f8:	0800a43c 	.word	0x0800a43c
 80017fc:	0800a454 	.word	0x0800a454
 8001800:	0800a47c 	.word	0x0800a47c
 8001804:	0800a498 	.word	0x0800a498
 8001808:	0800a4b0 	.word	0x0800a4b0
 800180c:	0800a4cc 	.word	0x0800a4cc
 8001810:	0800a4e4 	.word	0x0800a4e4

08001814 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800181a:	2101      	movs	r1, #1
 800181c:	482d      	ldr	r0, [pc, #180]	; (80018d4 <Si468x_get_part_info+0xc0>)
 800181e:	f001 fc03 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <Si468x_get_part_info+0xc4>)
 8001824:	2208      	movs	r2, #8
 8001826:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <Si468x_get_part_info+0xc4>)
 800182a:	2200      	movs	r2, #0
 800182c:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800182e:	492a      	ldr	r1, [pc, #168]	; (80018d8 <Si468x_get_part_info+0xc4>)
 8001830:	2002      	movs	r0, #2
 8001832:	f7ff ff2f 	bl	8001694 <Si468x_write_command>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <Si468x_get_part_info+0xc8>)
 800183c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f003 fa18 	bl	8004c74 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fe67 	bl	8001518 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800184a:	4925      	ldr	r1, [pc, #148]	; (80018e0 <Si468x_get_part_info+0xcc>)
 800184c:	200a      	movs	r0, #10
 800184e:	f7ff ff43 	bl	80016d8 <Si468x_read_reply>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <Si468x_get_part_info+0xc8>)
 8001858:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800185a:	2100      	movs	r1, #0
 800185c:	4821      	ldr	r0, [pc, #132]	; (80018e4 <Si468x_get_part_info+0xd0>)
 800185e:	f001 fbe3 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <Si468x_get_part_info+0xcc>)
 8001864:	791b      	ldrb	r3, [r3, #4]
 8001866:	220a      	movs	r2, #10
 8001868:	491f      	ldr	r1, [pc, #124]	; (80018e8 <Si468x_get_part_info+0xd4>)
 800186a:	4618      	mov	r0, r3
 800186c:	f008 fb7e 	bl	8009f6c <itoa>
 8001870:	4603      	mov	r3, r0
 8001872:	2101      	movs	r1, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f001 fbd7 	bl	8003028 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 800187a:	2100      	movs	r1, #0
 800187c:	481b      	ldr	r0, [pc, #108]	; (80018ec <Si468x_get_part_info+0xd8>)
 800187e:	f001 fbd3 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <Si468x_get_part_info+0xcc>)
 8001884:	795b      	ldrb	r3, [r3, #5]
 8001886:	220a      	movs	r2, #10
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <Si468x_get_part_info+0xd4>)
 800188a:	4618      	mov	r0, r3
 800188c:	f008 fb6e 	bl	8009f6c <itoa>
 8001890:	4603      	mov	r3, r0
 8001892:	2101      	movs	r1, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fbc7 	bl	8003028 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 800189a:	2100      	movs	r1, #0
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <Si468x_get_part_info+0xdc>)
 800189e:	f001 fbc3 	bl	8003028 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <Si468x_get_part_info+0xcc>)
 80018a4:	7a5b      	ldrb	r3, [r3, #9]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <Si468x_get_part_info+0xcc>)
 80018ae:	7a1b      	ldrb	r3, [r3, #8]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	220a      	movs	r2, #10
 80018ba:	490b      	ldr	r1, [pc, #44]	; (80018e8 <Si468x_get_part_info+0xd4>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f008 fb55 	bl	8009f6c <itoa>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fbae 	bl	8003028 <send_debug_msg>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0800a4f8 	.word	0x0800a4f8
 80018d8:	200000dc 	.word	0x200000dc
 80018dc:	2000191c 	.word	0x2000191c
 80018e0:	200010dc 	.word	0x200010dc
 80018e4:	0800a534 	.word	0x0800a534
 80018e8:	200018dc 	.word	0x200018dc
 80018ec:	0800a544 	.word	0x0800a544
 80018f0:	0800a550 	.word	0x0800a550

080018f4 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	80fb      	strh	r3, [r7, #6]
 8001900:	4613      	mov	r3, r2
 8001902:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001904:	2101      	movs	r1, #1
 8001906:	4832      	ldr	r0, [pc, #200]	; (80019d0 <Si468x_set_property+0xdc>)
 8001908:	f001 fb8e 	bl	8003028 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 800190c:	2100      	movs	r1, #0
 800190e:	4831      	ldr	r0, [pc, #196]	; (80019d4 <Si468x_set_property+0xe0>)
 8001910:	f001 fb8a 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	2210      	movs	r2, #16
 8001918:	492f      	ldr	r1, [pc, #188]	; (80019d8 <Si468x_set_property+0xe4>)
 800191a:	4618      	mov	r0, r3
 800191c:	f008 fb26 	bl	8009f6c <itoa>
 8001920:	4603      	mov	r3, r0
 8001922:	2101      	movs	r1, #1
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fb7f 	bl	8003028 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800192a:	2100      	movs	r1, #0
 800192c:	482b      	ldr	r0, [pc, #172]	; (80019dc <Si468x_set_property+0xe8>)
 800192e:	f001 fb7b 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	2210      	movs	r2, #16
 8001936:	4928      	ldr	r1, [pc, #160]	; (80019d8 <Si468x_set_property+0xe4>)
 8001938:	4618      	mov	r0, r3
 800193a:	f008 fb17 	bl	8009f6c <itoa>
 800193e:	4603      	mov	r3, r0
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fb70 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <Si468x_set_property+0xec>)
 800194a:	2213      	movs	r2, #19
 800194c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <Si468x_set_property+0xec>)
 8001950:	2200      	movs	r2, #0
 8001952:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <Si468x_set_property+0xec>)
 800195a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	b29b      	uxth	r3, r3
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <Si468x_set_property+0xec>)
 8001966:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <Si468x_set_property+0xec>)
 800196e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <Si468x_set_property+0xec>)
 800197a:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 800197c:	4918      	ldr	r1, [pc, #96]	; (80019e0 <Si468x_set_property+0xec>)
 800197e:	2006      	movs	r0, #6
 8001980:	f7ff fe88 	bl	8001694 <Si468x_write_command>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <Si468x_set_property+0xf0>)
 800198a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f003 f971 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001992:	4915      	ldr	r1, [pc, #84]	; (80019e8 <Si468x_set_property+0xf4>)
 8001994:	2005      	movs	r0, #5
 8001996:	f7ff fe9f 	bl	80016d8 <Si468x_read_reply>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <Si468x_set_property+0xf0>)
 80019a0:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f825 	bl	80019f4 <Si468x_get_property>
 80019aa:	4603      	mov	r3, r0
 80019ac:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019ae:	89fa      	ldrh	r2, [r7, #14]
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d104      	bne.n	80019c0 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019b6:	2101      	movs	r1, #1
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <Si468x_set_property+0xf8>)
 80019ba:	f001 fb35 	bl	8003028 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019be:	e003      	b.n	80019c8 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019c0:	2101      	movs	r1, #1
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <Si468x_set_property+0xfc>)
 80019c4:	f001 fb30 	bl	8003028 <send_debug_msg>
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	0800a560 	.word	0x0800a560
 80019d4:	0800a5a0 	.word	0x0800a5a0
 80019d8:	200018dc 	.word	0x200018dc
 80019dc:	0800a5b0 	.word	0x0800a5b0
 80019e0:	200000dc 	.word	0x200000dc
 80019e4:	2000191c 	.word	0x2000191c
 80019e8:	200010dc 	.word	0x200010dc
 80019ec:	0800a5cc 	.word	0x0800a5cc
 80019f0:	0800a5e8 	.word	0x0800a5e8

080019f4 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019fe:	2101      	movs	r1, #1
 8001a00:	482b      	ldr	r0, [pc, #172]	; (8001ab0 <Si468x_get_property+0xbc>)
 8001a02:	f001 fb11 	bl	8003028 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a06:	2100      	movs	r1, #0
 8001a08:	482a      	ldr	r0, [pc, #168]	; (8001ab4 <Si468x_get_property+0xc0>)
 8001a0a:	f001 fb0d 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2210      	movs	r2, #16
 8001a12:	4929      	ldr	r1, [pc, #164]	; (8001ab8 <Si468x_get_property+0xc4>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f008 faa9 	bl	8009f6c <itoa>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fb02 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <Si468x_get_property+0xc8>)
 8001a26:	2214      	movs	r2, #20
 8001a28:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <Si468x_get_property+0xc8>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <Si468x_get_property+0xc8>)
 8001a36:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <Si468x_get_property+0xc8>)
 8001a42:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a44:	491d      	ldr	r1, [pc, #116]	; (8001abc <Si468x_get_property+0xc8>)
 8001a46:	2004      	movs	r0, #4
 8001a48:	f7ff fe24 	bl	8001694 <Si468x_write_command>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <Si468x_get_property+0xcc>)
 8001a52:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f003 f90d 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a5a:	491a      	ldr	r1, [pc, #104]	; (8001ac4 <Si468x_get_property+0xd0>)
 8001a5c:	2006      	movs	r0, #6
 8001a5e:	f7ff fe3b 	bl	80016d8 <Si468x_read_reply>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <Si468x_get_property+0xcc>)
 8001a68:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4816      	ldr	r0, [pc, #88]	; (8001ac8 <Si468x_get_property+0xd4>)
 8001a6e:	f001 fadb 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <Si468x_get_property+0xd0>)
 8001a74:	795b      	ldrb	r3, [r3, #5]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <Si468x_get_property+0xd0>)
 8001a7a:	7912      	ldrb	r2, [r2, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2210      	movs	r2, #16
 8001a80:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <Si468x_get_property+0xc4>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f008 fa72 	bl	8009f6c <itoa>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 facb 	bl	8003028 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <Si468x_get_property+0xd0>)
 8001a94:	795b      	ldrb	r3, [r3, #5]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <Si468x_get_property+0xd0>)
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b29b      	uxth	r3, r3
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800a600 	.word	0x0800a600
 8001ab4:	0800a5a0 	.word	0x0800a5a0
 8001ab8:	200018dc 	.word	0x200018dc
 8001abc:	200000dc 	.word	0x200000dc
 8001ac0:	2000191c 	.word	0x2000191c
 8001ac4:	200010dc 	.word	0x200010dc
 8001ac8:	0800a63c 	.word	0x0800a63c

08001acc <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	485d      	ldr	r0, [pc, #372]	; (8001c4c <Si468x_dab_get_freq_list+0x180>)
 8001ad6:	f001 faa7 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <Si468x_dab_get_freq_list+0x184>)
 8001adc:	22b9      	movs	r2, #185	; 0xb9
 8001ade:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <Si468x_dab_get_freq_list+0x184>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001ae6:	495a      	ldr	r1, [pc, #360]	; (8001c50 <Si468x_dab_get_freq_list+0x184>)
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7ff fdd3 	bl	8001694 <Si468x_write_command>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <Si468x_dab_get_freq_list+0x188>)
 8001af4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f003 f8bc 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001afc:	4956      	ldr	r1, [pc, #344]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001afe:	2005      	movs	r0, #5
 8001b00:	f7ff fdea 	bl	80016d8 <Si468x_read_reply>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <Si468x_dab_get_freq_list+0x188>)
 8001b0a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <Si468x_dab_get_freq_list+0x190>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <Si468x_dab_get_freq_list+0x58>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4850      	ldr	r0, [pc, #320]	; (8001c60 <Si468x_dab_get_freq_list+0x194>)
 8001b1e:	f001 fa83 	bl	8003028 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b22:	e08e      	b.n	8001c42 <Si468x_dab_get_freq_list+0x176>
		if(dab_spi_rx_buffer[4])
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8086 	beq.w	8001c3a <Si468x_dab_get_freq_list+0x16e>
			uint8_t read_offset = 2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	70fb      	strb	r3, [r7, #3]
			freq_cnt = dab_spi_rx_buffer[4];
 8001b32:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001b34:	791a      	ldrb	r2, [r3, #4]
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <Si468x_dab_get_freq_list+0x198>)
 8001b38:	701a      	strb	r2, [r3, #0]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	484a      	ldr	r0, [pc, #296]	; (8001c68 <Si468x_dab_get_freq_list+0x19c>)
 8001b3e:	f001 fa73 	bl	8003028 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b42:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <Si468x_dab_get_freq_list+0x198>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	220a      	movs	r2, #10
 8001b48:	4948      	ldr	r1, [pc, #288]	; (8001c6c <Si468x_dab_get_freq_list+0x1a0>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f008 fa0e 	bl	8009f6c <itoa>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fa67 	bl	8003028 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4844      	ldr	r0, [pc, #272]	; (8001c70 <Si468x_dab_get_freq_list+0x1a4>)
 8001b5e:	f001 fa63 	bl	8003028 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b62:	493d      	ldr	r1, [pc, #244]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001b64:	2003      	movs	r0, #3
 8001b66:	f7ff fdb7 	bl	80016d8 <Si468x_read_reply>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <Si468x_dab_get_freq_list+0x188>)
 8001b70:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <Si468x_dab_get_freq_list+0x198>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4935      	ldr	r1, [pc, #212]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fda7 	bl	80016d8 <Si468x_read_reply>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <Si468x_dab_get_freq_list+0x188>)
 8001b90:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	e049      	b.n	8001c2c <Si468x_dab_get_freq_list+0x160>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	18ca      	adds	r2, r1, r3
 8001bb8:	78f9      	ldrb	r1, [r7, #3]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	440b      	add	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	4925      	ldr	r1, [pc, #148]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	441a      	add	r2, r3
 8001bca:	78f9      	ldrb	r1, [r7, #3]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	440b      	add	r3, r1
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	4920      	ldr	r1, [pc, #128]	; (8001c58 <Si468x_dab_get_freq_list+0x18c>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	4413      	add	r3, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <Si468x_dab_get_freq_list+0x1a8>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001be6:	220a      	movs	r2, #10
 8001be8:	4920      	ldr	r1, [pc, #128]	; (8001c6c <Si468x_dab_get_freq_list+0x1a0>)
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f008 f9be 	bl	8009f6c <itoa>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 fa17 	bl	8003028 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	481e      	ldr	r0, [pc, #120]	; (8001c78 <Si468x_dab_get_freq_list+0x1ac>)
 8001bfe:	f001 fa13 	bl	8003028 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <Si468x_dab_get_freq_list+0x1a8>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	4917      	ldr	r1, [pc, #92]	; (8001c6c <Si468x_dab_get_freq_list+0x1a0>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f008 f9ac 	bl	8009f6c <itoa>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fa05 	bl	8003028 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4816      	ldr	r0, [pc, #88]	; (8001c7c <Si468x_dab_get_freq_list+0x1b0>)
 8001c22:	f001 fa01 	bl	8003028 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <Si468x_dab_get_freq_list+0x198>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4293      	cmp	r3, r2
 8001c36:	dbaf      	blt.n	8001b98 <Si468x_dab_get_freq_list+0xcc>
}
 8001c38:	e003      	b.n	8001c42 <Si468x_dab_get_freq_list+0x176>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4810      	ldr	r0, [pc, #64]	; (8001c80 <Si468x_dab_get_freq_list+0x1b4>)
 8001c3e:	f001 f9f3 	bl	8003028 <send_debug_msg>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0800a650 	.word	0x0800a650
 8001c50:	200000dc 	.word	0x200000dc
 8001c54:	2000191c 	.word	0x2000191c
 8001c58:	200010dc 	.word	0x200010dc
 8001c5c:	20001a0c 	.word	0x20001a0c
 8001c60:	0800a2f4 	.word	0x0800a2f4
 8001c64:	200019e0 	.word	0x200019e0
 8001c68:	0800a68c 	.word	0x0800a68c
 8001c6c:	200018dc 	.word	0x200018dc
 8001c70:	0800a694 	.word	0x0800a694
 8001c74:	20001920 	.word	0x20001920
 8001c78:	0800a6ac 	.word	0x0800a6ac
 8001c7c:	0800a6b0 	.word	0x0800a6b0
 8001c80:	0800a6b8 	.word	0x0800a6b8

08001c84 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001c94:	2101      	movs	r1, #1
 8001c96:	4849      	ldr	r0, [pc, #292]	; (8001dbc <Si468x_dab_tune_freq+0x138>)
 8001c98:	f001 f9c6 	bl	8003028 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4848      	ldr	r0, [pc, #288]	; (8001dc0 <Si468x_dab_tune_freq+0x13c>)
 8001ca0:	f001 f9c2 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <Si468x_dab_tune_freq+0x140>)
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	220a      	movs	r2, #10
 8001cae:	4946      	ldr	r1, [pc, #280]	; (8001dc8 <Si468x_dab_tune_freq+0x144>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f008 f95b 	bl	8009f6c <itoa>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f9b4 	bl	8003028 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4842      	ldr	r0, [pc, #264]	; (8001dcc <Si468x_dab_tune_freq+0x148>)
 8001cc4:	f001 f9b0 	bl	8003028 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001cca:	22b0      	movs	r2, #176	; 0xb0
 8001ccc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cd4:	4a3e      	ldr	r2, [pc, #248]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001ce6:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001cf2:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001cf4:	4936      	ldr	r1, [pc, #216]	; (8001dd0 <Si468x_dab_tune_freq+0x14c>)
 8001cf6:	2006      	movs	r0, #6
 8001cf8:	f7ff fccc 	bl	8001694 <Si468x_write_command>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <Si468x_dab_tune_freq+0x150>)
 8001d02:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d04:	4934      	ldr	r1, [pc, #208]	; (8001dd8 <Si468x_dab_tune_freq+0x154>)
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff fce6 	bl	80016d8 <Si468x_read_reply>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <Si468x_dab_tune_freq+0x150>)
 8001d12:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <Si468x_dab_tune_freq+0x158>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d22:	2101      	movs	r1, #1
 8001d24:	482e      	ldr	r0, [pc, #184]	; (8001de0 <Si468x_dab_tune_freq+0x15c>)
 8001d26:	f001 f97f 	bl	8003028 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	81fb      	strh	r3, [r7, #14]
 8001d2e:	e03a      	b.n	8001da6 <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d30:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <Si468x_dab_tune_freq+0x154>)
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fcd0 	bl	80016d8 <Si468x_read_reply>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <Si468x_dab_tune_freq+0x150>)
 8001d3e:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <Si468x_dab_tune_freq+0x158>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01c      	beq.n	8001d88 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4824      	ldr	r0, [pc, #144]	; (8001de4 <Si468x_dab_tune_freq+0x160>)
 8001d52:	f001 f969 	bl	8003028 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	220a      	movs	r2, #10
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <Si468x_dab_tune_freq+0x144>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f008 f905 	bl	8009f6c <itoa>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 f95e 	bl	8003028 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	481e      	ldr	r0, [pc, #120]	; (8001de8 <Si468x_dab_tune_freq+0x164>)
 8001d70:	f001 f95a 	bl	8003028 <send_debug_msg>
			actual_freq_id = channel;
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <Si468x_dab_tune_freq+0x168>)
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <Si468x_dab_tune_freq+0x140>)
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <Si468x_dab_tune_freq+0x16c>)
 8001d84:	6013      	str	r3, [r2, #0]
			break;
 8001d86:	e014      	b.n	8001db2 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d88:	89fb      	ldrh	r3, [r7, #14]
 8001d8a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d103      	bne.n	8001d9a <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001d92:	2101      	movs	r1, #1
 8001d94:	4817      	ldr	r0, [pc, #92]	; (8001df4 <Si468x_dab_tune_freq+0x170>)
 8001d96:	f001 f947 	bl	8003028 <send_debug_msg>
		}
		HAL_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f002 ff6a 	bl	8004c74 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	3301      	adds	r3, #1
 8001da4:	81fb      	strh	r3, [r7, #14]
 8001da6:	89fb      	ldrh	r3, [r7, #14]
 8001da8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d9bf      	bls.n	8001d30 <Si468x_dab_tune_freq+0xac>
	}
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	0800a6d4 	.word	0x0800a6d4
 8001dc0:	0800a710 	.word	0x0800a710
 8001dc4:	20001920 	.word	0x20001920
 8001dc8:	200018dc 	.word	0x200018dc
 8001dcc:	0800a6b0 	.word	0x0800a6b0
 8001dd0:	200000dc 	.word	0x200000dc
 8001dd4:	2000191c 	.word	0x2000191c
 8001dd8:	200010dc 	.word	0x200010dc
 8001ddc:	20001a0c 	.word	0x20001a0c
 8001de0:	0800a2f4 	.word	0x0800a2f4
 8001de4:	0800a71c 	.word	0x0800a71c
 8001de8:	0800a738 	.word	0x0800a738
 8001dec:	20002568 	.word	0x20002568
 8001df0:	20002564 	.word	0x20002564
 8001df4:	0800a740 	.word	0x0800a740

08001df8 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af06      	add	r7, sp, #24
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <Si468x_dab_digrad_status+0x90>)
 8001e00:	22b2      	movs	r2, #178	; 0xb2
 8001e02:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <Si468x_dab_digrad_status+0x90>)
 8001e06:	221a      	movs	r2, #26
 8001e08:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e0a:	491f      	ldr	r1, [pc, #124]	; (8001e88 <Si468x_dab_digrad_status+0x90>)
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7ff fc41 	bl	8001694 <Si468x_write_command>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <Si468x_dab_digrad_status+0x94>)
 8001e18:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f002 ff2a 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e20:	491b      	ldr	r1, [pc, #108]	; (8001e90 <Si468x_dab_digrad_status+0x98>)
 8001e22:	2028      	movs	r0, #40	; 0x28
 8001e24:	f7ff fc58 	bl	80016d8 <Si468x_read_reply>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <Si468x_dab_digrad_status+0x94>)
 8001e2e:	701a      	strb	r2, [r3, #0]
	memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <Si468x_dab_digrad_status+0x9c>)
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <Si468x_dab_digrad_status+0x98>)
 8001e34:	4615      	mov	r5, r2
 8001e36:	1d1c      	adds	r4, r3, #4
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e44:	e885 0003 	stmia.w	r5, {r0, r1}
	if(dab_digrad_status.snr > 20)
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <Si468x_dab_digrad_status+0x9c>)
 8001e4a:	78db      	ldrb	r3, [r3, #3]
 8001e4c:	2b14      	cmp	r3, #20
 8001e4e:	d902      	bls.n	8001e56 <Si468x_dab_digrad_status+0x5e>
	{
		dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <Si468x_dab_digrad_status+0x9c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	70da      	strb	r2, [r3, #3]
	}
	if(dab_digrad_status.cnr > 54)
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <Si468x_dab_digrad_status+0x9c>)
 8001e58:	795b      	ldrb	r3, [r3, #5]
 8001e5a:	2b36      	cmp	r3, #54	; 0x36
 8001e5c:	d902      	bls.n	8001e64 <Si468x_dab_digrad_status+0x6c>
	{
		dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <Si468x_dab_digrad_status+0x9c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	715a      	strb	r2, [r3, #5]
	}
	Display_dab_digrad_status_data(dab_digrad_status);
 8001e64:	4e0b      	ldr	r6, [pc, #44]	; (8001e94 <Si468x_dab_digrad_status+0x9c>)
 8001e66:	466d      	mov	r5, sp
 8001e68:	f106 0410 	add.w	r4, r6, #16
 8001e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e7c:	f001 faa6 	bl	80033cc <Display_dab_digrad_status_data>
}
 8001e80:	bf00      	nop
 8001e82:	3704      	adds	r7, #4
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e88:	200000dc 	.word	0x200000dc
 8001e8c:	2000191c 	.word	0x2000191c
 8001e90:	200010dc 	.word	0x200010dc
 8001e94:	200019e4 	.word	0x200019e4

08001e98 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001eaa:	2300      	movs	r3, #0
 8001eac:	717b      	strb	r3, [r7, #5]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001eae:	4ba2      	ldr	r3, [pc, #648]	; (8002138 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001eb4:	4ba0      	ldr	r3, [pc, #640]	; (8002138 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001eba:	499f      	ldr	r1, [pc, #636]	; (8002138 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f7ff fbe9 	bl	8001694 <Si468x_write_command>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b9d      	ldr	r3, [pc, #628]	; (800213c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ec8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f002 fed2 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001ed0:	499b      	ldr	r1, [pc, #620]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed6:	f7ff fbff 	bl	80016d8 <Si468x_read_reply>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b97      	ldr	r3, [pc, #604]	; (800213c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ee0:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4897      	ldr	r0, [pc, #604]	; (8002144 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001ee6:	f001 f89f 	bl	8003028 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001eea:	4b97      	ldr	r3, [pc, #604]	; (8002148 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4894      	ldr	r0, [pc, #592]	; (800214c <Si468x_dab_get_digital_service_list+0x2b4>)
 8001efc:	f001 f894 	bl	8003028 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001f00:	4b8f      	ldr	r3, [pc, #572]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b8e      	ldr	r3, [pc, #568]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f08:	795b      	ldrb	r3, [r3, #5]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	803b      	strh	r3, [r7, #0]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001f14:	4b8a      	ldr	r3, [pc, #552]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f16:	7a1b      	ldrb	r3, [r3, #8]
 8001f18:	71fb      	strb	r3, [r7, #7]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	713b      	strb	r3, [r7, #4]
 8001f1e:	e21e      	b.n	800235e <Si468x_dab_get_digital_service_list+0x4c6>
	{
		services_list[service_index + actual_services].freq = actual_freq;
 8001f20:	793b      	ldrb	r3, [r7, #4]
 8001f22:	4a8b      	ldr	r2, [pc, #556]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	498a      	ldr	r1, [pc, #552]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f2e:	2034      	movs	r0, #52	; 0x34
 8001f30:	fb00 f303 	mul.w	r3, r0, r3
 8001f34:	440b      	add	r3, r1
 8001f36:	3328      	adds	r3, #40	; 0x28
 8001f38:	601a      	str	r2, [r3, #0]
		services_list[service_index + actual_services].freq_id = actual_freq_id;
 8001f3a:	793b      	ldrb	r3, [r7, #4]
 8001f3c:	4a84      	ldr	r2, [pc, #528]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a86      	ldr	r2, [pc, #536]	; (800215c <Si468x_dab_get_digital_service_list+0x2c4>)
 8001f44:	7810      	ldrb	r0, [r2, #0]
 8001f46:	4a84      	ldr	r2, [pc, #528]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f48:	2134      	movs	r1, #52	; 0x34
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	332c      	adds	r3, #44	; 0x2c
 8001f52:	4602      	mov	r2, r0
 8001f54:	701a      	strb	r2, [r3, #0]

		services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001f56:	79ba      	ldrb	r2, [r7, #6]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	f103 0210 	add.w	r2, r3, #16
 8001f64:	797b      	ldrb	r3, [r7, #5]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f6c:	5cd2      	ldrb	r2, [r2, r3]
 8001f6e:	793b      	ldrb	r3, [r7, #4]
 8001f70:	4977      	ldr	r1, [pc, #476]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f72:	7809      	ldrb	r1, [r1, #0]
 8001f74:	440b      	add	r3, r1
 8001f76:	f002 0201 	and.w	r2, r2, #1
 8001f7a:	b2d0      	uxtb	r0, r2
 8001f7c:	4a76      	ldr	r2, [pc, #472]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001f7e:	2134      	movs	r1, #52	; 0x34
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3318      	adds	r3, #24
 8001f88:	4602      	mov	r2, r0
 8001f8a:	701a      	strb	r2, [r3, #0]
		services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001f8c:	79ba      	ldrb	r2, [r7, #6]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f103 0211 	add.w	r2, r3, #17
 8001f9a:	797b      	ldrb	r3, [r7, #5]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a67      	ldr	r2, [pc, #412]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001fa2:	5cd2      	ldrb	r2, [r2, r3]
 8001fa4:	793b      	ldrb	r3, [r7, #4]
 8001fa6:	496a      	ldr	r1, [pc, #424]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fa8:	7809      	ldrb	r1, [r1, #0]
 8001faa:	440b      	add	r3, r1
 8001fac:	f002 020f 	and.w	r2, r2, #15
 8001fb0:	b2d0      	uxtb	r0, r2
 8001fb2:	4a69      	ldr	r2, [pc, #420]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fb4:	2134      	movs	r1, #52	; 0x34
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	332d      	adds	r3, #45	; 0x2d
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + actual_services].pd_flag)
 8001fc2:	793b      	ldrb	r3, [r7, #4]
 8001fc4:	4a62      	ldr	r2, [pc, #392]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a63      	ldr	r2, [pc, #396]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fcc:	2134      	movs	r1, #52	; 0x34
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3318      	adds	r3, #24
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d017      	beq.n	800200c <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	71bb      	strb	r3, [r7, #6]
			components_count += services_list[service_index + actual_services].number_of_components;
 8001fe2:	793b      	ldrb	r3, [r7, #4]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a5b      	ldr	r2, [pc, #364]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fec:	2134      	movs	r1, #52	; 0x34
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	332d      	adds	r3, #45	; 0x2d
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	797b      	ldrb	r3, [r7, #5]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	717b      	strb	r3, [r7, #5]
			service_index--;
 8001ffe:	793b      	ldrb	r3, [r7, #4]
 8002000:	3b01      	subs	r3, #1
 8002002:	713b      	strb	r3, [r7, #4]
			number_of_services--;
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	3b01      	subs	r3, #1
 8002008:	71fb      	strb	r3, [r7, #7]
			continue;
 800200a:	e1a5      	b.n	8002358 <Si468x_dab_get_digital_service_list+0x4c0>
		}

		services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 800200c:	79ba      	ldrb	r2, [r7, #6]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	f103 0210 	add.w	r2, r3, #16
 800201a:	797b      	ldrb	r3, [r7, #5]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	105b      	asrs	r3, r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	793b      	ldrb	r3, [r7, #4]
 800202a:	4949      	ldr	r1, [pc, #292]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 800202c:	7809      	ldrb	r1, [r1, #0]
 800202e:	440b      	add	r3, r1
 8002030:	f002 021f 	and.w	r2, r2, #31
 8002034:	b2d0      	uxtb	r0, r2
 8002036:	4a48      	ldr	r2, [pc, #288]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002038:	2134      	movs	r1, #52	; 0x34
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3319      	adds	r3, #25
 8002042:	4602      	mov	r2, r0
 8002044:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + actual_services].pd_flag)
 8002046:	793b      	ldrb	r3, [r7, #4]
 8002048:	4a41      	ldr	r2, [pc, #260]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	4a42      	ldr	r2, [pc, #264]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002050:	2134      	movs	r1, #52	; 0x34
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3318      	adds	r3, #24
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <Si468x_dab_get_digital_service_list+0x1ce>
 8002060:	2b01      	cmp	r3, #1
 8002062:	d07d      	beq.n	8002160 <Si468x_dab_get_digital_service_list+0x2c8>
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
				break;

			default:
				break;
 8002064:	e0f2      	b.n	800224c <Si468x_dab_get_digital_service_list+0x3b4>
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8002066:	79ba      	ldrb	r2, [r7, #6]
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	f103 020c 	add.w	r2, r3, #12
 8002074:	797b      	ldrb	r3, [r7, #5]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	4a31      	ldr	r2, [pc, #196]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	4619      	mov	r1, r3
 8002080:	79ba      	ldrb	r2, [r7, #6]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	f103 020d 	add.w	r2, r3, #13
 800208e:	797b      	ldrb	r3, [r7, #5]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800209e:	4419      	add	r1, r3
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4608      	mov	r0, r1
 80020aa:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020ac:	2134      	movs	r1, #52	; 0x34
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	331c      	adds	r3, #28
 80020b6:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80020b8:	79ba      	ldrb	r2, [r7, #6]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	f103 020d 	add.w	r2, r3, #13
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <Si468x_dab_get_digital_service_list+0x2a8>)
 80020ce:	5cd2      	ldrb	r2, [r2, r3]
 80020d0:	793b      	ldrb	r3, [r7, #4]
 80020d2:	491f      	ldr	r1, [pc, #124]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020d4:	7809      	ldrb	r1, [r1, #0]
 80020d6:	440b      	add	r3, r1
 80020d8:	0912      	lsrs	r2, r2, #4
 80020da:	b2d0      	uxtb	r0, r2
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020de:	2134      	movs	r1, #52	; 0x34
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3320      	adds	r3, #32
 80020e8:	4602      	mov	r2, r0
 80020ea:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 80020ec:	793b      	ldrb	r3, [r7, #4]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a18      	ldr	r2, [pc, #96]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020f6:	2134      	movs	r1, #52	; 0x34
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3320      	adds	r3, #32
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	031b      	lsls	r3, r3, #12
 8002104:	4618      	mov	r0, r3
 8002106:	793b      	ldrb	r3, [r7, #4]
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	4413      	add	r3, r2
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002110:	2134      	movs	r1, #52	; 0x34
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	331c      	adds	r3, #28
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	793b      	ldrb	r3, [r7, #4]
 800211e:	490c      	ldr	r1, [pc, #48]	; (8002150 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002120:	7809      	ldrb	r1, [r1, #0]
 8002122:	440b      	add	r3, r1
 8002124:	4402      	add	r2, r0
 8002126:	490c      	ldr	r1, [pc, #48]	; (8002158 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002128:	2034      	movs	r0, #52	; 0x34
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	440b      	add	r3, r1
 8002130:	3324      	adds	r3, #36	; 0x24
 8002132:	601a      	str	r2, [r3, #0]
				break;
 8002134:	e08a      	b.n	800224c <Si468x_dab_get_digital_service_list+0x3b4>
 8002136:	bf00      	nop
 8002138:	200000dc 	.word	0x200000dc
 800213c:	2000191c 	.word	0x2000191c
 8002140:	200010dc 	.word	0x200010dc
 8002144:	0800a7a0 	.word	0x0800a7a0
 8002148:	20001a0c 	.word	0x20001a0c
 800214c:	0800a2f4 	.word	0x0800a2f4
 8002150:	20002562 	.word	0x20002562
 8002154:	20002564 	.word	0x20002564
 8002158:	20001b38 	.word	0x20001b38
 800215c:	20002568 	.word	0x20002568
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8002160:	79ba      	ldrb	r2, [r7, #6]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	f103 020c 	add.w	r2, r3, #12
 800216e:	797b      	ldrb	r3, [r7, #5]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	4a85      	ldr	r2, [pc, #532]	; (800238c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	4619      	mov	r1, r3
 800217a:	79ba      	ldrb	r2, [r7, #6]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	f103 020d 	add.w	r2, r3, #13
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	4a7f      	ldr	r2, [pc, #508]	; (800238c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4419      	add	r1, r3
 8002196:	79ba      	ldrb	r2, [r7, #6]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f103 020e 	add.w	r2, r3, #14
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	4a78      	ldr	r2, [pc, #480]	; (800238c <Si468x_dab_get_digital_service_list+0x4f4>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	041b      	lsls	r3, r3, #16
 80021b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021b4:	4419      	add	r1, r3
 80021b6:	793b      	ldrb	r3, [r7, #4]
 80021b8:	4a75      	ldr	r2, [pc, #468]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	4608      	mov	r0, r1
 80021c0:	4a74      	ldr	r2, [pc, #464]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021c2:	2134      	movs	r1, #52	; 0x34
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	331c      	adds	r3, #28
 80021cc:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80021ce:	79ba      	ldrb	r2, [r7, #6]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	f103 020e 	add.w	r2, r3, #14
 80021dc:	797b      	ldrb	r3, [r7, #5]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	4a6a      	ldr	r2, [pc, #424]	; (800238c <Si468x_dab_get_digital_service_list+0x4f4>)
 80021e4:	5cd2      	ldrb	r2, [r2, r3]
 80021e6:	793b      	ldrb	r3, [r7, #4]
 80021e8:	4969      	ldr	r1, [pc, #420]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 80021ea:	7809      	ldrb	r1, [r1, #0]
 80021ec:	440b      	add	r3, r1
 80021ee:	0912      	lsrs	r2, r2, #4
 80021f0:	b2d0      	uxtb	r0, r2
 80021f2:	4a68      	ldr	r2, [pc, #416]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 80021f4:	2134      	movs	r1, #52	; 0x34
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3320      	adds	r3, #32
 80021fe:	4602      	mov	r2, r0
 8002200:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 8002202:	793b      	ldrb	r3, [r7, #4]
 8002204:	4a62      	ldr	r2, [pc, #392]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	4413      	add	r3, r2
 800220a:	4a62      	ldr	r2, [pc, #392]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 800220c:	2134      	movs	r1, #52	; 0x34
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3320      	adds	r3, #32
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	4618      	mov	r0, r3
 800221c:	793b      	ldrb	r3, [r7, #4]
 800221e:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a5b      	ldr	r2, [pc, #364]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002226:	2134      	movs	r1, #52	; 0x34
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	331c      	adds	r3, #28
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	793b      	ldrb	r3, [r7, #4]
 8002234:	4956      	ldr	r1, [pc, #344]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002236:	7809      	ldrb	r1, [r1, #0]
 8002238:	440b      	add	r3, r1
 800223a:	4402      	add	r2, r0
 800223c:	4955      	ldr	r1, [pc, #340]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 800223e:	2034      	movs	r0, #52	; 0x34
 8002240:	fb00 f303 	mul.w	r3, r0, r3
 8002244:	440b      	add	r3, r1
 8002246:	3324      	adds	r3, #36	; 0x24
 8002248:	601a      	str	r2, [r3, #0]
				break;
 800224a:	bf00      	nop
		}

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800224c:	2300      	movs	r3, #0
 800224e:	70fb      	strb	r3, [r7, #3]
 8002250:	e038      	b.n	80022c4 <Si468x_dab_get_digital_service_list+0x42c>
		{
			services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f103 0114 	add.w	r1, r3, #20
 8002258:	79ba      	ldrb	r2, [r7, #6]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	18ca      	adds	r2, r1, r3
 8002264:	797b      	ldrb	r3, [r7, #5]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	18d1      	adds	r1, r2, r3
 800226a:	793b      	ldrb	r3, [r7, #4]
 800226c:	4a48      	ldr	r2, [pc, #288]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	441a      	add	r2, r3
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	4845      	ldr	r0, [pc, #276]	; (800238c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002276:	5c44      	ldrb	r4, [r0, r1]
 8002278:	4946      	ldr	r1, [pc, #280]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 800227a:	2034      	movs	r0, #52	; 0x34
 800227c:	fb00 f202 	mul.w	r2, r0, r2
 8002280:	440a      	add	r2, r1
 8002282:	4413      	add	r3, r2
 8002284:	4622      	mov	r2, r4
 8002286:	701a      	strb	r2, [r3, #0]
			if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 8002288:	793b      	ldrb	r3, [r7, #4]
 800228a:	4a41      	ldr	r2, [pc, #260]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	441a      	add	r2, r3
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	4940      	ldr	r1, [pc, #256]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002294:	2034      	movs	r0, #52	; 0x34
 8002296:	fb00 f202 	mul.w	r2, r0, r2
 800229a:	440a      	add	r2, r1
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b86      	cmp	r3, #134	; 0x86
 80022a2:	d10c      	bne.n	80022be <Si468x_dab_get_digital_service_list+0x426>
			{
				services_list[service_index + actual_services].name[name_index] = 0x6F;
 80022a4:	793b      	ldrb	r3, [r7, #4]
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	441a      	add	r2, r3
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	4939      	ldr	r1, [pc, #228]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 80022b0:	2034      	movs	r0, #52	; 0x34
 80022b2:	fb00 f202 	mul.w	r2, r0, r2
 80022b6:	440a      	add	r2, r1
 80022b8:	4413      	add	r3, r2
 80022ba:	226f      	movs	r2, #111	; 0x6f
 80022bc:	701a      	strb	r2, [r3, #0]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	3301      	adds	r3, #1
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	d9c3      	bls.n	8002252 <Si468x_dab_get_digital_service_list+0x3ba>
			}
		}

		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	70bb      	strb	r3, [r7, #2]
 80022ce:	e032      	b.n	8002336 <Si468x_dab_get_digital_service_list+0x49e>
		{
			services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80022d0:	793b      	ldrb	r3, [r7, #4]
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	441a      	add	r2, r3
 80022d8:	78bb      	ldrb	r3, [r7, #2]
 80022da:	492e      	ldr	r1, [pc, #184]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 80022dc:	201a      	movs	r0, #26
 80022de:	fb00 f202 	mul.w	r2, r0, r2
 80022e2:	4413      	add	r3, r2
 80022e4:	3314      	adds	r3, #20
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	440b      	add	r3, r1
 80022ea:	2200      	movs	r2, #0
 80022ec:	71da      	strb	r2, [r3, #7]
			services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80022ee:	79ba      	ldrb	r2, [r7, #6]
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80022fc:	797b      	ldrb	r3, [r7, #5]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	4a22      	ldr	r2, [pc, #136]	; (800238c <Si468x_dab_get_digital_service_list+0x4f4>)
 8002304:	5cd1      	ldrb	r1, [r2, r3]
 8002306:	793b      	ldrb	r3, [r7, #4]
 8002308:	4a21      	ldr	r2, [pc, #132]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	441a      	add	r2, r3
 800230e:	78bb      	ldrb	r3, [r7, #2]
 8002310:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002314:	b2cc      	uxtb	r4, r1
 8002316:	491f      	ldr	r1, [pc, #124]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002318:	201a      	movs	r0, #26
 800231a:	fb00 f202 	mul.w	r2, r0, r2
 800231e:	4413      	add	r3, r2
 8002320:	3314      	adds	r3, #20
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	440b      	add	r3, r1
 8002326:	4622      	mov	r2, r4
 8002328:	719a      	strb	r2, [r3, #6]
			components_count++;
 800232a:	797b      	ldrb	r3, [r7, #5]
 800232c:	3301      	adds	r3, #1
 800232e:	717b      	strb	r3, [r7, #5]
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002330:	78bb      	ldrb	r3, [r7, #2]
 8002332:	3301      	adds	r3, #1
 8002334:	70bb      	strb	r3, [r7, #2]
 8002336:	793b      	ldrb	r3, [r7, #4]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	4413      	add	r3, r2
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <Si468x_dab_get_digital_service_list+0x4fc>)
 8002340:	2134      	movs	r1, #52	; 0x34
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	332d      	adds	r3, #45	; 0x2d
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	78ba      	ldrb	r2, [r7, #2]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3be      	bcc.n	80022d0 <Si468x_dab_get_digital_service_list+0x438>
		}
		services_count++;
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	3301      	adds	r3, #1
 8002356:	71bb      	strb	r3, [r7, #6]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8002358:	793b      	ldrb	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	713b      	strb	r3, [r7, #4]
 800235e:	793a      	ldrb	r2, [r7, #4]
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	429a      	cmp	r2, r3
 8002364:	f4ff addc 	bcc.w	8001f20 <Si468x_dab_get_digital_service_list+0x88>
	}

	total_services += number_of_services;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <Si468x_dab_get_digital_service_list+0x500>)
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4413      	add	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <Si468x_dab_get_digital_service_list+0x500>)
 8002374:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002378:	781a      	ldrb	r2, [r3, #0]
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	4413      	add	r3, r2
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <Si468x_dab_get_digital_service_list+0x4f8>)
 8002382:	701a      	strb	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	200010dc 	.word	0x200010dc
 8002390:	20002562 	.word	0x20002562
 8002394:	20001b38 	.word	0x20001b38
 8002398:	20002560 	.word	0x20002560

0800239c <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 80023a6:	2101      	movs	r1, #1
 80023a8:	482d      	ldr	r0, [pc, #180]	; (8002460 <Si468x_dab_start_digital_service+0xc4>)
 80023aa:	f000 fe3d 	bl	8003028 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 80023ae:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023b0:	2281      	movs	r2, #129	; 0x81
 80023b2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023cc:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023d6:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023e0:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023ea:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023f2:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 80023fc:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 8002406:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	0e1b      	lsrs	r3, r3, #24
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 8002410:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002412:	4914      	ldr	r1, [pc, #80]	; (8002464 <Si468x_dab_start_digital_service+0xc8>)
 8002414:	200c      	movs	r0, #12
 8002416:	f7ff f93d 	bl	8001694 <Si468x_write_command>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <Si468x_dab_start_digital_service+0xcc>)
 8002420:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002422:	2001      	movs	r0, #1
 8002424:	f002 fc26 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002428:	4910      	ldr	r1, [pc, #64]	; (800246c <Si468x_dab_start_digital_service+0xd0>)
 800242a:	2005      	movs	r0, #5
 800242c:	f7ff f954 	bl	80016d8 <Si468x_read_reply>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <Si468x_dab_start_digital_service+0xcc>)
 8002436:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <Si468x_dab_start_digital_service+0xd4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002446:	2101      	movs	r1, #1
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <Si468x_dab_start_digital_service+0xd8>)
 800244a:	f000 fded 	bl	8003028 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 800244e:	e003      	b.n	8002458 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002450:	2101      	movs	r1, #1
 8002452:	4809      	ldr	r0, [pc, #36]	; (8002478 <Si468x_dab_start_digital_service+0xdc>)
 8002454:	f000 fde8 	bl	8003028 <send_debug_msg>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	0800a7dc 	.word	0x0800a7dc
 8002464:	200000dc 	.word	0x200000dc
 8002468:	2000191c 	.word	0x2000191c
 800246c:	200010dc 	.word	0x200010dc
 8002470:	20001a0c 	.word	0x20001a0c
 8002474:	0800a2f4 	.word	0x0800a2f4
 8002478:	0800a818 	.word	0x0800a818

0800247c <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 8002486:	2101      	movs	r1, #1
 8002488:	4851      	ldr	r0, [pc, #324]	; (80025d0 <Si468x_dab_get_ensemble_info+0x154>)
 800248a:	f000 fdcd 	bl	8003028 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <Si468x_dab_get_ensemble_info+0x158>)
 8002490:	22b4      	movs	r2, #180	; 0xb4
 8002492:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <Si468x_dab_get_ensemble_info+0x158>)
 8002496:	2200      	movs	r2, #0
 8002498:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800249a:	494e      	ldr	r1, [pc, #312]	; (80025d4 <Si468x_dab_get_ensemble_info+0x158>)
 800249c:	2002      	movs	r0, #2
 800249e:	f7ff f8f9 	bl	8001694 <Si468x_write_command>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <Si468x_dab_get_ensemble_info+0x15c>)
 80024a8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80024aa:	2002      	movs	r0, #2
 80024ac:	f002 fbe2 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80024b0:	494a      	ldr	r1, [pc, #296]	; (80025dc <Si468x_dab_get_ensemble_info+0x160>)
 80024b2:	2015      	movs	r0, #21
 80024b4:	f7ff f910 	bl	80016d8 <Si468x_read_reply>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <Si468x_dab_get_ensemble_info+0x15c>)
 80024be:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 80024c0:	e012      	b.n	80024e8 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80024c2:	4944      	ldr	r1, [pc, #272]	; (80025d4 <Si468x_dab_get_ensemble_info+0x158>)
 80024c4:	2002      	movs	r0, #2
 80024c6:	f7ff f8e5 	bl	8001694 <Si468x_write_command>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <Si468x_dab_get_ensemble_info+0x15c>)
 80024d0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80024d2:	2002      	movs	r0, #2
 80024d4:	f002 fbce 	bl	8004c74 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80024d8:	4940      	ldr	r1, [pc, #256]	; (80025dc <Si468x_dab_get_ensemble_info+0x160>)
 80024da:	2015      	movs	r0, #21
 80024dc:	f7ff f8fc 	bl	80016d8 <Si468x_read_reply>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <Si468x_dab_get_ensemble_info+0x15c>)
 80024e6:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80024e8:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <Si468x_dab_get_ensemble_info+0x160>)
 80024ea:	799b      	ldrb	r3, [r3, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0e8      	beq.n	80024c2 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <Si468x_dab_get_ensemble_info+0x164>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80024fe:	2101      	movs	r1, #1
 8002500:	4838      	ldr	r0, [pc, #224]	; (80025e4 <Si468x_dab_get_ensemble_info+0x168>)
 8002502:	f000 fd91 	bl	8003028 <send_debug_msg>
		return 0;
 8002506:	2300      	movs	r3, #0
 8002508:	e05d      	b.n	80025c6 <Si468x_dab_get_ensemble_info+0x14a>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 800250a:	4b34      	ldr	r3, [pc, #208]	; (80025dc <Si468x_dab_get_ensemble_info+0x160>)
 800250c:	795b      	ldrb	r3, [r3, #5]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4a32      	ldr	r2, [pc, #200]	; (80025dc <Si468x_dab_get_ensemble_info+0x160>)
 8002512:	7912      	ldrb	r2, [r2, #4]
 8002514:	4413      	add	r3, r2
 8002516:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04e      	beq.n	80025bc <Si468x_dab_get_ensemble_info+0x140>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 800251e:	2101      	movs	r1, #1
 8002520:	4831      	ldr	r0, [pc, #196]	; (80025e8 <Si468x_dab_get_ensemble_info+0x16c>)
 8002522:	f000 fd81 	bl	8003028 <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <Si468x_dab_get_ensemble_info+0x170>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b298      	uxth	r0, r3
 8002530:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <Si468x_dab_get_ensemble_info+0x174>)
 8002532:	460b      	mov	r3, r1
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	1a5b      	subs	r3, r3, r1
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	4602      	mov	r2, r0
 800253e:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <Si468x_dab_get_ensemble_info+0x170>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <Si468x_dab_get_ensemble_info+0x178>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4929      	ldr	r1, [pc, #164]	; (80025f0 <Si468x_dab_get_ensemble_info+0x174>)
 800254c:	4603      	mov	r3, r0
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a1b      	subs	r3, r3, r0
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3314      	adds	r3, #20
 8002558:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <Si468x_dab_get_ensemble_info+0x170>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <Si468x_dab_get_ensemble_info+0x17c>)
 8002562:	7818      	ldrb	r0, [r3, #0]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <Si468x_dab_get_ensemble_info+0x174>)
 8002566:	460b      	mov	r3, r1
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a5b      	subs	r3, r3, r1
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3318      	adds	r3, #24
 8002572:	4602      	mov	r2, r0
 8002574:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002576:	2300      	movs	r3, #0
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	e014      	b.n	80025a6 <Si468x_dab_get_ensemble_info+0x12a>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	3306      	adds	r3, #6
 8002580:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <Si468x_dab_get_ensemble_info+0x170>)
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	4610      	mov	r0, r2
 8002586:	79fa      	ldrb	r2, [r7, #7]
 8002588:	4914      	ldr	r1, [pc, #80]	; (80025dc <Si468x_dab_get_ensemble_info+0x160>)
 800258a:	5ccc      	ldrb	r4, [r1, r3]
 800258c:	4918      	ldr	r1, [pc, #96]	; (80025f0 <Si468x_dab_get_ensemble_info+0x174>)
 800258e:	4603      	mov	r3, r0
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a1b      	subs	r3, r3, r0
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	4413      	add	r3, r2
 800259a:	3302      	adds	r3, #2
 800259c:	4622      	mov	r2, r4
 800259e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	3301      	adds	r3, #1
 80025a4:	71fb      	strb	r3, [r7, #7]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d9e7      	bls.n	800257c <Si468x_dab_get_ensemble_info+0x100>
			}

			total_ensembles++;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <Si468x_dab_get_ensemble_info+0x170>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <Si468x_dab_get_ensemble_info+0x170>)
 80025b6:	701a      	strb	r2, [r3, #0]
			return 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e004      	b.n	80025c6 <Si468x_dab_get_ensemble_info+0x14a>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 80025bc:	2101      	movs	r1, #1
 80025be:	480f      	ldr	r0, [pc, #60]	; (80025fc <Si468x_dab_get_ensemble_info+0x180>)
 80025c0:	f000 fd32 	bl	8003028 <send_debug_msg>
			return 0;
 80025c4:	2300      	movs	r3, #0
		}
	}
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd90      	pop	{r4, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	0800a838 	.word	0x0800a838
 80025d4:	200000dc 	.word	0x200000dc
 80025d8:	2000191c 	.word	0x2000191c
 80025dc:	200010dc 	.word	0x200010dc
 80025e0:	20001a0c 	.word	0x20001a0c
 80025e4:	0800a2f4 	.word	0x0800a2f4
 80025e8:	0800a874 	.word	0x0800a874
 80025ec:	20002561 	.word	0x20002561
 80025f0:	20001a20 	.word	0x20001a20
 80025f4:	20002564 	.word	0x20002564
 80025f8:	20002568 	.word	0x20002568
 80025fc:	0800a884 	.word	0x0800a884

08002600 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 8002606:	2101      	movs	r1, #1
 8002608:	48ae      	ldr	r0, [pc, #696]	; (80028c4 <Si468x_dab_full_scan+0x2c4>)
 800260a:	f000 fd0d 	bl	8003028 <send_debug_msg>
	total_services = 0;
 800260e:	4bae      	ldr	r3, [pc, #696]	; (80028c8 <Si468x_dab_full_scan+0x2c8>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 8002614:	4bad      	ldr	r3, [pc, #692]	; (80028cc <Si468x_dab_full_scan+0x2cc>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 800261a:	4bad      	ldr	r3, [pc, #692]	; (80028d0 <Si468x_dab_full_scan+0x2d0>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]

	uint8_t valid_timeout = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	71fb      	strb	r3, [r7, #7]
	uint8_t fic_q_timeout = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	71bb      	strb	r3, [r7, #6]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002628:	2300      	movs	r3, #0
 800262a:	717b      	strb	r3, [r7, #5]
 800262c:	e060      	b.n	80026f0 <Si468x_dab_full_scan+0xf0>
	{
//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 800262e:	2304      	movs	r3, #4
 8002630:	71fb      	strb	r3, [r7, #7]
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002632:	2364      	movs	r3, #100	; 0x64
 8002634:	71bb      	strb	r3, [r7, #6]

		Si468x_dab_tune_freq(freq_index, 0);
 8002636:	797b      	ldrb	r3, [r7, #5]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fb22 	bl	8001c84 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002640:	f7ff fbda 	bl	8001df8 <Si468x_dab_digrad_status>
			valid_timeout--;
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	3b01      	subs	r3, #1
 8002648:	71fb      	strb	r3, [r7, #7]
			if(!valid_timeout)
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <Si468x_dab_full_scan+0x5a>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002650:	2101      	movs	r1, #1
 8002652:	48a0      	ldr	r0, [pc, #640]	; (80028d4 <Si468x_dab_full_scan+0x2d4>)
 8002654:	f000 fce8 	bl	8003028 <send_debug_msg>
				break;
 8002658:	e010      	b.n	800267c <Si468x_dab_full_scan+0x7c>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800265a:	2032      	movs	r0, #50	; 0x32
 800265c:	f002 fb0a 	bl	8004c74 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002660:	4b9d      	ldr	r3, [pc, #628]	; (80028d8 <Si468x_dab_full_scan+0x2d8>)
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0e8      	beq.n	8002640 <Si468x_dab_full_scan+0x40>
 800266e:	4b9a      	ldr	r3, [pc, #616]	; (80028d8 <Si468x_dab_full_scan+0x2d8>)
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0e1      	beq.n	8002640 <Si468x_dab_full_scan+0x40>

		if(valid_timeout)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d013      	beq.n	80026aa <Si468x_dab_full_scan+0xaa>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002682:	f7ff fbb9 	bl	8001df8 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 8002686:	79bb      	ldrb	r3, [r7, #6]
 8002688:	3b01      	subs	r3, #1
 800268a:	71bb      	strb	r3, [r7, #6]
				if(!fic_q_timeout)
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <Si468x_dab_full_scan+0x9c>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002692:	2101      	movs	r1, #1
 8002694:	488f      	ldr	r0, [pc, #572]	; (80028d4 <Si468x_dab_full_scan+0x2d4>)
 8002696:	f000 fcc7 	bl	8003028 <send_debug_msg>
					break;
 800269a:	e006      	b.n	80026aa <Si468x_dab_full_scan+0xaa>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800269c:	2032      	movs	r0, #50	; 0x32
 800269e:	f002 fae9 	bl	8004c74 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 80026a2:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <Si468x_dab_full_scan+0x2d8>)
 80026a4:	791b      	ldrb	r3, [r3, #4]
 80026a6:	2b31      	cmp	r3, #49	; 0x31
 80026a8:	d9eb      	bls.n	8002682 <Si468x_dab_full_scan+0x82>
		}

		if(valid_timeout && fic_q_timeout)
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01c      	beq.n	80026ea <Si468x_dab_full_scan+0xea>
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d019      	beq.n	80026ea <Si468x_dab_full_scan+0xea>
		{
			do
			{
				Si468x_dab_get_event_status();
 80026b6:	f000 fb1f 	bl	8002cf8 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80026ba:	200a      	movs	r0, #10
 80026bc:	f002 fada 	bl	8004c74 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80026c0:	4b86      	ldr	r3, [pc, #536]	; (80028dc <Si468x_dab_full_scan+0x2dc>)
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f3      	beq.n	80026b6 <Si468x_dab_full_scan+0xb6>
 80026ce:	4b83      	ldr	r3, [pc, #524]	; (80028dc <Si468x_dab_full_scan+0x2dc>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ec      	bne.n	80026b6 <Si468x_dab_full_scan+0xb6>

			if(Si468x_dab_get_ensemble_info())
 80026dc:	f7ff fece 	bl	800247c <Si468x_dab_get_ensemble_info>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <Si468x_dab_full_scan+0xea>
			{
				Si468x_dab_get_digital_service_list();
 80026e6:	f7ff fbd7 	bl	8001e98 <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 80026ea:	797b      	ldrb	r3, [r7, #5]
 80026ec:	3301      	adds	r3, #1
 80026ee:	717b      	strb	r3, [r7, #5]
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <Si468x_dab_full_scan+0x2e0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	797a      	ldrb	r2, [r7, #5]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d399      	bcc.n	800262e <Si468x_dab_full_scan+0x2e>
			}
		}
	}

	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80026fa:	2100      	movs	r1, #0
 80026fc:	4879      	ldr	r0, [pc, #484]	; (80028e4 <Si468x_dab_full_scan+0x2e4>)
 80026fe:	f000 fc93 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002702:	4b72      	ldr	r3, [pc, #456]	; (80028cc <Si468x_dab_full_scan+0x2cc>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	220a      	movs	r2, #10
 8002708:	4977      	ldr	r1, [pc, #476]	; (80028e8 <Si468x_dab_full_scan+0x2e8>)
 800270a:	4618      	mov	r0, r3
 800270c:	f007 fc2e 	bl	8009f6c <itoa>
 8002710:	4603      	mov	r3, r0
 8002712:	2101      	movs	r1, #1
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fc87 	bl	8003028 <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800271a:	2101      	movs	r1, #1
 800271c:	4873      	ldr	r0, [pc, #460]	; (80028ec <Si468x_dab_full_scan+0x2ec>)
 800271e:	f000 fc83 	bl	8003028 <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 8002722:	2100      	movs	r1, #0
 8002724:	4872      	ldr	r0, [pc, #456]	; (80028f0 <Si468x_dab_full_scan+0x2f0>)
 8002726:	f000 fc7f 	bl	8003028 <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800272a:	2100      	movs	r1, #0
 800272c:	4871      	ldr	r0, [pc, #452]	; (80028f4 <Si468x_dab_full_scan+0x2f4>)
 800272e:	f000 fc7b 	bl	8003028 <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002732:	2100      	movs	r1, #0
 8002734:	4870      	ldr	r0, [pc, #448]	; (80028f8 <Si468x_dab_full_scan+0x2f8>)
 8002736:	f000 fc77 	bl	8003028 <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 800273a:	2101      	movs	r1, #1
 800273c:	486f      	ldr	r0, [pc, #444]	; (80028fc <Si468x_dab_full_scan+0x2fc>)
 800273e:	f000 fc73 	bl	8003028 <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002742:	2300      	movs	r3, #0
 8002744:	713b      	strb	r3, [r7, #4]
 8002746:	e060      	b.n	800280a <Si468x_dab_full_scan+0x20a>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 8002748:	2100      	movs	r1, #0
 800274a:	486d      	ldr	r0, [pc, #436]	; (8002900 <Si468x_dab_full_scan+0x300>)
 800274c:	f000 fc6c 	bl	8003028 <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002750:	793b      	ldrb	r3, [r7, #4]
 8002752:	220a      	movs	r2, #10
 8002754:	4964      	ldr	r1, [pc, #400]	; (80028e8 <Si468x_dab_full_scan+0x2e8>)
 8002756:	4618      	mov	r0, r3
 8002758:	f007 fc08 	bl	8009f6c <itoa>
 800275c:	4603      	mov	r3, r0
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fc61 	bl	8003028 <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 8002766:	2100      	movs	r1, #0
 8002768:	4866      	ldr	r0, [pc, #408]	; (8002904 <Si468x_dab_full_scan+0x304>)
 800276a:	f000 fc5d 	bl	8003028 <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800276e:	793a      	ldrb	r2, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4a63      	ldr	r2, [pc, #396]	; (8002908 <Si468x_dab_full_scan+0x308>)
 800277a:	4413      	add	r3, r2
 800277c:	3302      	adds	r3, #2
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fc51 	bl	8003028 <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 8002786:	2100      	movs	r1, #0
 8002788:	485d      	ldr	r0, [pc, #372]	; (8002900 <Si468x_dab_full_scan+0x300>)
 800278a:	f000 fc4d 	bl	8003028 <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800278e:	793a      	ldrb	r2, [r7, #4]
 8002790:	495d      	ldr	r1, [pc, #372]	; (8002908 <Si468x_dab_full_scan+0x308>)
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3314      	adds	r3, #20
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	220a      	movs	r2, #10
 80027a2:	4951      	ldr	r1, [pc, #324]	; (80028e8 <Si468x_dab_full_scan+0x2e8>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f007 fbe1 	bl	8009f6c <itoa>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fc3a 	bl	8003028 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80027b4:	2100      	movs	r1, #0
 80027b6:	4855      	ldr	r0, [pc, #340]	; (800290c <Si468x_dab_full_scan+0x30c>)
 80027b8:	f000 fc36 	bl	8003028 <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80027bc:	793a      	ldrb	r2, [r7, #4]
 80027be:	4952      	ldr	r1, [pc, #328]	; (8002908 <Si468x_dab_full_scan+0x308>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3318      	adds	r3, #24
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <Si468x_dab_full_scan+0x310>)
 80027d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fc25 	bl	8003028 <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 80027de:	793a      	ldrb	r2, [r7, #4]
 80027e0:	4949      	ldr	r1, [pc, #292]	; (8002908 <Si468x_dab_full_scan+0x308>)
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3318      	adds	r3, #24
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b13      	cmp	r3, #19
 80027f2:	d803      	bhi.n	80027fc <Si468x_dab_full_scan+0x1fc>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80027f4:	2100      	movs	r1, #0
 80027f6:	4847      	ldr	r0, [pc, #284]	; (8002914 <Si468x_dab_full_scan+0x314>)
 80027f8:	f000 fc16 	bl	8003028 <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 80027fc:	2101      	movs	r1, #1
 80027fe:	4846      	ldr	r0, [pc, #280]	; (8002918 <Si468x_dab_full_scan+0x318>)
 8002800:	f000 fc12 	bl	8003028 <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 8002804:	793b      	ldrb	r3, [r7, #4]
 8002806:	3301      	adds	r3, #1
 8002808:	713b      	strb	r3, [r7, #4]
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <Si468x_dab_full_scan+0x2cc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	793a      	ldrb	r2, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d399      	bcc.n	8002748 <Si468x_dab_full_scan+0x148>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002814:	2101      	movs	r1, #1
 8002816:	4835      	ldr	r0, [pc, #212]	; (80028ec <Si468x_dab_full_scan+0x2ec>)
 8002818:	f000 fc06 	bl	8003028 <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 800281c:	2100      	movs	r1, #0
 800281e:	483f      	ldr	r0, [pc, #252]	; (800291c <Si468x_dab_full_scan+0x31c>)
 8002820:	f000 fc02 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <Si468x_dab_full_scan+0x2c8>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	220a      	movs	r2, #10
 800282a:	492f      	ldr	r1, [pc, #188]	; (80028e8 <Si468x_dab_full_scan+0x2e8>)
 800282c:	4618      	mov	r0, r3
 800282e:	f007 fb9d 	bl	8009f6c <itoa>
 8002832:	4603      	mov	r3, r0
 8002834:	2101      	movs	r1, #1
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fbf6 	bl	8003028 <send_debug_msg>

	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800283c:	2101      	movs	r1, #1
 800283e:	4838      	ldr	r0, [pc, #224]	; (8002920 <Si468x_dab_full_scan+0x320>)
 8002840:	f000 fbf2 	bl	8003028 <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8002844:	2101      	movs	r1, #1
 8002846:	4837      	ldr	r0, [pc, #220]	; (8002924 <Si468x_dab_full_scan+0x324>)
 8002848:	f000 fbee 	bl	8003028 <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 800284c:	2300      	movs	r3, #0
 800284e:	70fb      	strb	r3, [r7, #3]
 8002850:	e131      	b.n	8002ab6 <Si468x_dab_full_scan+0x4b6>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 8002852:	2100      	movs	r1, #0
 8002854:	482a      	ldr	r0, [pc, #168]	; (8002900 <Si468x_dab_full_scan+0x300>)
 8002856:	f000 fbe7 	bl	8003028 <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	220a      	movs	r2, #10
 800285e:	4922      	ldr	r1, [pc, #136]	; (80028e8 <Si468x_dab_full_scan+0x2e8>)
 8002860:	4618      	mov	r0, r3
 8002862:	f007 fb83 	bl	8009f6c <itoa>
 8002866:	4603      	mov	r3, r0
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fbdc 	bl	8003028 <send_debug_msg>
		if(services_index < 10)
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	2b09      	cmp	r3, #9
 8002874:	d803      	bhi.n	800287e <Si468x_dab_full_scan+0x27e>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002876:	2100      	movs	r1, #0
 8002878:	4826      	ldr	r0, [pc, #152]	; (8002914 <Si468x_dab_full_scan+0x314>)
 800287a:	f000 fbd5 	bl	8003028 <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 800287e:	2100      	movs	r1, #0
 8002880:	4829      	ldr	r0, [pc, #164]	; (8002928 <Si468x_dab_full_scan+0x328>)
 8002882:	f000 fbd1 	bl	8003028 <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	4a28      	ldr	r2, [pc, #160]	; (800292c <Si468x_dab_full_scan+0x32c>)
 800288a:	2134      	movs	r1, #52	; 0x34
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <Si468x_dab_full_scan+0x2ae>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	2234      	movs	r2, #52	; 0x34
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	4a22      	ldr	r2, [pc, #136]	; (800292c <Si468x_dab_full_scan+0x32c>)
 80028a2:	4413      	add	r3, r2
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fbbe 	bl	8003028 <send_debug_msg>
 80028ac:	e003      	b.n	80028b6 <Si468x_dab_full_scan+0x2b6>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 80028ae:	2100      	movs	r1, #0
 80028b0:	481f      	ldr	r0, [pc, #124]	; (8002930 <Si468x_dab_full_scan+0x330>)
 80028b2:	f000 fbb9 	bl	8003028 <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 80028b6:	2100      	movs	r1, #0
 80028b8:	481e      	ldr	r0, [pc, #120]	; (8002934 <Si468x_dab_full_scan+0x334>)
 80028ba:	f000 fbb5 	bl	8003028 <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	70bb      	strb	r3, [r7, #2]
 80028c2:	e05c      	b.n	800297e <Si468x_dab_full_scan+0x37e>
 80028c4:	0800a898 	.word	0x0800a898
 80028c8:	20002560 	.word	0x20002560
 80028cc:	20002561 	.word	0x20002561
 80028d0:	20002562 	.word	0x20002562
 80028d4:	0800a884 	.word	0x0800a884
 80028d8:	200019e4 	.word	0x200019e4
 80028dc:	20001a10 	.word	0x20001a10
 80028e0:	200019e0 	.word	0x200019e0
 80028e4:	0800a8d4 	.word	0x0800a8d4
 80028e8:	200018dc 	.word	0x200018dc
 80028ec:	0800a8e8 	.word	0x0800a8e8
 80028f0:	0800a91c 	.word	0x0800a91c
 80028f4:	0800a928 	.word	0x0800a928
 80028f8:	0800a93c 	.word	0x0800a93c
 80028fc:	0800a94c 	.word	0x0800a94c
 8002900:	0800a95c 	.word	0x0800a95c
 8002904:	0800a960 	.word	0x0800a960
 8002908:	20001a20 	.word	0x20001a20
 800290c:	0800a96c 	.word	0x0800a96c
 8002910:	20000008 	.word	0x20000008
 8002914:	0800a974 	.word	0x0800a974
 8002918:	0800a978 	.word	0x0800a978
 800291c:	0800a97c 	.word	0x0800a97c
 8002920:	0800a990 	.word	0x0800a990
 8002924:	0800a9fc 	.word	0x0800a9fc
 8002928:	0800aa68 	.word	0x0800aa68
 800292c:	20001b38 	.word	0x20001b38
 8002930:	0800aa70 	.word	0x0800aa70
 8002934:	0800aa84 	.word	0x0800aa84
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002938:	78ba      	ldrb	r2, [r7, #2]
 800293a:	4966      	ldr	r1, [pc, #408]	; (8002ad4 <Si468x_dab_full_scan+0x4d4>)
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3318      	adds	r3, #24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	4962      	ldr	r1, [pc, #392]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 800294e:	2034      	movs	r0, #52	; 0x34
 8002950:	fb00 f303 	mul.w	r3, r0, r3
 8002954:	440b      	add	r3, r1
 8002956:	332c      	adds	r3, #44	; 0x2c
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d10c      	bne.n	8002978 <Si468x_dab_full_scan+0x378>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800295e:	78ba      	ldrb	r2, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <Si468x_dab_full_scan+0x4d4>)
 800296a:	4413      	add	r3, r2
 800296c:	3302      	adds	r3, #2
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fb59 	bl	8003028 <send_debug_msg>
				break;
 8002976:	e007      	b.n	8002988 <Si468x_dab_full_scan+0x388>
		for(uint8_t i = 0; i < total_ensembles; i++)
 8002978:	78bb      	ldrb	r3, [r7, #2]
 800297a:	3301      	adds	r3, #1
 800297c:	70bb      	strb	r3, [r7, #2]
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <Si468x_dab_full_scan+0x4dc>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	78ba      	ldrb	r2, [r7, #2]
 8002984:	429a      	cmp	r2, r3
 8002986:	d3d7      	bcc.n	8002938 <Si468x_dab_full_scan+0x338>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002988:	2100      	movs	r1, #0
 800298a:	4855      	ldr	r0, [pc, #340]	; (8002ae0 <Si468x_dab_full_scan+0x4e0>)
 800298c:	f000 fb4c 	bl	8003028 <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 8002994:	2134      	movs	r1, #52	; 0x34
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3328      	adds	r3, #40	; 0x28
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	220a      	movs	r2, #10
 80029a2:	4950      	ldr	r1, [pc, #320]	; (8002ae4 <Si468x_dab_full_scan+0x4e4>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f007 fae1 	bl	8009f6c <itoa>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fb3a 	bl	8003028 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80029b4:	2100      	movs	r1, #0
 80029b6:	484c      	ldr	r0, [pc, #304]	; (8002ae8 <Si468x_dab_full_scan+0x4e8>)
 80029b8:	f000 fb36 	bl	8003028 <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	4a46      	ldr	r2, [pc, #280]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 80029c0:	2134      	movs	r1, #52	; 0x34
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	332c      	adds	r3, #44	; 0x2c
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <Si468x_dab_full_scan+0x4ec>)
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fb26 	bl	8003028 <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	4a3e      	ldr	r2, [pc, #248]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 80029e0:	2134      	movs	r1, #52	; 0x34
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	332c      	adds	r3, #44	; 0x2c
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b13      	cmp	r3, #19
 80029ee:	d803      	bhi.n	80029f8 <Si468x_dab_full_scan+0x3f8>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80029f0:	2100      	movs	r1, #0
 80029f2:	483f      	ldr	r0, [pc, #252]	; (8002af0 <Si468x_dab_full_scan+0x4f0>)
 80029f4:	f000 fb18 	bl	8003028 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 80029f8:	2100      	movs	r1, #0
 80029fa:	483e      	ldr	r0, [pc, #248]	; (8002af4 <Si468x_dab_full_scan+0x4f4>)
 80029fc:	f000 fb14 	bl	8003028 <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	4a35      	ldr	r2, [pc, #212]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 8002a04:	2134      	movs	r1, #52	; 0x34
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3319      	adds	r3, #25
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	220a      	movs	r2, #10
 8002a12:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <Si468x_dab_full_scan+0x4e4>)
 8002a14:	4618      	mov	r0, r3
 8002a16:	f007 faa9 	bl	8009f6c <itoa>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fb02 	bl	8003028 <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 8002a28:	2134      	movs	r1, #52	; 0x34
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3319      	adds	r3, #25
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d803      	bhi.n	8002a40 <Si468x_dab_full_scan+0x440>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a38:	2100      	movs	r1, #0
 8002a3a:	482d      	ldr	r0, [pc, #180]	; (8002af0 <Si468x_dab_full_scan+0x4f0>)
 8002a3c:	f000 faf4 	bl	8003028 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a40:	2100      	movs	r1, #0
 8002a42:	482c      	ldr	r0, [pc, #176]	; (8002af4 <Si468x_dab_full_scan+0x4f4>)
 8002a44:	f000 faf0 	bl	8003028 <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	482b      	ldr	r0, [pc, #172]	; (8002af8 <Si468x_dab_full_scan+0x4f8>)
 8002a4c:	f000 faec 	bl	8003028 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 8002a54:	2134      	movs	r1, #52	; 0x34
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3324      	adds	r3, #36	; 0x24
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	4920      	ldr	r1, [pc, #128]	; (8002ae4 <Si468x_dab_full_scan+0x4e4>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f007 fa81 	bl	8009f6c <itoa>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fada 	bl	8003028 <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002a74:	2100      	movs	r1, #0
 8002a76:	4821      	ldr	r0, [pc, #132]	; (8002afc <Si468x_dab_full_scan+0x4fc>)
 8002a78:	f000 fad6 	bl	8003028 <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	481e      	ldr	r0, [pc, #120]	; (8002af8 <Si468x_dab_full_scan+0x4f8>)
 8002a80:	f000 fad2 	bl	8003028 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <Si468x_dab_full_scan+0x4d8>)
 8002a88:	2134      	movs	r1, #52	; 0x34
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	332e      	adds	r3, #46	; 0x2e
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2210      	movs	r2, #16
 8002a96:	4913      	ldr	r1, [pc, #76]	; (8002ae4 <Si468x_dab_full_scan+0x4e4>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f007 fa67 	bl	8009f6c <itoa>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fac0 	bl	8003028 <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4815      	ldr	r0, [pc, #84]	; (8002b00 <Si468x_dab_full_scan+0x500>)
 8002aac:	f000 fabc 	bl	8003028 <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	70fb      	strb	r3, [r7, #3]
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <Si468x_dab_full_scan+0x504>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f4ff aec8 	bcc.w	8002852 <Si468x_dab_full_scan+0x252>
	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4810      	ldr	r0, [pc, #64]	; (8002b08 <Si468x_dab_full_scan+0x508>)
 8002ac6:	f000 faaf 	bl	8003028 <send_debug_msg>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20001a20 	.word	0x20001a20
 8002ad8:	20001b38 	.word	0x20001b38
 8002adc:	20002561 	.word	0x20002561
 8002ae0:	0800aa84 	.word	0x0800aa84
 8002ae4:	200018dc 	.word	0x200018dc
 8002ae8:	0800a96c 	.word	0x0800a96c
 8002aec:	20000008 	.word	0x20000008
 8002af0:	0800a974 	.word	0x0800a974
 8002af4:	0800aa88 	.word	0x0800aa88
 8002af8:	0800aa90 	.word	0x0800aa90
 8002afc:	0800aa68 	.word	0x0800aa68
 8002b00:	0800aa94 	.word	0x0800aa94
 8002b04:	20002560 	.word	0x20002560
 8002b08:	0800a990 	.word	0x0800a990

08002b0c <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af06      	add	r7, sp, #24
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b12:	2101      	movs	r1, #1
 8002b14:	486c      	ldr	r0, [pc, #432]	; (8002cc8 <Si468x_dab_get_audio_info+0x1bc>)
 8002b16:	f000 fa87 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <Si468x_dab_get_audio_info+0x1c0>)
 8002b1c:	22bd      	movs	r2, #189	; 0xbd
 8002b1e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b20:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <Si468x_dab_get_audio_info+0x1c0>)
 8002b22:	2203      	movs	r2, #3
 8002b24:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b26:	4969      	ldr	r1, [pc, #420]	; (8002ccc <Si468x_dab_get_audio_info+0x1c0>)
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7fe fdb3 	bl	8001694 <Si468x_write_command>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <Si468x_dab_get_audio_info+0x1c4>)
 8002b34:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f002 f89c 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b3c:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b3e:	2014      	movs	r0, #20
 8002b40:	f7fe fdca 	bl	80016d8 <Si468x_read_reply>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <Si468x_dab_get_audio_info+0x1c4>)
 8002b4a:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b4e:	795b      	ldrb	r3, [r3, #5]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002b60:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b62:	79db      	ldrb	r3, [r3, #7]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b6c:	799b      	ldrb	r3, [r3, #6]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b76:	7a1b      	ldrb	r3, [r3, #8]
 8002b78:	111b      	asrs	r3, r3, #4
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8002b82:	4b54      	ldr	r3, [pc, #336]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b84:	7a1b      	ldrb	r3, [r3, #8]
 8002b86:	10db      	asrs	r3, r3, #3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002b92:	7a1b      	ldrb	r3, [r3, #8]
 8002b94:	109b      	asrs	r3, r3, #2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8002b9e:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002ba0:	7a1b      	ldrb	r3, [r3, #8]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	703b      	strb	r3, [r7, #0]

	dab_digrad_status.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002baa:	7b1b      	ldrb	r3, [r3, #12]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bb0:	7b5b      	ldrb	r3, [r3, #13]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	441a      	add	r2, r3
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bb8:	7b9b      	ldrb	r3, [r3, #14]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	441a      	add	r2, r3
 8002bbe:	4b45      	ldr	r3, [pc, #276]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bc0:	7bdb      	ldrb	r3, [r3, #15]
 8002bc2:	061b      	lsls	r3, r3, #24
 8002bc4:	4413      	add	r3, r2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <Si468x_dab_get_audio_info+0x1cc>)
 8002bca:	621a      	str	r2, [r3, #32]
	dab_digrad_status.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8002bcc:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bce:	7c1b      	ldrb	r3, [r3, #16]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bd4:	7c5b      	ldrb	r3, [r3, #17]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	441a      	add	r2, r3
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002bdc:	7c9b      	ldrb	r3, [r3, #18]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	441a      	add	r2, r3
 8002be2:	4b3c      	ldr	r3, [pc, #240]	; (8002cd4 <Si468x_dab_get_audio_info+0x1c8>)
 8002be4:	7cdb      	ldrb	r3, [r3, #19]
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	4413      	add	r3, r2
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <Si468x_dab_get_audio_info+0x1cc>)
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

	Display_dab_digrad_status_data(dab_digrad_status);
 8002bf0:	4e39      	ldr	r6, [pc, #228]	; (8002cd8 <Si468x_dab_get_audio_info+0x1cc>)
 8002bf2:	466d      	mov	r5, sp
 8002bf4:	f106 0410 	add.w	r4, r6, #16
 8002bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c08:	f000 fbe0 	bl	80033cc <Display_dab_digrad_status_data>

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4833      	ldr	r0, [pc, #204]	; (8002cdc <Si468x_dab_get_audio_info+0x1d0>)
 8002c10:	f000 fa0a 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	220a      	movs	r2, #10
 8002c18:	4931      	ldr	r1, [pc, #196]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f007 f9a6 	bl	8009f6c <itoa>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f9ff 	bl	8003028 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	482d      	ldr	r0, [pc, #180]	; (8002ce4 <Si468x_dab_get_audio_info+0x1d8>)
 8002c2e:	f000 f9fb 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	220a      	movs	r2, #10
 8002c36:	492a      	ldr	r1, [pc, #168]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f007 f997 	bl	8009f6c <itoa>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f9f0 	bl	8003028 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4827      	ldr	r0, [pc, #156]	; (8002ce8 <Si468x_dab_get_audio_info+0x1dc>)
 8002c4c:	f000 f9ec 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	220a      	movs	r2, #10
 8002c54:	4922      	ldr	r1, [pc, #136]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f007 f988 	bl	8009f6c <itoa>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f9e1 	bl	8003028 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002c66:	2100      	movs	r1, #0
 8002c68:	4820      	ldr	r0, [pc, #128]	; (8002cec <Si468x_dab_get_audio_info+0x1e0>)
 8002c6a:	f000 f9dd 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002c6e:	78bb      	ldrb	r3, [r7, #2]
 8002c70:	220a      	movs	r2, #10
 8002c72:	491b      	ldr	r1, [pc, #108]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f007 f979 	bl	8009f6c <itoa>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f9d2 	bl	8003028 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002c84:	2100      	movs	r1, #0
 8002c86:	481a      	ldr	r0, [pc, #104]	; (8002cf0 <Si468x_dab_get_audio_info+0x1e4>)
 8002c88:	f000 f9ce 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	220a      	movs	r2, #10
 8002c90:	4913      	ldr	r1, [pc, #76]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d4>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	f007 f96a 	bl	8009f6c <itoa>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f9c3 	bl	8003028 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4813      	ldr	r0, [pc, #76]	; (8002cf4 <Si468x_dab_get_audio_info+0x1e8>)
 8002ca6:	f000 f9bf 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002caa:	783b      	ldrb	r3, [r7, #0]
 8002cac:	220a      	movs	r2, #10
 8002cae:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <Si468x_dab_get_audio_info+0x1d4>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f007 f95b 	bl	8009f6c <itoa>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f9b4 	bl	8003028 <send_debug_msg>

}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc8:	0800aaa0 	.word	0x0800aaa0
 8002ccc:	200000dc 	.word	0x200000dc
 8002cd0:	2000191c 	.word	0x2000191c
 8002cd4:	200010dc 	.word	0x200010dc
 8002cd8:	200019e4 	.word	0x200019e4
 8002cdc:	0800aadc 	.word	0x0800aadc
 8002ce0:	200018dc 	.word	0x200018dc
 8002ce4:	0800aae8 	.word	0x0800aae8
 8002ce8:	0800aaf8 	.word	0x0800aaf8
 8002cec:	0800ab0c 	.word	0x0800ab0c
 8002cf0:	0800ab18 	.word	0x0800ab18
 8002cf4:	0800ab24 	.word	0x0800ab24

08002cf8 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4811      	ldr	r0, [pc, #68]	; (8002d44 <Si468x_dab_get_event_status+0x4c>)
 8002d00:	f000 f992 	bl	8003028 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002d04:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <Si468x_dab_get_event_status+0x50>)
 8002d06:	22b3      	movs	r2, #179	; 0xb3
 8002d08:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <Si468x_dab_get_event_status+0x50>)
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002d10:	490d      	ldr	r1, [pc, #52]	; (8002d48 <Si468x_dab_get_event_status+0x50>)
 8002d12:	2002      	movs	r0, #2
 8002d14:	f7fe fcbe 	bl	8001694 <Si468x_write_command>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <Si468x_dab_get_event_status+0x54>)
 8002d1e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f001 ffa7 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002d26:	490a      	ldr	r1, [pc, #40]	; (8002d50 <Si468x_dab_get_event_status+0x58>)
 8002d28:	2009      	movs	r0, #9
 8002d2a:	f7fe fcd5 	bl	80016d8 <Si468x_read_reply>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <Si468x_dab_get_event_status+0x54>)
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <Si468x_dab_get_event_status+0x58>)
 8002d38:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002d3a:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <Si468x_dab_get_event_status+0x5c>)
 8002d3c:	6013      	str	r3, [r2, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	0800ab34 	.word	0x0800ab34
 8002d48:	200000dc 	.word	0x200000dc
 8002d4c:	2000191c 	.word	0x2000191c
 8002d50:	200010dc 	.word	0x200010dc
 8002d54:	20001a10 	.word	0x20001a10

08002d58 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002d64:	2101      	movs	r1, #1
 8002d66:	484a      	ldr	r0, [pc, #296]	; (8002e90 <Si468x_dab_get_component_info+0x138>)
 8002d68:	f000 f95e 	bl	8003028 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002d6c:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d6e:	22bb      	movs	r2, #187	; 0xbb
 8002d70:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002d78:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002d7e:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d8a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d94:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002d9e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0e1b      	lsrs	r3, r3, #24
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002da8:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	121b      	asrs	r3, r3, #8
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002db8:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	141b      	asrs	r3, r3, #16
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002dc2:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	161b      	asrs	r3, r3, #24
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002dcc:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002dce:	4931      	ldr	r1, [pc, #196]	; (8002e94 <Si468x_dab_get_component_info+0x13c>)
 8002dd0:	200c      	movs	r0, #12
 8002dd2:	f7fe fc5f 	bl	8001694 <Si468x_write_command>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <Si468x_dab_get_component_info+0x140>)
 8002ddc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002dde:	2005      	movs	r0, #5
 8002de0:	f001 ff48 	bl	8004c74 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002de4:	492d      	ldr	r1, [pc, #180]	; (8002e9c <Si468x_dab_get_component_info+0x144>)
 8002de6:	201a      	movs	r0, #26
 8002de8:	f7fe fc76 	bl	80016d8 <Si468x_read_reply>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <Si468x_dab_get_component_info+0x140>)
 8002df2:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <Si468x_dab_get_component_info+0x144>)
 8002df6:	799b      	ldrb	r3, [r3, #6]
 8002df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dfc:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e00c      	b.n	8002e1e <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002e04:	7ffb      	ldrb	r3, [r7, #31]
 8002e06:	f103 0208 	add.w	r2, r3, #8
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	4923      	ldr	r1, [pc, #140]	; (8002e9c <Si468x_dab_get_component_info+0x144>)
 8002e0e:	5c8a      	ldrb	r2, [r1, r2]
 8002e10:	3320      	adds	r3, #32
 8002e12:	443b      	add	r3, r7
 8002e14:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b0f      	cmp	r3, #15
 8002e22:	d9ef      	bls.n	8002e04 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <Si468x_dab_get_component_info+0x144>)
 8002e26:	7e1b      	ldrb	r3, [r3, #24]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <Si468x_dab_get_component_info+0x144>)
 8002e2c:	7e5b      	ldrb	r3, [r3, #25]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4819      	ldr	r0, [pc, #100]	; (8002ea0 <Si468x_dab_get_component_info+0x148>)
 8002e3c:	f000 f8f4 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002e40:	7fbb      	ldrb	r3, [r7, #30]
 8002e42:	220a      	movs	r2, #10
 8002e44:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <Si468x_dab_get_component_info+0x14c>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f007 f890 	bl	8009f6c <itoa>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f8e9 	bl	8003028 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002e56:	2100      	movs	r1, #0
 8002e58:	4813      	ldr	r0, [pc, #76]	; (8002ea8 <Si468x_dab_get_component_info+0x150>)
 8002e5a:	f000 f8e5 	bl	8003028 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f8df 	bl	8003028 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	480f      	ldr	r0, [pc, #60]	; (8002eac <Si468x_dab_get_component_info+0x154>)
 8002e6e:	f000 f8db 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002e72:	8bbb      	ldrh	r3, [r7, #28]
 8002e74:	2202      	movs	r2, #2
 8002e76:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <Si468x_dab_get_component_info+0x14c>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f007 f877 	bl	8009f6c <itoa>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f8d0 	bl	8003028 <send_debug_msg>

}
 8002e88:	bf00      	nop
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	0800ab74 	.word	0x0800ab74
 8002e94:	200000dc 	.word	0x200000dc
 8002e98:	2000191c 	.word	0x2000191c
 8002e9c:	200010dc 	.word	0x200010dc
 8002ea0:	0800aba8 	.word	0x0800aba8
 8002ea4:	200018dc 	.word	0x200018dc
 8002ea8:	0800abb4 	.word	0x0800abb4
 8002eac:	0800abc8 	.word	0x0800abc8

08002eb0 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <Si468x_dab_get_time+0x78>)
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02f      	beq.n	8002f22 <Si468x_dab_get_time+0x72>
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <Si468x_dab_get_time+0x78>)
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d028      	beq.n	8002f22 <Si468x_dab_get_time+0x72>
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <Si468x_dab_get_time+0x78>)
 8002ed2:	791b      	ldrb	r3, [r3, #4]
 8002ed4:	2b5a      	cmp	r3, #90	; 0x5a
 8002ed6:	d924      	bls.n	8002f22 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <Si468x_dab_get_time+0x7c>)
 8002eda:	22bc      	movs	r2, #188	; 0xbc
 8002edc:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <Si468x_dab_get_time+0x7c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002ee4:	4911      	ldr	r1, [pc, #68]	; (8002f2c <Si468x_dab_get_time+0x7c>)
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f7fe fbd4 	bl	8001694 <Si468x_write_command>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <Si468x_dab_get_time+0x80>)
 8002ef2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f001 febd 	bl	8004c74 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002efa:	490e      	ldr	r1, [pc, #56]	; (8002f34 <Si468x_dab_get_time+0x84>)
 8002efc:	200b      	movs	r0, #11
 8002efe:	f7fe fbeb 	bl	80016d8 <Si468x_read_reply>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <Si468x_dab_get_time+0x80>)
 8002f08:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <Si468x_dab_get_time+0x88>)
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <Si468x_dab_get_time+0x84>)
 8002f0e:	3304      	adds	r3, #4
 8002f10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f14:	e882 0003 	stmia.w	r2, {r0, r1}
		Display_time(time);
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <Si468x_dab_get_time+0x88>)
 8002f1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f1e:	f000 fdbf 	bl	8003aa0 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200019e4 	.word	0x200019e4
 8002f2c:	200000dc 	.word	0x200000dc
 8002f30:	2000191c 	.word	0x2000191c
 8002f34:	200010dc 	.word	0x200010dc
 8002f38:	20001a18 	.word	0x20001a18

08002f3c <Si468x_play_next_station>:


void Si468x_play_next_station()
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------", CRLF_SEND);
 8002f40:	2101      	movs	r1, #1
 8002f42:	4833      	ldr	r0, [pc, #204]	; (8003010 <Si468x_play_next_station+0xd4>)
 8002f44:	f000 f870 	bl	8003028 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4832      	ldr	r0, [pc, #200]	; (8003014 <Si468x_play_next_station+0xd8>)
 8002f4c:	f000 f86c 	bl	8003028 <send_debug_msg>
	send_debug_msg(itoa(actual_station, itoa_buffer, 10), CRLF_SEND);
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	220a      	movs	r2, #10
 8002f56:	4931      	ldr	r1, [pc, #196]	; (800301c <Si468x_play_next_station+0xe0>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f007 f807 	bl	8009f6c <itoa>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f860 	bl	8003028 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <Si468x_play_next_station+0xe4>)
 8002f70:	2334      	movs	r3, #52	; 0x34
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	332c      	adds	r3, #44	; 0x2c
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fe80 	bl	8001c84 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <Si468x_play_next_station+0xe4>)
 8002f8c:	2334      	movs	r3, #52	; 0x34
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3324      	adds	r3, #36	; 0x24
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4920      	ldr	r1, [pc, #128]	; (8003020 <Si468x_play_next_station+0xe4>)
 8002fa0:	2334      	movs	r3, #52	; 0x34
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	332e      	adds	r3, #46	; 0x2e
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7ff fed2 	bl	8002d58 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4a19      	ldr	r2, [pc, #100]	; (8003020 <Si468x_play_next_station+0xe4>)
 8002fbc:	2334      	movs	r3, #52	; 0x34
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3324      	adds	r3, #36	; 0x24
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	4914      	ldr	r1, [pc, #80]	; (8003020 <Si468x_play_next_station+0xe4>)
 8002fd0:	2334      	movs	r3, #52	; 0x34
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	332e      	adds	r3, #46	; 0x2e
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7ff f9dc 	bl	800239c <Si468x_dab_start_digital_service>

	Si468x_dab_digrad_status();
 8002fe4:	f7fe ff08 	bl	8001df8 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8002fe8:	f7ff fd90 	bl	8002b0c <Si468x_dab_get_audio_info>



	actual_station++;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002ff6:	701a      	strb	r2, [r3, #0]
	if(actual_station == total_services)
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <Si468x_play_next_station+0xdc>)
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <Si468x_play_next_station+0xe8>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d102      	bne.n	800300a <Si468x_play_next_station+0xce>
	{
	  actual_station = 0;
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <Si468x_play_next_station+0xdc>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
	}
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	0800ac18 	.word	0x0800ac18
 8003014:	0800ac3c 	.word	0x0800ac3c
 8003018:	20002569 	.word	0x20002569
 800301c:	200018dc 	.word	0x200018dc
 8003020:	20001b38 	.word	0x20001b38
 8003024:	20002560 	.word	0x20002560

08003028 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd f8c7 	bl	80001c8 <strlen>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	b29a      	uxth	r2, r3
 8003042:	2364      	movs	r3, #100	; 0x64
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	480a      	ldr	r0, [pc, #40]	; (8003070 <send_debug_msg+0x48>)
 8003048:	f006 fbdf 	bl	800980a <HAL_UART_Transmit>

	if(is_crlf)
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8003052:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003056:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003058:	f107 010c 	add.w	r1, r7, #12
 800305c:	2364      	movs	r3, #100	; 0x64
 800305e:	2202      	movs	r2, #2
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <send_debug_msg+0x48>)
 8003062:	f006 fbd2 	bl	800980a <HAL_UART_Transmit>
	}
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20002860 	.word	0x20002860

08003074 <Display_clear_screen>:
#include <string.h>

char char_buffer[32];

void Display_clear_screen()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd fc18 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8003080:	2311      	movs	r3, #17
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003088:	2211      	movs	r2, #17
 800308a:	2100      	movs	r1, #0
 800308c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003090:	f7fd fc99 	bl	80009c6 <ILI9341_Draw_Line>
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <Display_dab_digrad_status_background>:
	CS_OFF;
}


void Display_dab_digrad_status_background()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80030a2:	f7ff ffe7 	bl	8003074 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 80030a6:	2302      	movs	r3, #2
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	4bb4      	ldr	r3, [pc, #720]	; (800337c <Display_dab_digrad_status_background+0x2e0>)
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b4:	2101      	movs	r1, #1
 80030b6:	2005      	movs	r0, #5
 80030b8:	f7fd fd06 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 80030bc:	2328      	movs	r3, #40	; 0x28
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2369      	movs	r3, #105	; 0x69
 80030c2:	2214      	movs	r2, #20
 80030c4:	2105      	movs	r1, #5
 80030c6:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80030ca:	f7fd fc5b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80030ce:	2328      	movs	r3, #40	; 0x28
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	23d2      	movs	r3, #210	; 0xd2
 80030d4:	2214      	movs	r2, #20
 80030d6:	216e      	movs	r1, #110	; 0x6e
 80030d8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80030dc:	f7fd fc52 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80030e0:	2328      	movs	r3, #40	; 0x28
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f240 133b 	movw	r3, #315	; 0x13b
 80030e8:	2214      	movs	r2, #20
 80030ea:	21d7      	movs	r1, #215	; 0xd7
 80030ec:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80030f0:	f7fd fc48 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80030f4:	2341      	movs	r3, #65	; 0x41
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	f240 133b 	movw	r3, #315	; 0x13b
 80030fc:	222d      	movs	r2, #45	; 0x2d
 80030fe:	2105      	movs	r1, #5
 8003100:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003104:	f7fd fc3e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 8003108:	2302      	movs	r3, #2
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	4b9c      	ldr	r3, [pc, #624]	; (8003380 <Display_dab_digrad_status_background+0x2e4>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003118:	2130      	movs	r1, #48	; 0x30
 800311a:	200a      	movs	r0, #10
 800311c:	f7fd fcd4 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8003120:	2302      	movs	r3, #2
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	4b97      	ldr	r3, [pc, #604]	; (8003384 <Display_dab_digrad_status_background+0x2e8>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800312c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003130:	2130      	movs	r1, #48	; 0x30
 8003132:	205a      	movs	r0, #90	; 0x5a
 8003134:	f7fd fcc8 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8003138:	235a      	movs	r3, #90	; 0x5a
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	f240 133b 	movw	r3, #315	; 0x13b
 8003140:	2246      	movs	r2, #70	; 0x46
 8003142:	2105      	movs	r1, #5
 8003144:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003148:	f7fd fc1c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 800314c:	2302      	movs	r3, #2
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <Display_dab_digrad_status_background+0x2ec>)
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800315c:	2149      	movs	r1, #73	; 0x49
 800315e:	200a      	movs	r0, #10
 8003160:	f7fd fcb2 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8003164:	2302      	movs	r3, #2
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	4b88      	ldr	r3, [pc, #544]	; (800338c <Display_dab_digrad_status_background+0x2f0>)
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003174:	2149      	movs	r1, #73	; 0x49
 8003176:	2069      	movs	r0, #105	; 0x69
 8003178:	f7fd fca6 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 800317c:	2373      	movs	r3, #115	; 0x73
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f240 133b 	movw	r3, #315	; 0x13b
 8003184:	225f      	movs	r2, #95	; 0x5f
 8003186:	2105      	movs	r1, #5
 8003188:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800318c:	f7fd fbfa 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8003190:	2302      	movs	r3, #2
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	4b7e      	ldr	r3, [pc, #504]	; (8003390 <Display_dab_digrad_status_background+0x2f4>)
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800319c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a0:	2162      	movs	r1, #98	; 0x62
 80031a2:	200a      	movs	r0, #10
 80031a4:	f7fd fc90 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80031a8:	2302      	movs	r3, #2
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	4b77      	ldr	r3, [pc, #476]	; (800338c <Display_dab_digrad_status_background+0x2f0>)
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b8:	2162      	movs	r1, #98	; 0x62
 80031ba:	2069      	movs	r0, #105	; 0x69
 80031bc:	f7fd fc84 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80031c0:	238c      	movs	r3, #140	; 0x8c
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	f240 133b 	movw	r3, #315	; 0x13b
 80031c8:	2278      	movs	r2, #120	; 0x78
 80031ca:	2105      	movs	r1, #5
 80031cc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031d0:	f7fd fbd8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 80031d4:	2302      	movs	r3, #2
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	4b6e      	ldr	r3, [pc, #440]	; (8003394 <Display_dab_digrad_status_background+0x2f8>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e4:	217b      	movs	r1, #123	; 0x7b
 80031e6:	200a      	movs	r0, #10
 80031e8:	f7fd fc6e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 80031ec:	2302      	movs	r3, #2
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <Display_dab_digrad_status_background+0x2fc>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031fc:	217b      	movs	r1, #123	; 0x7b
 80031fe:	206e      	movs	r0, #110	; 0x6e
 8003200:	f7fd fc62 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8003204:	23a5      	movs	r3, #165	; 0xa5
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f240 133b 	movw	r3, #315	; 0x13b
 800320c:	2291      	movs	r2, #145	; 0x91
 800320e:	2105      	movs	r1, #5
 8003210:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003214:	f7fd fbb6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8003218:	2302      	movs	r3, #2
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	4b5f      	ldr	r3, [pc, #380]	; (800339c <Display_dab_digrad_status_background+0x300>)
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003228:	2194      	movs	r1, #148	; 0x94
 800322a:	200a      	movs	r0, #10
 800322c:	f7fd fc4c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8003230:	2302      	movs	r3, #2
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <Display_dab_digrad_status_background+0x304>)
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800323c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003240:	2194      	movs	r1, #148	; 0x94
 8003242:	2071      	movs	r0, #113	; 0x71
 8003244:	f7fd fc40 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8003248:	2302      	movs	r3, #2
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <Display_dab_digrad_status_background+0x308>)
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003258:	2194      	movs	r1, #148	; 0x94
 800325a:	2094      	movs	r0, #148	; 0x94
 800325c:	f7fd fc34 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8003260:	2302      	movs	r3, #2
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <Display_dab_digrad_status_background+0x30c>)
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800326c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003270:	2194      	movs	r1, #148	; 0x94
 8003272:	20b7      	movs	r0, #183	; 0xb7
 8003274:	f7fd fc28 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8003278:	2302      	movs	r3, #2
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <Display_dab_digrad_status_background+0x310>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003288:	2194      	movs	r1, #148	; 0x94
 800328a:	20db      	movs	r0, #219	; 0xdb
 800328c:	f7fd fc1c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8003290:	2302      	movs	r3, #2
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <Display_dab_digrad_status_background+0x314>)
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a0:	2194      	movs	r1, #148	; 0x94
 80032a2:	f240 101b 	movw	r0, #283	; 0x11b
 80032a6:	f7fd fc0f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 80032aa:	2302      	movs	r3, #2
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <Display_dab_digrad_status_background+0x318>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ba:	2194      	movs	r1, #148	; 0x94
 80032bc:	f240 1025 	movw	r0, #293	; 0x125
 80032c0:	f7fd fc02 	bl	8000ac8 <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80032c4:	23be      	movs	r3, #190	; 0xbe
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	f240 133b 	movw	r3, #315	; 0x13b
 80032cc:	22aa      	movs	r2, #170	; 0xaa
 80032ce:	2105      	movs	r1, #5
 80032d0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80032d4:	f7fd fb56 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 80032d8:	2302      	movs	r3, #2
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <Display_dab_digrad_status_background+0x31c>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e8:	21ad      	movs	r1, #173	; 0xad
 80032ea:	200a      	movs	r0, #10
 80032ec:	f7fd fbec 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 80032f0:	2302      	movs	r3, #2
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <Display_dab_digrad_status_background+0x320>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003300:	21ad      	movs	r1, #173	; 0xad
 8003302:	207d      	movs	r0, #125	; 0x7d
 8003304:	f7fd fbe0 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8003308:	2302      	movs	r3, #2
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <Display_dab_digrad_status_background+0x324>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003318:	21ad      	movs	r1, #173	; 0xad
 800331a:	20b4      	movs	r0, #180	; 0xb4
 800331c:	f7fd fbd4 	bl	8000ac8 <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003320:	23eb      	movs	r3, #235	; 0xeb
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	239d      	movs	r3, #157	; 0x9d
 8003326:	22c3      	movs	r2, #195	; 0xc3
 8003328:	2105      	movs	r1, #5
 800332a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800332e:	f7fd fb29 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003332:	23eb      	movs	r3, #235	; 0xeb
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f240 133b 	movw	r3, #315	; 0x13b
 800333a:	22c3      	movs	r2, #195	; 0xc3
 800333c:	21a3      	movs	r1, #163	; 0xa3
 800333e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003342:	f7fd fb1f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(60, 207, WHITE, ORANGE, "MENU L", 2);
 8003346:	2302      	movs	r3, #2
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <Display_dab_digrad_status_background+0x328>)
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003356:	21cf      	movs	r1, #207	; 0xcf
 8003358:	203c      	movs	r0, #60	; 0x3c
 800335a:	f7fd fbb5 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(217, 207, WHITE, ORANGE, "MENU R", 2);
 800335e:	2302      	movs	r3, #2
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <Display_dab_digrad_status_background+0x32c>)
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800336a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800336e:	21cf      	movs	r1, #207	; 0xcf
 8003370:	20d9      	movs	r0, #217	; 0xd9
 8003372:	f7fd fba9 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	0800aca0 	.word	0x0800aca0
 8003380:	0800acb4 	.word	0x0800acb4
 8003384:	0800acbc 	.word	0x0800acbc
 8003388:	0800acc4 	.word	0x0800acc4
 800338c:	0800acc8 	.word	0x0800acc8
 8003390:	0800accc 	.word	0x0800accc
 8003394:	0800acd0 	.word	0x0800acd0
 8003398:	0800acd8 	.word	0x0800acd8
 800339c:	0800acdc 	.word	0x0800acdc
 80033a0:	0800ace8 	.word	0x0800ace8
 80033a4:	0800acec 	.word	0x0800acec
 80033a8:	0800acf0 	.word	0x0800acf0
 80033ac:	0800acf8 	.word	0x0800acf8
 80033b0:	0800ad00 	.word	0x0800ad00
 80033b4:	0800ad04 	.word	0x0800ad04
 80033b8:	0800ad08 	.word	0x0800ad08
 80033bc:	0800ad14 	.word	0x0800ad14
 80033c0:	0800ad18 	.word	0x0800ad18
 80033c4:	0800ad1c 	.word	0x0800ad1c
 80033c8:	0800ad24 	.word	0x0800ad24

080033cc <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 80033cc:	b084      	sub	sp, #16
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af02      	add	r7, sp, #8
 80033d4:	f107 0c18 	add.w	ip, r7, #24
 80033d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 80033dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033de:	461a      	mov	r2, r3
 80033e0:	23fa      	movs	r3, #250	; 0xfa
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4a30      	ldr	r2, [pc, #192]	; (80034ac <Display_dab_digrad_status_data+0xe0>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <Display_dab_digrad_status_data+0xe0>)
 80033f8:	fba3 1302 	umull	r1, r3, r3, r2
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 800340a:	7e7b      	ldrb	r3, [r7, #25]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8003416:	2302      	movs	r3, #2
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <Display_dab_digrad_status_data+0xe4>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003422:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003426:	2117      	movs	r1, #23
 8003428:	2023      	movs	r0, #35	; 0x23
 800342a:	f7fd fb4d 	bl	8000ac8 <ILI9341_Draw_String>
 800342e:	e00b      	b.n	8003448 <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8003430:	2302      	movs	r3, #2
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <Display_dab_digrad_status_data+0xe4>)
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800343c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003440:	2117      	movs	r1, #23
 8003442:	2023      	movs	r0, #35	; 0x23
 8003444:	f7fd fb40 	bl	8000ac8 <ILI9341_Draw_String>
	//ACQ
	if(digrad_status.acq)
 8003448:	7e7b      	ldrb	r3, [r7, #25]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8003454:	2302      	movs	r3, #2
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <Display_dab_digrad_status_data+0xe8>)
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003460:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003464:	2117      	movs	r1, #23
 8003466:	2085      	movs	r0, #133	; 0x85
 8003468:	f7fd fb2e 	bl	8000ac8 <ILI9341_Draw_String>
 800346c:	e00b      	b.n	8003486 <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 800346e:	2302      	movs	r3, #2
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <Display_dab_digrad_status_data+0xe8>)
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800347a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800347e:	2117      	movs	r1, #23
 8003480:	2085      	movs	r0, #133	; 0x85
 8003482:	f7fd fb21 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC_ERROR
	if(digrad_status.fic_err)
 8003486:	7e7b      	ldrb	r3, [r7, #25]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d014      	beq.n	80034bc <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8003492:	2302      	movs	r3, #2
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <Display_dab_digrad_status_data+0xec>)
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800349e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034a2:	2117      	movs	r1, #23
 80034a4:	20e4      	movs	r0, #228	; 0xe4
 80034a6:	f7fd fb0f 	bl	8000ac8 <ILI9341_Draw_String>
 80034aa:	e013      	b.n	80034d4 <Display_dab_digrad_status_data+0x108>
 80034ac:	10624dd3 	.word	0x10624dd3
 80034b0:	0800ad2c 	.word	0x0800ad2c
 80034b4:	0800ad34 	.word	0x0800ad34
 80034b8:	0800ad3c 	.word	0x0800ad3c
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 80034bc:	2302      	movs	r3, #2
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	4bb6      	ldr	r3, [pc, #728]	; (800379c <Display_dab_digrad_status_data+0x3d0>)
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80034c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80034cc:	2117      	movs	r1, #23
 80034ce:	20e4      	movs	r0, #228	; 0xe4
 80034d0:	f7fd fafa 	bl	8000ac8 <ILI9341_Draw_String>


	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 80034d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80034d8:	2b0d      	cmp	r3, #13
 80034da:	dc02      	bgt.n	80034e2 <Display_dab_digrad_status_data+0x116>
 80034dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034e0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 80034e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80034e6:	2b1a      	cmp	r3, #26
 80034e8:	dc06      	bgt.n	80034f8 <Display_dab_digrad_status_data+0x12c>
 80034ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80034ee:	2b0d      	cmp	r3, #13
 80034f0:	dd02      	ble.n	80034f8 <Display_dab_digrad_status_data+0x12c>
 80034f2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034f6:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 80034f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80034fc:	2b27      	cmp	r3, #39	; 0x27
 80034fe:	dc06      	bgt.n	800350e <Display_dab_digrad_status_data+0x142>
 8003500:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003504:	2b1a      	cmp	r3, #26
 8003506:	dd02      	ble.n	800350e <Display_dab_digrad_status_data+0x142>
 8003508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800350c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 800350e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003512:	2b34      	cmp	r3, #52	; 0x34
 8003514:	dc06      	bgt.n	8003524 <Display_dab_digrad_status_data+0x158>
 8003516:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800351a:	2b27      	cmp	r3, #39	; 0x27
 800351c:	dd02      	ble.n	8003524 <Display_dab_digrad_status_data+0x158>
 800351e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003522:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 8003524:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003528:	2b34      	cmp	r3, #52	; 0x34
 800352a:	dd02      	ble.n	8003532 <Display_dab_digrad_status_data+0x166>
 800352c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003530:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8003532:	2302      	movs	r3, #2
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <Display_dab_digrad_status_data+0x3d4>)
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800353e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003542:	2130      	movs	r1, #48	; 0x30
 8003544:	2032      	movs	r0, #50	; 0x32
 8003546:	f7fd fabf 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, char_buffer, 10), 2);
 800354a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800354e:	220a      	movs	r2, #10
 8003550:	4994      	ldr	r1, [pc, #592]	; (80037a4 <Display_dab_digrad_status_data+0x3d8>)
 8003552:	4618      	mov	r0, r3
 8003554:	f006 fd0a 	bl	8009f6c <itoa>
 8003558:	4603      	mov	r3, r0
 800355a:	2202      	movs	r2, #2
 800355c:	9201      	str	r2, [sp, #4]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003568:	2130      	movs	r1, #48	; 0x30
 800356a:	2032      	movs	r0, #50	; 0x32
 800356c:	f7fd faac 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8003570:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003574:	461a      	mov	r2, r3
 8003576:	23b4      	movs	r3, #180	; 0xb4
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	da00      	bge.n	8003582 <Display_dab_digrad_status_data+0x1b6>
 8003580:	333f      	adds	r3, #63	; 0x3f
 8003582:	119b      	asrs	r3, r3, #6
 8003584:	3382      	adds	r3, #130	; 0x82
 8003586:	461a      	mov	r2, r3
 8003588:	233c      	movs	r3, #60	; 0x3c
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	2232      	movs	r2, #50	; 0x32
 8003590:	2182      	movs	r1, #130	; 0x82
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7fd f9f6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8003598:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800359c:	461a      	mov	r2, r3
 800359e:	23b4      	movs	r3, #180	; 0xb4
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da00      	bge.n	80035aa <Display_dab_digrad_status_data+0x1de>
 80035a8:	333f      	adds	r3, #63	; 0x3f
 80035aa:	119b      	asrs	r3, r3, #6
 80035ac:	3382      	adds	r3, #130	; 0x82
 80035ae:	4619      	mov	r1, r3
 80035b0:	233c      	movs	r3, #60	; 0x3c
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f44f 739b 	mov.w	r3, #310	; 0x136
 80035b8:	2232      	movs	r2, #50	; 0x32
 80035ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80035be:	f7fd f9e1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 80035c2:	7efb      	ldrb	r3, [r7, #27]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d802      	bhi.n	80035ce <Display_dab_digrad_status_data+0x202>
 80035c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035cc:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d805      	bhi.n	80035e0 <Display_dab_digrad_status_data+0x214>
 80035d4:	7efb      	ldrb	r3, [r7, #27]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d902      	bls.n	80035e0 <Display_dab_digrad_status_data+0x214>
 80035da:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035de:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 80035e0:	7efb      	ldrb	r3, [r7, #27]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d805      	bhi.n	80035f2 <Display_dab_digrad_status_data+0x226>
 80035e6:	7efb      	ldrb	r3, [r7, #27]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d902      	bls.n	80035f2 <Display_dab_digrad_status_data+0x226>
 80035ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035f0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 80035f2:	7efb      	ldrb	r3, [r7, #27]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d805      	bhi.n	8003604 <Display_dab_digrad_status_data+0x238>
 80035f8:	7efb      	ldrb	r3, [r7, #27]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d902      	bls.n	8003604 <Display_dab_digrad_status_data+0x238>
 80035fe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003602:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 8003604:	7efb      	ldrb	r3, [r7, #27]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d902      	bls.n	8003610 <Display_dab_digrad_status_data+0x244>
 800360a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800360e:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8003610:	2302      	movs	r3, #2
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <Display_dab_digrad_status_data+0x3d4>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800361c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003620:	2149      	movs	r1, #73	; 0x49
 8003622:	2032      	movs	r0, #50	; 0x32
 8003624:	f7fd fa50 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, char_buffer, 10), 2);
 8003628:	7efb      	ldrb	r3, [r7, #27]
 800362a:	220a      	movs	r2, #10
 800362c:	495d      	ldr	r1, [pc, #372]	; (80037a4 <Display_dab_digrad_status_data+0x3d8>)
 800362e:	4618      	mov	r0, r3
 8003630:	f006 fc9c 	bl	8009f6c <itoa>
 8003634:	4603      	mov	r3, r0
 8003636:	2202      	movs	r2, #2
 8003638:	9201      	str	r2, [sp, #4]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003644:	2149      	movs	r1, #73	; 0x49
 8003646:	2032      	movs	r0, #50	; 0x32
 8003648:	f7fd fa3e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 800364c:	7efb      	ldrb	r3, [r7, #27]
 800364e:	461a      	mov	r2, r3
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	3382      	adds	r3, #130	; 0x82
 8003658:	461a      	mov	r2, r3
 800365a:	2355      	movs	r3, #85	; 0x55
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	224b      	movs	r2, #75	; 0x4b
 8003662:	2182      	movs	r1, #130	; 0x82
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7fd f98d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 800366a:	7efb      	ldrb	r3, [r7, #27]
 800366c:	461a      	mov	r2, r3
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	3382      	adds	r3, #130	; 0x82
 8003676:	4619      	mov	r1, r3
 8003678:	2355      	movs	r3, #85	; 0x55
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003680:	224b      	movs	r2, #75	; 0x4b
 8003682:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003686:	f7fd f97d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 800368a:	7f7b      	ldrb	r3, [r7, #29]
 800368c:	2b0b      	cmp	r3, #11
 800368e:	d802      	bhi.n	8003696 <Display_dab_digrad_status_data+0x2ca>
 8003690:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003694:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8003696:	7f7b      	ldrb	r3, [r7, #29]
 8003698:	2b16      	cmp	r3, #22
 800369a:	d805      	bhi.n	80036a8 <Display_dab_digrad_status_data+0x2dc>
 800369c:	7f7b      	ldrb	r3, [r7, #29]
 800369e:	2b0b      	cmp	r3, #11
 80036a0:	d902      	bls.n	80036a8 <Display_dab_digrad_status_data+0x2dc>
 80036a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036a6:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 80036a8:	7f7b      	ldrb	r3, [r7, #29]
 80036aa:	2b21      	cmp	r3, #33	; 0x21
 80036ac:	d805      	bhi.n	80036ba <Display_dab_digrad_status_data+0x2ee>
 80036ae:	7f7b      	ldrb	r3, [r7, #29]
 80036b0:	2b16      	cmp	r3, #22
 80036b2:	d902      	bls.n	80036ba <Display_dab_digrad_status_data+0x2ee>
 80036b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036b8:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 80036ba:	7f7b      	ldrb	r3, [r7, #29]
 80036bc:	2b2c      	cmp	r3, #44	; 0x2c
 80036be:	d805      	bhi.n	80036cc <Display_dab_digrad_status_data+0x300>
 80036c0:	7f7b      	ldrb	r3, [r7, #29]
 80036c2:	2b21      	cmp	r3, #33	; 0x21
 80036c4:	d902      	bls.n	80036cc <Display_dab_digrad_status_data+0x300>
 80036c6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036ca:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 80036cc:	7f7b      	ldrb	r3, [r7, #29]
 80036ce:	2b2c      	cmp	r3, #44	; 0x2c
 80036d0:	d902      	bls.n	80036d8 <Display_dab_digrad_status_data+0x30c>
 80036d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036d6:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 80036d8:	2302      	movs	r3, #2
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <Display_dab_digrad_status_data+0x3d4>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80036e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e8:	2162      	movs	r1, #98	; 0x62
 80036ea:	2032      	movs	r0, #50	; 0x32
 80036ec:	f7fd f9ec 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, char_buffer, 10), 2);
 80036f0:	7f7b      	ldrb	r3, [r7, #29]
 80036f2:	220a      	movs	r2, #10
 80036f4:	492b      	ldr	r1, [pc, #172]	; (80037a4 <Display_dab_digrad_status_data+0x3d8>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f006 fc38 	bl	8009f6c <itoa>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2202      	movs	r2, #2
 8003700:	9201      	str	r2, [sp, #4]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370c:	2162      	movs	r1, #98	; 0x62
 800370e:	2032      	movs	r0, #50	; 0x32
 8003710:	f7fd f9da 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8003714:	7f7b      	ldrb	r3, [r7, #29]
 8003716:	461a      	mov	r2, r3
 8003718:	23b4      	movs	r3, #180	; 0xb4
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <Display_dab_digrad_status_data+0x3dc>)
 8003720:	fb82 1203 	smull	r1, r2, r2, r3
 8003724:	1112      	asrs	r2, r2, #4
 8003726:	17db      	asrs	r3, r3, #31
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	3382      	adds	r3, #130	; 0x82
 800372c:	461a      	mov	r2, r3
 800372e:	236e      	movs	r3, #110	; 0x6e
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	2264      	movs	r2, #100	; 0x64
 8003736:	2182      	movs	r1, #130	; 0x82
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7fd f923 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 800373e:	7f7b      	ldrb	r3, [r7, #29]
 8003740:	461a      	mov	r2, r3
 8003742:	23b4      	movs	r3, #180	; 0xb4
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <Display_dab_digrad_status_data+0x3dc>)
 800374a:	fb82 1203 	smull	r1, r2, r2, r3
 800374e:	1112      	asrs	r2, r2, #4
 8003750:	17db      	asrs	r3, r3, #31
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	3382      	adds	r3, #130	; 0x82
 8003756:	4619      	mov	r1, r3
 8003758:	236e      	movs	r3, #110	; 0x6e
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003760:	2264      	movs	r2, #100	; 0x64
 8003762:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003766:	f7fd f90d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 800376a:	7f3b      	ldrb	r3, [r7, #28]
 800376c:	2b14      	cmp	r3, #20
 800376e:	d802      	bhi.n	8003776 <Display_dab_digrad_status_data+0x3aa>
 8003770:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003774:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8003776:	7f3b      	ldrb	r3, [r7, #28]
 8003778:	2b28      	cmp	r3, #40	; 0x28
 800377a:	d805      	bhi.n	8003788 <Display_dab_digrad_status_data+0x3bc>
 800377c:	7f3b      	ldrb	r3, [r7, #28]
 800377e:	2b14      	cmp	r3, #20
 8003780:	d902      	bls.n	8003788 <Display_dab_digrad_status_data+0x3bc>
 8003782:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003786:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8003788:	7f3b      	ldrb	r3, [r7, #28]
 800378a:	2b3c      	cmp	r3, #60	; 0x3c
 800378c:	d80e      	bhi.n	80037ac <Display_dab_digrad_status_data+0x3e0>
 800378e:	7f3b      	ldrb	r3, [r7, #28]
 8003790:	2b28      	cmp	r3, #40	; 0x28
 8003792:	d90b      	bls.n	80037ac <Display_dab_digrad_status_data+0x3e0>
 8003794:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e007      	b.n	80037ac <Display_dab_digrad_status_data+0x3e0>
 800379c:	0800ad3c 	.word	0x0800ad3c
 80037a0:	0800ad48 	.word	0x0800ad48
 80037a4:	2000256c 	.word	0x2000256c
 80037a8:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 80037ac:	7f3b      	ldrb	r3, [r7, #28]
 80037ae:	2b50      	cmp	r3, #80	; 0x50
 80037b0:	d805      	bhi.n	80037be <Display_dab_digrad_status_data+0x3f2>
 80037b2:	7f3b      	ldrb	r3, [r7, #28]
 80037b4:	2b3c      	cmp	r3, #60	; 0x3c
 80037b6:	d902      	bls.n	80037be <Display_dab_digrad_status_data+0x3f2>
 80037b8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80037bc:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 80037be:	7f3b      	ldrb	r3, [r7, #28]
 80037c0:	2b50      	cmp	r3, #80	; 0x50
 80037c2:	d902      	bls.n	80037ca <Display_dab_digrad_status_data+0x3fe>
 80037c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037c8:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 80037ca:	2302      	movs	r3, #2
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	4ba9      	ldr	r3, [pc, #676]	; (8003a74 <Display_dab_digrad_status_data+0x6a8>)
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80037d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037da:	217b      	movs	r1, #123	; 0x7b
 80037dc:	204b      	movs	r0, #75	; 0x4b
 80037de:	f7fd f973 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, char_buffer, 10), 2);
 80037e2:	7f3b      	ldrb	r3, [r7, #28]
 80037e4:	220a      	movs	r2, #10
 80037e6:	49a4      	ldr	r1, [pc, #656]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f006 fbbf 	bl	8009f6c <itoa>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2202      	movs	r2, #2
 80037f2:	9201      	str	r2, [sp, #4]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80037fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fe:	217b      	movs	r1, #123	; 0x7b
 8003800:	204b      	movs	r0, #75	; 0x4b
 8003802:	f7fd f961 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8003806:	7f3b      	ldrb	r3, [r7, #28]
 8003808:	461a      	mov	r2, r3
 800380a:	23b4      	movs	r3, #180	; 0xb4
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	4a9a      	ldr	r2, [pc, #616]	; (8003a7c <Display_dab_digrad_status_data+0x6b0>)
 8003812:	fb82 1203 	smull	r1, r2, r2, r3
 8003816:	1152      	asrs	r2, r2, #5
 8003818:	17db      	asrs	r3, r3, #31
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	3382      	adds	r3, #130	; 0x82
 800381e:	461a      	mov	r2, r3
 8003820:	2387      	movs	r3, #135	; 0x87
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	227d      	movs	r2, #125	; 0x7d
 8003828:	2182      	movs	r1, #130	; 0x82
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7fd f8aa 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8003830:	7f3b      	ldrb	r3, [r7, #28]
 8003832:	461a      	mov	r2, r3
 8003834:	23b4      	movs	r3, #180	; 0xb4
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a90      	ldr	r2, [pc, #576]	; (8003a7c <Display_dab_digrad_status_data+0x6b0>)
 800383c:	fb82 1203 	smull	r1, r2, r2, r3
 8003840:	1152      	asrs	r2, r2, #5
 8003842:	17db      	asrs	r3, r3, #31
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	3382      	adds	r3, #130	; 0x82
 8003848:	4619      	mov	r1, r3
 800384a:	2387      	movs	r3, #135	; 0x87
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003852:	227d      	movs	r2, #125	; 0x7d
 8003854:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003858:	f7fd f894 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, char_buffer, 10), 2);
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	4a88      	ldr	r2, [pc, #544]	; (8003a80 <Display_dab_digrad_status_data+0x6b4>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	220a      	movs	r2, #10
 8003868:	4983      	ldr	r1, [pc, #524]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 800386a:	4618      	mov	r0, r3
 800386c:	f006 fb7e 	bl	8009f6c <itoa>
 8003870:	4603      	mov	r3, r0
 8003872:	2202      	movs	r2, #2
 8003874:	9201      	str	r2, [sp, #4]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800387c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003880:	2194      	movs	r1, #148	; 0x94
 8003882:	205b      	movs	r0, #91	; 0x5b
 8003884:	f7fd f920 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, char_buffer, 10), 2);
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	4b7d      	ldr	r3, [pc, #500]	; (8003a80 <Display_dab_digrad_status_data+0x6b4>)
 800388c:	fba3 1302 	umull	r1, r3, r3, r2
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	220a      	movs	r2, #10
 800389e:	4976      	ldr	r1, [pc, #472]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f006 fb63 	bl	8009f6c <itoa>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2202      	movs	r2, #2
 80038aa:	9201      	str	r2, [sp, #4]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b6:	2194      	movs	r1, #148	; 0x94
 80038b8:	2078      	movs	r0, #120	; 0x78
 80038ba:	f7fd f905 	bl	8000ac8 <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 80038be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038c2:	2b09      	cmp	r3, #9
 80038c4:	d821      	bhi.n	800390a <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 80038c6:	2302      	movs	r3, #2
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	4b6e      	ldr	r3, [pc, #440]	; (8003a84 <Display_dab_digrad_status_data+0x6b8>)
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d6:	2194      	movs	r1, #148	; 0x94
 80038d8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80038dc:	f7fd f8f4 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, char_buffer, 10), 2);
 80038e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038e4:	220a      	movs	r2, #10
 80038e6:	4964      	ldr	r1, [pc, #400]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f006 fb3f 	bl	8009f6c <itoa>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2202      	movs	r2, #2
 80038f2:	9201      	str	r2, [sp, #4]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038fe:	2194      	movs	r1, #148	; 0x94
 8003900:	f240 1011 	movw	r0, #273	; 0x111
 8003904:	f7fd f8e0 	bl	8000ac8 <ILI9341_Draw_String>
 8003908:	e013      	b.n	8003932 <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, char_buffer, 10), 2);
 800390a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800390e:	220a      	movs	r2, #10
 8003910:	4959      	ldr	r1, [pc, #356]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 8003912:	4618      	mov	r0, r3
 8003914:	f006 fb2a 	bl	8009f6c <itoa>
 8003918:	4603      	mov	r3, r0
 800391a:	2202      	movs	r2, #2
 800391c:	9201      	str	r2, [sp, #4]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003928:	2194      	movs	r1, #148	; 0x94
 800392a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800392e:	f7fd f8cb 	bl	8000ac8 <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2b09      	cmp	r3, #9
 8003936:	d81d      	bhi.n	8003974 <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8003938:	2302      	movs	r3, #2
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <Display_dab_digrad_status_data+0x6bc>)
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003948:	21ad      	movs	r1, #173	; 0xad
 800394a:	204f      	movs	r0, #79	; 0x4f
 800394c:	f7fd f8bc 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, char_buffer, 10), 2);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	220a      	movs	r2, #10
 8003954:	4948      	ldr	r1, [pc, #288]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 8003956:	4618      	mov	r0, r3
 8003958:	f006 fb08 	bl	8009f6c <itoa>
 800395c:	4603      	mov	r3, r0
 800395e:	2202      	movs	r2, #2
 8003960:	9201      	str	r2, [sp, #4]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396c:	21ad      	movs	r1, #173	; 0xad
 800396e:	2057      	movs	r0, #87	; 0x57
 8003970:	f7fd f8aa 	bl	8000ac8 <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	2b09      	cmp	r3, #9
 8003978:	d911      	bls.n	800399e <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, char_buffer, 10), 2);
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	220a      	movs	r2, #10
 800397e:	493e      	ldr	r1, [pc, #248]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 8003980:	4618      	mov	r0, r3
 8003982:	f006 faf3 	bl	8009f6c <itoa>
 8003986:	4603      	mov	r3, r0
 8003988:	2202      	movs	r2, #2
 800398a:	9201      	str	r2, [sp, #4]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003996:	21ad      	movs	r1, #173	; 0xad
 8003998:	204f      	movs	r0, #79	; 0x4f
 800399a:	f7fd f895 	bl	8000ac8 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 800399e:	2302      	movs	r3, #2
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <Display_dab_digrad_status_data+0x6c0>)
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ae:	21ad      	movs	r1, #173	; 0xad
 80039b0:	205f      	movs	r0, #95	; 0x5f
 80039b2:	f7fd f889 	bl	8000ac8 <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80039bc:	4293      	cmp	r3, r2
 80039be:	d023      	beq.n	8003a08 <Display_dab_digrad_status_data+0x63c>
 80039c0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80039c4:	4293      	cmp	r3, r2
 80039c6:	dc2c      	bgt.n	8003a22 <Display_dab_digrad_status_data+0x656>
 80039c8:	2bfa      	cmp	r3, #250	; 0xfa
 80039ca:	d003      	beq.n	80039d4 <Display_dab_digrad_status_data+0x608>
 80039cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039d0:	d00d      	beq.n	80039ee <Display_dab_digrad_status_data+0x622>
 80039d2:	e026      	b.n	8003a22 <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 80039d4:	2302      	movs	r3, #2
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <Display_dab_digrad_status_data+0x6c4>)
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e4:	21ad      	movs	r1, #173	; 0xad
 80039e6:	2067      	movs	r0, #103	; 0x67
 80039e8:	f7fd f86e 	bl	8000ac8 <ILI9341_Draw_String>
		break;
 80039ec:	e026      	b.n	8003a3c <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 80039ee:	2302      	movs	r3, #2
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <Display_dab_digrad_status_data+0x6c8>)
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fe:	21ad      	movs	r1, #173	; 0xad
 8003a00:	2067      	movs	r0, #103	; 0x67
 8003a02:	f7fd f861 	bl	8000ac8 <ILI9341_Draw_String>
		break;
 8003a06:	e019      	b.n	8003a3c <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8003a08:	2302      	movs	r3, #2
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <Display_dab_digrad_status_data+0x6cc>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a18:	21ad      	movs	r1, #173	; 0xad
 8003a1a:	2067      	movs	r0, #103	; 0x67
 8003a1c:	f7fd f854 	bl	8000ac8 <ILI9341_Draw_String>
		break;
 8003a20:	e00c      	b.n	8003a3c <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8003a22:	2302      	movs	r3, #2
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <Display_dab_digrad_status_data+0x6d0>)
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a32:	21ad      	movs	r1, #173	; 0xad
 8003a34:	2067      	movs	r0, #103	; 0x67
 8003a36:	f7fd f847 	bl	8000ac8 <ILI9341_Draw_String>
		break;
 8003a3a:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), char_buffer, 10), 2);
 8003a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	220a      	movs	r2, #10
 8003a46:	490c      	ldr	r1, [pc, #48]	; (8003a78 <Display_dab_digrad_status_data+0x6ac>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f006 fa8f 	bl	8009f6c <itoa>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2202      	movs	r2, #2
 8003a52:	9201      	str	r2, [sp, #4]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a5e:	21ad      	movs	r1, #173	; 0xad
 8003a60:	20d7      	movs	r0, #215	; 0xd7
 8003a62:	f7fd f831 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
 8003a74:	0800ad48 	.word	0x0800ad48
 8003a78:	2000256c 	.word	0x2000256c
 8003a7c:	51eb851f 	.word	0x51eb851f
 8003a80:	10624dd3 	.word	0x10624dd3
 8003a84:	0800ad4c 	.word	0x0800ad4c
 8003a88:	0800ad50 	.word	0x0800ad50
 8003a8c:	0800ace8 	.word	0x0800ace8
 8003a90:	0800ad54 	.word	0x0800ad54
 8003a94:	0800ad58 	.word	0x0800ad58
 8003a98:	0800ad5c 	.word	0x0800ad5c
 8003a9c:	0800ad60 	.word	0x0800ad60

08003aa0 <Display_time>:

void Display_time(time_t time_val)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.hour < 10)
 8003aac:	793b      	ldrb	r3, [r7, #4]
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d81e      	bhi.n	8003af0 <Display_time+0x50>
	{
		ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <Display_time+0xfc>)
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	f240 100f 	movw	r0, #271	; 0x10f
 8003ac6:	f7fc ffff 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, char_buffer, 10), 2);
 8003aca:	793b      	ldrb	r3, [r7, #4]
 8003acc:	220a      	movs	r2, #10
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <Display_time+0x100>)
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f006 fa4b 	bl	8009f6c <itoa>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2202      	movs	r2, #2
 8003ada:	9201      	str	r2, [sp, #4]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003aea:	f7fc ffed 	bl	8000ac8 <ILI9341_Draw_String>
 8003aee:	e011      	b.n	8003b14 <Display_time+0x74>
	}
	else
	{
		ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, char_buffer, 10), 2);
 8003af0:	793b      	ldrb	r3, [r7, #4]
 8003af2:	220a      	movs	r2, #10
 8003af4:	492a      	ldr	r1, [pc, #168]	; (8003ba0 <Display_time+0x100>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f006 fa38 	bl	8009f6c <itoa>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2202      	movs	r2, #2
 8003b00:	9201      	str	r2, [sp, #4]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	f240 100f 	movw	r0, #271	; 0x10f
 8003b10:	f7fc ffda 	bl	8000ac8 <ILI9341_Draw_String>
	}

	ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 8003b14:	2302      	movs	r3, #2
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <Display_time+0x104>)
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b22:	2101      	movs	r1, #1
 8003b24:	f240 101f 	movw	r0, #287	; 0x11f
 8003b28:	f7fc ffce 	bl	8000ac8 <ILI9341_Draw_String>

	if(time_val.minute < 10)
 8003b2c:	797b      	ldrb	r3, [r7, #5]
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	d81e      	bhi.n	8003b70 <Display_time+0xd0>
	{
		ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 8003b32:	2302      	movs	r3, #2
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <Display_time+0xfc>)
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b40:	2101      	movs	r1, #1
 8003b42:	f240 1027 	movw	r0, #295	; 0x127
 8003b46:	f7fc ffbf 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, char_buffer, 10), 2);
 8003b4a:	797b      	ldrb	r3, [r7, #5]
 8003b4c:	220a      	movs	r2, #10
 8003b4e:	4914      	ldr	r1, [pc, #80]	; (8003ba0 <Display_time+0x100>)
 8003b50:	4618      	mov	r0, r3
 8003b52:	f006 fa0b 	bl	8009f6c <itoa>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2202      	movs	r2, #2
 8003b5a:	9201      	str	r2, [sp, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b64:	2101      	movs	r1, #1
 8003b66:	f44f 7098 	mov.w	r0, #304	; 0x130
 8003b6a:	f7fc ffad 	bl	8000ac8 <ILI9341_Draw_String>
	{
		ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, char_buffer, 10), 2);
	}
	//date
	//todo
}
 8003b6e:	e011      	b.n	8003b94 <Display_time+0xf4>
		ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, char_buffer, 10), 2);
 8003b70:	797b      	ldrb	r3, [r7, #5]
 8003b72:	220a      	movs	r2, #10
 8003b74:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <Display_time+0x100>)
 8003b76:	4618      	mov	r0, r3
 8003b78:	f006 f9f8 	bl	8009f6c <itoa>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2202      	movs	r2, #2
 8003b80:	9201      	str	r2, [sp, #4]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f240 1027 	movw	r0, #295	; 0x127
 8003b90:	f7fc ff9a 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0800ad4c 	.word	0x0800ad4c
 8003ba0:	2000256c 	.word	0x2000256c
 8003ba4:	0800ad64 	.word	0x0800ad64

08003ba8 <Display_init_screen>:

void Display_init_screen()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f7fc fe7e 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <Display_init_screen+0xc4>)
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	2128      	movs	r1, #40	; 0x28
 8003bc4:	205f      	movs	r0, #95	; 0x5f
 8003bc6:	f7fc ff7f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003bca:	2302      	movs	r3, #2
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <Display_init_screen+0xc8>)
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd8:	213c      	movs	r1, #60	; 0x3c
 8003bda:	2046      	movs	r0, #70	; 0x46
 8003bdc:	f7fc ff74 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003be0:	2302      	movs	r3, #2
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <Display_init_screen+0xcc>)
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bee:	2150      	movs	r1, #80	; 0x50
 8003bf0:	2082      	movs	r0, #130	; 0x82
 8003bf2:	f7fc ff69 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <Display_init_screen+0xd0>)
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c04:	2164      	movs	r1, #100	; 0x64
 8003c06:	2064      	movs	r0, #100	; 0x64
 8003c08:	f7fc ff5e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <Display_init_screen+0xd4>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1a:	2178      	movs	r1, #120	; 0x78
 8003c1c:	205a      	movs	r0, #90	; 0x5a
 8003c1e:	f7fc ff53 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003c22:	2302      	movs	r3, #2
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <Display_init_screen+0xd8>)
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c30:	218c      	movs	r1, #140	; 0x8c
 8003c32:	2032      	movs	r0, #50	; 0x32
 8003c34:	f7fc ff48 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003c38:	2302      	movs	r3, #2
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <Display_init_screen+0xdc>)
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c46:	21a0      	movs	r1, #160	; 0xa0
 8003c48:	205a      	movs	r0, #90	; 0x5a
 8003c4a:	f7fc ff3d 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003c4e:	2302      	movs	r3, #2
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <Display_init_screen+0xe0>)
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c5c:	21b4      	movs	r1, #180	; 0xb4
 8003c5e:	2078      	movs	r0, #120	; 0x78
 8003c60:	f7fc ff32 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	0800ad68 	.word	0x0800ad68
 8003c70:	0800ad78 	.word	0x0800ad78
 8003c74:	0800ad90 	.word	0x0800ad90
 8003c78:	0800ad98 	.word	0x0800ad98
 8003c7c:	0800ada8 	.word	0x0800ada8
 8003c80:	0800adbc 	.word	0x0800adbc
 8003c84:	0800add8 	.word	0x0800add8
 8003c88:	0800adec 	.word	0x0800adec

08003c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_DMA_Init+0x3c>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <MX_DMA_Init+0x3c>)
 8003c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <MX_DMA_Init+0x3c>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	200f      	movs	r0, #15
 8003cb4:	f001 f8dd 	bl	8004e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003cb8:	200f      	movs	r0, #15
 8003cba:	f001 f8f6 	bl	8004eaa <HAL_NVIC_EnableIRQ>

}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800

08003ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	; 0x30
 8003cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd2:	f107 031c 	add.w	r3, r7, #28
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	60da      	str	r2, [r3, #12]
 8003ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a64      	ldr	r2, [pc, #400]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b5b      	ldr	r3, [pc, #364]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	4b57      	ldr	r3, [pc, #348]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a56      	ldr	r2, [pc, #344]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a4f      	ldr	r2, [pc, #316]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	4a48      	ldr	r2, [pc, #288]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d5c:	f043 0310 	orr.w	r3, r3, #16
 8003d60:	6313      	str	r3, [r2, #48]	; 0x30
 8003d62:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <MX_GPIO_Init+0x1b0>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2130      	movs	r1, #48	; 0x30
 8003d8e:	483c      	ldr	r0, [pc, #240]	; (8003e80 <MX_GPIO_Init+0x1b4>)
 8003d90:	f001 fd74 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8003d94:	2200      	movs	r2, #0
 8003d96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d9a:	483a      	ldr	r0, [pc, #232]	; (8003e84 <MX_GPIO_Init+0x1b8>)
 8003d9c:	f001 fd6e 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8003da0:	2200      	movs	r2, #0
 8003da2:	f24f 7180 	movw	r1, #63360	; 0xf780
 8003da6:	4838      	ldr	r0, [pc, #224]	; (8003e88 <MX_GPIO_Init+0x1bc>)
 8003da8:	f001 fd68 	bl	800587c <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8003dac:	2200      	movs	r2, #0
 8003dae:	2128      	movs	r1, #40	; 0x28
 8003db0:	4836      	ldr	r0, [pc, #216]	; (8003e8c <MX_GPIO_Init+0x1c0>)
 8003db2:	f001 fd63 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8003db6:	2310      	movs	r3, #16
 8003db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8003dc2:	f107 031c 	add.w	r3, r7, #28
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4831      	ldr	r0, [pc, #196]	; (8003e90 <MX_GPIO_Init+0x1c4>)
 8003dca:	f001 fba3 	bl	8005514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8003dce:	2330      	movs	r3, #48	; 0x30
 8003dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 031c 	add.w	r3, r7, #28
 8003de2:	4619      	mov	r1, r3
 8003de4:	4826      	ldr	r0, [pc, #152]	; (8003e80 <MX_GPIO_Init+0x1b4>)
 8003de6:	f001 fb95 	bl	8005514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8003dea:	2311      	movs	r3, #17
 8003dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df6:	f107 031c 	add.w	r3, r7, #28
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4823      	ldr	r0, [pc, #140]	; (8003e8c <MX_GPIO_Init+0x1c0>)
 8003dfe:	f001 fb89 	bl	8005514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8003e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8003e14:	f107 031c 	add.w	r3, r7, #28
 8003e18:	4619      	mov	r1, r3
 8003e1a:	481a      	ldr	r0, [pc, #104]	; (8003e84 <MX_GPIO_Init+0x1b8>)
 8003e1c:	f001 fb7a 	bl	8005514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8003e20:	f24f 7380 	movw	r3, #63360	; 0xf780
 8003e24:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e26:	2301      	movs	r3, #1
 8003e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	4619      	mov	r1, r3
 8003e38:	4813      	ldr	r0, [pc, #76]	; (8003e88 <MX_GPIO_Init+0x1bc>)
 8003e3a:	f001 fb6b 	bl	8005514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003e3e:	2340      	movs	r3, #64	; 0x40
 8003e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	f107 031c 	add.w	r3, r7, #28
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480d      	ldr	r0, [pc, #52]	; (8003e88 <MX_GPIO_Init+0x1bc>)
 8003e52:	f001 fb5f 	bl	8005514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8003e56:	2328      	movs	r3, #40	; 0x28
 8003e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f107 031c 	add.w	r3, r7, #28
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4807      	ldr	r0, [pc, #28]	; (8003e8c <MX_GPIO_Init+0x1c0>)
 8003e6e:	f001 fb51 	bl	8005514 <HAL_GPIO_Init>

}
 8003e72:	bf00      	nop
 8003e74:	3730      	adds	r7, #48	; 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40020c00 	.word	0x40020c00
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020000 	.word	0x40020000

08003e94 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003e9a:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <MX_I2C1_Init+0x54>)
 8003e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <MX_I2C1_Init+0x58>)
 8003ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003eb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ed0:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <MX_I2C1_Init+0x50>)
 8003ed2:	f001 fced 	bl	80058b0 <HAL_I2C_Init>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003edc:	f000 fa1a 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	2000258c 	.word	0x2000258c
 8003ee8:	40005400 	.word	0x40005400
 8003eec:	000186a0 	.word	0x000186a0

08003ef0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <MX_I2C3_Init+0x54>)
 8003ef8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003efc:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <MX_I2C3_Init+0x58>)
 8003efe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f12:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <MX_I2C3_Init+0x50>)
 8003f2e:	f001 fcbf 	bl	80058b0 <HAL_I2C_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003f38:	f000 f9ec 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200025e0 	.word	0x200025e0
 8003f44:	40005c00 	.word	0x40005c00
 8003f48:	000186a0 	.word	0x000186a0

08003f4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 031c 	add.w	r3, r7, #28
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <HAL_I2C_MspInit+0x148>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d12c      	bne.n	8003fc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8003f8a:	23c0      	movs	r3, #192	; 0xc0
 8003f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8e:	2312      	movs	r3, #18
 8003f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f96:	2303      	movs	r3, #3
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9e:	f107 031c 	add.w	r3, r7, #28
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	483d      	ldr	r0, [pc, #244]	; (800409c <HAL_I2C_MspInit+0x150>)
 8003fa6:	f001 fab5 	bl	8005514 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a39      	ldr	r2, [pc, #228]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003fc6:	e060      	b.n	800408a <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <HAL_I2C_MspInit+0x154>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d15b      	bne.n	800408a <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b29      	ldr	r3, [pc, #164]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4a28      	ldr	r2, [pc, #160]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 800400a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800400e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004010:	2312      	movs	r3, #18
 8004012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004018:	2303      	movs	r3, #3
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800401c:	2304      	movs	r3, #4
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	4619      	mov	r1, r3
 8004026:	481f      	ldr	r0, [pc, #124]	; (80040a4 <HAL_I2C_MspInit+0x158>)
 8004028:	f001 fa74 	bl	8005514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 800402c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004032:	2312      	movs	r3, #18
 8004034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403a:	2303      	movs	r3, #3
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800403e:	2304      	movs	r3, #4
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8004042:	f107 031c 	add.w	r3, r7, #28
 8004046:	4619      	mov	r1, r3
 8004048:	4817      	ldr	r0, [pc, #92]	; (80040a8 <HAL_I2C_MspInit+0x15c>)
 800404a:	f001 fa63 	bl	8005514 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a10      	ldr	r2, [pc, #64]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8004058:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <HAL_I2C_MspInit+0x14c>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	2048      	movs	r0, #72	; 0x48
 8004070:	f000 feff 	bl	8004e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004074:	2048      	movs	r0, #72	; 0x48
 8004076:	f000 ff18 	bl	8004eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2049      	movs	r0, #73	; 0x49
 8004080:	f000 fef7 	bl	8004e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004084:	2049      	movs	r0, #73	; 0x49
 8004086:	f000 ff10 	bl	8004eaa <HAL_NVIC_EnableIRQ>
}
 800408a:	bf00      	nop
 800408c:	3730      	adds	r7, #48	; 0x30
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40005400 	.word	0x40005400
 8004098:	40023800 	.word	0x40023800
 800409c:	40020400 	.word	0x40020400
 80040a0:	40005c00 	.word	0x40005c00
 80040a4:	40020800 	.word	0x40020800
 80040a8:	40020000 	.word	0x40020000

080040ac <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	led_number++;
 80040b0:	4b42      	ldr	r3, [pc, #264]	; (80041bc <Leds_Control_Blink+0x110>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	4b40      	ldr	r3, [pc, #256]	; (80041bc <Leds_Control_Blink+0x110>)
 80040ba:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <Leds_Control_Blink+0x110>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d102      	bne.n	80040ca <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 80040c4:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <Leds_Control_Blink+0x110>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 80040ca:	4b3c      	ldr	r3, [pc, #240]	; (80041bc <Leds_Control_Blink+0x110>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d86f      	bhi.n	80041b4 <Leds_Control_Blink+0x108>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <Leds_Control_Blink+0x30>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	0800411f 	.word	0x0800411f
 80040e4:	08004151 	.word	0x08004151
 80040e8:	08004183 	.word	0x08004183
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 80040ec:	2201      	movs	r2, #1
 80040ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040f2:	4833      	ldr	r0, [pc, #204]	; (80041c0 <Leds_Control_Blink+0x114>)
 80040f4:	f001 fbc2 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040fe:	4830      	ldr	r0, [pc, #192]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004100:	f001 fbbc 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800410a:	482d      	ldr	r0, [pc, #180]	; (80041c0 <Leds_Control_Blink+0x114>)
 800410c:	f001 fbb6 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004116:	482a      	ldr	r0, [pc, #168]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004118:	f001 fbb0 	bl	800587c <HAL_GPIO_WritePin>
		break;
 800411c:	e04b      	b.n	80041b6 <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 800411e:	2200      	movs	r2, #0
 8004120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004124:	4826      	ldr	r0, [pc, #152]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004126:	f001 fba9 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 800412a:	2201      	movs	r2, #1
 800412c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004130:	4823      	ldr	r0, [pc, #140]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004132:	f001 fba3 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8004136:	2200      	movs	r2, #0
 8004138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800413c:	4820      	ldr	r0, [pc, #128]	; (80041c0 <Leds_Control_Blink+0x114>)
 800413e:	f001 fb9d 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8004142:	2200      	movs	r2, #0
 8004144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004148:	481d      	ldr	r0, [pc, #116]	; (80041c0 <Leds_Control_Blink+0x114>)
 800414a:	f001 fb97 	bl	800587c <HAL_GPIO_WritePin>
		break;
 800414e:	e032      	b.n	80041b6 <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004156:	481a      	ldr	r0, [pc, #104]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004158:	f001 fb90 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 800415c:	2200      	movs	r2, #0
 800415e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004162:	4817      	ldr	r0, [pc, #92]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004164:	f001 fb8a 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8004168:	2201      	movs	r2, #1
 800416a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004170:	f001 fb84 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800417a:	4811      	ldr	r0, [pc, #68]	; (80041c0 <Leds_Control_Blink+0x114>)
 800417c:	f001 fb7e 	bl	800587c <HAL_GPIO_WritePin>
		break;
 8004180:	e019      	b.n	80041b6 <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8004182:	2200      	movs	r2, #0
 8004184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004188:	480d      	ldr	r0, [pc, #52]	; (80041c0 <Leds_Control_Blink+0x114>)
 800418a:	f001 fb77 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 800418e:	2200      	movs	r2, #0
 8004190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004194:	480a      	ldr	r0, [pc, #40]	; (80041c0 <Leds_Control_Blink+0x114>)
 8004196:	f001 fb71 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800419a:	2200      	movs	r2, #0
 800419c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <Leds_Control_Blink+0x114>)
 80041a2:	f001 fb6b 	bl	800587c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ac:	4804      	ldr	r0, [pc, #16]	; (80041c0 <Leds_Control_Blink+0x114>)
 80041ae:	f001 fb65 	bl	800587c <HAL_GPIO_WritePin>
		break;
 80041b2:	e000      	b.n	80041b6 <Leds_Control_Blink+0x10a>
	default:

		break;
 80041b4:	bf00      	nop
	}
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200000ac 	.word	0x200000ac
 80041c0:	40020c00 	.word	0x40020c00

080041c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041c8:	f000 fce2 	bl	8004b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041cc:	f000 f838 	bl	8004240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041d0:	f7ff fd7c 	bl	8003ccc <MX_GPIO_Init>
  MX_DMA_Init();
 80041d4:	f7ff fd5a 	bl	8003c8c <MX_DMA_Init>
  MX_I2C1_Init();
 80041d8:	f7ff fe5c 	bl	8003e94 <MX_I2C1_Init>
  MX_I2C3_Init();
 80041dc:	f7ff fe88 	bl	8003ef0 <MX_I2C3_Init>
  MX_SPI1_Init();
 80041e0:	f000 f89e 	bl	8004320 <MX_SPI1_Init>
  MX_SPI2_Init();
 80041e4:	f000 f8d2 	bl	800438c <MX_SPI2_Init>
  MX_TIM3_Init();
 80041e8:	f000 fa70 	bl	80046cc <MX_TIM3_Init>
  MX_UART5_Init();
 80041ec:	f000 fbb2 	bl	8004954 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80041f0:	f000 fbda 	bl	80049a8 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80041f4:	f000 fac4 	bl	8004780 <MX_TIM10_Init>
  MX_TIM11_Init();
 80041f8:	f000 fae6 	bl	80047c8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 80041fc:	2101      	movs	r1, #1
 80041fe:	480d      	ldr	r0, [pc, #52]	; (8004234 <main+0x70>)
 8004200:	f7fe ff12 	bl	8003028 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8004204:	480c      	ldr	r0, [pc, #48]	; (8004238 <main+0x74>)
 8004206:	f004 fd21 	bl	8008c4c <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 800420a:	f7fc f967 	bl	80004dc <ILI9341_Init>
  Display_init_screen();
 800420e:	f7ff fccb 	bl	8003ba8 <Display_init_screen>
//  HAL_Delay(3000);

  Si468x_init();
 8004212:	f7fc ff23 	bl	800105c <Si468x_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8004216:	2101      	movs	r1, #1
 8004218:	4808      	ldr	r0, [pc, #32]	; (800423c <main+0x78>)
 800421a:	f001 fb17 	bl	800584c <HAL_GPIO_ReadPin>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <main+0x64>
	  {
		  Si468x_play_next_station();
 8004224:	f7fe fe8a 	bl	8002f3c <Si468x_play_next_station>
	  }
	  Si468x_dab_digrad_status();
 8004228:	f7fd fde6 	bl	8001df8 <Si468x_dab_digrad_status>
	  Si468x_dab_get_time();
 800422c:	f7fe fe40 	bl	8002eb0 <Si468x_dab_get_time>
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8004230:	e7f1      	b.n	8004216 <main+0x52>
 8004232:	bf00      	nop
 8004234:	0800adf8 	.word	0x0800adf8
 8004238:	200027d4 	.word	0x200027d4
 800423c:	40020400 	.word	0x40020400

08004240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b094      	sub	sp, #80	; 0x50
 8004244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004246:	f107 0320 	add.w	r3, r7, #32
 800424a:	2230      	movs	r2, #48	; 0x30
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f005 fe8e 	bl	8009f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	4b28      	ldr	r3, [pc, #160]	; (800430c <SystemClock_Config+0xcc>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <SystemClock_Config+0xcc>)
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004272:	6413      	str	r3, [r2, #64]	; 0x40
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <SystemClock_Config+0xcc>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004280:	2300      	movs	r3, #0
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <SystemClock_Config+0xd0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a21      	ldr	r2, [pc, #132]	; (8004310 <SystemClock_Config+0xd0>)
 800428a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <SystemClock_Config+0xd0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800429c:	2301      	movs	r3, #1
 800429e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042a6:	2302      	movs	r3, #2
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80042b0:	2304      	movs	r3, #4
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80042b4:	23a0      	movs	r3, #160	; 0xa0
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042b8:	2302      	movs	r3, #2
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042bc:	2304      	movs	r3, #4
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042c0:	f107 0320 	add.w	r3, r7, #32
 80042c4:	4618      	mov	r0, r3
 80042c6:	f003 f913 	bl	80074f0 <HAL_RCC_OscConfig>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80042d0:	f000 f820 	bl	8004314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042d4:	230f      	movs	r3, #15
 80042d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042d8:	2302      	movs	r3, #2
 80042da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	2105      	movs	r1, #5
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fb74 	bl	80079e0 <HAL_RCC_ClockConfig>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80042fe:	f000 f809 	bl	8004314 <Error_Handler>
  }
}
 8004302:	bf00      	nop
 8004304:	3750      	adds	r7, #80	; 0x50
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000

08004314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004318:	b672      	cpsid	i
}
 800431a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800431c:	e7fe      	b.n	800431c <Error_Handler+0x8>
	...

08004320 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004324:	4b17      	ldr	r3, [pc, #92]	; (8004384 <MX_SPI1_Init+0x64>)
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <MX_SPI1_Init+0x68>)
 8004328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <MX_SPI1_Init+0x64>)
 800432c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <MX_SPI1_Init+0x64>)
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <MX_SPI1_Init+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_SPI1_Init+0x64>)
 8004340:	2200      	movs	r2, #0
 8004342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <MX_SPI1_Init+0x64>)
 8004346:	2200      	movs	r2, #0
 8004348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_SPI1_Init+0x64>)
 800434c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004350:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <MX_SPI1_Init+0x64>)
 8004354:	2220      	movs	r2, #32
 8004356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <MX_SPI1_Init+0x64>)
 800435a:	2200      	movs	r2, #0
 800435c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <MX_SPI1_Init+0x64>)
 8004360:	2200      	movs	r2, #0
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <MX_SPI1_Init+0x64>)
 8004366:	2200      	movs	r2, #0
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <MX_SPI1_Init+0x64>)
 800436c:	220a      	movs	r2, #10
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004370:	4804      	ldr	r0, [pc, #16]	; (8004384 <MX_SPI1_Init+0x64>)
 8004372:	f003 fd55 	bl	8007e20 <HAL_SPI_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800437c:	f7ff ffca 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20002634 	.word	0x20002634
 8004388:	40013000 	.word	0x40013000

0800438c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <MX_SPI2_Init+0x64>)
 8004392:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <MX_SPI2_Init+0x68>)
 8004394:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <MX_SPI2_Init+0x64>)
 8004398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800439c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043d8:	220a      	movs	r2, #10
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043dc:	4804      	ldr	r0, [pc, #16]	; (80043f0 <MX_SPI2_Init+0x64>)
 80043de:	f003 fd1f 	bl	8007e20 <HAL_SPI_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80043e8:	f7ff ff94 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	2000268c 	.word	0x2000268c
 80043f4:	40003800 	.word	0x40003800

080043f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08c      	sub	sp, #48	; 0x30
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a4d      	ldr	r2, [pc, #308]	; (800454c <HAL_SPI_MspInit+0x154>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d12c      	bne.n	8004474 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	4b4c      	ldr	r3, [pc, #304]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004428:	6453      	str	r3, [r2, #68]	; 0x44
 800442a:	4b49      	ldr	r3, [pc, #292]	; (8004550 <HAL_SPI_MspInit+0x158>)
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	4b45      	ldr	r3, [pc, #276]	; (8004550 <HAL_SPI_MspInit+0x158>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a44      	ldr	r2, [pc, #272]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b42      	ldr	r3, [pc, #264]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8004452:	23e0      	movs	r3, #224	; 0xe0
 8004454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445e:	2303      	movs	r3, #3
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004462:	2305      	movs	r3, #5
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004466:	f107 031c 	add.w	r3, r7, #28
 800446a:	4619      	mov	r1, r3
 800446c:	4839      	ldr	r0, [pc, #228]	; (8004554 <HAL_SPI_MspInit+0x15c>)
 800446e:	f001 f851 	bl	8005514 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004472:	e066      	b.n	8004542 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a37      	ldr	r2, [pc, #220]	; (8004558 <HAL_SPI_MspInit+0x160>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d161      	bne.n	8004542 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	4b33      	ldr	r3, [pc, #204]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	4a32      	ldr	r2, [pc, #200]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800448c:	6413      	str	r3, [r2, #64]	; 0x40
 800448e:	4b30      	ldr	r3, [pc, #192]	; (8004550 <HAL_SPI_MspInit+0x158>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_SPI_MspInit+0x158>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <HAL_SPI_MspInit+0x158>)
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b29      	ldr	r3, [pc, #164]	; (8004550 <HAL_SPI_MspInit+0x158>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80044b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044c8:	2305      	movs	r3, #5
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	4619      	mov	r1, r3
 80044d2:	4822      	ldr	r0, [pc, #136]	; (800455c <HAL_SPI_MspInit+0x164>)
 80044d4:	f001 f81e 	bl	8005514 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <HAL_SPI_MspInit+0x168>)
 80044da:	4a22      	ldr	r2, [pc, #136]	; (8004564 <HAL_SPI_MspInit+0x16c>)
 80044dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_SPI_MspInit+0x168>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_SPI_MspInit+0x168>)
 80044e6:	2240      	movs	r2, #64	; 0x40
 80044e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_SPI_MspInit+0x168>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_SPI_MspInit+0x168>)
 80044f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_SPI_MspInit+0x168>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_SPI_MspInit+0x168>)
 8004500:	2200      	movs	r2, #0
 8004502:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_SPI_MspInit+0x168>)
 8004506:	2200      	movs	r2, #0
 8004508:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <HAL_SPI_MspInit+0x168>)
 800450c:	2200      	movs	r2, #0
 800450e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_SPI_MspInit+0x168>)
 8004512:	2200      	movs	r2, #0
 8004514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004516:	4812      	ldr	r0, [pc, #72]	; (8004560 <HAL_SPI_MspInit+0x168>)
 8004518:	f000 fce2 	bl	8004ee0 <HAL_DMA_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8004522:	f7ff fef7 	bl	8004314 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_SPI_MspInit+0x168>)
 800452a:	649a      	str	r2, [r3, #72]	; 0x48
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <HAL_SPI_MspInit+0x168>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	2024      	movs	r0, #36	; 0x24
 8004538:	f000 fc9b 	bl	8004e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800453c:	2024      	movs	r0, #36	; 0x24
 800453e:	f000 fcb4 	bl	8004eaa <HAL_NVIC_EnableIRQ>
}
 8004542:	bf00      	nop
 8004544:	3730      	adds	r7, #48	; 0x30
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40013000 	.word	0x40013000
 8004550:	40023800 	.word	0x40023800
 8004554:	40020000 	.word	0x40020000
 8004558:	40003800 	.word	0x40003800
 800455c:	40020400 	.word	0x40020400
 8004560:	200026e4 	.word	0x200026e4
 8004564:	40026070 	.word	0x40026070

08004568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <HAL_MspInit+0x4c>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <HAL_MspInit+0x4c>)
 8004578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800457c:	6453      	str	r3, [r2, #68]	; 0x44
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <HAL_MspInit+0x4c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_MspInit+0x4c>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_MspInit+0x4c>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_MspInit+0x4c>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045bc:	e7fe      	b.n	80045bc <NMI_Handler+0x4>

080045be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045c2:	e7fe      	b.n	80045c2 <HardFault_Handler+0x4>

080045c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045c8:	e7fe      	b.n	80045c8 <MemManage_Handler+0x4>

080045ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045ce:	e7fe      	b.n	80045ce <BusFault_Handler+0x4>

080045d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045d4:	e7fe      	b.n	80045d4 <UsageFault_Handler+0x4>

080045d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045f2:	b480      	push	{r7}
 80045f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004604:	f000 fb16 	bl	8004c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}

0800460c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <DMA1_Stream4_IRQHandler+0x10>)
 8004612:	f000 fd35 	bl	8005080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200026e4 	.word	0x200026e4

08004620 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004624:	4802      	ldr	r0, [pc, #8]	; (8004630 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004626:	f004 fbd0 	bl	8008dca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000278c 	.word	0x2000278c

08004634 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004638:	4802      	ldr	r0, [pc, #8]	; (8004644 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800463a:	f004 fbc6 	bl	8008dca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200027d4 	.word	0x200027d4

08004648 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800464c:	4802      	ldr	r0, [pc, #8]	; (8004658 <SPI2_IRQHandler+0x10>)
 800464e:	f004 f85f 	bl	8008710 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000268c 	.word	0x2000268c

0800465c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004660:	4802      	ldr	r0, [pc, #8]	; (800466c <I2C3_EV_IRQHandler+0x10>)
 8004662:	f001 fa69 	bl	8005b38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200025e0 	.word	0x200025e0

08004670 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004674:	4802      	ldr	r0, [pc, #8]	; (8004680 <I2C3_ER_IRQHandler+0x10>)
 8004676:	f001 fbd0 	bl	8005e1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200025e0 	.word	0x200025e0

08004684 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
//		Si468x_dab_digrad_status();	//poki co zawiesza to procka, sprawdzic dlaczego.
	}

	if(htim->Instance==TIM11)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 8004696:	f7ff fd09 	bl	80040ac <Leds_Control_Blink>

	}
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40014800 	.word	0x40014800

080046a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <SystemInit+0x20>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <SystemInit+0x20>)
 80046b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d2:	f107 0320 	add.w	r3, r7, #32
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	609a      	str	r2, [r3, #8]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	611a      	str	r2, [r3, #16]
 80046ea:	615a      	str	r2, [r3, #20]
 80046ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <MX_TIM3_Init+0xac>)
 80046f0:	4a22      	ldr	r2, [pc, #136]	; (800477c <MX_TIM3_Init+0xb0>)
 80046f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <MX_TIM3_Init+0xac>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <MX_TIM3_Init+0xac>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <MX_TIM3_Init+0xac>)
 8004702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <MX_TIM3_Init+0xac>)
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <MX_TIM3_Init+0xac>)
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004714:	4818      	ldr	r0, [pc, #96]	; (8004778 <MX_TIM3_Init+0xac>)
 8004716:	f004 fb09 	bl	8008d2c <HAL_TIM_PWM_Init>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004720:	f7ff fdf8 	bl	8004314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004724:	2300      	movs	r3, #0
 8004726:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800472c:	f107 0320 	add.w	r3, r7, #32
 8004730:	4619      	mov	r1, r3
 8004732:	4811      	ldr	r0, [pc, #68]	; (8004778 <MX_TIM3_Init+0xac>)
 8004734:	f004 ff8c 	bl	8009650 <HAL_TIMEx_MasterConfigSynchronization>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800473e:	f7ff fde9 	bl	8004314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004742:	2360      	movs	r3, #96	; 0x60
 8004744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	2208      	movs	r2, #8
 8004756:	4619      	mov	r1, r3
 8004758:	4807      	ldr	r0, [pc, #28]	; (8004778 <MX_TIM3_Init+0xac>)
 800475a:	f004 fc3f 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004764:	f7ff fdd6 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <MX_TIM3_Init+0xac>)
 800476a:	f000 f8b9 	bl	80048e0 <HAL_TIM_MspPostInit>

}
 800476e:	bf00      	nop
 8004770:	3728      	adds	r7, #40	; 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20002744 	.word	0x20002744
 800477c:	40000400 	.word	0x40000400

08004780 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <MX_TIM10_Init+0x40>)
 8004786:	4a0f      	ldr	r2, [pc, #60]	; (80047c4 <MX_TIM10_Init+0x44>)
 8004788:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <MX_TIM10_Init+0x40>)
 800478c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004790:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <MX_TIM10_Init+0x40>)
 8004794:	2200      	movs	r2, #0
 8004796:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <MX_TIM10_Init+0x40>)
 800479a:	f240 2257 	movw	r2, #599	; 0x257
 800479e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <MX_TIM10_Init+0x40>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <MX_TIM10_Init+0x40>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80047ac:	4804      	ldr	r0, [pc, #16]	; (80047c0 <MX_TIM10_Init+0x40>)
 80047ae:	f004 f9fd 	bl	8008bac <HAL_TIM_Base_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80047b8:	f7ff fdac 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	2000278c 	.word	0x2000278c
 80047c4:	40014400 	.word	0x40014400

080047c8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <MX_TIM11_Init+0x40>)
 80047ce:	4a0f      	ldr	r2, [pc, #60]	; (800480c <MX_TIM11_Init+0x44>)
 80047d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <MX_TIM11_Init+0x40>)
 80047d4:	f643 2297 	movw	r2, #14999	; 0x3a97
 80047d8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <MX_TIM11_Init+0x40>)
 80047dc:	2200      	movs	r2, #0
 80047de:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <MX_TIM11_Init+0x40>)
 80047e2:	f240 5213 	movw	r2, #1299	; 0x513
 80047e6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <MX_TIM11_Init+0x40>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <MX_TIM11_Init+0x40>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80047f4:	4804      	ldr	r0, [pc, #16]	; (8004808 <MX_TIM11_Init+0x40>)
 80047f6:	f004 f9d9 	bl	8008bac <HAL_TIM_Base_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004800:	f7ff fd88 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004804:	bf00      	nop
 8004806:	bd80      	pop	{r7, pc}
 8004808:	200027d4 	.word	0x200027d4
 800480c:	40014800 	.word	0x40014800

08004810 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0b      	ldr	r2, [pc, #44]	; (800484c <HAL_TIM_PWM_MspInit+0x3c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10d      	bne.n	800483e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_TIM_PWM_MspInit+0x40>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_TIM_PWM_MspInit+0x40>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_TIM_PWM_MspInit+0x40>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40000400 	.word	0x40000400
 8004850:	40023800 	.word	0x40023800

08004854 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_TIM_Base_MspInit+0x80>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d116      	bne.n	8004894 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <HAL_TIM_Base_MspInit+0x84>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	4a1a      	ldr	r2, [pc, #104]	; (80048d8 <HAL_TIM_Base_MspInit+0x84>)
 8004870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004874:	6453      	str	r3, [r2, #68]	; 0x44
 8004876:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <HAL_TIM_Base_MspInit+0x84>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2100      	movs	r1, #0
 8004886:	2019      	movs	r0, #25
 8004888:	f000 faf3 	bl	8004e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800488c:	2019      	movs	r0, #25
 800488e:	f000 fb0c 	bl	8004eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004892:	e01a      	b.n	80048ca <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a10      	ldr	r2, [pc, #64]	; (80048dc <HAL_TIM_Base_MspInit+0x88>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d115      	bne.n	80048ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_TIM_Base_MspInit+0x84>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <HAL_TIM_Base_MspInit+0x84>)
 80048a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ac:	6453      	str	r3, [r2, #68]	; 0x44
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_TIM_Base_MspInit+0x84>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	201a      	movs	r0, #26
 80048c0:	f000 fad7 	bl	8004e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80048c4:	201a      	movs	r0, #26
 80048c6:	f000 faf0 	bl	8004eaa <HAL_NVIC_EnableIRQ>
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40014800 	.word	0x40014800

080048e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_TIM_MspPostInit+0x68>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d11e      	bne.n	8004940 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_TIM_MspPostInit+0x6c>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <HAL_TIM_MspPostInit+0x6c>)
 800490c:	f043 0304 	orr.w	r3, r3, #4
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	4b0e      	ldr	r3, [pc, #56]	; (800494c <HAL_TIM_MspPostInit+0x6c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 800491e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004922:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004930:	2302      	movs	r3, #2
 8004932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	4619      	mov	r1, r3
 800493a:	4805      	ldr	r0, [pc, #20]	; (8004950 <HAL_TIM_MspPostInit+0x70>)
 800493c:	f000 fdea 	bl	8005514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004940:	bf00      	nop
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40000400 	.word	0x40000400
 800494c:	40023800 	.word	0x40023800
 8004950:	40020800 	.word	0x40020800

08004954 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <MX_UART5_Init+0x4c>)
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <MX_UART5_Init+0x50>)
 800495c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <MX_UART5_Init+0x4c>)
 8004960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004964:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <MX_UART5_Init+0x4c>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <MX_UART5_Init+0x4c>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <MX_UART5_Init+0x4c>)
 8004974:	2200      	movs	r2, #0
 8004976:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <MX_UART5_Init+0x4c>)
 800497a:	220c      	movs	r2, #12
 800497c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <MX_UART5_Init+0x4c>)
 8004980:	2200      	movs	r2, #0
 8004982:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <MX_UART5_Init+0x4c>)
 8004986:	2200      	movs	r2, #0
 8004988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800498a:	4805      	ldr	r0, [pc, #20]	; (80049a0 <MX_UART5_Init+0x4c>)
 800498c:	f004 fef0 	bl	8009770 <HAL_UART_Init>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004996:	f7ff fcbd 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	2000281c 	.word	0x2000281c
 80049a4:	40005000 	.word	0x40005000

080049a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80049ac:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <MX_USART3_UART_Init+0x50>)
 80049b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80049b2:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80049b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049ce:	220c      	movs	r2, #12
 80049d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049d2:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049da:	2200      	movs	r2, #0
 80049dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <MX_USART3_UART_Init+0x4c>)
 80049e0:	f004 fec6 	bl	8009770 <HAL_UART_Init>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80049ea:	f7ff fc93 	bl	8004314 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20002860 	.word	0x20002860
 80049f8:	40004800 	.word	0x40004800

080049fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08c      	sub	sp, #48	; 0x30
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f107 031c 	add.w	r3, r7, #28
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <HAL_UART_MspInit+0x128>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d14b      	bne.n	8004ab6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a40      	ldr	r2, [pc, #256]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	4a39      	ldr	r2, [pc, #228]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	4b33      	ldr	r3, [pc, #204]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	6313      	str	r3, [r2, #48]	; 0x30
 8004a66:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a80:	2303      	movs	r3, #3
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004a84:	2308      	movs	r3, #8
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a88:	f107 031c 	add.w	r3, r7, #28
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4827      	ldr	r0, [pc, #156]	; (8004b2c <HAL_UART_MspInit+0x130>)
 8004a90:	f000 fd40 	bl	8005514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a94:	2304      	movs	r3, #4
 8004a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aa8:	f107 031c 	add.w	r3, r7, #28
 8004aac:	4619      	mov	r1, r3
 8004aae:	4820      	ldr	r0, [pc, #128]	; (8004b30 <HAL_UART_MspInit+0x134>)
 8004ab0:	f000 fd30 	bl	8005514 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004ab4:	e031      	b.n	8004b1a <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <HAL_UART_MspInit+0x138>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d12c      	bne.n	8004b1a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ace:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004ae6:	f043 0302 	orr.w	r3, r3, #2
 8004aea:	6313      	str	r3, [r2, #48]	; 0x30
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_UART_MspInit+0x12c>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8004af8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b06:	2303      	movs	r3, #3
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0e:	f107 031c 	add.w	r3, r7, #28
 8004b12:	4619      	mov	r1, r3
 8004b14:	4808      	ldr	r0, [pc, #32]	; (8004b38 <HAL_UART_MspInit+0x13c>)
 8004b16:	f000 fcfd 	bl	8005514 <HAL_GPIO_Init>
}
 8004b1a:	bf00      	nop
 8004b1c:	3730      	adds	r7, #48	; 0x30
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40005000 	.word	0x40005000
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	40020c00 	.word	0x40020c00
 8004b34:	40004800 	.word	0x40004800
 8004b38:	40020400 	.word	0x40020400

08004b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b40:	480d      	ldr	r0, [pc, #52]	; (8004b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b42:	490e      	ldr	r1, [pc, #56]	; (8004b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b44:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b48:	e002      	b.n	8004b50 <LoopCopyDataInit>

08004b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b4e:	3304      	adds	r3, #4

08004b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b54:	d3f9      	bcc.n	8004b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b56:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b58:	4c0b      	ldr	r4, [pc, #44]	; (8004b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b5c:	e001      	b.n	8004b62 <LoopFillZerobss>

08004b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b60:	3204      	adds	r2, #4

08004b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b64:	d3fb      	bcc.n	8004b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b66:	f7ff fd9f 	bl	80046a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b6a:	f005 f9c3 	bl	8009ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b6e:	f7ff fb29 	bl	80041c4 <main>
  bx  lr    
 8004b72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b7c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004b80:	0800cdcc 	.word	0x0800cdcc
  ldr r2, =_sbss
 8004b84:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8004b88:	200028a8 	.word	0x200028a8

08004b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b8c:	e7fe      	b.n	8004b8c <ADC_IRQHandler>
	...

08004b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b94:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_Init+0x40>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <HAL_Init+0x40>)
 8004b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_Init+0x40>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <HAL_Init+0x40>)
 8004ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_Init+0x40>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_Init+0x40>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb8:	2003      	movs	r0, #3
 8004bba:	f000 f94f 	bl	8004e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bbe:	200f      	movs	r0, #15
 8004bc0:	f000 f808 	bl	8004bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bc4:	f7ff fcd0 	bl	8004568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00

08004bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_InitTick+0x54>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_InitTick+0x58>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f967 	bl	8004ec6 <HAL_SYSTICK_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00e      	b.n	8004c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d80a      	bhi.n	8004c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	f000 f92f 	bl	8004e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c14:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <HAL_InitTick+0x5c>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200000b0 	.word	0x200000b0
 8004c2c:	200000b8 	.word	0x200000b8
 8004c30:	200000b4 	.word	0x200000b4

08004c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_IncTick+0x20>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_IncTick+0x24>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <HAL_IncTick+0x24>)
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	200000b8 	.word	0x200000b8
 8004c58:	200028a4 	.word	0x200028a4

08004c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <HAL_GetTick+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	200028a4 	.word	0x200028a4

08004c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c7c:	f7ff ffee 	bl	8004c5c <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d005      	beq.n	8004c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_Delay+0x44>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c9a:	bf00      	nop
 8004c9c:	f7ff ffde 	bl	8004c5c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d8f7      	bhi.n	8004c9c <HAL_Delay+0x28>
  {
  }
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200000b8 	.word	0x200000b8

08004cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <__NVIC_SetPriorityGrouping+0x44>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cee:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	60d3      	str	r3, [r2, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <__NVIC_GetPriorityGrouping+0x18>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	f003 0307 	and.w	r3, r3, #7
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	db0b      	blt.n	8004d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	f003 021f 	and.w	r2, r3, #31
 8004d38:	4907      	ldr	r1, [pc, #28]	; (8004d58 <__NVIC_EnableIRQ+0x38>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	2001      	movs	r0, #1
 8004d42:	fa00 f202 	lsl.w	r2, r0, r2
 8004d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000e100 	.word	0xe000e100

08004d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	6039      	str	r1, [r7, #0]
 8004d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	db0a      	blt.n	8004d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	490c      	ldr	r1, [pc, #48]	; (8004da8 <__NVIC_SetPriority+0x4c>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	0112      	lsls	r2, r2, #4
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d84:	e00a      	b.n	8004d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4908      	ldr	r1, [pc, #32]	; (8004dac <__NVIC_SetPriority+0x50>)
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	3b04      	subs	r3, #4
 8004d94:	0112      	lsls	r2, r2, #4
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	440b      	add	r3, r1
 8004d9a:	761a      	strb	r2, [r3, #24]
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000e100 	.word	0xe000e100
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f1c3 0307 	rsb	r3, r3, #7
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	bf28      	it	cs
 8004dce:	2304      	movcs	r3, #4
 8004dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	2b06      	cmp	r3, #6
 8004dd8:	d902      	bls.n	8004de0 <NVIC_EncodePriority+0x30>
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3b03      	subs	r3, #3
 8004dde:	e000      	b.n	8004de2 <NVIC_EncodePriority+0x32>
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de4:	f04f 32ff 	mov.w	r2, #4294967295
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43da      	mvns	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	401a      	ands	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004df8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	43d9      	mvns	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e08:	4313      	orrs	r3, r2
         );
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3724      	adds	r7, #36	; 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e28:	d301      	bcc.n	8004e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e00f      	b.n	8004e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	; (8004e58 <SysTick_Config+0x40>)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e36:	210f      	movs	r1, #15
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	f7ff ff8e 	bl	8004d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <SysTick_Config+0x40>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e46:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <SysTick_Config+0x40>)
 8004e48:	2207      	movs	r2, #7
 8004e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	e000e010 	.word	0xe000e010

08004e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff29 	bl	8004cbc <__NVIC_SetPriorityGrouping>
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e84:	f7ff ff3e 	bl	8004d04 <__NVIC_GetPriorityGrouping>
 8004e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	6978      	ldr	r0, [r7, #20]
 8004e90:	f7ff ff8e 	bl	8004db0 <NVIC_EncodePriority>
 8004e94:	4602      	mov	r2, r0
 8004e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ff5d 	bl	8004d5c <__NVIC_SetPriority>
}
 8004ea2:	bf00      	nop
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff31 	bl	8004d20 <__NVIC_EnableIRQ>
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ffa2 	bl	8004e18 <SysTick_Config>
 8004ed4:	4603      	mov	r3, r0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004eec:	f7ff feb6 	bl	8004c5c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e099      	b.n	8005030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f1c:	e00f      	b.n	8004f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f1e:	f7ff fe9d 	bl	8004c5c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b05      	cmp	r3, #5
 8004f2a:	d908      	bls.n	8004f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2203      	movs	r2, #3
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e078      	b.n	8005030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e8      	bne.n	8004f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4b38      	ldr	r3, [pc, #224]	; (8005038 <HAL_DMA_Init+0x158>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d107      	bne.n	8004fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d117      	bne.n	8005002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fa19 	bl	800541c <DMA_CheckFifoParam>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2240      	movs	r2, #64	; 0x40
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ffe:	2301      	movs	r3, #1
 8005000:	e016      	b.n	8005030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f9d0 	bl	80053b0 <DMA_CalcBaseAndBitshift>
 8005010:	4603      	mov	r3, r0
 8005012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	223f      	movs	r2, #63	; 0x3f
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	f010803f 	.word	0xf010803f

0800503c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d004      	beq.n	800505a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e00c      	b.n	8005074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2205      	movs	r2, #5
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800508c:	4b8e      	ldr	r3, [pc, #568]	; (80052c8 <HAL_DMA_IRQHandler+0x248>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a8e      	ldr	r2, [pc, #568]	; (80052cc <HAL_DMA_IRQHandler+0x24c>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	2208      	movs	r2, #8
 80050ac:	409a      	lsls	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01a      	beq.n	80050ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d8:	2208      	movs	r2, #8
 80050da:	409a      	lsls	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d012      	beq.n	8005122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	2201      	movs	r2, #1
 8005110:	409a      	lsls	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	2204      	movs	r2, #4
 8005128:	409a      	lsls	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005144:	2204      	movs	r2, #4
 8005146:	409a      	lsls	r2, r3
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f043 0204 	orr.w	r2, r3, #4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	2210      	movs	r2, #16
 800515e:	409a      	lsls	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d043      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d03c      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517a:	2210      	movs	r2, #16
 800517c:	409a      	lsls	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d024      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
 80051ae:	e01f      	b.n	80051f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
 80051c0:	e016      	b.n	80051f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0208 	bic.w	r2, r2, #8
 80051de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f4:	2220      	movs	r2, #32
 80051f6:	409a      	lsls	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 808f 	beq.w	8005320 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8087 	beq.w	8005320 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	2220      	movs	r2, #32
 8005218:	409a      	lsls	r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b05      	cmp	r3, #5
 8005228:	d136      	bne.n	8005298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0216 	bic.w	r2, r2, #22
 8005238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <HAL_DMA_IRQHandler+0x1da>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0208 	bic.w	r2, r2, #8
 8005268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	223f      	movs	r2, #63	; 0x3f
 8005270:	409a      	lsls	r2, r3
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	2b00      	cmp	r3, #0
 800528c:	d07e      	beq.n	800538c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
        }
        return;
 8005296:	e079      	b.n	800538c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01d      	beq.n	80052e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10d      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
 80052c4:	e02c      	b.n	8005320 <HAL_DMA_IRQHandler+0x2a0>
 80052c6:	bf00      	nop
 80052c8:	200000b0 	.word	0x200000b0
 80052cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d023      	beq.n	8005320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
 80052e0:	e01e      	b.n	8005320 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0210 	bic.w	r2, r2, #16
 80052fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	2b00      	cmp	r3, #0
 8005326:	d032      	beq.n	800538e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d022      	beq.n	800537a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2205      	movs	r2, #5
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	3301      	adds	r3, #1
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	d307      	bcc.n	8005368 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f2      	bne.n	800534c <HAL_DMA_IRQHandler+0x2cc>
 8005366:	e000      	b.n	800536a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005368:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
 800538a:	e000      	b.n	800538e <HAL_DMA_IRQHandler+0x30e>
        return;
 800538c:	bf00      	nop
    }
  }
}
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a2:	b2db      	uxtb	r3, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	3b10      	subs	r3, #16
 80053c0:	4a14      	ldr	r2, [pc, #80]	; (8005414 <DMA_CalcBaseAndBitshift+0x64>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053ca:	4a13      	ldr	r2, [pc, #76]	; (8005418 <DMA_CalcBaseAndBitshift+0x68>)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d909      	bls.n	80053f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	1d1a      	adds	r2, r3, #4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58
 80053f0:	e007      	b.n	8005402 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	aaaaaaab 	.word	0xaaaaaaab
 8005418:	0800cd8c 	.word	0x0800cd8c

0800541c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11f      	bne.n	8005476 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d856      	bhi.n	80054ea <DMA_CheckFifoParam+0xce>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <DMA_CheckFifoParam+0x28>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005455 	.word	0x08005455
 8005448:	08005467 	.word	0x08005467
 800544c:	08005455 	.word	0x08005455
 8005450:	080054eb 	.word	0x080054eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d046      	beq.n	80054ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005464:	e043      	b.n	80054ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800546e:	d140      	bne.n	80054f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005474:	e03d      	b.n	80054f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547e:	d121      	bne.n	80054c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d837      	bhi.n	80054f6 <DMA_CheckFifoParam+0xda>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <DMA_CheckFifoParam+0x70>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	0800549d 	.word	0x0800549d
 8005490:	080054a3 	.word	0x080054a3
 8005494:	0800549d 	.word	0x0800549d
 8005498:	080054b5 	.word	0x080054b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      break;
 80054a0:	e030      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d025      	beq.n	80054fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b2:	e022      	b.n	80054fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054bc:	d11f      	bne.n	80054fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054c2:	e01c      	b.n	80054fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d903      	bls.n	80054d2 <DMA_CheckFifoParam+0xb6>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d003      	beq.n	80054d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054d0:	e018      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
      break;
 80054d6:	e015      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
      break;
 80054e8:	e00b      	b.n	8005502 <DMA_CheckFifoParam+0xe6>
      break;
 80054ea:	bf00      	nop
 80054ec:	e00a      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      break;
 80054ee:	bf00      	nop
 80054f0:	e008      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      break;
 80054f2:	bf00      	nop
 80054f4:	e006      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      break;
 80054f6:	bf00      	nop
 80054f8:	e004      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      break;   
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <DMA_CheckFifoParam+0xe8>
      break;
 8005502:	bf00      	nop
    }
  } 
  
  return status; 
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop

08005514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	e16b      	b.n	8005808 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005530:	2201      	movs	r2, #1
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	429a      	cmp	r2, r3
 800554a:	f040 815a 	bne.w	8005802 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d005      	beq.n	8005566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005562:	2b02      	cmp	r3, #2
 8005564:	d130      	bne.n	80055c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	2203      	movs	r2, #3
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800559c:	2201      	movs	r2, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0201 	and.w	r2, r3, #1
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d017      	beq.n	8005604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d123      	bne.n	8005658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	08da      	lsrs	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3208      	adds	r2, #8
 8005618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	220f      	movs	r2, #15
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	08da      	lsrs	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3208      	adds	r2, #8
 8005652:	69b9      	ldr	r1, [r7, #24]
 8005654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	2203      	movs	r2, #3
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43db      	mvns	r3, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4013      	ands	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0203 	and.w	r2, r3, #3
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80b4 	beq.w	8005802 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	4b60      	ldr	r3, [pc, #384]	; (8005820 <HAL_GPIO_Init+0x30c>)
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	4a5f      	ldr	r2, [pc, #380]	; (8005820 <HAL_GPIO_Init+0x30c>)
 80056a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056a8:	6453      	str	r3, [r2, #68]	; 0x44
 80056aa:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <HAL_GPIO_Init+0x30c>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056b6:	4a5b      	ldr	r2, [pc, #364]	; (8005824 <HAL_GPIO_Init+0x310>)
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	3302      	adds	r3, #2
 80056be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	220f      	movs	r2, #15
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a52      	ldr	r2, [pc, #328]	; (8005828 <HAL_GPIO_Init+0x314>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02b      	beq.n	800573a <HAL_GPIO_Init+0x226>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a51      	ldr	r2, [pc, #324]	; (800582c <HAL_GPIO_Init+0x318>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d025      	beq.n	8005736 <HAL_GPIO_Init+0x222>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a50      	ldr	r2, [pc, #320]	; (8005830 <HAL_GPIO_Init+0x31c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <HAL_GPIO_Init+0x21e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a4f      	ldr	r2, [pc, #316]	; (8005834 <HAL_GPIO_Init+0x320>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d019      	beq.n	800572e <HAL_GPIO_Init+0x21a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a4e      	ldr	r2, [pc, #312]	; (8005838 <HAL_GPIO_Init+0x324>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_GPIO_Init+0x216>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a4d      	ldr	r2, [pc, #308]	; (800583c <HAL_GPIO_Init+0x328>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00d      	beq.n	8005726 <HAL_GPIO_Init+0x212>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a4c      	ldr	r2, [pc, #304]	; (8005840 <HAL_GPIO_Init+0x32c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <HAL_GPIO_Init+0x20e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a4b      	ldr	r2, [pc, #300]	; (8005844 <HAL_GPIO_Init+0x330>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_GPIO_Init+0x20a>
 800571a:	2307      	movs	r3, #7
 800571c:	e00e      	b.n	800573c <HAL_GPIO_Init+0x228>
 800571e:	2308      	movs	r3, #8
 8005720:	e00c      	b.n	800573c <HAL_GPIO_Init+0x228>
 8005722:	2306      	movs	r3, #6
 8005724:	e00a      	b.n	800573c <HAL_GPIO_Init+0x228>
 8005726:	2305      	movs	r3, #5
 8005728:	e008      	b.n	800573c <HAL_GPIO_Init+0x228>
 800572a:	2304      	movs	r3, #4
 800572c:	e006      	b.n	800573c <HAL_GPIO_Init+0x228>
 800572e:	2303      	movs	r3, #3
 8005730:	e004      	b.n	800573c <HAL_GPIO_Init+0x228>
 8005732:	2302      	movs	r3, #2
 8005734:	e002      	b.n	800573c <HAL_GPIO_Init+0x228>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_GPIO_Init+0x228>
 800573a:	2300      	movs	r3, #0
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	f002 0203 	and.w	r2, r2, #3
 8005742:	0092      	lsls	r2, r2, #2
 8005744:	4093      	lsls	r3, r2
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4313      	orrs	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800574c:	4935      	ldr	r1, [pc, #212]	; (8005824 <HAL_GPIO_Init+0x310>)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	089b      	lsrs	r3, r3, #2
 8005752:	3302      	adds	r3, #2
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_GPIO_Init+0x334>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800577e:	4a32      	ldr	r2, [pc, #200]	; (8005848 <HAL_GPIO_Init+0x334>)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005784:	4b30      	ldr	r3, [pc, #192]	; (8005848 <HAL_GPIO_Init+0x334>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057a8:	4a27      	ldr	r2, [pc, #156]	; (8005848 <HAL_GPIO_Init+0x334>)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057ae:	4b26      	ldr	r3, [pc, #152]	; (8005848 <HAL_GPIO_Init+0x334>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_GPIO_Init+0x334>)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <HAL_GPIO_Init+0x334>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057fc:	4a12      	ldr	r2, [pc, #72]	; (8005848 <HAL_GPIO_Init+0x334>)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3301      	adds	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	f67f ae90 	bls.w	8005530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800
 8005824:	40013800 	.word	0x40013800
 8005828:	40020000 	.word	0x40020000
 800582c:	40020400 	.word	0x40020400
 8005830:	40020800 	.word	0x40020800
 8005834:	40020c00 	.word	0x40020c00
 8005838:	40021000 	.word	0x40021000
 800583c:	40021400 	.word	0x40021400
 8005840:	40021800 	.word	0x40021800
 8005844:	40021c00 	.word	0x40021c00
 8005848:	40013c00 	.word	0x40013c00

0800584c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	e001      	b.n	800586e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]
 8005888:	4613      	mov	r3, r2
 800588a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800588c:	787b      	ldrb	r3, [r7, #1]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005898:	e003      	b.n	80058a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	041a      	lsls	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	619a      	str	r2, [r3, #24]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e12b      	b.n	8005b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe fb38 	bl	8003f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2224      	movs	r2, #36	; 0x24
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005914:	f002 fa5c 	bl	8007dd0 <HAL_RCC_GetPCLK1Freq>
 8005918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4a81      	ldr	r2, [pc, #516]	; (8005b24 <HAL_I2C_Init+0x274>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d807      	bhi.n	8005934 <HAL_I2C_Init+0x84>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a80      	ldr	r2, [pc, #512]	; (8005b28 <HAL_I2C_Init+0x278>)
 8005928:	4293      	cmp	r3, r2
 800592a:	bf94      	ite	ls
 800592c:	2301      	movls	r3, #1
 800592e:	2300      	movhi	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e006      	b.n	8005942 <HAL_I2C_Init+0x92>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4a7d      	ldr	r2, [pc, #500]	; (8005b2c <HAL_I2C_Init+0x27c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	bf94      	ite	ls
 800593c:	2301      	movls	r3, #1
 800593e:	2300      	movhi	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e0e7      	b.n	8005b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a78      	ldr	r2, [pc, #480]	; (8005b30 <HAL_I2C_Init+0x280>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	0c9b      	lsrs	r3, r3, #18
 8005954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a6a      	ldr	r2, [pc, #424]	; (8005b24 <HAL_I2C_Init+0x274>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d802      	bhi.n	8005984 <HAL_I2C_Init+0xd4>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	3301      	adds	r3, #1
 8005982:	e009      	b.n	8005998 <HAL_I2C_Init+0xe8>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800598a:	fb02 f303 	mul.w	r3, r2, r3
 800598e:	4a69      	ldr	r2, [pc, #420]	; (8005b34 <HAL_I2C_Init+0x284>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	099b      	lsrs	r3, r3, #6
 8005996:	3301      	adds	r3, #1
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	430b      	orrs	r3, r1
 800599e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	495c      	ldr	r1, [pc, #368]	; (8005b24 <HAL_I2C_Init+0x274>)
 80059b4:	428b      	cmp	r3, r1
 80059b6:	d819      	bhi.n	80059ec <HAL_I2C_Init+0x13c>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1e59      	subs	r1, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059cc:	400b      	ands	r3, r1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_I2C_Init+0x138>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1e59      	subs	r1, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80059e0:	3301      	adds	r3, #1
 80059e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e6:	e051      	b.n	8005a8c <HAL_I2C_Init+0x1dc>
 80059e8:	2304      	movs	r3, #4
 80059ea:	e04f      	b.n	8005a8c <HAL_I2C_Init+0x1dc>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d111      	bne.n	8005a18 <HAL_I2C_Init+0x168>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	1e58      	subs	r0, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6859      	ldr	r1, [r3, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	440b      	add	r3, r1
 8005a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a06:	3301      	adds	r3, #1
 8005a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e012      	b.n	8005a3e <HAL_I2C_Init+0x18e>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1e58      	subs	r0, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	0099      	lsls	r1, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_I2C_Init+0x196>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e022      	b.n	8005a8c <HAL_I2C_Init+0x1dc>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10e      	bne.n	8005a6c <HAL_I2C_Init+0x1bc>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1e58      	subs	r0, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	460b      	mov	r3, r1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	440b      	add	r3, r1
 8005a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a60:	3301      	adds	r3, #1
 8005a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	e00f      	b.n	8005a8c <HAL_I2C_Init+0x1dc>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1e58      	subs	r0, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6859      	ldr	r1, [r3, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	0099      	lsls	r1, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a82:	3301      	adds	r3, #1
 8005a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	6809      	ldr	r1, [r1, #0]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6911      	ldr	r1, [r2, #16]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68d2      	ldr	r2, [r2, #12]
 8005ac6:	4311      	orrs	r1, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	000186a0 	.word	0x000186a0
 8005b28:	001e847f 	.word	0x001e847f
 8005b2c:	003d08ff 	.word	0x003d08ff
 8005b30:	431bde83 	.word	0x431bde83
 8005b34:	10624dd3 	.word	0x10624dd3

08005b38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d003      	beq.n	8005b70 <HAL_I2C_EV_IRQHandler+0x38>
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	f040 80c1 	bne.w	8005cf2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b90:	d003      	beq.n	8005b9a <HAL_I2C_EV_IRQHandler+0x62>
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_EV_IRQHandler+0x66>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_I2C_EV_IRQHandler+0x68>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	f000 8132 	beq.w	8005e0a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00c      	beq.n	8005bca <HAL_I2C_EV_IRQHandler+0x92>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	0a5b      	lsrs	r3, r3, #9
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d006      	beq.n	8005bca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 fc7b 	bl	80074b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fd83 	bl	80066ce <I2C_Master_SB>
 8005bc8:	e092      	b.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	08db      	lsrs	r3, r3, #3
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <HAL_I2C_EV_IRQHandler+0xb2>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	0a5b      	lsrs	r3, r3, #9
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fdf9 	bl	80067da <I2C_Master_ADD10>
 8005be8:	e082      	b.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_I2C_EV_IRQHandler+0xd2>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	0a5b      	lsrs	r3, r3, #9
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fe13 	bl	800682e <I2C_Master_ADDR>
 8005c08:	e072      	b.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03b      	beq.n	8005c8e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c24:	f000 80f3 	beq.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	09db      	lsrs	r3, r3, #7
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00f      	beq.n	8005c54 <HAL_I2C_EV_IRQHandler+0x11c>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	0a9b      	lsrs	r3, r3, #10
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <HAL_I2C_EV_IRQHandler+0x11c>
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	089b      	lsrs	r3, r3, #2
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f9f3 	bl	8006038 <I2C_MasterTransmit_TXE>
 8005c52:	e04d      	b.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80d6 	beq.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	0a5b      	lsrs	r3, r3, #9
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80cf 	beq.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c70:	7bbb      	ldrb	r3, [r7, #14]
 8005c72:	2b21      	cmp	r3, #33	; 0x21
 8005c74:	d103      	bne.n	8005c7e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa7a 	bl	8006170 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7c:	e0c7      	b.n	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	f040 80c4 	bne.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fae8 	bl	800625c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c8c:	e0bf      	b.n	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	f000 80b7 	beq.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	099b      	lsrs	r3, r3, #6
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00f      	beq.n	8005ccc <HAL_I2C_EV_IRQHandler+0x194>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	0a9b      	lsrs	r3, r3, #10
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <HAL_I2C_EV_IRQHandler+0x194>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fb5d 	bl	8006384 <I2C_MasterReceive_RXNE>
 8005cca:	e011      	b.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 809a 	beq.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	0a5b      	lsrs	r3, r3, #9
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8093 	beq.w	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc06 	bl	80064fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cee:	e08e      	b.n	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005cf0:	e08d      	b.n	8005e0e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e007      	b.n	8005d14 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d012      	beq.n	8005d46 <HAL_I2C_EV_IRQHandler+0x20e>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	0a5b      	lsrs	r3, r3, #9
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 ffc4 	bl	8006ccc <I2C_Slave_ADDR>
 8005d44:	e066      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <HAL_I2C_EV_IRQHandler+0x22e>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	0a5b      	lsrs	r3, r3, #9
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fffe 	bl	8006d60 <I2C_Slave_STOPF>
 8005d64:	e056      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	2b21      	cmp	r3, #33	; 0x21
 8005d6a:	d002      	beq.n	8005d72 <HAL_I2C_EV_IRQHandler+0x23a>
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	2b29      	cmp	r3, #41	; 0x29
 8005d70:	d125      	bne.n	8005dbe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	09db      	lsrs	r3, r3, #7
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00f      	beq.n	8005d9e <HAL_I2C_EV_IRQHandler+0x266>
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	0a9b      	lsrs	r3, r3, #10
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_I2C_EV_IRQHandler+0x266>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	089b      	lsrs	r3, r3, #2
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 feda 	bl	8006b50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d9c:	e039      	b.n	8005e12 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	089b      	lsrs	r3, r3, #2
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d033      	beq.n	8005e12 <HAL_I2C_EV_IRQHandler+0x2da>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	0a5b      	lsrs	r3, r3, #9
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02d      	beq.n	8005e12 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 ff07 	bl	8006bca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dbc:	e029      	b.n	8005e12 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00f      	beq.n	8005dea <HAL_I2C_EV_IRQHandler+0x2b2>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	0a9b      	lsrs	r3, r3, #10
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_I2C_EV_IRQHandler+0x2b2>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 ff12 	bl	8006c0c <I2C_SlaveReceive_RXNE>
 8005de8:	e014      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	089b      	lsrs	r3, r3, #2
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00e      	beq.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 ff40 	bl	8006c88 <I2C_SlaveReceive_BTF>
 8005e08:	e004      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b08a      	sub	sp, #40	; 0x28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <HAL_I2C_ER_IRQHandler+0x4e>
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	0a5b      	lsrs	r3, r3, #9
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <HAL_I2C_ER_IRQHandler+0x78>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	f043 0302 	orr.w	r3, r3, #2
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005e90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	0a9b      	lsrs	r3, r3, #10
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d03f      	beq.n	8005f1e <HAL_I2C_ER_IRQHandler+0x104>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d039      	beq.n	8005f1e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005eaa:	7efb      	ldrb	r3, [r7, #27]
 8005eac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ec4:	7ebb      	ldrb	r3, [r7, #26]
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d112      	bne.n	8005ef0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	2b21      	cmp	r3, #33	; 0x21
 8005ed4:	d008      	beq.n	8005ee8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005ed6:	7cfb      	ldrb	r3, [r7, #19]
 8005ed8:	2b29      	cmp	r3, #41	; 0x29
 8005eda:	d005      	beq.n	8005ee8 <HAL_I2C_ER_IRQHandler+0xce>
 8005edc:	7cfb      	ldrb	r3, [r7, #19]
 8005ede:	2b28      	cmp	r3, #40	; 0x28
 8005ee0:	d106      	bne.n	8005ef0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b21      	cmp	r3, #33	; 0x21
 8005ee6:	d103      	bne.n	8005ef0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 f869 	bl	8006fc0 <I2C_Slave_AF>
 8005eee:	e016      	b.n	8005f1e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ef8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f02:	7efb      	ldrb	r3, [r7, #27]
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d002      	beq.n	8005f0e <HAL_I2C_ER_IRQHandler+0xf4>
 8005f08:	7efb      	ldrb	r3, [r7, #27]
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d107      	bne.n	8005f1e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	0adb      	lsrs	r3, r3, #11
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <HAL_I2C_ER_IRQHandler+0x12e>
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d008      	beq.n	8005f48 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005f46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 f8a0 	bl	80070a0 <I2C_ITError>
  }
}
 8005f60:	bf00      	nop
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800604e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d150      	bne.n	8006100 <I2C_MasterTransmit_TXE+0xc8>
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b21      	cmp	r3, #33	; 0x21
 8006062:	d14d      	bne.n	8006100 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b08      	cmp	r3, #8
 8006068:	d01d      	beq.n	80060a6 <I2C_MasterTransmit_TXE+0x6e>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b20      	cmp	r3, #32
 800606e:	d01a      	beq.n	80060a6 <I2C_MasterTransmit_TXE+0x6e>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006076:	d016      	beq.n	80060a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006086:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2211      	movs	r2, #17
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff62 	bl	8005f68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060a4:	e060      	b.n	8006168 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d107      	bne.n	80060f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff7d 	bl	8005fe8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060ee:	e03b      	b.n	8006168 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff ff35 	bl	8005f68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060fe:	e033      	b.n	8006168 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b21      	cmp	r3, #33	; 0x21
 8006104:	d005      	beq.n	8006112 <I2C_MasterTransmit_TXE+0xda>
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	d12d      	bne.n	8006168 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2b22      	cmp	r3, #34	; 0x22
 8006110:	d12a      	bne.n	8006168 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800612c:	e01c      	b.n	8006168 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d103      	bne.n	8006142 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f88e 	bl	800625c <I2C_MemoryTransmit_TXE_BTF>
}
 8006140:	e012      	b.n	8006168 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006166:	e7ff      	b.n	8006168 <I2C_MasterTransmit_TXE+0x130>
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b21      	cmp	r3, #33	; 0x21
 8006188:	d164      	bne.n	8006254 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80061b8:	e04c      	b.n	8006254 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d01d      	beq.n	80061fc <I2C_MasterTransmit_BTF+0x8c>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d01a      	beq.n	80061fc <I2C_MasterTransmit_BTF+0x8c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061cc:	d016      	beq.n	80061fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2211      	movs	r2, #17
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff feb7 	bl	8005f68 <HAL_I2C_MasterTxCpltCallback>
}
 80061fa:	e02b      	b.n	8006254 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800620a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d107      	bne.n	8006246 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fed2 	bl	8005fe8 <HAL_I2C_MemTxCpltCallback>
}
 8006244:	e006      	b.n	8006254 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff fe8a 	bl	8005f68 <HAL_I2C_MasterTxCpltCallback>
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006270:	2b00      	cmp	r3, #0
 8006272:	d11d      	bne.n	80062b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10b      	bne.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006280:	b2da      	uxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	1c9a      	adds	r2, r3, #2
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006292:	e073      	b.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006298:	b29b      	uxth	r3, r3
 800629a:	121b      	asrs	r3, r3, #8
 800629c:	b2da      	uxtb	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062ae:	e065      	b.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10b      	bne.n	80062d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062ce:	e055      	b.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d151      	bne.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b22      	cmp	r3, #34	; 0x22
 80062dc:	d10d      	bne.n	80062fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062f8:	e040      	b.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d015      	beq.n	8006330 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b21      	cmp	r3, #33	; 0x21
 8006308:	d112      	bne.n	8006330 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800632e:	e025      	b.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d120      	bne.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b21      	cmp	r3, #33	; 0x21
 800633e:	d11d      	bne.n	800637c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800634e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fe36 	bl	8005fe8 <HAL_I2C_MemTxCpltCallback>
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b22      	cmp	r3, #34	; 0x22
 8006396:	f040 80ac 	bne.w	80064f2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d921      	bls.n	80063ec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	f040 808c 	bne.w	80064f2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80063ea:	e082      	b.n	80064f2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d075      	beq.n	80064e0 <I2C_MasterReceive_RXNE+0x15c>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d002      	beq.n	8006400 <I2C_MasterReceive_RXNE+0x7c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d16f      	bne.n	80064e0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f827 	bl	8007454 <I2C_WaitOnSTOPRequestThroughIT>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d142      	bne.n	8006492 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800641a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800642a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	d10a      	bne.n	800647c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fdc1 	bl	8005ffc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800647a:	e03a      	b.n	80064f2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2212      	movs	r2, #18
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fd76 	bl	8005f7c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006490:	e02f      	b.n	80064f2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fd99 	bl	8006010 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064de:	e008      	b.n	80064f2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ee:	605a      	str	r2, [r3, #4]
}
 80064f0:	e7ff      	b.n	80064f2 <I2C_MasterReceive_RXNE+0x16e>
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b04      	cmp	r3, #4
 8006510:	d11b      	bne.n	800654a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006520:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006548:	e0bd      	b.n	80066c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b03      	cmp	r3, #3
 8006552:	d129      	bne.n	80065a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006562:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b04      	cmp	r3, #4
 8006568:	d00a      	beq.n	8006580 <I2C_MasterReceive_BTF+0x86>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d007      	beq.n	8006580 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065a6:	e08e      	b.n	80066c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d176      	bne.n	80066a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d002      	beq.n	80065be <I2C_MasterReceive_BTF+0xc4>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d108      	bne.n	80065d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e019      	b.n	8006604 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d002      	beq.n	80065dc <I2C_MasterReceive_BTF+0xe2>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d108      	bne.n	80065ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e00a      	b.n	8006604 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d007      	beq.n	8006604 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006602:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006646:	b29b      	uxth	r3, r3
 8006648:	3b01      	subs	r3, #1
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800665e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d10a      	bne.n	800668a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fcba 	bl	8005ffc <HAL_I2C_MemRxCpltCallback>
}
 8006688:	e01d      	b.n	80066c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2212      	movs	r2, #18
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fc6f 	bl	8005f7c <HAL_I2C_MasterRxCpltCallback>
}
 800669e:	e012      	b.n	80066c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d117      	bne.n	8006712 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80066fc:	e067      	b.n	80067ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]
}
 8006710:	e05d      	b.n	80067ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800671a:	d133      	bne.n	8006784 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b21      	cmp	r3, #33	; 0x21
 8006726:	d109      	bne.n	800673c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006738:	611a      	str	r2, [r3, #16]
 800673a:	e008      	b.n	800674e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <I2C_Master_SB+0x92>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d108      	bne.n	8006772 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d032      	beq.n	80067ce <I2C_Master_SB+0x100>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d02d      	beq.n	80067ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006780:	605a      	str	r2, [r3, #4]
}
 8006782:	e024      	b.n	80067ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10e      	bne.n	80067aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	b29b      	uxth	r3, r3
 8006792:	11db      	asrs	r3, r3, #7
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0306 	and.w	r3, r3, #6
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f063 030f 	orn	r3, r3, #15
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]
}
 80067a8:	e011      	b.n	80067ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10d      	bne.n	80067ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	11db      	asrs	r3, r3, #7
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0306 	and.w	r3, r3, #6
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	f063 030e 	orn	r3, r3, #14
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	611a      	str	r2, [r3, #16]
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <I2C_Master_ADD10+0x26>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d108      	bne.n	8006812 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00c      	beq.n	8006822 <I2C_Master_ADD10+0x48>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006820:	605a      	str	r2, [r3, #4]
  }
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800682e:	b480      	push	{r7}
 8006830:	b091      	sub	sp, #68	; 0x44
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b22      	cmp	r3, #34	; 0x22
 8006856:	f040 8169 	bne.w	8006b2c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10f      	bne.n	8006882 <I2C_Master_ADDR+0x54>
 8006862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d10b      	bne.n	8006882 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686a:	2300      	movs	r3, #0
 800686c:	633b      	str	r3, [r7, #48]	; 0x30
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	633b      	str	r3, [r7, #48]	; 0x30
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	633b      	str	r3, [r7, #48]	; 0x30
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	e160      	b.n	8006b44 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11d      	bne.n	80068c6 <I2C_Master_ADDR+0x98>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006892:	d118      	bne.n	80068c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006894:	2300      	movs	r3, #0
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	651a      	str	r2, [r3, #80]	; 0x50
 80068c4:	e13e      	b.n	8006b44 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d113      	bne.n	80068f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d0:	2300      	movs	r3, #0
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e115      	b.n	8006b24 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	f040 808a 	bne.w	8006a18 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800690a:	d137      	bne.n	800697c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800691a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692a:	d113      	bne.n	8006954 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693c:	2300      	movs	r3, #0
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	e0e7      	b.n	8006b24 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006954:	2300      	movs	r3, #0
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	623b      	str	r3, [r7, #32]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e0d3      	b.n	8006b24 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b08      	cmp	r3, #8
 8006980:	d02e      	beq.n	80069e0 <I2C_Master_ADDR+0x1b2>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b20      	cmp	r3, #32
 8006986:	d02b      	beq.n	80069e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698a:	2b12      	cmp	r3, #18
 800698c:	d102      	bne.n	8006994 <I2C_Master_ADDR+0x166>
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	2b01      	cmp	r3, #1
 8006992:	d125      	bne.n	80069e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2b04      	cmp	r3, #4
 8006998:	d00e      	beq.n	80069b8 <I2C_Master_ADDR+0x18a>
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b02      	cmp	r3, #2
 800699e:	d00b      	beq.n	80069b8 <I2C_Master_ADDR+0x18a>
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	2b10      	cmp	r3, #16
 80069a4:	d008      	beq.n	80069b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e007      	b.n	80069c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	e0a1      	b.n	8006b24 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f0:	2300      	movs	r3, #0
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e085      	b.n	8006b24 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d14d      	bne.n	8006abe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d016      	beq.n	8006a56 <I2C_Master_ADDR+0x228>
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d013      	beq.n	8006a56 <I2C_Master_ADDR+0x228>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d010      	beq.n	8006a56 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a42:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e007      	b.n	8006a66 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a64:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a74:	d117      	bne.n	8006aa6 <I2C_Master_ADDR+0x278>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a7c:	d00b      	beq.n	8006a96 <I2C_Master_ADDR+0x268>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d008      	beq.n	8006a96 <I2C_Master_ADDR+0x268>
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d005      	beq.n	8006a96 <I2C_Master_ADDR+0x268>
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d002      	beq.n	8006a96 <I2C_Master_ADDR+0x268>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d107      	bne.n	8006aa6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	e032      	b.n	8006b24 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006acc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006adc:	d117      	bne.n	8006b0e <I2C_Master_ADDR+0x2e0>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ae4:	d00b      	beq.n	8006afe <I2C_Master_ADDR+0x2d0>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d008      	beq.n	8006afe <I2C_Master_ADDR+0x2d0>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d005      	beq.n	8006afe <I2C_Master_ADDR+0x2d0>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d002      	beq.n	8006afe <I2C_Master_ADDR+0x2d0>
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d107      	bne.n	8006b0e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006b2a:	e00b      	b.n	8006b44 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	e7ff      	b.n	8006b44 <I2C_Master_ADDR+0x316>
 8006b44:	bf00      	nop
 8006b46:	3744      	adds	r7, #68	; 0x44
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d02b      	beq.n	8006bc2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d114      	bne.n	8006bc2 <I2C_SlaveTransmit_TXE+0x72>
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b29      	cmp	r3, #41	; 0x29
 8006b9c:	d111      	bne.n	8006bc2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2221      	movs	r2, #33	; 0x21
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2228      	movs	r2, #40	; 0x28
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff f9e7 	bl	8005f90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d011      	beq.n	8006c00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d02c      	beq.n	8006c80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d114      	bne.n	8006c80 <I2C_SlaveReceive_RXNE+0x74>
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b2a      	cmp	r3, #42	; 0x2a
 8006c5a:	d111      	bne.n	8006c80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2222      	movs	r2, #34	; 0x22
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2228      	movs	r2, #40	; 0x28
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff f992 	bl	8005fa4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ce6:	2b28      	cmp	r3, #40	; 0x28
 8006ce8:	d127      	bne.n	8006d3a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	089b      	lsrs	r3, r3, #2
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006d06:	2301      	movs	r3, #1
 8006d08:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	09db      	lsrs	r3, r3, #7
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	81bb      	strh	r3, [r7, #12]
 8006d1c:	e002      	b.n	8006d24 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006d2c:	89ba      	ldrh	r2, [r7, #12]
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff f940 	bl	8005fb8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d38:	e00e      	b.n	8006d58 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006d80:	2300      	movs	r3, #0
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbc:	d172      	bne.n	8006ea4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b22      	cmp	r3, #34	; 0x22
 8006dc2:	d002      	beq.n	8006dca <I2C_Slave_STOPF+0x6a>
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc8:	d135      	bne.n	8006e36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f043 0204 	orr.w	r2, r3, #4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fac6 	bl	8005394 <HAL_DMA_GetState>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d049      	beq.n	8006ea2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	4a69      	ldr	r2, [pc, #420]	; (8006fb8 <I2C_Slave_STOPF+0x258>)
 8006e14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe f90e 	bl	800503c <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d03d      	beq.n	8006ea2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e34:	e035      	b.n	8006ea2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f043 0204 	orr.w	r2, r3, #4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fa90 	bl	8005394 <HAL_DMA_GetState>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d014      	beq.n	8006ea4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7e:	4a4e      	ldr	r2, [pc, #312]	; (8006fb8 <I2C_Slave_STOPF+0x258>)
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe f8d8 	bl	800503c <HAL_DMA_Abort_IT>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	e000      	b.n	8006ea4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ea2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d03e      	beq.n	8006f2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d112      	bne.n	8006ee2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d112      	bne.n	8006f16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	f043 0204 	orr.w	r2, r3, #4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f8b3 	bl	80070a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006f3a:	e039      	b.n	8006fb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f40:	d109      	bne.n	8006f56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2228      	movs	r2, #40	; 0x28
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff f827 	bl	8005fa4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b28      	cmp	r3, #40	; 0x28
 8006f60:	d111      	bne.n	8006f86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a15      	ldr	r2, [pc, #84]	; (8006fbc <I2C_Slave_STOPF+0x25c>)
 8006f66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff f828 	bl	8005fd4 <HAL_I2C_ListenCpltCallback>
}
 8006f84:	e014      	b.n	8006fb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8a:	2b22      	cmp	r3, #34	; 0x22
 8006f8c:	d002      	beq.n	8006f94 <I2C_Slave_STOPF+0x234>
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b22      	cmp	r3, #34	; 0x22
 8006f92:	d10d      	bne.n	8006fb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe fffa 	bl	8005fa4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	08007305 	.word	0x08007305
 8006fbc:	ffff0000 	.word	0xffff0000

08006fc0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d002      	beq.n	8006fe2 <I2C_Slave_AF+0x22>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d129      	bne.n	8007036 <I2C_Slave_AF+0x76>
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b28      	cmp	r3, #40	; 0x28
 8006fe6:	d126      	bne.n	8007036 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a2c      	ldr	r2, [pc, #176]	; (800709c <I2C_Slave_AF+0xdc>)
 8006fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ffc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007006:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007016:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fe ffd0 	bl	8005fd4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007034:	e02e      	b.n	8007094 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b21      	cmp	r3, #33	; 0x21
 800703a:	d126      	bne.n	800708a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a17      	ldr	r2, [pc, #92]	; (800709c <I2C_Slave_AF+0xdc>)
 8007040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2221      	movs	r2, #33	; 0x21
 8007046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007066:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007070:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007080:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fe ff84 	bl	8005f90 <HAL_I2C_SlaveTxCpltCallback>
}
 8007088:	e004      	b.n	8007094 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007092:	615a      	str	r2, [r3, #20]
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	ffff0000 	.word	0xffff0000

080070a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d002      	beq.n	80070c4 <I2C_ITError+0x24>
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d10a      	bne.n	80070da <I2C_ITError+0x3a>
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b22      	cmp	r3, #34	; 0x22
 80070c8:	d107      	bne.n	80070da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070e0:	2b28      	cmp	r3, #40	; 0x28
 80070e2:	d107      	bne.n	80070f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2228      	movs	r2, #40	; 0x28
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070f2:	e015      	b.n	8007120 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007102:	d00a      	beq.n	800711a <I2C_ITError+0x7a>
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b60      	cmp	r3, #96	; 0x60
 8007108:	d007      	beq.n	800711a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800712a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712e:	d162      	bne.n	80071f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800713e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d020      	beq.n	8007190 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	4a6a      	ldr	r2, [pc, #424]	; (80072fc <I2C_ITError+0x25c>)
 8007154:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	4618      	mov	r0, r3
 800715c:	f7fd ff6e 	bl	800503c <HAL_DMA_Abort_IT>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8089 	beq.w	800727a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800718a:	4610      	mov	r0, r2
 800718c:	4798      	blx	r3
 800718e:	e074      	b.n	800727a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	4a59      	ldr	r2, [pc, #356]	; (80072fc <I2C_ITError+0x25c>)
 8007196:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	4618      	mov	r0, r3
 800719e:	f7fd ff4d 	bl	800503c <HAL_DMA_Abort_IT>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d068      	beq.n	800727a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d10b      	bne.n	80071ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	e041      	b.n	800727a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b60      	cmp	r3, #96	; 0x60
 8007200:	d125      	bne.n	800724e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d10b      	bne.n	8007236 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fe feec 	bl	8006024 <HAL_I2C_AbortCpltCallback>
 800724c:	e015      	b.n	800727a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d10b      	bne.n	8007274 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fe fecb 	bl	8006010 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d113      	bne.n	80072f4 <I2C_ITError+0x254>
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	2b28      	cmp	r3, #40	; 0x28
 80072d0:	d110      	bne.n	80072f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <I2C_ITError+0x260>)
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fe fe70 	bl	8005fd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	08007305 	.word	0x08007305
 8007300:	ffff0000 	.word	0xffff0000

08007304 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800731e:	4b4b      	ldr	r3, [pc, #300]	; (800744c <I2C_DMAAbort+0x148>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	4a4a      	ldr	r2, [pc, #296]	; (8007450 <I2C_DMAAbort+0x14c>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0a1a      	lsrs	r2, r3, #8
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	00da      	lsls	r2, r3, #3
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f043 0220 	orr.w	r2, r3, #32
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800734a:	e00a      	b.n	8007362 <I2C_DMAAbort+0x5e>
    }
    count--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3b01      	subs	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007360:	d0ea      	beq.n	8007338 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736e:	2200      	movs	r2, #0
 8007370:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	2200      	movs	r2, #0
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007390:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a4:	2200      	movs	r2, #0
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	2200      	movs	r2, #0
 80073b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b60      	cmp	r3, #96	; 0x60
 80073d2:	d10e      	bne.n	80073f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2200      	movs	r2, #0
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80073ea:	6978      	ldr	r0, [r7, #20]
 80073ec:	f7fe fe1a 	bl	8006024 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073f0:	e027      	b.n	8007442 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073f2:	7cfb      	ldrb	r3, [r7, #19]
 80073f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073f8:	2b28      	cmp	r3, #40	; 0x28
 80073fa:	d117      	bne.n	800742c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800741a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2228      	movs	r2, #40	; 0x28
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800742a:	e007      	b.n	800743c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800743c:	6978      	ldr	r0, [r7, #20]
 800743e:	f7fe fde7 	bl	8006010 <HAL_I2C_ErrorCallback>
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	200000b0 	.word	0x200000b0
 8007450:	14f8b589 	.word	0x14f8b589

08007454 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007460:	4b13      	ldr	r3, [pc, #76]	; (80074b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	08db      	lsrs	r3, r3, #3
 8007466:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007468:	fba2 2303 	umull	r2, r3, r2, r3
 800746c:	0a1a      	lsrs	r2, r3, #8
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3b01      	subs	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d107      	bne.n	8007492 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f043 0220 	orr.w	r2, r3, #32
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e008      	b.n	80074a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800749c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a0:	d0e9      	beq.n	8007476 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	200000b0 	.word	0x200000b0
 80074b4:	14f8b589 	.word	0x14f8b589

080074b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80074c8:	d103      	bne.n	80074d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80074d0:	e007      	b.n	80074e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80074da:	d102      	bne.n	80074e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2208      	movs	r2, #8
 80074e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e267      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d075      	beq.n	80075fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800750e:	4b88      	ldr	r3, [pc, #544]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 030c 	and.w	r3, r3, #12
 8007516:	2b04      	cmp	r3, #4
 8007518:	d00c      	beq.n	8007534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800751a:	4b85      	ldr	r3, [pc, #532]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007522:	2b08      	cmp	r3, #8
 8007524:	d112      	bne.n	800754c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007526:	4b82      	ldr	r3, [pc, #520]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007532:	d10b      	bne.n	800754c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007534:	4b7e      	ldr	r3, [pc, #504]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d05b      	beq.n	80075f8 <HAL_RCC_OscConfig+0x108>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d157      	bne.n	80075f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e242      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d106      	bne.n	8007564 <HAL_RCC_OscConfig+0x74>
 8007556:	4b76      	ldr	r3, [pc, #472]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a75      	ldr	r2, [pc, #468]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800755c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	e01d      	b.n	80075a0 <HAL_RCC_OscConfig+0xb0>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800756c:	d10c      	bne.n	8007588 <HAL_RCC_OscConfig+0x98>
 800756e:	4b70      	ldr	r3, [pc, #448]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a6f      	ldr	r2, [pc, #444]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	4b6d      	ldr	r3, [pc, #436]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a6c      	ldr	r2, [pc, #432]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	e00b      	b.n	80075a0 <HAL_RCC_OscConfig+0xb0>
 8007588:	4b69      	ldr	r3, [pc, #420]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a68      	ldr	r2, [pc, #416]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800758e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	4b66      	ldr	r3, [pc, #408]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a65      	ldr	r2, [pc, #404]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800759a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d013      	beq.n	80075d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a8:	f7fd fb58 	bl	8004c5c <HAL_GetTick>
 80075ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075b0:	f7fd fb54 	bl	8004c5c <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b64      	cmp	r3, #100	; 0x64
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e207      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075c2:	4b5b      	ldr	r3, [pc, #364]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0f0      	beq.n	80075b0 <HAL_RCC_OscConfig+0xc0>
 80075ce:	e014      	b.n	80075fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d0:	f7fd fb44 	bl	8004c5c <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075d8:	f7fd fb40 	bl	8004c5c <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b64      	cmp	r3, #100	; 0x64
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e1f3      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ea:	4b51      	ldr	r3, [pc, #324]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1f0      	bne.n	80075d8 <HAL_RCC_OscConfig+0xe8>
 80075f6:	e000      	b.n	80075fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d063      	beq.n	80076ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007606:	4b4a      	ldr	r3, [pc, #296]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 030c 	and.w	r3, r3, #12
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00b      	beq.n	800762a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007612:	4b47      	ldr	r3, [pc, #284]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800761a:	2b08      	cmp	r3, #8
 800761c:	d11c      	bne.n	8007658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800761e:	4b44      	ldr	r3, [pc, #272]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d116      	bne.n	8007658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800762a:	4b41      	ldr	r3, [pc, #260]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_RCC_OscConfig+0x152>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d001      	beq.n	8007642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e1c7      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007642:	4b3b      	ldr	r3, [pc, #236]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4937      	ldr	r1, [pc, #220]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007652:	4313      	orrs	r3, r2
 8007654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007656:	e03a      	b.n	80076ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d020      	beq.n	80076a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007660:	4b34      	ldr	r3, [pc, #208]	; (8007734 <HAL_RCC_OscConfig+0x244>)
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007666:	f7fd faf9 	bl	8004c5c <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800766e:	f7fd faf5 	bl	8004c5c <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e1a8      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007680:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f0      	beq.n	800766e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800768c:	4b28      	ldr	r3, [pc, #160]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4925      	ldr	r1, [pc, #148]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 800769c:	4313      	orrs	r3, r2
 800769e:	600b      	str	r3, [r1, #0]
 80076a0:	e015      	b.n	80076ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <HAL_RCC_OscConfig+0x244>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a8:	f7fd fad8 	bl	8004c5c <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076b0:	f7fd fad4 	bl	8004c5c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e187      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076c2:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f0      	bne.n	80076b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d036      	beq.n	8007748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d016      	beq.n	8007710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <HAL_RCC_OscConfig+0x248>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e8:	f7fd fab8 	bl	8004c5c <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076f0:	f7fd fab4 	bl	8004c5c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e167      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <HAL_RCC_OscConfig+0x240>)
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0x200>
 800770e:	e01b      	b.n	8007748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007710:	4b09      	ldr	r3, [pc, #36]	; (8007738 <HAL_RCC_OscConfig+0x248>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007716:	f7fd faa1 	bl	8004c5c <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800771c:	e00e      	b.n	800773c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800771e:	f7fd fa9d 	bl	8004c5c <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d907      	bls.n	800773c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e150      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
 8007730:	40023800 	.word	0x40023800
 8007734:	42470000 	.word	0x42470000
 8007738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800773c:	4b88      	ldr	r3, [pc, #544]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800773e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1ea      	bne.n	800771e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 8097 	beq.w	8007884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800775a:	4b81      	ldr	r3, [pc, #516]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10f      	bne.n	8007786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007766:	2300      	movs	r3, #0
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	4b7d      	ldr	r3, [pc, #500]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	4a7c      	ldr	r2, [pc, #496]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 8007770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007774:	6413      	str	r3, [r2, #64]	; 0x40
 8007776:	4b7a      	ldr	r3, [pc, #488]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777e:	60bb      	str	r3, [r7, #8]
 8007780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007782:	2301      	movs	r3, #1
 8007784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007786:	4b77      	ldr	r3, [pc, #476]	; (8007964 <HAL_RCC_OscConfig+0x474>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778e:	2b00      	cmp	r3, #0
 8007790:	d118      	bne.n	80077c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007792:	4b74      	ldr	r3, [pc, #464]	; (8007964 <HAL_RCC_OscConfig+0x474>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a73      	ldr	r2, [pc, #460]	; (8007964 <HAL_RCC_OscConfig+0x474>)
 8007798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800779e:	f7fd fa5d 	bl	8004c5c <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a6:	f7fd fa59 	bl	8004c5c <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e10c      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b8:	4b6a      	ldr	r3, [pc, #424]	; (8007964 <HAL_RCC_OscConfig+0x474>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d106      	bne.n	80077da <HAL_RCC_OscConfig+0x2ea>
 80077cc:	4b64      	ldr	r3, [pc, #400]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d0:	4a63      	ldr	r2, [pc, #396]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	6713      	str	r3, [r2, #112]	; 0x70
 80077d8:	e01c      	b.n	8007814 <HAL_RCC_OscConfig+0x324>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x30c>
 80077e2:	4b5f      	ldr	r3, [pc, #380]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e6:	4a5e      	ldr	r2, [pc, #376]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077e8:	f043 0304 	orr.w	r3, r3, #4
 80077ec:	6713      	str	r3, [r2, #112]	; 0x70
 80077ee:	4b5c      	ldr	r3, [pc, #368]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	4a5b      	ldr	r2, [pc, #364]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	6713      	str	r3, [r2, #112]	; 0x70
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0x324>
 80077fc:	4b58      	ldr	r3, [pc, #352]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	4a57      	ldr	r2, [pc, #348]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	6713      	str	r3, [r2, #112]	; 0x70
 8007808:	4b55      	ldr	r3, [pc, #340]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	4a54      	ldr	r2, [pc, #336]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800780e:	f023 0304 	bic.w	r3, r3, #4
 8007812:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d015      	beq.n	8007848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781c:	f7fd fa1e 	bl	8004c5c <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007822:	e00a      	b.n	800783a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007824:	f7fd fa1a 	bl	8004c5c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e0cb      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800783a:	4b49      	ldr	r3, [pc, #292]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0ee      	beq.n	8007824 <HAL_RCC_OscConfig+0x334>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007848:	f7fd fa08 	bl	8004c5c <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800784e:	e00a      	b.n	8007866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007850:	f7fd fa04 	bl	8004c5c <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e0b5      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007866:	4b3e      	ldr	r3, [pc, #248]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1ee      	bne.n	8007850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d105      	bne.n	8007884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007878:	4b39      	ldr	r3, [pc, #228]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	4a38      	ldr	r2, [pc, #224]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800787e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007882:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80a1 	beq.w	80079d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800788e:	4b34      	ldr	r3, [pc, #208]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 030c 	and.w	r3, r3, #12
 8007896:	2b08      	cmp	r3, #8
 8007898:	d05c      	beq.n	8007954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d141      	bne.n	8007926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a2:	4b31      	ldr	r3, [pc, #196]	; (8007968 <HAL_RCC_OscConfig+0x478>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a8:	f7fd f9d8 	bl	8004c5c <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fd f9d4 	bl	8004c5c <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e087      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	4b27      	ldr	r3, [pc, #156]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69da      	ldr	r2, [r3, #28]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	019b      	lsls	r3, r3, #6
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	3b01      	subs	r3, #1
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	061b      	lsls	r3, r3, #24
 80078f2:	491b      	ldr	r1, [pc, #108]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078f8:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <HAL_RCC_OscConfig+0x478>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078fe:	f7fd f9ad 	bl	8004c5c <HAL_GetTick>
 8007902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007906:	f7fd f9a9 	bl	8004c5c <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e05c      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007918:	4b11      	ldr	r3, [pc, #68]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0f0      	beq.n	8007906 <HAL_RCC_OscConfig+0x416>
 8007924:	e054      	b.n	80079d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <HAL_RCC_OscConfig+0x478>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792c:	f7fd f996 	bl	8004c5c <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007934:	f7fd f992 	bl	8004c5c <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e045      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <HAL_RCC_OscConfig+0x470>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0x444>
 8007952:	e03d      	b.n	80079d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d107      	bne.n	800796c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e038      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
 8007960:	40023800 	.word	0x40023800
 8007964:	40007000 	.word	0x40007000
 8007968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800796c:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <HAL_RCC_OscConfig+0x4ec>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d028      	beq.n	80079cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007984:	429a      	cmp	r2, r3
 8007986:	d121      	bne.n	80079cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d11a      	bne.n	80079cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800799c:	4013      	ands	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d111      	bne.n	80079cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	3b01      	subs	r3, #1
 80079b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d107      	bne.n	80079cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d001      	beq.n	80079d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40023800 	.word	0x40023800

080079e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e0cc      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079f4:	4b68      	ldr	r3, [pc, #416]	; (8007b98 <HAL_RCC_ClockConfig+0x1b8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d90c      	bls.n	8007a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a02:	4b65      	ldr	r3, [pc, #404]	; (8007b98 <HAL_RCC_ClockConfig+0x1b8>)
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0a:	4b63      	ldr	r3, [pc, #396]	; (8007b98 <HAL_RCC_ClockConfig+0x1b8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d001      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0b8      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d020      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a34:	4b59      	ldr	r3, [pc, #356]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4a58      	ldr	r2, [pc, #352]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a4c:	4b53      	ldr	r3, [pc, #332]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	4a52      	ldr	r2, [pc, #328]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a58:	4b50      	ldr	r3, [pc, #320]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	494d      	ldr	r1, [pc, #308]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d044      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a7e:	4b47      	ldr	r3, [pc, #284]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d119      	bne.n	8007abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e07f      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d003      	beq.n	8007a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d107      	bne.n	8007aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a9e:	4b3f      	ldr	r3, [pc, #252]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e06f      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aae:	4b3b      	ldr	r3, [pc, #236]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e067      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007abe:	4b37      	ldr	r3, [pc, #220]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f023 0203 	bic.w	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4934      	ldr	r1, [pc, #208]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ad0:	f7fd f8c4 	bl	8004c5c <HAL_GetTick>
 8007ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad6:	e00a      	b.n	8007aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad8:	f7fd f8c0 	bl	8004c5c <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e04f      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aee:	4b2b      	ldr	r3, [pc, #172]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 020c 	and.w	r2, r3, #12
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d1eb      	bne.n	8007ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b00:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d20c      	bcs.n	8007b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b0e:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b16:	4b20      	ldr	r3, [pc, #128]	; (8007b98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d001      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e032      	b.n	8007b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b34:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	4916      	ldr	r1, [pc, #88]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b52:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	490e      	ldr	r1, [pc, #56]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b66:	f000 f821 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	091b      	lsrs	r3, r3, #4
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	490a      	ldr	r1, [pc, #40]	; (8007ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8007b78:	5ccb      	ldrb	r3, [r1, r3]
 8007b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fd f824 	bl	8004bd4 <HAL_InitTick>

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40023c00 	.word	0x40023c00
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	0800cd74 	.word	0x0800cd74
 8007ba4:	200000b0 	.word	0x200000b0
 8007ba8:	200000b4 	.word	0x200000b4

08007bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb0:	b094      	sub	sp, #80	; 0x50
 8007bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb8:	2300      	movs	r3, #0
 8007bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bc4:	4b79      	ldr	r3, [pc, #484]	; (8007dac <HAL_RCC_GetSysClockFreq+0x200>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 030c 	and.w	r3, r3, #12
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d00d      	beq.n	8007bec <HAL_RCC_GetSysClockFreq+0x40>
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	f200 80e1 	bhi.w	8007d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_RCC_GetSysClockFreq+0x34>
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d003      	beq.n	8007be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bde:	e0db      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007be0:	4b73      	ldr	r3, [pc, #460]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007be2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007be4:	e0db      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007be6:	4b73      	ldr	r3, [pc, #460]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bea:	e0d8      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bec:	4b6f      	ldr	r3, [pc, #444]	; (8007dac <HAL_RCC_GetSysClockFreq+0x200>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bf6:	4b6d      	ldr	r3, [pc, #436]	; (8007dac <HAL_RCC_GetSysClockFreq+0x200>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d063      	beq.n	8007cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c02:	4b6a      	ldr	r3, [pc, #424]	; (8007dac <HAL_RCC_GetSysClockFreq+0x200>)
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	2200      	movs	r2, #0
 8007c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c14:	633b      	str	r3, [r7, #48]	; 0x30
 8007c16:	2300      	movs	r3, #0
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007c1e:	4622      	mov	r2, r4
 8007c20:	462b      	mov	r3, r5
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f04f 0100 	mov.w	r1, #0
 8007c2a:	0159      	lsls	r1, r3, #5
 8007c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c30:	0150      	lsls	r0, r2, #5
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4621      	mov	r1, r4
 8007c38:	1a51      	subs	r1, r2, r1
 8007c3a:	6139      	str	r1, [r7, #16]
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c50:	4659      	mov	r1, fp
 8007c52:	018b      	lsls	r3, r1, #6
 8007c54:	4651      	mov	r1, sl
 8007c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	018a      	lsls	r2, r1, #6
 8007c5e:	4651      	mov	r1, sl
 8007c60:	ebb2 0801 	subs.w	r8, r2, r1
 8007c64:	4659      	mov	r1, fp
 8007c66:	eb63 0901 	sbc.w	r9, r3, r1
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c7e:	4690      	mov	r8, r2
 8007c80:	4699      	mov	r9, r3
 8007c82:	4623      	mov	r3, r4
 8007c84:	eb18 0303 	adds.w	r3, r8, r3
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	eb49 0303 	adc.w	r3, r9, r3
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	024b      	lsls	r3, r1, #9
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ca8:	4621      	mov	r1, r4
 8007caa:	024a      	lsls	r2, r1, #9
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cbc:	f7f8 fa8c 	bl	80001d8 <__aeabi_uldivmod>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc8:	e058      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cca:	4b38      	ldr	r3, [pc, #224]	; (8007dac <HAL_RCC_GetSysClockFreq+0x200>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	099b      	lsrs	r3, r3, #6
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007cda:	623b      	str	r3, [r7, #32]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	f04f 0000 	mov.w	r0, #0
 8007cec:	f04f 0100 	mov.w	r1, #0
 8007cf0:	0159      	lsls	r1, r3, #5
 8007cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cf6:	0150      	lsls	r0, r2, #5
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d02:	4649      	mov	r1, r9
 8007d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	f04f 0300 	mov.w	r3, #0
 8007d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8007d20:	eb63 050b 	sbc.w	r5, r3, fp
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	f04f 0300 	mov.w	r3, #0
 8007d2c:	00eb      	lsls	r3, r5, #3
 8007d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d32:	00e2      	lsls	r2, r4, #3
 8007d34:	4614      	mov	r4, r2
 8007d36:	461d      	mov	r5, r3
 8007d38:	4643      	mov	r3, r8
 8007d3a:	18e3      	adds	r3, r4, r3
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	464b      	mov	r3, r9
 8007d40:	eb45 0303 	adc.w	r3, r5, r3
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d52:	4629      	mov	r1, r5
 8007d54:	028b      	lsls	r3, r1, #10
 8007d56:	4621      	mov	r1, r4
 8007d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	028a      	lsls	r2, r1, #10
 8007d60:	4610      	mov	r0, r2
 8007d62:	4619      	mov	r1, r3
 8007d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d66:	2200      	movs	r2, #0
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	61fa      	str	r2, [r7, #28]
 8007d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d70:	f7f8 fa32 	bl	80001d8 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4613      	mov	r3, r2
 8007d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_RCC_GetSysClockFreq+0x200>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3750      	adds	r7, #80	; 0x50
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007daa:	bf00      	nop
 8007dac:	40023800 	.word	0x40023800
 8007db0:	00f42400 	.word	0x00f42400
 8007db4:	007a1200 	.word	0x007a1200

08007db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	200000b0 	.word	0x200000b0

08007dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd4:	f7ff fff0 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0a9b      	lsrs	r3, r3, #10
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4903      	ldr	r1, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de6:	5ccb      	ldrb	r3, [r1, r3]
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	0800cd84 	.word	0x0800cd84

08007df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dfc:	f7ff ffdc 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007e00:	4602      	mov	r2, r0
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	0b5b      	lsrs	r3, r3, #13
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	4903      	ldr	r1, [pc, #12]	; (8007e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e0e:	5ccb      	ldrb	r3, [r1, r3]
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	0800cd84 	.word	0x0800cd84

08007e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e07b      	b.n	8007f2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d108      	bne.n	8007e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e42:	d009      	beq.n	8007e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	61da      	str	r2, [r3, #28]
 8007e4a:	e005      	b.n	8007e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7fc fac0 	bl	80043f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007edc:	ea42 0103 	orr.w	r1, r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	0c1b      	lsrs	r3, r3, #16
 8007ef6:	f003 0104 	and.w	r1, r3, #4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	f003 0210 	and.w	r2, r3, #16
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b088      	sub	sp, #32
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	603b      	str	r3, [r7, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_SPI_Transmit+0x22>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e126      	b.n	80081a2 <HAL_SPI_Transmit+0x270>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f5c:	f7fc fe7e 	bl	8004c5c <HAL_GetTick>
 8007f60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d002      	beq.n	8007f78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
 8007f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f76:	e10b      	b.n	8008190 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <HAL_SPI_Transmit+0x52>
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f88:	e102      	b.n	8008190 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	88fa      	ldrh	r2, [r7, #6]
 8007fa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd0:	d10f      	bne.n	8007ff2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ff0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b40      	cmp	r3, #64	; 0x40
 8007ffe:	d007      	beq.n	8008010 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800800e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008018:	d14b      	bne.n	80080b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_SPI_Transmit+0xf6>
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d13e      	bne.n	80080a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	881a      	ldrh	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	1c9a      	adds	r2, r3, #2
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008042:	b29b      	uxth	r3, r3
 8008044:	3b01      	subs	r3, #1
 8008046:	b29a      	uxth	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800804c:	e02b      	b.n	80080a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b02      	cmp	r3, #2
 800805a:	d112      	bne.n	8008082 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008060:	881a      	ldrh	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806c:	1c9a      	adds	r2, r3, #2
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008076:	b29b      	uxth	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	b29a      	uxth	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008080:	e011      	b.n	80080a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008082:	f7fc fdeb 	bl	8004c5c <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d803      	bhi.n	800809a <HAL_SPI_Transmit+0x168>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d102      	bne.n	80080a0 <HAL_SPI_Transmit+0x16e>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080a4:	e074      	b.n	8008190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1ce      	bne.n	800804e <HAL_SPI_Transmit+0x11c>
 80080b0:	e04c      	b.n	800814c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_SPI_Transmit+0x18e>
 80080ba:	8afb      	ldrh	r3, [r7, #22]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d140      	bne.n	8008142 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080e6:	e02c      	b.n	8008142 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d113      	bne.n	800811e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	330c      	adds	r3, #12
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	86da      	strh	r2, [r3, #54]	; 0x36
 800811c:	e011      	b.n	8008142 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811e:	f7fc fd9d 	bl	8004c5c <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d803      	bhi.n	8008136 <HAL_SPI_Transmit+0x204>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d102      	bne.n	800813c <HAL_SPI_Transmit+0x20a>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d102      	bne.n	8008142 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008140:	e026      	b.n	8008190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1cd      	bne.n	80080e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fce9 	bl	8008b28 <SPI_EndRxTxTransaction>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2220      	movs	r2, #32
 8008160:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e000      	b.n	8008190 <HAL_SPI_Transmit+0x25e>
  }

error:
 800818e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b088      	sub	sp, #32
 80081ae:	af02      	add	r7, sp, #8
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c6:	d112      	bne.n	80081ee <HAL_SPI_Receive+0x44>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10e      	bne.n	80081ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2204      	movs	r2, #4
 80081d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081d8:	88fa      	ldrh	r2, [r7, #6]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4613      	mov	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f8f1 	bl	80083cc <HAL_SPI_TransmitReceive>
 80081ea:	4603      	mov	r3, r0
 80081ec:	e0ea      	b.n	80083c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_SPI_Receive+0x52>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e0e3      	b.n	80083c4 <HAL_SPI_Receive+0x21a>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008204:	f7fc fd2a 	bl	8004c5c <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b01      	cmp	r3, #1
 8008214:	d002      	beq.n	800821c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008216:	2302      	movs	r3, #2
 8008218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800821a:	e0ca      	b.n	80083b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <HAL_SPI_Receive+0x7e>
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800822c:	e0c1      	b.n	80083b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2204      	movs	r2, #4
 8008232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	88fa      	ldrh	r2, [r7, #6]
 8008246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	88fa      	ldrh	r2, [r7, #6]
 800824c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008274:	d10f      	bne.n	8008296 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008294:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d007      	beq.n	80082b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d162      	bne.n	8008382 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082bc:	e02e      	b.n	800831c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d115      	bne.n	80082f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f103 020c 	add.w	r2, r3, #12
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	7812      	ldrb	r2, [r2, #0]
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082f6:	e011      	b.n	800831c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f8:	f7fc fcb0 	bl	8004c5c <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d803      	bhi.n	8008310 <HAL_SPI_Receive+0x166>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d102      	bne.n	8008316 <HAL_SPI_Receive+0x16c>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	75fb      	strb	r3, [r7, #23]
          goto error;
 800831a:	e04a      	b.n	80083b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1cb      	bne.n	80082be <HAL_SPI_Receive+0x114>
 8008326:	e031      	b.n	800838c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	d113      	bne.n	800835e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	b292      	uxth	r2, r2
 8008342:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	1c9a      	adds	r2, r3, #2
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800835c:	e011      	b.n	8008382 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800835e:	f7fc fc7d 	bl	8004c5c <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d803      	bhi.n	8008376 <HAL_SPI_Receive+0x1cc>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d102      	bne.n	800837c <HAL_SPI_Receive+0x1d2>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008380:	e017      	b.n	80083b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1cd      	bne.n	8008328 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 fb63 	bl	8008a5c <SPI_EndRxTransaction>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
 80083ae:	e000      	b.n	80083b2 <HAL_SPI_Receive+0x208>
  }

error :
 80083b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08c      	sub	sp, #48	; 0x30
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083da:	2301      	movs	r3, #1
 80083dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_SPI_TransmitReceive+0x26>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e18a      	b.n	8008708 <HAL_SPI_TransmitReceive+0x33c>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083fa:	f7fc fc2f 	bl	8004c5c <HAL_GetTick>
 80083fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008410:	887b      	ldrh	r3, [r7, #2]
 8008412:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008418:	2b01      	cmp	r3, #1
 800841a:	d00f      	beq.n	800843c <HAL_SPI_TransmitReceive+0x70>
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008422:	d107      	bne.n	8008434 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <HAL_SPI_TransmitReceive+0x68>
 800842c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008430:	2b04      	cmp	r3, #4
 8008432:	d003      	beq.n	800843c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008434:	2302      	movs	r3, #2
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800843a:	e15b      	b.n	80086f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d005      	beq.n	800844e <HAL_SPI_TransmitReceive+0x82>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_SPI_TransmitReceive+0x82>
 8008448:	887b      	ldrh	r3, [r7, #2]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008454:	e14e      	b.n	80086f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b04      	cmp	r3, #4
 8008460:	d003      	beq.n	800846a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2205      	movs	r2, #5
 8008466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	887a      	ldrh	r2, [r7, #2]
 800847a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	887a      	ldrh	r2, [r7, #2]
 8008480:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	887a      	ldrh	r2, [r7, #2]
 800848c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	887a      	ldrh	r2, [r7, #2]
 8008492:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	d007      	beq.n	80084be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084c6:	d178      	bne.n	80085ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <HAL_SPI_TransmitReceive+0x10a>
 80084d0:	8b7b      	ldrh	r3, [r7, #26]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d166      	bne.n	80085a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	881a      	ldrh	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e6:	1c9a      	adds	r2, r3, #2
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084fa:	e053      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b02      	cmp	r3, #2
 8008508:	d11b      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x176>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850e:	b29b      	uxth	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d016      	beq.n	8008542 <HAL_SPI_TransmitReceive+0x176>
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d113      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	881a      	ldrh	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b01      	cmp	r3, #1
 800854e:	d119      	bne.n	8008584 <HAL_SPI_TransmitReceive+0x1b8>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d014      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	b292      	uxth	r2, r2
 8008566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856c:	1c9a      	adds	r2, r3, #2
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008580:	2301      	movs	r3, #1
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008584:	f7fc fb6a 	bl	8004c5c <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008590:	429a      	cmp	r2, r3
 8008592:	d807      	bhi.n	80085a4 <HAL_SPI_TransmitReceive+0x1d8>
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d003      	beq.n	80085a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085a2:	e0a7      	b.n	80086f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1a6      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x130>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1a1      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x130>
 80085b8:	e07c      	b.n	80086b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <HAL_SPI_TransmitReceive+0x1fc>
 80085c2:	8b7b      	ldrh	r3, [r7, #26]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d16b      	bne.n	80086a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ee:	e057      	b.n	80086a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d11c      	bne.n	8008638 <HAL_SPI_TransmitReceive+0x26c>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d017      	beq.n	8008638 <HAL_SPI_TransmitReceive+0x26c>
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	2b01      	cmp	r3, #1
 800860c:	d114      	bne.n	8008638 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b01      	cmp	r3, #1
 8008644:	d119      	bne.n	800867a <HAL_SPI_TransmitReceive+0x2ae>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800864a:	b29b      	uxth	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d014      	beq.n	800867a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008676:	2301      	movs	r3, #1
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800867a:	f7fc faef 	bl	8004c5c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008686:	429a      	cmp	r2, r3
 8008688:	d803      	bhi.n	8008692 <HAL_SPI_TransmitReceive+0x2c6>
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d102      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x2cc>
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800869e:	e029      	b.n	80086f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1a2      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x224>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d19d      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fa35 	bl	8008b28 <SPI_EndRxTxTransaction>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d006      	beq.n	80086d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086d0:	e010      	b.n	80086f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	e000      	b.n	80086f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80086f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008708:	4618      	mov	r0, r3
 800870a:	3730      	adds	r7, #48	; 0x30
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10f      	bne.n	8008754 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	099b      	lsrs	r3, r3, #6
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
    return;
 8008752:	e0d7      	b.n	8008904 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <HAL_SPI_IRQHandler+0x66>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	09db      	lsrs	r3, r3, #7
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d004      	beq.n	8008776 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
    return;
 8008774:	e0c6      	b.n	8008904 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10c      	bne.n	800879c <HAL_SPI_IRQHandler+0x8c>
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	099b      	lsrs	r3, r3, #6
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80b4 	beq.w	8008904 <HAL_SPI_IRQHandler+0x1f4>
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 80ad 	beq.w	8008904 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	099b      	lsrs	r3, r3, #6
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d023      	beq.n	80087fe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d011      	beq.n	80087e6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	e00b      	b.n	80087fe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087e6:	2300      	movs	r3, #0
 80087e8:	613b      	str	r3, [r7, #16]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	613b      	str	r3, [r7, #16]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	613b      	str	r3, [r7, #16]
 80087fa:	693b      	ldr	r3, [r7, #16]
        return;
 80087fc:	e082      	b.n	8008904 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d014      	beq.n	8008834 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880e:	f043 0201 	orr.w	r2, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008844:	f043 0208 	orr.w	r2, r3, #8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800884c:	2300      	movs	r3, #0
 800884e:	60bb      	str	r3, [r7, #8]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	60bb      	str	r3, [r7, #8]
 8008858:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885e:	2b00      	cmp	r3, #0
 8008860:	d04f      	beq.n	8008902 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008870:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <HAL_SPI_IRQHandler+0x17e>
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d034      	beq.n	80088f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0203 	bic.w	r2, r2, #3
 800889c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d011      	beq.n	80088ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088aa:	4a18      	ldr	r2, [pc, #96]	; (800890c <HAL_SPI_IRQHandler+0x1fc>)
 80088ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fc fbc2 	bl	800503c <HAL_DMA_Abort_IT>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088d6:	4a0d      	ldr	r2, [pc, #52]	; (800890c <HAL_SPI_IRQHandler+0x1fc>)
 80088d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fc fbac 	bl	800503c <HAL_DMA_Abort_IT>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80088f6:	e003      	b.n	8008900 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f809 	bl	8008910 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80088fe:	e000      	b.n	8008902 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008900:	bf00      	nop
    return;
 8008902:	bf00      	nop
  }
}
 8008904:	3720      	adds	r7, #32
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	08008925 	.word	0x08008925

08008910 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7ff ffe6 	bl	8008910 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	4613      	mov	r3, r2
 800895a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800895c:	f7fc f97e 	bl	8004c5c <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	4413      	add	r3, r2
 800896a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800896c:	f7fc f976 	bl	8004c5c <HAL_GetTick>
 8008970:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008972:	4b39      	ldr	r3, [pc, #228]	; (8008a58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	015b      	lsls	r3, r3, #5
 8008978:	0d1b      	lsrs	r3, r3, #20
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	fb02 f303 	mul.w	r3, r2, r3
 8008980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008982:	e054      	b.n	8008a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	d050      	beq.n	8008a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800898c:	f7fc f966 	bl	8004c5c <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	429a      	cmp	r2, r3
 800899a:	d902      	bls.n	80089a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d13d      	bne.n	8008a1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ba:	d111      	bne.n	80089e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089c4:	d004      	beq.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ce:	d107      	bne.n	80089e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089e8:	d10f      	bne.n	8008a0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e017      	b.n	8008a4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	4013      	ands	r3, r2
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2301      	moveq	r3, #1
 8008a40:	2300      	movne	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d19b      	bne.n	8008984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	200000b0 	.word	0x200000b0

08008a5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a70:	d111      	bne.n	8008a96 <SPI_EndRxTransaction+0x3a>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a7a:	d004      	beq.n	8008a86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a84:	d107      	bne.n	8008a96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a9e:	d12a      	bne.n	8008af6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa8:	d012      	beq.n	8008ad0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2180      	movs	r1, #128	; 0x80
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff ff49 	bl	800894c <SPI_WaitFlagStateUntilTimeout>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d02d      	beq.n	8008b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac4:	f043 0220 	orr.w	r2, r3, #32
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e026      	b.n	8008b1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2101      	movs	r1, #1
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff ff36 	bl	800894c <SPI_WaitFlagStateUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01a      	beq.n	8008b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aea:	f043 0220 	orr.w	r2, r3, #32
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e013      	b.n	8008b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2101      	movs	r1, #1
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff ff23 	bl	800894c <SPI_WaitFlagStateUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	f043 0220 	orr.w	r2, r3, #32
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e000      	b.n	8008b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af02      	add	r7, sp, #8
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b34:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <SPI_EndRxTxTransaction+0x7c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a1b      	ldr	r2, [pc, #108]	; (8008ba8 <SPI_EndRxTxTransaction+0x80>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	0d5b      	lsrs	r3, r3, #21
 8008b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b44:	fb02 f303 	mul.w	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b52:	d112      	bne.n	8008b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2180      	movs	r1, #128	; 0x80
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff fef4 	bl	800894c <SPI_WaitFlagStateUntilTimeout>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d016      	beq.n	8008b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f043 0220 	orr.w	r2, r3, #32
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e00f      	b.n	8008b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b90:	2b80      	cmp	r3, #128	; 0x80
 8008b92:	d0f2      	beq.n	8008b7a <SPI_EndRxTxTransaction+0x52>
 8008b94:	e000      	b.n	8008b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b96:	bf00      	nop
  }

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200000b0 	.word	0x200000b0
 8008ba8:	165e9f81 	.word	0x165e9f81

08008bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e041      	b.n	8008c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fb fe3e 	bl	8004854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f000 fae0 	bl	80091b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d001      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e04e      	b.n	8008d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f042 0201 	orr.w	r2, r2, #1
 8008c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a23      	ldr	r2, [pc, #140]	; (8008d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d022      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c8e:	d01d      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1f      	ldr	r2, [pc, #124]	; (8008d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d018      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d013      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1c      	ldr	r2, [pc, #112]	; (8008d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00e      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d009      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a19      	ldr	r2, [pc, #100]	; (8008d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x80>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d111      	bne.n	8008cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d010      	beq.n	8008d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f042 0201 	orr.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cee:	e007      	b.n	8008d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40000400 	.word	0x40000400
 8008d18:	40000800 	.word	0x40000800
 8008d1c:	40000c00 	.word	0x40000c00
 8008d20:	40010400 	.word	0x40010400
 8008d24:	40014000 	.word	0x40014000
 8008d28:	40001800 	.word	0x40001800

08008d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e041      	b.n	8008dc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fb fd5c 	bl	8004810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f000 fa20 	bl	80091b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d122      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d11b      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f06f 0202 	mvn.w	r2, #2
 8008df6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9b1 	bl	8009174 <HAL_TIM_IC_CaptureCallback>
 8008e12:	e005      	b.n	8008e20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9a3 	bl	8009160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f9b4 	bl	8009188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d122      	bne.n	8008e7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d11b      	bne.n	8008e7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f06f 0204 	mvn.w	r2, #4
 8008e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f987 	bl	8009174 <HAL_TIM_IC_CaptureCallback>
 8008e66:	e005      	b.n	8008e74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f979 	bl	8009160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f98a 	bl	8009188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d122      	bne.n	8008ece <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d11b      	bne.n	8008ece <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f06f 0208 	mvn.w	r2, #8
 8008e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f95d 	bl	8009174 <HAL_TIM_IC_CaptureCallback>
 8008eba:	e005      	b.n	8008ec8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f94f 	bl	8009160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f960 	bl	8009188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b10      	cmp	r3, #16
 8008eda:	d122      	bne.n	8008f22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d11b      	bne.n	8008f22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f06f 0210 	mvn.w	r2, #16
 8008ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f933 	bl	8009174 <HAL_TIM_IC_CaptureCallback>
 8008f0e:	e005      	b.n	8008f1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f925 	bl	8009160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f936 	bl	8009188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d10e      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d107      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f06f 0201 	mvn.w	r2, #1
 8008f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7fb fb9b 	bl	8004684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f58:	2b80      	cmp	r3, #128	; 0x80
 8008f5a:	d10e      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d107      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fbf1 	bl	800975c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	d10e      	bne.n	8008fa6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f92:	2b40      	cmp	r3, #64	; 0x40
 8008f94:	d107      	bne.n	8008fa6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8fb 	bl	800919c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d10e      	bne.n	8008fd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b20      	cmp	r3, #32
 8008fc0:	d107      	bne.n	8008fd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f06f 0220 	mvn.w	r2, #32
 8008fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fbbb 	bl	8009748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0ae      	b.n	8009158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b0c      	cmp	r3, #12
 8009006:	f200 809f 	bhi.w	8009148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009045 	.word	0x08009045
 8009014:	08009149 	.word	0x08009149
 8009018:	08009149 	.word	0x08009149
 800901c:	08009149 	.word	0x08009149
 8009020:	08009085 	.word	0x08009085
 8009024:	08009149 	.word	0x08009149
 8009028:	08009149 	.word	0x08009149
 800902c:	08009149 	.word	0x08009149
 8009030:	080090c7 	.word	0x080090c7
 8009034:	08009149 	.word	0x08009149
 8009038:	08009149 	.word	0x08009149
 800903c:	08009149 	.word	0x08009149
 8009040:	08009107 	.word	0x08009107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68b9      	ldr	r1, [r7, #8]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f950 	bl	80092f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0208 	orr.w	r2, r2, #8
 800905e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0204 	bic.w	r2, r2, #4
 800906e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6999      	ldr	r1, [r3, #24]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	691a      	ldr	r2, [r3, #16]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	619a      	str	r2, [r3, #24]
      break;
 8009082:	e064      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f9a0 	bl	80093d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699a      	ldr	r2, [r3, #24]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800909e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6999      	ldr	r1, [r3, #24]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	021a      	lsls	r2, r3, #8
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	619a      	str	r2, [r3, #24]
      break;
 80090c4:	e043      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f9f5 	bl	80094bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	69da      	ldr	r2, [r3, #28]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0208 	orr.w	r2, r2, #8
 80090e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69da      	ldr	r2, [r3, #28]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0204 	bic.w	r2, r2, #4
 80090f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69d9      	ldr	r1, [r3, #28]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	691a      	ldr	r2, [r3, #16]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	61da      	str	r2, [r3, #28]
      break;
 8009104:	e023      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fa49 	bl	80095a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	021a      	lsls	r2, r3, #8
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	61da      	str	r2, [r3, #28]
      break;
 8009146:	e002      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
      break;
 800914c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a40      	ldr	r2, [pc, #256]	; (80092c4 <TIM_Base_SetConfig+0x114>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ce:	d00f      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a3d      	ldr	r2, [pc, #244]	; (80092c8 <TIM_Base_SetConfig+0x118>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00b      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a3c      	ldr	r2, [pc, #240]	; (80092cc <TIM_Base_SetConfig+0x11c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d007      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a3b      	ldr	r2, [pc, #236]	; (80092d0 <TIM_Base_SetConfig+0x120>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3a      	ldr	r2, [pc, #232]	; (80092d4 <TIM_Base_SetConfig+0x124>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d108      	bne.n	8009202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a2f      	ldr	r2, [pc, #188]	; (80092c4 <TIM_Base_SetConfig+0x114>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d02b      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009210:	d027      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a2c      	ldr	r2, [pc, #176]	; (80092c8 <TIM_Base_SetConfig+0x118>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d023      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a2b      	ldr	r2, [pc, #172]	; (80092cc <TIM_Base_SetConfig+0x11c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d01f      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2a      	ldr	r2, [pc, #168]	; (80092d0 <TIM_Base_SetConfig+0x120>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d01b      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a29      	ldr	r2, [pc, #164]	; (80092d4 <TIM_Base_SetConfig+0x124>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d017      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a28      	ldr	r2, [pc, #160]	; (80092d8 <TIM_Base_SetConfig+0x128>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d013      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a27      	ldr	r2, [pc, #156]	; (80092dc <TIM_Base_SetConfig+0x12c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00f      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a26      	ldr	r2, [pc, #152]	; (80092e0 <TIM_Base_SetConfig+0x130>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00b      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a25      	ldr	r2, [pc, #148]	; (80092e4 <TIM_Base_SetConfig+0x134>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d007      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a24      	ldr	r2, [pc, #144]	; (80092e8 <TIM_Base_SetConfig+0x138>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a23      	ldr	r2, [pc, #140]	; (80092ec <TIM_Base_SetConfig+0x13c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d108      	bne.n	8009274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <TIM_Base_SetConfig+0x114>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d003      	beq.n	80092a8 <TIM_Base_SetConfig+0xf8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a0c      	ldr	r2, [pc, #48]	; (80092d4 <TIM_Base_SetConfig+0x124>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d103      	bne.n	80092b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	615a      	str	r2, [r3, #20]
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	40010000 	.word	0x40010000
 80092c8:	40000400 	.word	0x40000400
 80092cc:	40000800 	.word	0x40000800
 80092d0:	40000c00 	.word	0x40000c00
 80092d4:	40010400 	.word	0x40010400
 80092d8:	40014000 	.word	0x40014000
 80092dc:	40014400 	.word	0x40014400
 80092e0:	40014800 	.word	0x40014800
 80092e4:	40001800 	.word	0x40001800
 80092e8:	40001c00 	.word	0x40001c00
 80092ec:	40002000 	.word	0x40002000

080092f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f023 0201 	bic.w	r2, r3, #1
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f023 0302 	bic.w	r3, r3, #2
 8009338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4313      	orrs	r3, r2
 8009342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <TIM_OC1_SetConfig+0xd8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d003      	beq.n	8009354 <TIM_OC1_SetConfig+0x64>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <TIM_OC1_SetConfig+0xdc>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d10c      	bne.n	800936e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f023 0308 	bic.w	r3, r3, #8
 800935a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f023 0304 	bic.w	r3, r3, #4
 800936c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a15      	ldr	r2, [pc, #84]	; (80093c8 <TIM_OC1_SetConfig+0xd8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d003      	beq.n	800937e <TIM_OC1_SetConfig+0x8e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a14      	ldr	r2, [pc, #80]	; (80093cc <TIM_OC1_SetConfig+0xdc>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d111      	bne.n	80093a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800938c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	4313      	orrs	r3, r2
 8009396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	621a      	str	r2, [r3, #32]
}
 80093bc:	bf00      	nop
 80093be:	371c      	adds	r7, #28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40010400 	.word	0x40010400

080093d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	f023 0210 	bic.w	r2, r3, #16
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f023 0320 	bic.w	r3, r3, #32
 800941a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a22      	ldr	r2, [pc, #136]	; (80094b4 <TIM_OC2_SetConfig+0xe4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d003      	beq.n	8009438 <TIM_OC2_SetConfig+0x68>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a21      	ldr	r2, [pc, #132]	; (80094b8 <TIM_OC2_SetConfig+0xe8>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d10d      	bne.n	8009454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800943e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	011b      	lsls	r3, r3, #4
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a17      	ldr	r2, [pc, #92]	; (80094b4 <TIM_OC2_SetConfig+0xe4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d003      	beq.n	8009464 <TIM_OC2_SetConfig+0x94>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <TIM_OC2_SetConfig+0xe8>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d113      	bne.n	800948c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800946a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	4313      	orrs	r3, r2
 800947e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4313      	orrs	r3, r2
 800948a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	40010000 	.word	0x40010000
 80094b8:	40010400 	.word	0x40010400

080094bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a21      	ldr	r2, [pc, #132]	; (800959c <TIM_OC3_SetConfig+0xe0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_OC3_SetConfig+0x66>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a20      	ldr	r2, [pc, #128]	; (80095a0 <TIM_OC3_SetConfig+0xe4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d10d      	bne.n	800953e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4313      	orrs	r3, r2
 8009534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800953c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a16      	ldr	r2, [pc, #88]	; (800959c <TIM_OC3_SetConfig+0xe0>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d003      	beq.n	800954e <TIM_OC3_SetConfig+0x92>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a15      	ldr	r2, [pc, #84]	; (80095a0 <TIM_OC3_SetConfig+0xe4>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d113      	bne.n	8009576 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800955c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	4313      	orrs	r3, r2
 8009574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	621a      	str	r2, [r3, #32]
}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	40010000 	.word	0x40010000
 80095a0:	40010400 	.word	0x40010400

080095a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	031b      	lsls	r3, r3, #12
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a12      	ldr	r2, [pc, #72]	; (8009648 <TIM_OC4_SetConfig+0xa4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_OC4_SetConfig+0x68>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a11      	ldr	r2, [pc, #68]	; (800964c <TIM_OC4_SetConfig+0xa8>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d109      	bne.n	8009620 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	019b      	lsls	r3, r3, #6
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	4313      	orrs	r3, r2
 800961e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	621a      	str	r2, [r3, #32]
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40010000 	.word	0x40010000
 800964c:	40010400 	.word	0x40010400

08009650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009664:	2302      	movs	r3, #2
 8009666:	e05a      	b.n	800971e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a21      	ldr	r2, [pc, #132]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d022      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b4:	d01d      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1d      	ldr	r2, [pc, #116]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d018      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1b      	ldr	r2, [pc, #108]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a1a      	ldr	r2, [pc, #104]	; (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00e      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a18      	ldr	r2, [pc, #96]	; (800973c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d009      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a17      	ldr	r2, [pc, #92]	; (8009740 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d004      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a15      	ldr	r2, [pc, #84]	; (8009744 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d10c      	bne.n	800970c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	4313      	orrs	r3, r2
 8009702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	40010000 	.word	0x40010000
 8009730:	40000400 	.word	0x40000400
 8009734:	40000800 	.word	0x40000800
 8009738:	40000c00 	.word	0x40000c00
 800973c:	40010400 	.word	0x40010400
 8009740:	40014000 	.word	0x40014000
 8009744:	40001800 	.word	0x40001800

08009748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e03f      	b.n	8009802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fb f930 	bl	80049fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2224      	movs	r2, #36	; 0x24
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f929 	bl	8009a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b08a      	sub	sp, #40	; 0x28
 800980e:	af02      	add	r7, sp, #8
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	603b      	str	r3, [r7, #0]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b20      	cmp	r3, #32
 8009828:	d17c      	bne.n	8009924 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <HAL_UART_Transmit+0x2c>
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e075      	b.n	8009926 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_UART_Transmit+0x3e>
 8009844:	2302      	movs	r3, #2
 8009846:	e06e      	b.n	8009926 <HAL_UART_Transmit+0x11c>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2221      	movs	r2, #33	; 0x21
 800985a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800985e:	f7fb f9fd 	bl	8004c5c <HAL_GetTick>
 8009862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009878:	d108      	bne.n	800988c <HAL_UART_Transmit+0x82>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d104      	bne.n	800988c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	61bb      	str	r3, [r7, #24]
 800988a:	e003      	b.n	8009894 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800989c:	e02a      	b.n	80098f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2200      	movs	r2, #0
 80098a6:	2180      	movs	r1, #128	; 0x80
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f840 	bl	800992e <UART_WaitOnFlagUntilTimeout>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e036      	b.n	8009926 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10b      	bne.n	80098d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	3302      	adds	r3, #2
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	e007      	b.n	80098e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	3301      	adds	r3, #1
 80098e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1cf      	bne.n	800989e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2200      	movs	r2, #0
 8009906:	2140      	movs	r1, #64	; 0x40
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 f810 	bl	800992e <UART_WaitOnFlagUntilTimeout>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009914:	2303      	movs	r3, #3
 8009916:	e006      	b.n	8009926 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2220      	movs	r2, #32
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	e000      	b.n	8009926 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009924:	2302      	movs	r3, #2
  }
}
 8009926:	4618      	mov	r0, r3
 8009928:	3720      	adds	r7, #32
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b090      	sub	sp, #64	; 0x40
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	603b      	str	r3, [r7, #0]
 800993a:	4613      	mov	r3, r2
 800993c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800993e:	e050      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	d04c      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <UART_WaitOnFlagUntilTimeout+0x30>
 800994e:	f7fb f985 	bl	8004c5c <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800995a:	429a      	cmp	r2, r3
 800995c:	d241      	bcs.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	330c      	adds	r3, #12
 800997c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800997e:	637a      	str	r2, [r7, #52]	; 0x34
 8009980:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e5      	bne.n	800995e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3314      	adds	r3, #20
 8009998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	613b      	str	r3, [r7, #16]
   return(result);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3314      	adds	r3, #20
 80099b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099b2:	623a      	str	r2, [r7, #32]
 80099b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	69f9      	ldr	r1, [r7, #28]
 80099b8:	6a3a      	ldr	r2, [r7, #32]
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	61bb      	str	r3, [r7, #24]
   return(result);
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e5      	bne.n	8009992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2220      	movs	r2, #32
 80099d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e00f      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4013      	ands	r3, r2
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	bf0c      	ite	eq
 80099f2:	2301      	moveq	r3, #1
 80099f4:	2300      	movne	r3, #0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	461a      	mov	r2, r3
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d09f      	beq.n	8009940 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3740      	adds	r7, #64	; 0x40
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a10:	b0c0      	sub	sp, #256	; 0x100
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a28:	68d9      	ldr	r1, [r3, #12]
 8009a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	ea40 0301 	orr.w	r3, r0, r1
 8009a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	431a      	orrs	r2, r3
 8009a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a64:	f021 010c 	bic.w	r1, r1, #12
 8009a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a72:	430b      	orrs	r3, r1
 8009a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a86:	6999      	ldr	r1, [r3, #24]
 8009a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	ea40 0301 	orr.w	r3, r0, r1
 8009a92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	4b8f      	ldr	r3, [pc, #572]	; (8009cd8 <UART_SetConfig+0x2cc>)
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d005      	beq.n	8009aac <UART_SetConfig+0xa0>
 8009aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b8d      	ldr	r3, [pc, #564]	; (8009cdc <UART_SetConfig+0x2d0>)
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d104      	bne.n	8009ab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009aac:	f7fe f9a4 	bl	8007df8 <HAL_RCC_GetPCLK2Freq>
 8009ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ab4:	e003      	b.n	8009abe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ab6:	f7fe f98b 	bl	8007dd0 <HAL_RCC_GetPCLK1Freq>
 8009aba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac8:	f040 810c 	bne.w	8009ce4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ade:	4622      	mov	r2, r4
 8009ae0:	462b      	mov	r3, r5
 8009ae2:	1891      	adds	r1, r2, r2
 8009ae4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ae6:	415b      	adcs	r3, r3
 8009ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009aee:	4621      	mov	r1, r4
 8009af0:	eb12 0801 	adds.w	r8, r2, r1
 8009af4:	4629      	mov	r1, r5
 8009af6:	eb43 0901 	adc.w	r9, r3, r1
 8009afa:	f04f 0200 	mov.w	r2, #0
 8009afe:	f04f 0300 	mov.w	r3, #0
 8009b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b0e:	4690      	mov	r8, r2
 8009b10:	4699      	mov	r9, r3
 8009b12:	4623      	mov	r3, r4
 8009b14:	eb18 0303 	adds.w	r3, r8, r3
 8009b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b1c:	462b      	mov	r3, r5
 8009b1e:	eb49 0303 	adc.w	r3, r9, r3
 8009b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	18db      	adds	r3, r3, r3
 8009b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009b40:	4613      	mov	r3, r2
 8009b42:	eb42 0303 	adc.w	r3, r2, r3
 8009b46:	657b      	str	r3, [r7, #84]	; 0x54
 8009b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b50:	f7f6 fb42 	bl	80001d8 <__aeabi_uldivmod>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4b61      	ldr	r3, [pc, #388]	; (8009ce0 <UART_SetConfig+0x2d4>)
 8009b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b5e:	095b      	lsrs	r3, r3, #5
 8009b60:	011c      	lsls	r4, r3, #4
 8009b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009b74:	4642      	mov	r2, r8
 8009b76:	464b      	mov	r3, r9
 8009b78:	1891      	adds	r1, r2, r2
 8009b7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b7c:	415b      	adcs	r3, r3
 8009b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b84:	4641      	mov	r1, r8
 8009b86:	eb12 0a01 	adds.w	sl, r2, r1
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ba4:	4692      	mov	sl, r2
 8009ba6:	469b      	mov	fp, r3
 8009ba8:	4643      	mov	r3, r8
 8009baa:	eb1a 0303 	adds.w	r3, sl, r3
 8009bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8009bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	18db      	adds	r3, r3, r3
 8009bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	eb42 0303 	adc.w	r3, r2, r3
 8009bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8009bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009be6:	f7f6 faf7 	bl	80001d8 <__aeabi_uldivmod>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4b3b      	ldr	r3, [pc, #236]	; (8009ce0 <UART_SetConfig+0x2d4>)
 8009bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	2264      	movs	r2, #100	; 0x64
 8009bfa:	fb02 f303 	mul.w	r3, r2, r3
 8009bfe:	1acb      	subs	r3, r1, r3
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c06:	4b36      	ldr	r3, [pc, #216]	; (8009ce0 <UART_SetConfig+0x2d4>)
 8009c08:	fba3 2302 	umull	r2, r3, r3, r2
 8009c0c:	095b      	lsrs	r3, r3, #5
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c14:	441c      	add	r4, r3
 8009c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c28:	4642      	mov	r2, r8
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	1891      	adds	r1, r2, r2
 8009c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c30:	415b      	adcs	r3, r3
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c38:	4641      	mov	r1, r8
 8009c3a:	1851      	adds	r1, r2, r1
 8009c3c:	6339      	str	r1, [r7, #48]	; 0x30
 8009c3e:	4649      	mov	r1, r9
 8009c40:	414b      	adcs	r3, r1
 8009c42:	637b      	str	r3, [r7, #52]	; 0x34
 8009c44:	f04f 0200 	mov.w	r2, #0
 8009c48:	f04f 0300 	mov.w	r3, #0
 8009c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c50:	4659      	mov	r1, fp
 8009c52:	00cb      	lsls	r3, r1, #3
 8009c54:	4651      	mov	r1, sl
 8009c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c5a:	4651      	mov	r1, sl
 8009c5c:	00ca      	lsls	r2, r1, #3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4619      	mov	r1, r3
 8009c62:	4603      	mov	r3, r0
 8009c64:	4642      	mov	r2, r8
 8009c66:	189b      	adds	r3, r3, r2
 8009c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c6c:	464b      	mov	r3, r9
 8009c6e:	460a      	mov	r2, r1
 8009c70:	eb42 0303 	adc.w	r3, r2, r3
 8009c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	18db      	adds	r3, r3, r3
 8009c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c92:	4613      	mov	r3, r2
 8009c94:	eb42 0303 	adc.w	r3, r2, r3
 8009c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ca2:	f7f6 fa99 	bl	80001d8 <__aeabi_uldivmod>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4b0d      	ldr	r3, [pc, #52]	; (8009ce0 <UART_SetConfig+0x2d4>)
 8009cac:	fba3 1302 	umull	r1, r3, r3, r2
 8009cb0:	095b      	lsrs	r3, r3, #5
 8009cb2:	2164      	movs	r1, #100	; 0x64
 8009cb4:	fb01 f303 	mul.w	r3, r1, r3
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	3332      	adds	r3, #50	; 0x32
 8009cbe:	4a08      	ldr	r2, [pc, #32]	; (8009ce0 <UART_SetConfig+0x2d4>)
 8009cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc4:	095b      	lsrs	r3, r3, #5
 8009cc6:	f003 0207 	and.w	r2, r3, #7
 8009cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4422      	add	r2, r4
 8009cd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009cd4:	e105      	b.n	8009ee2 <UART_SetConfig+0x4d6>
 8009cd6:	bf00      	nop
 8009cd8:	40011000 	.word	0x40011000
 8009cdc:	40011400 	.word	0x40011400
 8009ce0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009cf6:	4642      	mov	r2, r8
 8009cf8:	464b      	mov	r3, r9
 8009cfa:	1891      	adds	r1, r2, r2
 8009cfc:	6239      	str	r1, [r7, #32]
 8009cfe:	415b      	adcs	r3, r3
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
 8009d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d06:	4641      	mov	r1, r8
 8009d08:	1854      	adds	r4, r2, r1
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	eb43 0501 	adc.w	r5, r3, r1
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	00eb      	lsls	r3, r5, #3
 8009d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d1e:	00e2      	lsls	r2, r4, #3
 8009d20:	4614      	mov	r4, r2
 8009d22:	461d      	mov	r5, r3
 8009d24:	4643      	mov	r3, r8
 8009d26:	18e3      	adds	r3, r4, r3
 8009d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	eb45 0303 	adc.w	r3, r5, r3
 8009d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d46:	f04f 0200 	mov.w	r2, #0
 8009d4a:	f04f 0300 	mov.w	r3, #0
 8009d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d52:	4629      	mov	r1, r5
 8009d54:	008b      	lsls	r3, r1, #2
 8009d56:	4621      	mov	r1, r4
 8009d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	008a      	lsls	r2, r1, #2
 8009d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d64:	f7f6 fa38 	bl	80001d8 <__aeabi_uldivmod>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4b60      	ldr	r3, [pc, #384]	; (8009ef0 <UART_SetConfig+0x4e4>)
 8009d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d72:	095b      	lsrs	r3, r3, #5
 8009d74:	011c      	lsls	r4, r3, #4
 8009d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d88:	4642      	mov	r2, r8
 8009d8a:	464b      	mov	r3, r9
 8009d8c:	1891      	adds	r1, r2, r2
 8009d8e:	61b9      	str	r1, [r7, #24]
 8009d90:	415b      	adcs	r3, r3
 8009d92:	61fb      	str	r3, [r7, #28]
 8009d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d98:	4641      	mov	r1, r8
 8009d9a:	1851      	adds	r1, r2, r1
 8009d9c:	6139      	str	r1, [r7, #16]
 8009d9e:	4649      	mov	r1, r9
 8009da0:	414b      	adcs	r3, r1
 8009da2:	617b      	str	r3, [r7, #20]
 8009da4:	f04f 0200 	mov.w	r2, #0
 8009da8:	f04f 0300 	mov.w	r3, #0
 8009dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009db0:	4659      	mov	r1, fp
 8009db2:	00cb      	lsls	r3, r1, #3
 8009db4:	4651      	mov	r1, sl
 8009db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dba:	4651      	mov	r1, sl
 8009dbc:	00ca      	lsls	r2, r1, #3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	189b      	adds	r3, r3, r2
 8009dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009dcc:	464b      	mov	r3, r9
 8009dce:	460a      	mov	r2, r1
 8009dd0:	eb42 0303 	adc.w	r3, r2, r3
 8009dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009de2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009df0:	4649      	mov	r1, r9
 8009df2:	008b      	lsls	r3, r1, #2
 8009df4:	4641      	mov	r1, r8
 8009df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	008a      	lsls	r2, r1, #2
 8009dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e02:	f7f6 f9e9 	bl	80001d8 <__aeabi_uldivmod>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4b39      	ldr	r3, [pc, #228]	; (8009ef0 <UART_SetConfig+0x4e4>)
 8009e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	2164      	movs	r1, #100	; 0x64
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	3332      	adds	r3, #50	; 0x32
 8009e1e:	4a34      	ldr	r2, [pc, #208]	; (8009ef0 <UART_SetConfig+0x4e4>)
 8009e20:	fba2 2303 	umull	r2, r3, r2, r3
 8009e24:	095b      	lsrs	r3, r3, #5
 8009e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e2a:	441c      	add	r4, r3
 8009e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e30:	2200      	movs	r2, #0
 8009e32:	673b      	str	r3, [r7, #112]	; 0x70
 8009e34:	677a      	str	r2, [r7, #116]	; 0x74
 8009e36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	1891      	adds	r1, r2, r2
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	415b      	adcs	r3, r3
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e4a:	4641      	mov	r1, r8
 8009e4c:	1851      	adds	r1, r2, r1
 8009e4e:	6039      	str	r1, [r7, #0]
 8009e50:	4649      	mov	r1, r9
 8009e52:	414b      	adcs	r3, r1
 8009e54:	607b      	str	r3, [r7, #4]
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	f04f 0300 	mov.w	r3, #0
 8009e5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e62:	4659      	mov	r1, fp
 8009e64:	00cb      	lsls	r3, r1, #3
 8009e66:	4651      	mov	r1, sl
 8009e68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e6c:	4651      	mov	r1, sl
 8009e6e:	00ca      	lsls	r2, r1, #3
 8009e70:	4610      	mov	r0, r2
 8009e72:	4619      	mov	r1, r3
 8009e74:	4603      	mov	r3, r0
 8009e76:	4642      	mov	r2, r8
 8009e78:	189b      	adds	r3, r3, r2
 8009e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	460a      	mov	r2, r1
 8009e80:	eb42 0303 	adc.w	r3, r2, r3
 8009e84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8009e90:	667a      	str	r2, [r7, #100]	; 0x64
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	008b      	lsls	r3, r1, #2
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	008a      	lsls	r2, r1, #2
 8009eac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009eb0:	f7f6 f992 	bl	80001d8 <__aeabi_uldivmod>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <UART_SetConfig+0x4e4>)
 8009eba:	fba3 1302 	umull	r1, r3, r3, r2
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	2164      	movs	r1, #100	; 0x64
 8009ec2:	fb01 f303 	mul.w	r3, r1, r3
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	3332      	adds	r3, #50	; 0x32
 8009ecc:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <UART_SetConfig+0x4e4>)
 8009ece:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	f003 020f 	and.w	r2, r3, #15
 8009ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4422      	add	r2, r4
 8009ee0:	609a      	str	r2, [r3, #8]
}
 8009ee2:	bf00      	nop
 8009ee4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eee:	bf00      	nop
 8009ef0:	51eb851f 	.word	0x51eb851f

08009ef4 <__libc_init_array>:
 8009ef4:	b570      	push	{r4, r5, r6, lr}
 8009ef6:	4d0d      	ldr	r5, [pc, #52]	; (8009f2c <__libc_init_array+0x38>)
 8009ef8:	4c0d      	ldr	r4, [pc, #52]	; (8009f30 <__libc_init_array+0x3c>)
 8009efa:	1b64      	subs	r4, r4, r5
 8009efc:	10a4      	asrs	r4, r4, #2
 8009efe:	2600      	movs	r6, #0
 8009f00:	42a6      	cmp	r6, r4
 8009f02:	d109      	bne.n	8009f18 <__libc_init_array+0x24>
 8009f04:	4d0b      	ldr	r5, [pc, #44]	; (8009f34 <__libc_init_array+0x40>)
 8009f06:	4c0c      	ldr	r4, [pc, #48]	; (8009f38 <__libc_init_array+0x44>)
 8009f08:	f000 f87c 	bl	800a004 <_init>
 8009f0c:	1b64      	subs	r4, r4, r5
 8009f0e:	10a4      	asrs	r4, r4, #2
 8009f10:	2600      	movs	r6, #0
 8009f12:	42a6      	cmp	r6, r4
 8009f14:	d105      	bne.n	8009f22 <__libc_init_array+0x2e>
 8009f16:	bd70      	pop	{r4, r5, r6, pc}
 8009f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1c:	4798      	blx	r3
 8009f1e:	3601      	adds	r6, #1
 8009f20:	e7ee      	b.n	8009f00 <__libc_init_array+0xc>
 8009f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f26:	4798      	blx	r3
 8009f28:	3601      	adds	r6, #1
 8009f2a:	e7f2      	b.n	8009f12 <__libc_init_array+0x1e>
 8009f2c:	0800cdc4 	.word	0x0800cdc4
 8009f30:	0800cdc4 	.word	0x0800cdc4
 8009f34:	0800cdc4 	.word	0x0800cdc4
 8009f38:	0800cdc8 	.word	0x0800cdc8

08009f3c <__itoa>:
 8009f3c:	1e93      	subs	r3, r2, #2
 8009f3e:	2b22      	cmp	r3, #34	; 0x22
 8009f40:	b510      	push	{r4, lr}
 8009f42:	460c      	mov	r4, r1
 8009f44:	d904      	bls.n	8009f50 <__itoa+0x14>
 8009f46:	2300      	movs	r3, #0
 8009f48:	700b      	strb	r3, [r1, #0]
 8009f4a:	461c      	mov	r4, r3
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	bd10      	pop	{r4, pc}
 8009f50:	2a0a      	cmp	r2, #10
 8009f52:	d109      	bne.n	8009f68 <__itoa+0x2c>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	da07      	bge.n	8009f68 <__itoa+0x2c>
 8009f58:	232d      	movs	r3, #45	; 0x2d
 8009f5a:	700b      	strb	r3, [r1, #0]
 8009f5c:	4240      	negs	r0, r0
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4421      	add	r1, r4
 8009f62:	f000 f80d 	bl	8009f80 <__utoa>
 8009f66:	e7f1      	b.n	8009f4c <__itoa+0x10>
 8009f68:	2100      	movs	r1, #0
 8009f6a:	e7f9      	b.n	8009f60 <__itoa+0x24>

08009f6c <itoa>:
 8009f6c:	f7ff bfe6 	b.w	8009f3c <__itoa>

08009f70 <memset>:
 8009f70:	4402      	add	r2, r0
 8009f72:	4603      	mov	r3, r0
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d100      	bne.n	8009f7a <memset+0xa>
 8009f78:	4770      	bx	lr
 8009f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f7e:	e7f9      	b.n	8009f74 <memset+0x4>

08009f80 <__utoa>:
 8009f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f82:	4c1f      	ldr	r4, [pc, #124]	; (800a000 <__utoa+0x80>)
 8009f84:	b08b      	sub	sp, #44	; 0x2c
 8009f86:	4605      	mov	r5, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	466e      	mov	r6, sp
 8009f8c:	f104 0c20 	add.w	ip, r4, #32
 8009f90:	6820      	ldr	r0, [r4, #0]
 8009f92:	6861      	ldr	r1, [r4, #4]
 8009f94:	4637      	mov	r7, r6
 8009f96:	c703      	stmia	r7!, {r0, r1}
 8009f98:	3408      	adds	r4, #8
 8009f9a:	4564      	cmp	r4, ip
 8009f9c:	463e      	mov	r6, r7
 8009f9e:	d1f7      	bne.n	8009f90 <__utoa+0x10>
 8009fa0:	7921      	ldrb	r1, [r4, #4]
 8009fa2:	7139      	strb	r1, [r7, #4]
 8009fa4:	1e91      	subs	r1, r2, #2
 8009fa6:	6820      	ldr	r0, [r4, #0]
 8009fa8:	6038      	str	r0, [r7, #0]
 8009faa:	2922      	cmp	r1, #34	; 0x22
 8009fac:	f04f 0100 	mov.w	r1, #0
 8009fb0:	d904      	bls.n	8009fbc <__utoa+0x3c>
 8009fb2:	7019      	strb	r1, [r3, #0]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	b00b      	add	sp, #44	; 0x2c
 8009fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fbc:	1e58      	subs	r0, r3, #1
 8009fbe:	4684      	mov	ip, r0
 8009fc0:	fbb5 f7f2 	udiv	r7, r5, r2
 8009fc4:	fb02 5617 	mls	r6, r2, r7, r5
 8009fc8:	3628      	adds	r6, #40	; 0x28
 8009fca:	446e      	add	r6, sp
 8009fcc:	460c      	mov	r4, r1
 8009fce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009fd2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009fd6:	462e      	mov	r6, r5
 8009fd8:	42b2      	cmp	r2, r6
 8009fda:	f101 0101 	add.w	r1, r1, #1
 8009fde:	463d      	mov	r5, r7
 8009fe0:	d9ee      	bls.n	8009fc0 <__utoa+0x40>
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	545a      	strb	r2, [r3, r1]
 8009fe6:	1919      	adds	r1, r3, r4
 8009fe8:	1aa5      	subs	r5, r4, r2
 8009fea:	42aa      	cmp	r2, r5
 8009fec:	dae3      	bge.n	8009fb6 <__utoa+0x36>
 8009fee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009ff2:	780e      	ldrb	r6, [r1, #0]
 8009ff4:	7006      	strb	r6, [r0, #0]
 8009ff6:	3201      	adds	r2, #1
 8009ff8:	f801 5901 	strb.w	r5, [r1], #-1
 8009ffc:	e7f4      	b.n	8009fe8 <__utoa+0x68>
 8009ffe:	bf00      	nop
 800a000:	0800cd94 	.word	0x0800cd94

0800a004 <_init>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr

0800a010 <_fini>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr
