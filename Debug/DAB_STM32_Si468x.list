
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008680  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000273c  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af44  0800af44  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af4c  0800af4c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af4c  0800af4c  0001af4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800af54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00001544  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000155c  2000155c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a30  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338e  00000000  00000000  00036a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237cd  00000000  00000000  0003c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195b2  00000000  00000000  0005fc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1365  00000000  00000000  00079207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a56c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052c4  00000000  00000000  0014a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087f0 	.word	0x080087f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080087f0 	.word	0x080087f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f006 f810 	bl	800671e <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20001340 	.word	0x20001340

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f003 fca6 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f002 feb7 	bl	8003490 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f003 fc9d 	bl	8004068 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f003 fc97 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f002 fea8 	bl	8003490 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f003 fc8b 	bl	8004068 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f003 fc30 	bl	8004068 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f003 fc2a 	bl	8004068 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f003 fc20 	bl	8004068 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f003 fb92 	bl	8004068 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f003 fb89 	bl	8004068 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000034 	.word	0x20000034

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f003 f9cc 	bl	8004068 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f003 f9c6 	bl	8004068 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f003 f9bd 	bl	8004068 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f003 f923 	bl	8004068 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f003 f8f9 	bl	8004068 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f003 f8f0 	bl	8004068 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f003 f8a4 	bl	8004068 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f003 f89b 	bl	8004068 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f003 f84f 	bl	8004068 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f003 f846 	bl	8004068 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	08008f90 	.word	0x08008f90
 8001068:	08009268 	.word	0x08009268

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f002 fff6 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f002 fff0 	bl	8004068 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f002 ffe4 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f002 ffde 	bl	8004068 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:
uint8_t acq = 0;
uint8_t acq_int = 0;


void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4834      	ldr	r0, [pc, #208]	; (800118c <Si468x_init+0xd8>)
 80010bc:	f000 ffd0 	bl	8002060 <send_debug_msg>
	Si468x_reset();
 80010c0:	f000 f86a 	bl	8001198 <Si468x_reset>
	Si468x_power_up();
 80010c4:	f000 f884 	bl	80011d0 <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010c8:	f000 f906 	bl	80012d8 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010cc:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d0:	f000 f976 	bl	80013c0 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d4:	f000 fa14 	bl	8001500 <Si468x_boot>
	Si468x_get_part_info();
 80010d8:	f000 fbc2 	bl	8001860 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010dc:	f000 fb3c 	bl	8001758 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); //włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e0:	2101      	movs	r1, #1
 80010e2:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e6:	f000 fc2b 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); //dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ea:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010ee:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f2:	f000 fc25 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); //dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010fa:	f241 7011 	movw	r0, #5905	; 0x1711
 80010fe:	f000 fc1f 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x05); //prog RSSI od kiedy łapie kanał, default 12
 8001102:	2105      	movs	r1, #5
 8001104:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001108:	f000 fc1a 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); //określa które featury PAD będą przesyłane do hosta
 800110c:	f244 0105 	movw	r1, #16389	; 0x4005
 8001110:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8001114:	f000 fc14 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x06); //określa co ile będzie aktualizowana lista usług, x100 ms
 8001118:	2106      	movs	r1, #6
 800111a:	f24b 3001 	movw	r0, #45825	; 0xb301
 800111e:	f000 fc0f 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x06); //określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001122:	2106      	movs	r1, #6
 8001124:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001128:	f000 fc0a 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);	//tylko soft mute włączone przy slabym sygnale
 800112c:	2101      	movs	r1, #1
 800112e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001132:	f000 fc05 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);	//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001136:	2105      	movs	r1, #5
 8001138:	f24b 5001 	movw	r0, #46337	; 0xb501
 800113c:	f000 fc00 	bl	8001940 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); //limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001140:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001144:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001148:	f000 fbfa 	bl	8001940 <Si468x_set_property>
	Si468x_dab_get_freq_list(); //odczytujemy z ukladu liste czestotliwosci do tablicy
 800114c:	f000 fce4 	bl	8001b18 <Si468x_dab_get_freq_list>
	Si468x_dab_tune_freq(CH_11B);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 fdb1 	bl	8001cb8 <Si468x_dab_tune_freq>
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001156:	f000 faff 	bl	8001758 <Si468x_get_sys_state>
	Si468x_dab_digrad_status();
 800115a:	f000 fe89 	bl	8001e70 <Si468x_dab_digrad_status>

	while(valid == 0 || acq == 0)
 800115e:	e006      	b.n	800116e <Si468x_init+0xba>
	{
		Si468x_dab_reset_interrupts();
 8001160:	f000 fe4c 	bl	8001dfc <Si468x_dab_reset_interrupts>
		Si468x_dab_digrad_status();
 8001164:	f000 fe84 	bl	8001e70 <Si468x_dab_digrad_status>
		HAL_Delay(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f002 f991 	bl	8003490 <HAL_Delay>
	while(valid == 0 || acq == 0)
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <Si468x_init+0xdc>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f4      	beq.n	8001160 <Si468x_init+0xac>
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <Si468x_init+0xe0>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <Si468x_init+0xac>
	}
	Si468x_dab_start_digital_service(12966, 4);
 800117e:	2104      	movs	r1, #4
 8001180:	f243 20a6 	movw	r0, #12966	; 0x32a6
 8001184:	f000 fefe 	bl	8001f84 <Si468x_dab_start_digital_service>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	08008808 	.word	0x08008808
 8001190:	2000121c 	.word	0x2000121c
 8001194:	2000121d 	.word	0x2000121d

08001198 <Si468x_reset>:

void Si468x_reset()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 800119c:	2101      	movs	r1, #1
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <Si468x_reset+0x30>)
 80011a0:	f000 ff5e 	bl	8002060 <send_debug_msg>
	RESET_PIN_LOW;
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	4808      	ldr	r0, [pc, #32]	; (80011cc <Si468x_reset+0x34>)
 80011aa:	f002 ff5d 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f002 f96e 	bl	8003490 <HAL_Delay>
	RESET_PIN_HIGH;
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <Si468x_reset+0x34>)
 80011ba:	f002 ff55 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011be:	20c8      	movs	r0, #200	; 0xc8
 80011c0:	f002 f966 	bl	8003490 <HAL_Delay>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	08008858 	.word	0x08008858
 80011cc:	40020800 	.word	0x40020800

080011d0 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 80011d4:	2101      	movs	r1, #1
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <Si468x_power_up+0xa0>)
 80011d8:	f000 ff42 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <Si468x_power_up+0xa4>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <Si468x_power_up+0xa4>)
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <Si468x_power_up+0xa4>)
 80011ea:	2217      	movs	r2, #23
 80011ec:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <Si468x_power_up+0xa4>)
 80011f0:	2250      	movs	r2, #80	; 0x50
 80011f2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <Si468x_power_up+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <Si468x_power_up+0xa4>)
 80011fc:	22f8      	movs	r2, #248	; 0xf8
 80011fe:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <Si468x_power_up+0xa4>)
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <Si468x_power_up+0xa4>)
 8001208:	2201      	movs	r2, #1
 800120a:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <Si468x_power_up+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <Si468x_power_up+0xa4>)
 8001214:	2210      	movs	r2, #16
 8001216:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <Si468x_power_up+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <Si468x_power_up+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <Si468x_power_up+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <Si468x_power_up+0xa4>)
 800122c:	2228      	movs	r2, #40	; 0x28
 800122e:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <Si468x_power_up+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <Si468x_power_up+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 800123c:	490d      	ldr	r1, [pc, #52]	; (8001274 <Si468x_power_up+0xa4>)
 800123e:	2010      	movs	r0, #16
 8001240:	f000 fa52 	bl	80016e8 <Si468x_write_command>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <Si468x_power_up+0xa8>)
 800124a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f002 f91f 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001252:	490a      	ldr	r1, [pc, #40]	; (800127c <Si468x_power_up+0xac>)
 8001254:	2005      	movs	r0, #5
 8001256:	f000 fa6f 	bl	8001738 <Si468x_read_reply>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <Si468x_power_up+0xa8>)
 8001260:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 8001262:	2101      	movs	r1, #1
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <Si468x_power_up+0xb0>)
 8001266:	f000 fefb 	bl	8002060 <send_debug_msg>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800886c 	.word	0x0800886c
 8001274:	20000038 	.word	0x20000038
 8001278:	200011f4 	.word	0x200011f4
 800127c:	20001038 	.word	0x20001038
 8001280:	080088a8 	.word	0x080088a8

08001284 <Si468x_load_init>:

void Si468x_load_init()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001288:	2101      	movs	r1, #1
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <Si468x_load_init+0x44>)
 800128c:	f000 fee8 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <Si468x_load_init+0x48>)
 8001292:	2206      	movs	r2, #6
 8001294:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <Si468x_load_init+0x48>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800129c:	490b      	ldr	r1, [pc, #44]	; (80012cc <Si468x_load_init+0x48>)
 800129e:	2002      	movs	r0, #2
 80012a0:	f000 fa22 	bl	80016e8 <Si468x_write_command>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <Si468x_load_init+0x4c>)
 80012aa:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f002 f8ef 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <Si468x_load_init+0x50>)
 80012b4:	2005      	movs	r0, #5
 80012b6:	f000 fa3f 	bl	8001738 <Si468x_read_reply>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <Si468x_load_init+0x4c>)
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	080088c8 	.word	0x080088c8
 80012cc:	20000038 	.word	0x20000038
 80012d0:	200011f4 	.word	0x200011f4
 80012d4:	20001038 	.word	0x20001038

080012d8 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 80012de:	2101      	movs	r1, #1
 80012e0:	4830      	ldr	r0, [pc, #192]	; (80013a4 <Si468x_bootloader_load_host+0xcc>)
 80012e2:	f000 febd 	bl	8002060 <send_debug_msg>
	Si468x_load_init();
 80012e6:	f7ff ffcd 	bl	8001284 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 80012ea:	f241 63a4 	movw	r3, #5796	; 0x16a4
 80012ee:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <Si468x_bootloader_load_host+0xd0>)
 80012f2:	2204      	movs	r2, #4
 80012f4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <Si468x_bootloader_load_host+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <Si468x_bootloader_load_host+0xd0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <Si468x_bootloader_load_host+0xd0>)
 8001304:	2200      	movs	r2, #0
 8001306:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	80fb      	strh	r3, [r7, #6]
 800130c:	e03e      	b.n	800138c <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800130e:	2300      	movs	r3, #0
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	e014      	b.n	800133e <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001314:	88ba      	ldrh	r2, [r7, #4]
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	4924      	ldr	r1, [pc, #144]	; (80013ac <Si468x_bootloader_load_host+0xd4>)
 800131a:	fba1 1303 	umull	r1, r3, r1, r3
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	441a      	add	r2, r3
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	491f      	ldr	r1, [pc, #124]	; (80013b0 <Si468x_bootloader_load_host+0xd8>)
 8001332:	5c89      	ldrb	r1, [r1, r2]
 8001334:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <Si468x_bootloader_load_host+0xd0>)
 8001336:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <Si468x_bootloader_load_host+0xd4>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	d3e1      	bcc.n	8001314 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <Si468x_bootloader_load_host+0xd4>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	b29b      	uxth	r3, r3
 800135c:	3304      	adds	r3, #4
 800135e:	b29b      	uxth	r3, r3
 8001360:	4911      	ldr	r1, [pc, #68]	; (80013a8 <Si468x_bootloader_load_host+0xd0>)
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f9c0 	bl	80016e8 <Si468x_write_command>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <Si468x_bootloader_load_host+0xdc>)
 800136e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f002 f88d 	bl	8003490 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001376:	4910      	ldr	r1, [pc, #64]	; (80013b8 <Si468x_bootloader_load_host+0xe0>)
 8001378:	2005      	movs	r0, #5
 800137a:	f000 f9dd 	bl	8001738 <Si468x_read_reply>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <Si468x_bootloader_load_host+0xdc>)
 8001384:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	3301      	adds	r3, #1
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d9bd      	bls.n	800130e <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 8001392:	2101      	movs	r1, #1
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <Si468x_bootloader_load_host+0xe4>)
 8001396:	f000 fe63 	bl	8002060 <send_debug_msg>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	080088e0 	.word	0x080088e0
 80013a8:	20000038 	.word	0x20000038
 80013ac:	aaaaaaab 	.word	0xaaaaaaab
 80013b0:	08009858 	.word	0x08009858
 80013b4:	200011f4 	.word	0x200011f4
 80013b8:	20001038 	.word	0x20001038
 80013bc:	0800891c 	.word	0x0800891c

080013c0 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 80013c8:	2101      	movs	r1, #1
 80013ca:	4845      	ldr	r0, [pc, #276]	; (80014e0 <Si468x_firmware_load_flash+0x120>)
 80013cc:	f000 fe48 	bl	8002060 <send_debug_msg>
	Si468x_load_init();
 80013d0:	f7ff ff58 	bl	8001284 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 80013d6:	2205      	movs	r2, #5
 80013d8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 80013da:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 80013dc:	2200      	movs	r2, #0
 80013de:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 80013f2:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 80013fc:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001406:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0e1b      	lsrs	r3, r3, #24
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001410:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address", CRLF_SEND);
 8001412:	2101      	movs	r1, #1
 8001414:	4834      	ldr	r0, [pc, #208]	; (80014e8 <Si468x_firmware_load_flash+0x128>)
 8001416:	f000 fe23 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	2210      	movs	r2, #16
 8001420:	4932      	ldr	r1, [pc, #200]	; (80014ec <Si468x_firmware_load_flash+0x12c>)
 8001422:	4618      	mov	r0, r3
 8001424:	f007 f998 	bl	8008758 <itoa>
 8001428:	4603      	mov	r3, r0
 800142a:	2101      	movs	r1, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fe17 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_SEND);
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	2210      	movs	r2, #16
 8001438:	492c      	ldr	r1, [pc, #176]	; (80014ec <Si468x_firmware_load_flash+0x12c>)
 800143a:	4618      	mov	r0, r3
 800143c:	f007 f98c 	bl	8008758 <itoa>
 8001440:	4603      	mov	r3, r0
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fe0b 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_SEND);
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 800144c:	799b      	ldrb	r3, [r3, #6]
 800144e:	2210      	movs	r2, #16
 8001450:	4926      	ldr	r1, [pc, #152]	; (80014ec <Si468x_firmware_load_flash+0x12c>)
 8001452:	4618      	mov	r0, r3
 8001454:	f007 f980 	bl	8008758 <itoa>
 8001458:	4603      	mov	r3, r0
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fdff 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001464:	79db      	ldrb	r3, [r3, #7]
 8001466:	2210      	movs	r2, #16
 8001468:	4920      	ldr	r1, [pc, #128]	; (80014ec <Si468x_firmware_load_flash+0x12c>)
 800146a:	4618      	mov	r0, r3
 800146c:	f007 f974 	bl	8008758 <itoa>
 8001470:	4603      	mov	r3, r0
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fdf3 	bl	8002060 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 800147c:	2200      	movs	r2, #0
 800147e:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001482:	2200      	movs	r2, #0
 8001484:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001488:	2200      	movs	r2, #0
 800148a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 800148e:	2200      	movs	r2, #0
 8001490:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001492:	4914      	ldr	r1, [pc, #80]	; (80014e4 <Si468x_firmware_load_flash+0x124>)
 8001494:	200c      	movs	r0, #12
 8001496:	f000 f927 	bl	80016e8 <Si468x_write_command>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <Si468x_firmware_load_flash+0x130>)
 80014a0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f001 fff4 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014a8:	4912      	ldr	r1, [pc, #72]	; (80014f4 <Si468x_firmware_load_flash+0x134>)
 80014aa:	2005      	movs	r0, #5
 80014ac:	f000 f944 	bl	8001738 <Si468x_read_reply>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <Si468x_firmware_load_flash+0x130>)
 80014b6:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <Si468x_firmware_load_flash+0x134>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80014c4:	2101      	movs	r1, #1
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <Si468x_firmware_load_flash+0x138>)
 80014c8:	f000 fdca 	bl	8002060 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 80014cc:	e003      	b.n	80014d6 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 80014ce:	2101      	movs	r1, #1
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <Si468x_firmware_load_flash+0x13c>)
 80014d2:	f000 fdc5 	bl	8002060 <send_debug_msg>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	0800893c 	.word	0x0800893c
 80014e4:	20000038 	.word	0x20000038
 80014e8:	08008978 	.word	0x08008978
 80014ec:	200011f8 	.word	0x200011f8
 80014f0:	200011f4 	.word	0x200011f4
 80014f4:	20001038 	.word	0x20001038
 80014f8:	08008988 	.word	0x08008988
 80014fc:	08008998 	.word	0x08008998

08001500 <Si468x_boot>:

void Si468x_boot()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001504:	2101      	movs	r1, #1
 8001506:	4816      	ldr	r0, [pc, #88]	; (8001560 <Si468x_boot+0x60>)
 8001508:	f000 fdaa 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <Si468x_boot+0x64>)
 800150e:	2207      	movs	r2, #7
 8001510:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Si468x_boot+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001518:	4912      	ldr	r1, [pc, #72]	; (8001564 <Si468x_boot+0x64>)
 800151a:	2002      	movs	r0, #2
 800151c:	f000 f8e4 	bl	80016e8 <Si468x_write_command>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <Si468x_boot+0x68>)
 8001526:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001528:	2001      	movs	r0, #1
 800152a:	f001 ffb1 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800152e:	490f      	ldr	r1, [pc, #60]	; (800156c <Si468x_boot+0x6c>)
 8001530:	2005      	movs	r0, #5
 8001532:	f000 f901 	bl	8001738 <Si468x_read_reply>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <Si468x_boot+0x68>)
 800153c:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <Si468x_boot+0x6c>)
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001546:	2bc0      	cmp	r3, #192	; 0xc0
 8001548:	d104      	bne.n	8001554 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 800154a:	2101      	movs	r1, #1
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <Si468x_boot+0x70>)
 800154e:	f000 fd87 	bl	8002060 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 8001552:	e003      	b.n	800155c <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001554:	2101      	movs	r1, #1
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <Si468x_boot+0x74>)
 8001558:	f000 fd82 	bl	8002060 <send_debug_msg>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	080089b4 	.word	0x080089b4
 8001564:	20000038 	.word	0x20000038
 8001568:	200011f4 	.word	0x200011f4
 800156c:	20001038 	.word	0x20001038
 8001570:	080089f0 	.word	0x080089f0
 8001574:	08008a0c 	.word	0x08008a0c

08001578 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 8001582:	1df9      	adds	r1, r7, #7
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	2201      	movs	r2, #1
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <Si468x_write_single_byte+0x20>)
 800158a:	f005 f8c8 	bl	800671e <HAL_SPI_Transmit>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200012e8 	.word	0x200012e8

0800159c <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 80015a6:	1df9      	adds	r1, r7, #7
 80015a8:	2364      	movs	r3, #100	; 0x64
 80015aa:	2201      	movs	r2, #1
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <Si468x_read_single_byte+0x20>)
 80015ae:	f005 f9f2 	bl	8006996 <HAL_SPI_Receive>
	return data_buffer;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200012e8 	.word	0x200012e8

080015c0 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	81fb      	strh	r3, [r7, #14]
 80015d2:	e01c      	b.n	800160e <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 80015d4:	f107 030d 	add.w	r3, r7, #13
 80015d8:	4619      	mov	r1, r3
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 f850 	bl	8001680 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da0c      	bge.n	8001602 <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
 80015ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015f2:	2101      	movs	r1, #1
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <Si468x_wait_for_CTS+0x68>)
 80015f6:	f000 fd33 	bl	8002060 <send_debug_msg>
				return COMMAND_ERROR;
 80015fa:	2320      	movs	r3, #32
 80015fc:	e010      	b.n	8001620 <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 80015fe:	2300      	movs	r3, #0
 8001600:	e00e      	b.n	8001620 <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f001 ff44 	bl	8003490 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	3301      	adds	r3, #1
 800160c:	81fb      	strh	r3, [r7, #14]
 800160e:	89fa      	ldrh	r2, [r7, #14]
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3de      	bcc.n	80015d4 <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001616:	2101      	movs	r1, #1
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <Si468x_wait_for_CTS+0x6c>)
 800161a:	f000 fd21 	bl	8002060 <send_debug_msg>
	return TIMEOUT;
 800161e:	2308      	movs	r3, #8
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	08008a20 	.word	0x08008a20
 800162c:	08008a48 	.word	0x08008a48

08001630 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001640:	2200      	movs	r2, #0
 8001642:	2110      	movs	r1, #16
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <Si468x_write_multiple+0x4c>)
 8001646:	f002 fd0f 	bl	8004068 <HAL_GPIO_WritePin>
	while(len--)
 800164a:	e009      	b.n	8001660 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	81fa      	strh	r2, [r7, #14]
 8001652:	461a      	mov	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff8c 	bl	8001578 <Si468x_write_single_byte>
	while(len--)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	80fa      	strh	r2, [r7, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 800166a:	2201      	movs	r2, #1
 800166c:	2110      	movs	r1, #16
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <Si468x_write_multiple+0x4c>)
 8001670:	f002 fcfa 	bl	8004068 <HAL_GPIO_WritePin>
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40020800 	.word	0x40020800

08001680 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001690:	2201      	movs	r2, #1
 8001692:	2110      	movs	r1, #16
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <Si468x_read_multiple+0x64>)
 8001696:	f002 fce7 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800169a:	2003      	movs	r0, #3
 800169c:	f001 fef8 	bl	8003490 <HAL_Delay>
	CS_PIN_LOW;
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <Si468x_read_multiple+0x64>)
 80016a6:	f002 fcdf 	bl	8004068 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff ff64 	bl	8001578 <Si468x_write_single_byte>
	while(len--)
 80016b0:	e009      	b.n	80016c6 <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	81fa      	strh	r2, [r7, #14]
 80016b8:	461a      	mov	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	189c      	adds	r4, r3, r2
 80016be:	f7ff ff6d 	bl	800159c <Si468x_read_single_byte>
 80016c2:	4603      	mov	r3, r0
 80016c4:	7023      	strb	r3, [r4, #0]
	while(len--)
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	80fa      	strh	r2, [r7, #6]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 80016d0:	2201      	movs	r2, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <Si468x_read_multiple+0x64>)
 80016d6:	f002 fcc7 	bl	8004068 <HAL_GPIO_WritePin>
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020800 	.word	0x40020800

080016e8 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f7ff ff62 	bl	80015c0 <Si468x_wait_for_CTS>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <Si468x_write_command+0x24>
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b20      	cmp	r3, #32
 800170a:	d10a      	bne.n	8001722 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff8d 	bl	8001630 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171a:	f7ff ff51 	bl	80015c0 <Si468x_wait_for_CTS>
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
	}
	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
 8001722:	2101      	movs	r1, #1
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <Si468x_write_command+0x4c>)
 8001726:	f000 fc9b 	bl	8002060 <send_debug_msg>
	return ret;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	08008a58 	.word	0x08008a58

08001738 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff99 	bl	8001680 <Si468x_read_multiple>
	return SUCCESS;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 800175c:	2101      	movs	r1, #1
 800175e:	4833      	ldr	r0, [pc, #204]	; (800182c <Si468x_get_sys_state+0xd4>)
 8001760:	f000 fc7e 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <Si468x_get_sys_state+0xd8>)
 8001766:	2209      	movs	r2, #9
 8001768:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <Si468x_get_sys_state+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001770:	492f      	ldr	r1, [pc, #188]	; (8001830 <Si468x_get_sys_state+0xd8>)
 8001772:	2002      	movs	r0, #2
 8001774:	f7ff ffb8 	bl	80016e8 <Si468x_write_command>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <Si468x_get_sys_state+0xdc>)
 800177e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f001 fe85 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001786:	492c      	ldr	r1, [pc, #176]	; (8001838 <Si468x_get_sys_state+0xe0>)
 8001788:	2005      	movs	r0, #5
 800178a:	f7ff ffd5 	bl	8001738 <Si468x_read_reply>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <Si468x_get_sys_state+0xdc>)
 8001794:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001796:	2100      	movs	r1, #0
 8001798:	4828      	ldr	r0, [pc, #160]	; (800183c <Si468x_get_sys_state+0xe4>)
 800179a:	f000 fc61 	bl	8002060 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <Si468x_get_sys_state+0xe0>)
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	d83a      	bhi.n	800181c <Si468x_get_sys_state+0xc4>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <Si468x_get_sys_state+0x54>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017cd 	.word	0x080017cd
 80017b0:	080017d7 	.word	0x080017d7
 80017b4:	080017e1 	.word	0x080017e1
 80017b8:	080017eb 	.word	0x080017eb
 80017bc:	080017f5 	.word	0x080017f5
 80017c0:	080017ff 	.word	0x080017ff
 80017c4:	08001809 	.word	0x08001809
 80017c8:	08001813 	.word	0x08001813
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 80017cc:	2101      	movs	r1, #1
 80017ce:	481c      	ldr	r0, [pc, #112]	; (8001840 <Si468x_get_sys_state+0xe8>)
 80017d0:	f000 fc46 	bl	8002060 <send_debug_msg>
			break;
 80017d4:	e027      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 80017d6:	2101      	movs	r1, #1
 80017d8:	481a      	ldr	r0, [pc, #104]	; (8001844 <Si468x_get_sys_state+0xec>)
 80017da:	f000 fc41 	bl	8002060 <send_debug_msg>
			break;
 80017de:	e022      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 80017e0:	2101      	movs	r1, #1
 80017e2:	4819      	ldr	r0, [pc, #100]	; (8001848 <Si468x_get_sys_state+0xf0>)
 80017e4:	f000 fc3c 	bl	8002060 <send_debug_msg>
			break;
 80017e8:	e01d      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017ea:	2101      	movs	r1, #1
 80017ec:	4817      	ldr	r0, [pc, #92]	; (800184c <Si468x_get_sys_state+0xf4>)
 80017ee:	f000 fc37 	bl	8002060 <send_debug_msg>
			break;
 80017f2:	e018      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017f4:	2101      	movs	r1, #1
 80017f6:	4816      	ldr	r0, [pc, #88]	; (8001850 <Si468x_get_sys_state+0xf8>)
 80017f8:	f000 fc32 	bl	8002060 <send_debug_msg>
			break;
 80017fc:	e013      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017fe:	2101      	movs	r1, #1
 8001800:	4814      	ldr	r0, [pc, #80]	; (8001854 <Si468x_get_sys_state+0xfc>)
 8001802:	f000 fc2d 	bl	8002060 <send_debug_msg>
			break;
 8001806:	e00e      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001808:	2101      	movs	r1, #1
 800180a:	4813      	ldr	r0, [pc, #76]	; (8001858 <Si468x_get_sys_state+0x100>)
 800180c:	f000 fc28 	bl	8002060 <send_debug_msg>
			break;
 8001810:	e009      	b.n	8001826 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 8001812:	2101      	movs	r1, #1
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <Si468x_get_sys_state+0x104>)
 8001816:	f000 fc23 	bl	8002060 <send_debug_msg>
			break;
 800181a:	e004      	b.n	8001826 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 800181c:	2101      	movs	r1, #1
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <Si468x_get_sys_state+0xe8>)
 8001820:	f000 fc1e 	bl	8002060 <send_debug_msg>
			break;
 8001824:	bf00      	nop
	}
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	08008a74 	.word	0x08008a74
 8001830:	20000038 	.word	0x20000038
 8001834:	200011f4 	.word	0x200011f4
 8001838:	20001038 	.word	0x20001038
 800183c:	08008ab0 	.word	0x08008ab0
 8001840:	08008abc 	.word	0x08008abc
 8001844:	08008ad4 	.word	0x08008ad4
 8001848:	08008aec 	.word	0x08008aec
 800184c:	08008b04 	.word	0x08008b04
 8001850:	08008b2c 	.word	0x08008b2c
 8001854:	08008b48 	.word	0x08008b48
 8001858:	08008b60 	.word	0x08008b60
 800185c:	08008b7c 	.word	0x08008b7c

08001860 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001866:	2101      	movs	r1, #1
 8001868:	482d      	ldr	r0, [pc, #180]	; (8001920 <Si468x_get_part_info+0xc0>)
 800186a:	f000 fbf9 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <Si468x_get_part_info+0xc4>)
 8001870:	2208      	movs	r2, #8
 8001872:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <Si468x_get_part_info+0xc4>)
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800187a:	492a      	ldr	r1, [pc, #168]	; (8001924 <Si468x_get_part_info+0xc4>)
 800187c:	2002      	movs	r0, #2
 800187e:	f7ff ff33 	bl	80016e8 <Si468x_write_command>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b28      	ldr	r3, [pc, #160]	; (8001928 <Si468x_get_part_info+0xc8>)
 8001888:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f001 fe00 	bl	8003490 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fe71 	bl	8001578 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001896:	4925      	ldr	r1, [pc, #148]	; (800192c <Si468x_get_part_info+0xcc>)
 8001898:	200a      	movs	r0, #10
 800189a:	f7ff ff4d 	bl	8001738 <Si468x_read_reply>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <Si468x_get_part_info+0xc8>)
 80018a4:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4821      	ldr	r0, [pc, #132]	; (8001930 <Si468x_get_part_info+0xd0>)
 80018aa:	f000 fbd9 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <Si468x_get_part_info+0xcc>)
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	220a      	movs	r2, #10
 80018b4:	491f      	ldr	r1, [pc, #124]	; (8001934 <Si468x_get_part_info+0xd4>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f006 ff4e 	bl	8008758 <itoa>
 80018bc:	4603      	mov	r3, r0
 80018be:	2101      	movs	r1, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fbcd 	bl	8002060 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 80018c6:	2100      	movs	r1, #0
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <Si468x_get_part_info+0xd8>)
 80018ca:	f000 fbc9 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <Si468x_get_part_info+0xcc>)
 80018d0:	795b      	ldrb	r3, [r3, #5]
 80018d2:	220a      	movs	r2, #10
 80018d4:	4917      	ldr	r1, [pc, #92]	; (8001934 <Si468x_get_part_info+0xd4>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f006 ff3e 	bl	8008758 <itoa>
 80018dc:	4603      	mov	r3, r0
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fbbd 	bl	8002060 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018e6:	2100      	movs	r1, #0
 80018e8:	4814      	ldr	r0, [pc, #80]	; (800193c <Si468x_get_part_info+0xdc>)
 80018ea:	f000 fbb9 	bl	8002060 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <Si468x_get_part_info+0xcc>)
 80018f0:	7a5b      	ldrb	r3, [r3, #9]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <Si468x_get_part_info+0xcc>)
 80018fa:	7a1b      	ldrb	r3, [r3, #8]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4413      	add	r3, r2
 8001900:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	220a      	movs	r2, #10
 8001906:	490b      	ldr	r1, [pc, #44]	; (8001934 <Si468x_get_part_info+0xd4>)
 8001908:	4618      	mov	r0, r3
 800190a:	f006 ff25 	bl	8008758 <itoa>
 800190e:	4603      	mov	r3, r0
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fba4 	bl	8002060 <send_debug_msg>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08008b94 	.word	0x08008b94
 8001924:	20000038 	.word	0x20000038
 8001928:	200011f4 	.word	0x200011f4
 800192c:	20001038 	.word	0x20001038
 8001930:	08008bd0 	.word	0x08008bd0
 8001934:	200011f8 	.word	0x200011f8
 8001938:	08008be0 	.word	0x08008be0
 800193c:	08008bec 	.word	0x08008bec

08001940 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	460a      	mov	r2, r1
 800194a:	80fb      	strh	r3, [r7, #6]
 800194c:	4613      	mov	r3, r2
 800194e:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001950:	2101      	movs	r1, #1
 8001952:	4832      	ldr	r0, [pc, #200]	; (8001a1c <Si468x_set_property+0xdc>)
 8001954:	f000 fb84 	bl	8002060 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001958:	2100      	movs	r1, #0
 800195a:	4831      	ldr	r0, [pc, #196]	; (8001a20 <Si468x_set_property+0xe0>)
 800195c:	f000 fb80 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	2210      	movs	r2, #16
 8001964:	492f      	ldr	r1, [pc, #188]	; (8001a24 <Si468x_set_property+0xe4>)
 8001966:	4618      	mov	r0, r3
 8001968:	f006 fef6 	bl	8008758 <itoa>
 800196c:	4603      	mov	r3, r0
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fb75 	bl	8002060 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001976:	2100      	movs	r1, #0
 8001978:	482b      	ldr	r0, [pc, #172]	; (8001a28 <Si468x_set_property+0xe8>)
 800197a:	f000 fb71 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	2210      	movs	r2, #16
 8001982:	4928      	ldr	r1, [pc, #160]	; (8001a24 <Si468x_set_property+0xe4>)
 8001984:	4618      	mov	r0, r3
 8001986:	f006 fee7 	bl	8008758 <itoa>
 800198a:	4603      	mov	r3, r0
 800198c:	2101      	movs	r1, #1
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fb66 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <Si468x_set_property+0xec>)
 8001996:	2213      	movs	r2, #19
 8001998:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <Si468x_set_property+0xec>)
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <Si468x_set_property+0xec>)
 80019a6:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <Si468x_set_property+0xec>)
 80019b2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <Si468x_set_property+0xec>)
 80019ba:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <Si468x_set_property+0xec>)
 80019c6:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 80019c8:	4918      	ldr	r1, [pc, #96]	; (8001a2c <Si468x_set_property+0xec>)
 80019ca:	2006      	movs	r0, #6
 80019cc:	f7ff fe8c 	bl	80016e8 <Si468x_write_command>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <Si468x_set_property+0xf0>)
 80019d6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f001 fd59 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80019de:	4915      	ldr	r1, [pc, #84]	; (8001a34 <Si468x_set_property+0xf4>)
 80019e0:	2005      	movs	r0, #5
 80019e2:	f7ff fea9 	bl	8001738 <Si468x_read_reply>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <Si468x_set_property+0xf0>)
 80019ec:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f825 	bl	8001a40 <Si468x_get_property>
 80019f6:	4603      	mov	r3, r0
 80019f8:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019fa:	89fa      	ldrh	r2, [r7, #14]
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d104      	bne.n	8001a0c <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 8001a02:	2101      	movs	r1, #1
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <Si468x_set_property+0xf8>)
 8001a06:	f000 fb2b 	bl	8002060 <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 8001a0a:	e003      	b.n	8001a14 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <Si468x_set_property+0xfc>)
 8001a10:	f000 fb26 	bl	8002060 <send_debug_msg>
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	08008bfc 	.word	0x08008bfc
 8001a20:	08008c3c 	.word	0x08008c3c
 8001a24:	200011f8 	.word	0x200011f8
 8001a28:	08008c4c 	.word	0x08008c4c
 8001a2c:	20000038 	.word	0x20000038
 8001a30:	200011f4 	.word	0x200011f4
 8001a34:	20001038 	.word	0x20001038
 8001a38:	08008c68 	.word	0x08008c68
 8001a3c:	08008c84 	.word	0x08008c84

08001a40 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	482b      	ldr	r0, [pc, #172]	; (8001afc <Si468x_get_property+0xbc>)
 8001a4e:	f000 fb07 	bl	8002060 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a52:	2100      	movs	r1, #0
 8001a54:	482a      	ldr	r0, [pc, #168]	; (8001b00 <Si468x_get_property+0xc0>)
 8001a56:	f000 fb03 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	4929      	ldr	r1, [pc, #164]	; (8001b04 <Si468x_get_property+0xc4>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f006 fe79 	bl	8008758 <itoa>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 faf8 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <Si468x_get_property+0xc8>)
 8001a72:	2214      	movs	r2, #20
 8001a74:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <Si468x_get_property+0xc8>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <Si468x_get_property+0xc8>)
 8001a82:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <Si468x_get_property+0xc8>)
 8001a8e:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a90:	491d      	ldr	r1, [pc, #116]	; (8001b08 <Si468x_get_property+0xc8>)
 8001a92:	2004      	movs	r0, #4
 8001a94:	f7ff fe28 	bl	80016e8 <Si468x_write_command>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <Si468x_get_property+0xcc>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f001 fcf5 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001aa6:	491a      	ldr	r1, [pc, #104]	; (8001b10 <Si468x_get_property+0xd0>)
 8001aa8:	2006      	movs	r0, #6
 8001aaa:	f7ff fe45 	bl	8001738 <Si468x_read_reply>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <Si468x_get_property+0xcc>)
 8001ab4:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <Si468x_get_property+0xd4>)
 8001aba:	f000 fad1 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <Si468x_get_property+0xd0>)
 8001ac0:	795b      	ldrb	r3, [r3, #5]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <Si468x_get_property+0xd0>)
 8001ac6:	7912      	ldrb	r2, [r2, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	2210      	movs	r2, #16
 8001acc:	490d      	ldr	r1, [pc, #52]	; (8001b04 <Si468x_get_property+0xc4>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f006 fe42 	bl	8008758 <itoa>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fac1 	bl	8002060 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <Si468x_get_property+0xd0>)
 8001ae0:	795b      	ldrb	r3, [r3, #5]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <Si468x_get_property+0xd0>)
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08008c9c 	.word	0x08008c9c
 8001b00:	08008c3c 	.word	0x08008c3c
 8001b04:	200011f8 	.word	0x200011f8
 8001b08:	20000038 	.word	0x20000038
 8001b0c:	200011f4 	.word	0x200011f4
 8001b10:	20001038 	.word	0x20001038
 8001b14:	08008cd8 	.word	0x08008cd8

08001b18 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4859      	ldr	r0, [pc, #356]	; (8001c88 <Si468x_dab_get_freq_list+0x170>)
 8001b22:	f000 fa9d 	bl	8002060 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001b26:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <Si468x_dab_get_freq_list+0x174>)
 8001b28:	22b9      	movs	r2, #185	; 0xb9
 8001b2a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <Si468x_dab_get_freq_list+0x174>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001b32:	4956      	ldr	r1, [pc, #344]	; (8001c8c <Si468x_dab_get_freq_list+0x174>)
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7ff fdd7 	bl	80016e8 <Si468x_write_command>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <Si468x_dab_get_freq_list+0x178>)
 8001b40:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f001 fca4 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b48:	4952      	ldr	r1, [pc, #328]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f7ff fdf4 	bl	8001738 <Si468x_read_reply>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <Si468x_dab_get_freq_list+0x178>)
 8001b56:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b58:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b64:	2101      	movs	r1, #1
 8001b66:	484c      	ldr	r0, [pc, #304]	; (8001c98 <Si468x_dab_get_freq_list+0x180>)
 8001b68:	f000 fa7a 	bl	8002060 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b6c:	e087      	b.n	8001c7e <Si468x_dab_get_freq_list+0x166>
		if(dab_spi_rx_buffer[4])
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d07f      	beq.n	8001c76 <Si468x_dab_get_freq_list+0x15e>
			uint8_t read_offset = 2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	70fb      	strb	r3, [r7, #3]
			uint8_t freq_cnt = dab_spi_rx_buffer[4];
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	70bb      	strb	r3, [r7, #2]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b80:	2100      	movs	r1, #0
 8001b82:	4846      	ldr	r0, [pc, #280]	; (8001c9c <Si468x_dab_get_freq_list+0x184>)
 8001b84:	f000 fa6c 	bl	8002060 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	4944      	ldr	r1, [pc, #272]	; (8001ca0 <Si468x_dab_get_freq_list+0x188>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 fde2 	bl	8008758 <itoa>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fa61 	bl	8002060 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4840      	ldr	r0, [pc, #256]	; (8001ca4 <Si468x_dab_get_freq_list+0x18c>)
 8001ba2:	f000 fa5d 	bl	8002060 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001ba6:	493b      	ldr	r1, [pc, #236]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7ff fdc5 	bl	8001738 <Si468x_read_reply>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <Si468x_dab_get_freq_list+0x178>)
 8001bb4:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001bb6:	78ba      	ldrb	r2, [r7, #2]
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4934      	ldr	r1, [pc, #208]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fdb7 	bl	8001738 <Si468x_read_reply>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <Si468x_dab_get_freq_list+0x178>)
 8001bd0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	e049      	b.n	8001c6c <Si468x_dab_get_freq_list+0x154>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4a2c      	ldr	r2, [pc, #176]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	4619      	mov	r1, r3
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	18ca      	adds	r2, r1, r3
 8001bf8:	78f9      	ldrb	r1, [r7, #3]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	440b      	add	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	4924      	ldr	r1, [pc, #144]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	041b      	lsls	r3, r3, #16
 8001c08:	441a      	add	r2, r3
 8001c0a:	78f9      	ldrb	r1, [r7, #3]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	440b      	add	r3, r1
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	3303      	adds	r3, #3
 8001c14:	491f      	ldr	r1, [pc, #124]	; (8001c94 <Si468x_dab_get_freq_list+0x17c>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <Si468x_dab_get_freq_list+0x190>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001c26:	220a      	movs	r2, #10
 8001c28:	491d      	ldr	r1, [pc, #116]	; (8001ca0 <Si468x_dab_get_freq_list+0x188>)
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f006 fd94 	bl	8008758 <itoa>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fa13 	bl	8002060 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	481b      	ldr	r0, [pc, #108]	; (8001cac <Si468x_dab_get_freq_list+0x194>)
 8001c3e:	f000 fa0f 	bl	8002060 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <Si468x_dab_get_freq_list+0x190>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	4914      	ldr	r1, [pc, #80]	; (8001ca0 <Si468x_dab_get_freq_list+0x188>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f006 fd82 	bl	8008758 <itoa>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fa01 	bl	8002060 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <Si468x_dab_get_freq_list+0x198>)
 8001c62:	f000 f9fd 	bl	8002060 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	78bb      	ldrb	r3, [r7, #2]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbb1      	blt.n	8001bd8 <Si468x_dab_get_freq_list+0xc0>
}
 8001c74:	e003      	b.n	8001c7e <Si468x_dab_get_freq_list+0x166>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c76:	2101      	movs	r1, #1
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <Si468x_dab_get_freq_list+0x19c>)
 8001c7a:	f000 f9f1 	bl	8002060 <send_debug_msg>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08008cec 	.word	0x08008cec
 8001c8c:	20000038 	.word	0x20000038
 8001c90:	200011f4 	.word	0x200011f4
 8001c94:	20001038 	.word	0x20001038
 8001c98:	08008988 	.word	0x08008988
 8001c9c:	08008d28 	.word	0x08008d28
 8001ca0:	200011f8 	.word	0x200011f8
 8001ca4:	08008d30 	.word	0x08008d30
 8001ca8:	20001138 	.word	0x20001138
 8001cac:	08008d48 	.word	0x08008d48
 8001cb0:	08008d4c 	.word	0x08008d4c
 8001cb4:	08008d54 	.word	0x08008d54

08001cb8 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4841      	ldr	r0, [pc, #260]	; (8001dcc <Si468x_dab_tune_freq+0x114>)
 8001cc6:	f000 f9cb 	bl	8002060 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4840      	ldr	r0, [pc, #256]	; (8001dd0 <Si468x_dab_tune_freq+0x118>)
 8001cce:	f000 f9c7 	bl	8002060 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4a3f      	ldr	r2, [pc, #252]	; (8001dd4 <Si468x_dab_tune_freq+0x11c>)
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	220a      	movs	r2, #10
 8001cdc:	493e      	ldr	r1, [pc, #248]	; (8001dd8 <Si468x_dab_tune_freq+0x120>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f006 fd3a 	bl	8008758 <itoa>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f9b9 	bl	8002060 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001cee:	2101      	movs	r1, #1
 8001cf0:	483a      	ldr	r0, [pc, #232]	; (8001ddc <Si468x_dab_tune_freq+0x124>)
 8001cf2:	f000 f9b5 	bl	8002060 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001cf8:	22b0      	movs	r2, #176	; 0xb0
 8001cfa:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001d02:	4a37      	ldr	r2, [pc, #220]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001d1a:	4931      	ldr	r1, [pc, #196]	; (8001de0 <Si468x_dab_tune_freq+0x128>)
 8001d1c:	2006      	movs	r0, #6
 8001d1e:	f7ff fce3 	bl	80016e8 <Si468x_write_command>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <Si468x_dab_tune_freq+0x12c>)
 8001d28:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d2a:	492f      	ldr	r1, [pc, #188]	; (8001de8 <Si468x_dab_tune_freq+0x130>)
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff fd03 	bl	8001738 <Si468x_read_reply>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <Si468x_dab_tune_freq+0x12c>)
 8001d38:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <Si468x_dab_tune_freq+0x130>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <Si468x_dab_tune_freq+0x96>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d46:	2101      	movs	r1, #1
 8001d48:	4828      	ldr	r0, [pc, #160]	; (8001dec <Si468x_dab_tune_freq+0x134>)
 8001d4a:	f000 f989 	bl	8002060 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	81fb      	strh	r3, [r7, #14]
 8001d52:	e030      	b.n	8001db6 <Si468x_dab_tune_freq+0xfe>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d54:	4924      	ldr	r1, [pc, #144]	; (8001de8 <Si468x_dab_tune_freq+0x130>)
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff fcee 	bl	8001738 <Si468x_read_reply>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <Si468x_dab_tune_freq+0x12c>)
 8001d62:	701a      	strb	r2, [r3, #0]

		if(dab_spi_rx_buffer[0] & 0x01)
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <Si468x_dab_tune_freq+0x130>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <Si468x_dab_tune_freq+0xe0>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d70:	2100      	movs	r1, #0
 8001d72:	481f      	ldr	r0, [pc, #124]	; (8001df0 <Si468x_dab_tune_freq+0x138>)
 8001d74:	f000 f974 	bl	8002060 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d78:	89fb      	ldrh	r3, [r7, #14]
 8001d7a:	220a      	movs	r2, #10
 8001d7c:	4916      	ldr	r1, [pc, #88]	; (8001dd8 <Si468x_dab_tune_freq+0x120>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f006 fcea 	bl	8008758 <itoa>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f969 	bl	8002060 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4818      	ldr	r0, [pc, #96]	; (8001df4 <Si468x_dab_tune_freq+0x13c>)
 8001d92:	f000 f965 	bl	8002060 <send_debug_msg>
			break;
 8001d96:	e014      	b.n	8001dc2 <Si468x_dab_tune_freq+0x10a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d98:	89fb      	ldrh	r3, [r7, #14]
 8001d9a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d103      	bne.n	8001daa <Si468x_dab_tune_freq+0xf2>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001da2:	2101      	movs	r1, #1
 8001da4:	4814      	ldr	r0, [pc, #80]	; (8001df8 <Si468x_dab_tune_freq+0x140>)
 8001da6:	f000 f95b 	bl	8002060 <send_debug_msg>
		}
		HAL_Delay(1);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f001 fb70 	bl	8003490 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	3301      	adds	r3, #1
 8001db4:	81fb      	strh	r3, [r7, #14]
 8001db6:	89fb      	ldrh	r3, [r7, #14]
 8001db8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d9c9      	bls.n	8001d54 <Si468x_dab_tune_freq+0x9c>
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	08008d70 	.word	0x08008d70
 8001dd0:	08008dac 	.word	0x08008dac
 8001dd4:	20001138 	.word	0x20001138
 8001dd8:	200011f8 	.word	0x200011f8
 8001ddc:	08008d4c 	.word	0x08008d4c
 8001de0:	20000038 	.word	0x20000038
 8001de4:	200011f4 	.word	0x200011f4
 8001de8:	20001038 	.word	0x20001038
 8001dec:	08008988 	.word	0x08008988
 8001df0:	08008db8 	.word	0x08008db8
 8001df4:	08008dd4 	.word	0x08008dd4
 8001df8:	08008ddc 	.word	0x08008ddc

08001dfc <Si468x_dab_reset_interrupts>:

void Si468x_dab_reset_interrupts()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	send_debug_msg("------------------Clear DAB Interrupts-------------------", CRLF_SEND);
 8001e00:	2101      	movs	r1, #1
 8001e02:	4815      	ldr	r0, [pc, #84]	; (8001e58 <Si468x_dab_reset_interrupts+0x5c>)
 8001e04:	f000 f92c 	bl	8002060 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS; 	//
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <Si468x_dab_reset_interrupts+0x60>)
 8001e0a:	22b3      	movs	r2, #179	; 0xb3
 8001e0c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;								//Event ACK - clear all DAB event interrupts
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Si468x_dab_reset_interrupts+0x60>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e14:	4911      	ldr	r1, [pc, #68]	; (8001e5c <Si468x_dab_reset_interrupts+0x60>)
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7ff fc66 	bl	80016e8 <Si468x_write_command>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <Si468x_dab_reset_interrupts+0x64>)
 8001e22:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001e24:	490f      	ldr	r1, [pc, #60]	; (8001e64 <Si468x_dab_reset_interrupts+0x68>)
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fc86 	bl	8001738 <Si468x_read_reply>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <Si468x_dab_reset_interrupts+0x64>)
 8001e32:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <Si468x_dab_reset_interrupts+0x68>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <Si468x_dab_reset_interrupts+0x4e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001e40:	2101      	movs	r1, #1
 8001e42:	4809      	ldr	r0, [pc, #36]	; (8001e68 <Si468x_dab_reset_interrupts+0x6c>)
 8001e44:	f000 f90c 	bl	8002060 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}
 8001e48:	e003      	b.n	8001e52 <Si468x_dab_reset_interrupts+0x56>
		send_debug_msg("Clear OK.", CRLF_SEND);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <Si468x_dab_reset_interrupts+0x70>)
 8001e4e:	f000 f907 	bl	8002060 <send_debug_msg>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	08008df4 	.word	0x08008df4
 8001e5c:	20000038 	.word	0x20000038
 8001e60:	200011f4 	.word	0x200011f4
 8001e64:	20001038 	.word	0x20001038
 8001e68:	08008988 	.word	0x08008988
 8001e6c:	08008e30 	.word	0x08008e30

08001e70 <Si468x_dab_digrad_status>:

void Si468x_dab_digrad_status()
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af02      	add	r7, sp, #8
	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);
 8001e76:	2101      	movs	r1, #1
 8001e78:	4838      	ldr	r0, [pc, #224]	; (8001f5c <Si468x_dab_digrad_status+0xec>)
 8001e7a:	f000 f8f1 	bl	8002060 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <Si468x_dab_digrad_status+0xf0>)
 8001e80:	22b2      	movs	r2, #178	; 0xb2
 8001e82:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <Si468x_dab_digrad_status+0xf0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e8a:	4935      	ldr	r1, [pc, #212]	; (8001f60 <Si468x_dab_digrad_status+0xf0>)
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f7ff fc2b 	bl	80016e8 <Si468x_write_command>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <Si468x_dab_digrad_status+0xf4>)
 8001e98:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f001 faf8 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(22, dab_spi_rx_buffer);
 8001ea0:	4931      	ldr	r1, [pc, #196]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001ea2:	2016      	movs	r0, #22
 8001ea4:	f7ff fc48 	bl	8001738 <Si468x_read_reply>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <Si468x_dab_digrad_status+0xf4>)
 8001eae:	701a      	strb	r2, [r3, #0]
	rssi = dab_spi_rx_buffer[6];
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001eb2:	799a      	ldrb	r2, [r3, #6]
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <Si468x_dab_digrad_status+0xfc>)
 8001eb6:	701a      	strb	r2, [r3, #0]
	snr = dab_spi_rx_buffer[7];
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001eba:	79da      	ldrb	r2, [r3, #7]
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <Si468x_dab_digrad_status+0x100>)
 8001ebe:	701a      	strb	r2, [r3, #0]
	fib_error_count = (dab_spi_rx_buffer[11] << 8) + dab_spi_rx_buffer[10];
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001ec2:	7adb      	ldrb	r3, [r3, #11]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001ecc:	7a9b      	ldrb	r3, [r3, #10]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <Si468x_dab_digrad_status+0x104>)
 8001ed6:	801a      	strh	r2, [r3, #0]

	if(dab_spi_rx_buffer[5] & 0x01)
 8001ed8:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001eda:	795b      	ldrb	r3, [r3, #5]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <Si468x_dab_digrad_status+0x7c>
	{
		valid = 1;
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <Si468x_dab_digrad_status+0x108>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e002      	b.n	8001ef2 <Si468x_dab_digrad_status+0x82>
	}
	else
	{
		valid = 0;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <Si468x_dab_digrad_status+0x108>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
	}

	if(dab_spi_rx_buffer[5] & 0x04)
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001ef4:	795b      	ldrb	r3, [r3, #5]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <Si468x_dab_digrad_status+0x96>
	{
		acq = 1;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <Si468x_dab_digrad_status+0x10c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e002      	b.n	8001f0c <Si468x_dab_digrad_status+0x9c>
	}
	else
	{
		acq = 0;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <Si468x_dab_digrad_status+0x10c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	}

	if(dab_spi_rx_buffer[4] & 0x04)
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <Si468x_dab_digrad_status+0xf8>)
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <Si468x_dab_digrad_status+0xb0>
	{
		acq_int = 1;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <Si468x_dab_digrad_status+0x110>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e002      	b.n	8001f26 <Si468x_dab_digrad_status+0xb6>
	}
	else
	{
		acq_int = 0;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <Si468x_dab_digrad_status+0x110>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
	}


	DisplayDabStatus(rssi, snr, fib_error_count, valid, acq, acq_int);
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <Si468x_dab_digrad_status+0xfc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <Si468x_dab_digrad_status+0x100>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <Si468x_dab_digrad_status+0x104>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	461c      	mov	r4, r3
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <Si468x_dab_digrad_status+0x108>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <Si468x_dab_digrad_status+0x10c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <Si468x_dab_digrad_status+0x110>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	4622      	mov	r2, r4
 8001f50:	f000 f9c6 	bl	80022e0 <DisplayDabStatus>
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08008e3c 	.word	0x08008e3c
 8001f60:	20000038 	.word	0x20000038
 8001f64:	200011f4 	.word	0x200011f4
 8001f68:	20001038 	.word	0x20001038
 8001f6c:	20001218 	.word	0x20001218
 8001f70:	20001219 	.word	0x20001219
 8001f74:	2000121a 	.word	0x2000121a
 8001f78:	2000121c 	.word	0x2000121c
 8001f7c:	2000121d 	.word	0x2000121d
 8001f80:	2000121e 	.word	0x2000121e

08001f84 <Si468x_dab_start_digital_service>:


}

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	482d      	ldr	r0, [pc, #180]	; (8002048 <Si468x_dab_start_digital_service+0xc4>)
 8001f92:	f000 f865 	bl	8002060 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001f98:	2281      	movs	r2, #129	; 0x81
 8001f9a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fb4:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fbe:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fc8:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0e1b      	lsrs	r3, r3, #24
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fd2:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Service ID [7:0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fda:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Service ID [15:8]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fe4:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Service ID [23:16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001fee:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Service ID [31:24]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	0e1b      	lsrs	r3, r3, #24
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001ff8:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001ffa:	4914      	ldr	r1, [pc, #80]	; (800204c <Si468x_dab_start_digital_service+0xc8>)
 8001ffc:	200c      	movs	r0, #12
 8001ffe:	f7ff fb73 	bl	80016e8 <Si468x_write_command>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <Si468x_dab_start_digital_service+0xcc>)
 8002008:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f001 fa40 	bl	8003490 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002010:	4910      	ldr	r1, [pc, #64]	; (8002054 <Si468x_dab_start_digital_service+0xd0>)
 8002012:	2005      	movs	r0, #5
 8002014:	f7ff fb90 	bl	8001738 <Si468x_read_reply>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <Si468x_dab_start_digital_service+0xcc>)
 800201e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <Si468x_dab_start_digital_service+0xd0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <Si468x_dab_start_digital_service+0xb2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800202c:	2101      	movs	r1, #1
 800202e:	480a      	ldr	r0, [pc, #40]	; (8002058 <Si468x_dab_start_digital_service+0xd4>)
 8002030:	f000 f816 	bl	8002060 <send_debug_msg>
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}

}
 8002034:	e003      	b.n	800203e <Si468x_dab_start_digital_service+0xba>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002036:	2101      	movs	r1, #1
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <Si468x_dab_start_digital_service+0xd8>)
 800203a:	f000 f811 	bl	8002060 <send_debug_msg>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	08008e78 	.word	0x08008e78
 800204c:	20000038 	.word	0x20000038
 8002050:	200011f4 	.word	0x200011f4
 8002054:	20001038 	.word	0x20001038
 8002058:	08008988 	.word	0x08008988
 800205c:	08008eb4 	.word	0x08008eb4

08002060 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe f8ab 	bl	80001c8 <strlen>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	b29a      	uxth	r2, r3
 800207a:	2364      	movs	r3, #100	; 0x64
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	480a      	ldr	r0, [pc, #40]	; (80020a8 <send_debug_msg+0x48>)
 8002080:	f005 ffb9 	bl	8007ff6 <HAL_UART_Transmit>

	if(is_crlf)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 800208a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800208e:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8002090:	f107 010c 	add.w	r1, r7, #12
 8002094:	2364      	movs	r3, #100	; 0x64
 8002096:	2202      	movs	r2, #2
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <send_debug_msg+0x48>)
 800209a:	f005 ffac 	bl	8007ff6 <HAL_UART_Transmit>
	}
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20001514 	.word	0x20001514

080020ac <DisplayMainScreen>:
#include "Si468x.h"

char char_buffer[32];

void DisplayMainScreen()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7fe fbfc 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 80020b8:	23eb      	movs	r3, #235	; 0xeb
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f240 133b 	movw	r3, #315	; 0x13b
 80020c0:	2219      	movs	r2, #25
 80020c2:	2105      	movs	r1, #5
 80020c4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80020c8:	f7fe fc7d 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 80020cc:	2302      	movs	r3, #2
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <DisplayMainScreen+0x210>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020da:	2105      	movs	r1, #5
 80020dc:	2041      	movs	r0, #65	; 0x41
 80020de:	f7fe fd1f 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 80020e2:	233c      	movs	r3, #60	; 0x3c
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f240 1331 	movw	r3, #305	; 0x131
 80020ea:	2223      	movs	r2, #35	; 0x23
 80020ec:	210f      	movs	r1, #15
 80020ee:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80020f2:	f7fe fc68 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 80020f6:	235f      	movs	r3, #95	; 0x5f
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	f240 1331 	movw	r3, #305	; 0x131
 80020fe:	2246      	movs	r2, #70	; 0x46
 8002100:	210f      	movs	r1, #15
 8002102:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002106:	f7fe fc5e 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 800210a:	23a0      	movs	r3, #160	; 0xa0
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2369      	movs	r3, #105	; 0x69
 8002110:	226e      	movs	r2, #110	; 0x6e
 8002112:	210f      	movs	r1, #15
 8002114:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002118:	f7fe fc55 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 800211c:	239f      	movs	r3, #159	; 0x9f
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2368      	movs	r3, #104	; 0x68
 8002122:	226f      	movs	r2, #111	; 0x6f
 8002124:	2110      	movs	r1, #16
 8002126:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800212a:	f7fe fc2b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 800212e:	2302      	movs	r3, #2
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <DisplayMainScreen+0x214>)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800213a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213e:	217f      	movs	r1, #127	; 0x7f
 8002140:	2023      	movs	r0, #35	; 0x23
 8002142:	f7fe fced 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 8002146:	23a0      	movs	r3, #160	; 0xa0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	23cd      	movs	r3, #205	; 0xcd
 800214c:	226e      	movs	r2, #110	; 0x6e
 800214e:	2173      	movs	r1, #115	; 0x73
 8002150:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002154:	f7fe fc37 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8002158:	239f      	movs	r3, #159	; 0x9f
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	23cc      	movs	r3, #204	; 0xcc
 800215e:	226f      	movs	r2, #111	; 0x6f
 8002160:	2174      	movs	r1, #116	; 0x74
 8002162:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002166:	f7fe fc0d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 800216a:	2302      	movs	r3, #2
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <DisplayMainScreen+0x218>)
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217a:	217f      	movs	r1, #127	; 0x7f
 800217c:	2090      	movs	r0, #144	; 0x90
 800217e:	f7fe fccf 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 8002182:	23a0      	movs	r3, #160	; 0xa0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	f240 1331 	movw	r3, #305	; 0x131
 800218a:	226e      	movs	r2, #110	; 0x6e
 800218c:	21d7      	movs	r1, #215	; 0xd7
 800218e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002192:	f7fe fc18 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 8002196:	239f      	movs	r3, #159	; 0x9f
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	f44f 7398 	mov.w	r3, #304	; 0x130
 800219e:	226f      	movs	r2, #111	; 0x6f
 80021a0:	21d8      	movs	r1, #216	; 0xd8
 80021a2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80021a6:	f7fe fbed 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 80021aa:	2302      	movs	r3, #2
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <DisplayMainScreen+0x21c>)
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	217f      	movs	r1, #127	; 0x7f
 80021bc:	20ea      	movs	r0, #234	; 0xea
 80021be:	f7fe fcaf 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 80021c2:	23dc      	movs	r3, #220	; 0xdc
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2369      	movs	r3, #105	; 0x69
 80021c8:	22aa      	movs	r2, #170	; 0xaa
 80021ca:	210f      	movs	r1, #15
 80021cc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80021d0:	f7fe fbf9 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 80021d4:	23db      	movs	r3, #219	; 0xdb
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2368      	movs	r3, #104	; 0x68
 80021da:	22ab      	movs	r2, #171	; 0xab
 80021dc:	2110      	movs	r1, #16
 80021de:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80021e2:	f7fe fbcf 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 80021e6:	2302      	movs	r3, #2
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <DisplayMainScreen+0x220>)
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f6:	21bb      	movs	r1, #187	; 0xbb
 80021f8:	202d      	movs	r0, #45	; 0x2d
 80021fa:	f7fe fc91 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 80021fe:	23dc      	movs	r3, #220	; 0xdc
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	23cd      	movs	r3, #205	; 0xcd
 8002204:	22aa      	movs	r2, #170	; 0xaa
 8002206:	2173      	movs	r1, #115	; 0x73
 8002208:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800220c:	f7fe fbdb 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8002210:	23db      	movs	r3, #219	; 0xdb
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	23cc      	movs	r3, #204	; 0xcc
 8002216:	22ab      	movs	r2, #171	; 0xab
 8002218:	2174      	movs	r1, #116	; 0x74
 800221a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800221e:	f7fe fbb1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 8002222:	2302      	movs	r3, #2
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <DisplayMainScreen+0x224>)
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	21b4      	movs	r1, #180	; 0xb4
 8002234:	2081      	movs	r0, #129	; 0x81
 8002236:	f7fe fc73 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 800223a:	2302      	movs	r3, #2
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <DisplayMainScreen+0x228>)
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	21c3      	movs	r1, #195	; 0xc3
 800224c:	2084      	movs	r0, #132	; 0x84
 800224e:	f7fe fc67 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 8002252:	23dc      	movs	r3, #220	; 0xdc
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f240 1331 	movw	r3, #305	; 0x131
 800225a:	22aa      	movs	r2, #170	; 0xaa
 800225c:	21d7      	movs	r1, #215	; 0xd7
 800225e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002262:	f7fe fbb0 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 8002266:	23db      	movs	r3, #219	; 0xdb
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f44f 7398 	mov.w	r3, #304	; 0x130
 800226e:	22ab      	movs	r2, #171	; 0xab
 8002270:	21d8      	movs	r1, #216	; 0xd8
 8002272:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002276:	f7fe fb85 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 800227a:	2302      	movs	r3, #2
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <DisplayMainScreen+0x22c>)
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228a:	21b4      	movs	r1, #180	; 0xb4
 800228c:	20f5      	movs	r0, #245	; 0xf5
 800228e:	f7fe fc47 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 8002292:	2302      	movs	r3, #2
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <DisplayMainScreen+0x228>)
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800229e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a2:	21c3      	movs	r1, #195	; 0xc3
 80022a4:	20e8      	movs	r0, #232	; 0xe8
 80022a6:	f7fe fc3b 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b0:	480a      	ldr	r0, [pc, #40]	; (80022dc <DisplayMainScreen+0x230>)
 80022b2:	f001 fed9 	bl	8004068 <HAL_GPIO_WritePin>
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	08008ed4 	.word	0x08008ed4
 80022c0:	08008ee8 	.word	0x08008ee8
 80022c4:	08008ef0 	.word	0x08008ef0
 80022c8:	08008ef8 	.word	0x08008ef8
 80022cc:	08008f00 	.word	0x08008f00
 80022d0:	08008f08 	.word	0x08008f08
 80022d4:	08008f14 	.word	0x08008f14
 80022d8:	08008f1c 	.word	0x08008f1c
 80022dc:	40020c00 	.word	0x40020c00

080022e0 <DisplayDabStatus>:
{
	ILI9341_Draw_String(290, 40, WHITE, BLACK, "E", 2);
}

void DisplayDabStatus(uint8_t rssi_val, uint8_t snr_val, uint16_t fib_er_val, uint8_t valid_val, uint8_t acq_val, uint8_t acq_int_val)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	4604      	mov	r4, r0
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	4603      	mov	r3, r0
 80022f4:	71bb      	strb	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	80bb      	strh	r3, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	70fb      	strb	r3, [r7, #3]
	ILI9341_Draw_String(20, 75, WHITE, BLACK, "RSSI:" , 2);
 80022fe:	2302      	movs	r3, #2
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <DisplayDabStatus+0x1b8>)
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	214b      	movs	r1, #75	; 0x4b
 800230e:	2014      	movs	r0, #20
 8002310:	f7fe fc06 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(63, 75, WHITE, BLACK, "   ", 2);
 8002314:	2302      	movs	r3, #2
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	4b60      	ldr	r3, [pc, #384]	; (800249c <DisplayDabStatus+0x1bc>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2300      	movs	r3, #0
 800231e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002322:	214b      	movs	r1, #75	; 0x4b
 8002324:	203f      	movs	r0, #63	; 0x3f
 8002326:	f7fe fbfb 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(63, 75, WHITE, BLACK, itoa(rssi_val, char_buffer, 10), 2);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	220a      	movs	r2, #10
 800232e:	495c      	ldr	r1, [pc, #368]	; (80024a0 <DisplayDabStatus+0x1c0>)
 8002330:	4618      	mov	r0, r3
 8002332:	f006 fa11 	bl	8008758 <itoa>
 8002336:	4603      	mov	r3, r0
 8002338:	2202      	movs	r2, #2
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002344:	214b      	movs	r1, #75	; 0x4b
 8002346:	203f      	movs	r0, #63	; 0x3f
 8002348:	f7fe fbea 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 75, WHITE, BLACK, "SNR:" , 2);
 800234c:	2302      	movs	r3, #2
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <DisplayDabStatus+0x1c4>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235a:	214b      	movs	r1, #75	; 0x4b
 800235c:	205a      	movs	r0, #90	; 0x5a
 800235e:	f7fe fbdf 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(123, 75, WHITE, BLACK, "   ", 2);
 8002362:	2302      	movs	r3, #2
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <DisplayDabStatus+0x1bc>)
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002370:	214b      	movs	r1, #75	; 0x4b
 8002372:	207b      	movs	r0, #123	; 0x7b
 8002374:	f7fe fbd4 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(123, 75, WHITE, BLACK, itoa(snr_val, char_buffer, 10), 2);
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	220a      	movs	r2, #10
 800237c:	4948      	ldr	r1, [pc, #288]	; (80024a0 <DisplayDabStatus+0x1c0>)
 800237e:	4618      	mov	r0, r3
 8002380:	f006 f9ea 	bl	8008758 <itoa>
 8002384:	4603      	mov	r3, r0
 8002386:	2202      	movs	r2, #2
 8002388:	9201      	str	r2, [sp, #4]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002392:	214b      	movs	r1, #75	; 0x4b
 8002394:	207b      	movs	r0, #123	; 0x7b
 8002396:	f7fe fbc3 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(160, 75, WHITE, BLACK, "FIB Er:", 2);
 800239a:	2302      	movs	r3, #2
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <DisplayDabStatus+0x1c8>)
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a8:	214b      	movs	r1, #75	; 0x4b
 80023aa:	20a0      	movs	r0, #160	; 0xa0
 80023ac:	f7fe fbb8 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, "        ", 2);
 80023b0:	2302      	movs	r3, #2
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <DisplayDabStatus+0x1cc>)
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2300      	movs	r3, #0
 80023ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023be:	214b      	movs	r1, #75	; 0x4b
 80023c0:	20dc      	movs	r0, #220	; 0xdc
 80023c2:	f7fe fbad 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, itoa(fib_er_val, char_buffer, 10), 2);
 80023c6:	88bb      	ldrh	r3, [r7, #4]
 80023c8:	220a      	movs	r2, #10
 80023ca:	4935      	ldr	r1, [pc, #212]	; (80024a0 <DisplayDabStatus+0x1c0>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f006 f9c3 	bl	8008758 <itoa>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2202      	movs	r2, #2
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e0:	214b      	movs	r1, #75	; 0x4b
 80023e2:	20dc      	movs	r0, #220	; 0xdc
 80023e4:	f7fe fb9c 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Valid:", 2);
 80023e8:	2302      	movs	r3, #2
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <DisplayDabStatus+0x1d0>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f6:	2128      	movs	r1, #40	; 0x28
 80023f8:	2014      	movs	r0, #20
 80023fa:	f7fe fb91 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(73, 40, WHITE, BLACK, itoa(valid_val, char_buffer, 10), 2);
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	220a      	movs	r2, #10
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <DisplayDabStatus+0x1c0>)
 8002404:	4618      	mov	r0, r3
 8002406:	f006 f9a7 	bl	8008758 <itoa>
 800240a:	4603      	mov	r3, r0
 800240c:	2202      	movs	r2, #2
 800240e:	9201      	str	r2, [sp, #4]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002418:	2128      	movs	r1, #40	; 0x28
 800241a:	2049      	movs	r0, #73	; 0x49
 800241c:	f7fe fb80 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 40, WHITE, BLACK, "ACQ:", 2);
 8002420:	2302      	movs	r3, #2
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <DisplayDabStatus+0x1d4>)
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2300      	movs	r3, #0
 800242a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242e:	2128      	movs	r1, #40	; 0x28
 8002430:	205a      	movs	r0, #90	; 0x5a
 8002432:	f7fe fb75 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(123, 40, WHITE, BLACK, itoa(acq_val, char_buffer, 10), 2);
 8002436:	7e3b      	ldrb	r3, [r7, #24]
 8002438:	220a      	movs	r2, #10
 800243a:	4919      	ldr	r1, [pc, #100]	; (80024a0 <DisplayDabStatus+0x1c0>)
 800243c:	4618      	mov	r0, r3
 800243e:	f006 f98b 	bl	8008758 <itoa>
 8002442:	4603      	mov	r3, r0
 8002444:	2202      	movs	r2, #2
 8002446:	9201      	str	r2, [sp, #4]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2300      	movs	r3, #0
 800244c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002450:	2128      	movs	r1, #40	; 0x28
 8002452:	207b      	movs	r0, #123	; 0x7b
 8002454:	f7fe fb64 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 40, WHITE, BLACK, "ACQ INT:", 2);
 8002458:	2302      	movs	r3, #2
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <DisplayDabStatus+0x1d8>)
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002466:	2128      	movs	r1, #40	; 0x28
 8002468:	2096      	movs	r0, #150	; 0x96
 800246a:	f7fe fb59 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 40, WHITE, BLACK, itoa(acq_int_val, char_buffer, 10), 2);
 800246e:	7f3b      	ldrb	r3, [r7, #28]
 8002470:	220a      	movs	r2, #10
 8002472:	490b      	ldr	r1, [pc, #44]	; (80024a0 <DisplayDabStatus+0x1c0>)
 8002474:	4618      	mov	r0, r3
 8002476:	f006 f96f 	bl	8008758 <itoa>
 800247a:	4603      	mov	r3, r0
 800247c:	2202      	movs	r2, #2
 800247e:	9201      	str	r2, [sp, #4]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002488:	2128      	movs	r1, #40	; 0x28
 800248a:	20dc      	movs	r0, #220	; 0xdc
 800248c:	f7fe fb48 	bl	8000b20 <ILI9341_Draw_String>
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	08008f40 	.word	0x08008f40
 800249c:	08008f24 	.word	0x08008f24
 80024a0:	20001220 	.word	0x20001220
 80024a4:	08008f48 	.word	0x08008f48
 80024a8:	08008f50 	.word	0x08008f50
 80024ac:	08008f58 	.word	0x08008f58
 80024b0:	08008f64 	.word	0x08008f64
 80024b4:	08008f6c 	.word	0x08008f6c
 80024b8:	08008f74 	.word	0x08008f74

080024bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_DMA_Init+0x3c>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <MX_DMA_Init+0x3c>)
 80024cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_DMA_Init+0x3c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	200f      	movs	r0, #15
 80024e4:	f001 f8d3 	bl	800368e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80024e8:	200f      	movs	r0, #15
 80024ea:	f001 f8ec 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	4b65      	ldr	r3, [pc, #404]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a64      	ldr	r2, [pc, #400]	; (80026ac <MX_GPIO_Init+0x1b0>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a5d      	ldr	r2, [pc, #372]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a56      	ldr	r2, [pc, #344]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b54      	ldr	r3, [pc, #336]	; (80026ac <MX_GPIO_Init+0x1b0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <MX_GPIO_Init+0x1b0>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a4f      	ldr	r2, [pc, #316]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a48      	ldr	r2, [pc, #288]	; (80026ac <MX_GPIO_Init+0x1b0>)
 800258c:	f043 0310 	orr.w	r3, r3, #16
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b46      	ldr	r3, [pc, #280]	; (80026ac <MX_GPIO_Init+0x1b0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <MX_GPIO_Init+0x1b0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a41      	ldr	r2, [pc, #260]	; (80026ac <MX_GPIO_Init+0x1b0>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <MX_GPIO_Init+0x1b0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2130      	movs	r1, #48	; 0x30
 80025be:	483c      	ldr	r0, [pc, #240]	; (80026b0 <MX_GPIO_Init+0x1b4>)
 80025c0:	f001 fd52 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ca:	483a      	ldr	r0, [pc, #232]	; (80026b4 <MX_GPIO_Init+0x1b8>)
 80025cc:	f001 fd4c 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80025d0:	2200      	movs	r2, #0
 80025d2:	f24f 7180 	movw	r1, #63360	; 0xf780
 80025d6:	4838      	ldr	r0, [pc, #224]	; (80026b8 <MX_GPIO_Init+0x1bc>)
 80025d8:	f001 fd46 	bl	8004068 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	2128      	movs	r1, #40	; 0x28
 80025e0:	4836      	ldr	r0, [pc, #216]	; (80026bc <MX_GPIO_Init+0x1c0>)
 80025e2:	f001 fd41 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80025e6:	2310      	movs	r3, #16
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4831      	ldr	r0, [pc, #196]	; (80026c0 <MX_GPIO_Init+0x1c4>)
 80025fa:	f001 fb99 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 80025fe:	2330      	movs	r3, #48	; 0x30
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4826      	ldr	r0, [pc, #152]	; (80026b0 <MX_GPIO_Init+0x1b4>)
 8002616:	f001 fb8b 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 800261a:	2311      	movs	r3, #17
 800261c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	4823      	ldr	r0, [pc, #140]	; (80026bc <MX_GPIO_Init+0x1c0>)
 800262e:	f001 fb7f 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8002632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	481a      	ldr	r0, [pc, #104]	; (80026b4 <MX_GPIO_Init+0x1b8>)
 800264c:	f001 fb70 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8002650:	f24f 7380 	movw	r3, #63360	; 0xf780
 8002654:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4813      	ldr	r0, [pc, #76]	; (80026b8 <MX_GPIO_Init+0x1bc>)
 800266a:	f001 fb61 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800266e:	2340      	movs	r3, #64	; 0x40
 8002670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <MX_GPIO_Init+0x1bc>)
 8002682:	f001 fb55 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8002686:	2328      	movs	r3, #40	; 0x28
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268a:	2301      	movs	r3, #1
 800268c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_GPIO_Init+0x1c0>)
 800269e:	f001 fb47 	bl	8003d30 <HAL_GPIO_Init>

}
 80026a2:	bf00      	nop
 80026a4:	3730      	adds	r7, #48	; 0x30
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020000 	.word	0x40020000

080026c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <MX_I2C1_Init+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_I2C1_Init+0x58>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_I2C1_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_I2C1_Init+0x50>)
 80026e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_I2C1_Init+0x50>)
 8002702:	f001 fccb 	bl	800409c <HAL_I2C_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800270c:	f000 fa10 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20001240 	.word	0x20001240
 8002718:	40005400 	.word	0x40005400
 800271c:	000186a0 	.word	0x000186a0

08002720 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <MX_I2C3_Init+0x50>)
 8002726:	4a13      	ldr	r2, [pc, #76]	; (8002774 <MX_I2C3_Init+0x54>)
 8002728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_I2C3_Init+0x50>)
 800272c:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MX_I2C3_Init+0x58>)
 800272e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <MX_I2C3_Init+0x50>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_I2C3_Init+0x50>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_I2C3_Init+0x50>)
 800273e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002742:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <MX_I2C3_Init+0x50>)
 8002746:	2200      	movs	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_I2C3_Init+0x50>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <MX_I2C3_Init+0x50>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_I2C3_Init+0x50>)
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_I2C3_Init+0x50>)
 800275e:	f001 fc9d 	bl	800409c <HAL_I2C_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002768:	f000 f9e2 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20001294 	.word	0x20001294
 8002774:	40005c00 	.word	0x40005c00
 8002778:	000186a0 	.word	0x000186a0

0800277c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4a      	ldr	r2, [pc, #296]	; (80028c4 <HAL_I2C_MspInit+0x148>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12c      	bne.n	80027f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a48      	ldr	r2, [pc, #288]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027be:	2312      	movs	r3, #18
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ca:	2304      	movs	r3, #4
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	483d      	ldr	r0, [pc, #244]	; (80028cc <HAL_I2C_MspInit+0x150>)
 80027d6:	f001 faab 	bl	8003d30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 80027e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80027f6:	e060      	b.n	80028ba <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_I2C_MspInit+0x154>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d15b      	bne.n	80028ba <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 800283a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002840:	2312      	movs	r3, #18
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800284c:	2304      	movs	r3, #4
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	481f      	ldr	r0, [pc, #124]	; (80028d4 <HAL_I2C_MspInit+0x158>)
 8002858:	f001 fa6a 	bl	8003d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 800285c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002862:	2312      	movs	r3, #18
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800286e:	2304      	movs	r3, #4
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4619      	mov	r1, r3
 8002878:	4817      	ldr	r0, [pc, #92]	; (80028d8 <HAL_I2C_MspInit+0x15c>)
 800287a:	f001 fa59 	bl	8003d30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_I2C_MspInit+0x14c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2048      	movs	r0, #72	; 0x48
 80028a0:	f000 fef5 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80028a4:	2048      	movs	r0, #72	; 0x48
 80028a6:	f000 ff0e 	bl	80036c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2049      	movs	r0, #73	; 0x49
 80028b0:	f000 feed 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80028b4:	2049      	movs	r0, #73	; 0x49
 80028b6:	f000 ff06 	bl	80036c6 <HAL_NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3730      	adds	r7, #48	; 0x30
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40005400 	.word	0x40005400
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40005c00 	.word	0x40005c00
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020000 	.word	0x40020000

080028dc <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	led_number++;
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <Leds_Control_Blink+0x110>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <Leds_Control_Blink+0x110>)
 80028ea:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <Leds_Control_Blink+0x110>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d102      	bne.n	80028fa <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <Leds_Control_Blink+0x110>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 80028fa:	4b3c      	ldr	r3, [pc, #240]	; (80029ec <Leds_Control_Blink+0x110>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	3b01      	subs	r3, #1
 8002900:	2b03      	cmp	r3, #3
 8002902:	d86f      	bhi.n	80029e4 <Leds_Control_Blink+0x108>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <Leds_Control_Blink+0x30>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	0800294f 	.word	0x0800294f
 8002914:	08002981 	.word	0x08002981
 8002918:	080029b3 	.word	0x080029b3
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002922:	4833      	ldr	r0, [pc, #204]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002924:	f001 fba0 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292e:	4830      	ldr	r0, [pc, #192]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002930:	f001 fb9a 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002934:	2200      	movs	r2, #0
 8002936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800293a:	482d      	ldr	r0, [pc, #180]	; (80029f0 <Leds_Control_Blink+0x114>)
 800293c:	f001 fb94 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002946:	482a      	ldr	r0, [pc, #168]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002948:	f001 fb8e 	bl	8004068 <HAL_GPIO_WritePin>
		break;
 800294c:	e04b      	b.n	80029e6 <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 800294e:	2200      	movs	r2, #0
 8002950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002954:	4826      	ldr	r0, [pc, #152]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002956:	f001 fb87 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 800295a:	2201      	movs	r2, #1
 800295c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002960:	4823      	ldr	r0, [pc, #140]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002962:	f001 fb81 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002966:	2200      	movs	r2, #0
 8002968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296c:	4820      	ldr	r0, [pc, #128]	; (80029f0 <Leds_Control_Blink+0x114>)
 800296e:	f001 fb7b 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002972:	2200      	movs	r2, #0
 8002974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002978:	481d      	ldr	r0, [pc, #116]	; (80029f0 <Leds_Control_Blink+0x114>)
 800297a:	f001 fb75 	bl	8004068 <HAL_GPIO_WritePin>
		break;
 800297e:	e032      	b.n	80029e6 <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002986:	481a      	ldr	r0, [pc, #104]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002988:	f001 fb6e 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002992:	4817      	ldr	r0, [pc, #92]	; (80029f0 <Leds_Control_Blink+0x114>)
 8002994:	f001 fb68 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800299e:	4814      	ldr	r0, [pc, #80]	; (80029f0 <Leds_Control_Blink+0x114>)
 80029a0:	f001 fb62 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029aa:	4811      	ldr	r0, [pc, #68]	; (80029f0 <Leds_Control_Blink+0x114>)
 80029ac:	f001 fb5c 	bl	8004068 <HAL_GPIO_WritePin>
		break;
 80029b0:	e019      	b.n	80029e6 <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <Leds_Control_Blink+0x114>)
 80029ba:	f001 fb55 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <Leds_Control_Blink+0x114>)
 80029c6:	f001 fb4f 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 80029ca:	2200      	movs	r2, #0
 80029cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029d0:	4807      	ldr	r0, [pc, #28]	; (80029f0 <Leds_Control_Blink+0x114>)
 80029d2:	f001 fb49 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <Leds_Control_Blink+0x114>)
 80029de:	f001 fb43 	bl	8004068 <HAL_GPIO_WritePin>
		break;
 80029e2:	e000      	b.n	80029e6 <Leds_Control_Blink+0x10a>
	default:

		break;
 80029e4:	bf00      	nop
	}
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000008 	.word	0x20000008
 80029f0:	40020c00 	.word	0x40020c00

080029f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029f8:	f000 fcd8 	bl	80033ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029fc:	f000 f82e 	bl	8002a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a00:	f7ff fd7c 	bl	80024fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002a04:	f7ff fd5a 	bl	80024bc <MX_DMA_Init>
  MX_I2C1_Init();
 8002a08:	f7ff fe5c 	bl	80026c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a0c:	f7ff fe88 	bl	8002720 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002a10:	f000 f894 	bl	8002b3c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a14:	f000 f8c8 	bl	8002ba8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002a18:	f000 fa66 	bl	8002ee8 <MX_TIM3_Init>
  MX_UART5_Init();
 8002a1c:	f000 fba8 	bl	8003170 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002a20:	f000 fbd0 	bl	80031c4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002a24:	f000 faba 	bl	8002f9c <MX_TIM10_Init>
  MX_TIM11_Init();
 8002a28:	f000 fadc 	bl	8002fe4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4808      	ldr	r0, [pc, #32]	; (8002a50 <main+0x5c>)
 8002a30:	f7ff fb16 	bl	8002060 <send_debug_msg>
  HAL_TIM_Base_Start_IT(&htim10);
 8002a34:	4807      	ldr	r0, [pc, #28]	; (8002a54 <main+0x60>)
 8002a36:	f004 fcff 	bl	8007438 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8002a3a:	4807      	ldr	r0, [pc, #28]	; (8002a58 <main+0x64>)
 8002a3c:	f004 fcfc 	bl	8007438 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8002a40:	f7fd fd4c 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 8002a44:	f7ff fb32 	bl	80020ac <DisplayMainScreen>



  Si468x_init();
 8002a48:	f7fe fb34 	bl	80010b4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <main+0x58>
 8002a4e:	bf00      	nop
 8002a50:	08008f80 	.word	0x08008f80
 8002a54:	20001440 	.word	0x20001440
 8002a58:	20001488 	.word	0x20001488

08002a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b094      	sub	sp, #80	; 0x50
 8002a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a62:	f107 0320 	add.w	r3, r7, #32
 8002a66:	2230      	movs	r2, #48	; 0x30
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f005 fe76 	bl	800875c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <SystemClock_Config+0xcc>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <SystemClock_Config+0xcc>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <SystemClock_Config+0xcc>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <SystemClock_Config+0xd0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <SystemClock_Config+0xd0>)
 8002aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <SystemClock_Config+0xd0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002acc:	2304      	movs	r3, #4
 8002ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002ad0:	23a0      	movs	r3, #160	; 0xa0
 8002ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002adc:	f107 0320 	add.w	r3, r7, #32
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 f8fb 	bl	8005cdc <HAL_RCC_OscConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002aec:	f000 f820 	bl	8002b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af0:	230f      	movs	r3, #15
 8002af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af4:	2302      	movs	r3, #2
 8002af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 fb5c 	bl	80061cc <HAL_RCC_ClockConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b1a:	f000 f809 	bl	8002b30 <Error_Handler>
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3750      	adds	r7, #80	; 0x50
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000

08002b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <Error_Handler+0x8>
	...

08002b3c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b42:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <MX_SPI1_Init+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b70:	2218      	movs	r2, #24
 8002b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b88:	220a      	movs	r2, #10
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b8e:	f003 fd3d 	bl	800660c <HAL_SPI_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b98:	f7ff ffca 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200012e8 	.word	0x200012e8
 8002ba4:	40013000 	.word	0x40013000

08002ba8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <MX_SPI2_Init+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_SPI2_Init+0x64>)
 8002bfa:	f003 fd07 	bl	800660c <HAL_SPI_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c04:	f7ff ff94 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20001340 	.word	0x20001340
 8002c10:	40003800 	.word	0x40003800

08002c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_SPI_MspInit+0x154>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12c      	bne.n	8002c90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	4a4b      	ldr	r2, [pc, #300]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c44:	6453      	str	r3, [r2, #68]	; 0x44
 8002c46:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	4b45      	ldr	r3, [pc, #276]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a44      	ldr	r2, [pc, #272]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8002c6e:	23e0      	movs	r3, #224	; 0xe0
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c7e:	2305      	movs	r3, #5
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	4839      	ldr	r0, [pc, #228]	; (8002d70 <HAL_SPI_MspInit+0x15c>)
 8002c8a:	f001 f851 	bl	8003d30 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c8e:	e066      	b.n	8002d5e <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_SPI_MspInit+0x160>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d161      	bne.n	8002d5e <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a32      	ldr	r2, [pc, #200]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_SPI_MspInit+0x158>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002cd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	4619      	mov	r1, r3
 8002cee:	4822      	ldr	r0, [pc, #136]	; (8002d78 <HAL_SPI_MspInit+0x164>)
 8002cf0:	f001 f81e 	bl	8003d30 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_SPI_MspInit+0x16c>)
 8002cf8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d12:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002d32:	4812      	ldr	r0, [pc, #72]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d34:	f000 fce2 	bl	80036fc <HAL_DMA_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002d3e:	f7ff fef7 	bl	8002b30 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d46:	649a      	str	r2, [r3, #72]	; 0x48
 8002d48:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_SPI_MspInit+0x168>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2024      	movs	r0, #36	; 0x24
 8002d54:	f000 fc9b 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002d58:	2024      	movs	r0, #36	; 0x24
 8002d5a:	f000 fcb4 	bl	80036c6 <HAL_NVIC_EnableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40013000 	.word	0x40013000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40003800 	.word	0x40003800
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	20001398 	.word	0x20001398
 8002d80:	40026070 	.word	0x40026070

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <NMI_Handler+0x4>

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e20:	f000 fb16 	bl	8003450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DMA1_Stream4_IRQHandler+0x10>)
 8002e2e:	f000 fd35 	bl	800389c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20001398 	.word	0x20001398

08002e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e42:	f004 fbb8 	bl	80075b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20001440 	.word	0x20001440

08002e50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e56:	f004 fbae 	bl	80075b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20001488 	.word	0x20001488

08002e64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <SPI2_IRQHandler+0x10>)
 8002e6a:	f004 f847 	bl	8006efc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20001340 	.word	0x20001340

08002e78 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <I2C3_EV_IRQHandler+0x10>)
 8002e7e:	f001 fa51 	bl	8004324 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20001294 	.word	0x20001294

08002e8c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <I2C3_ER_IRQHandler+0x10>)
 8002e92:	f001 fbb8 	bl	8004606 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20001294 	.word	0x20001294

08002ea0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 8002eb2:	f7ff fd13 	bl	80028dc <Leds_Control_Blink>

	}
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40014800 	.word	0x40014800

08002ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <SystemInit+0x20>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <SystemInit+0x20>)
 8002ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eee:	f107 0320 	add.w	r3, r7, #32
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	615a      	str	r2, [r3, #20]
 8002f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <MX_TIM3_Init+0xb0>)
 8002f0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f16:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f30:	4818      	ldr	r0, [pc, #96]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f32:	f004 faf1 	bl	8007518 <HAL_TIM_PWM_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002f3c:	f7ff fdf8 	bl	8002b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f48:	f107 0320 	add.w	r3, r7, #32
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4811      	ldr	r0, [pc, #68]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f50:	f004 ff74 	bl	8007e3c <HAL_TIMEx_MasterConfigSynchronization>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002f5a:	f7ff fde9 	bl	8002b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5e:	2360      	movs	r3, #96	; 0x60
 8002f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2208      	movs	r2, #8
 8002f72:	4619      	mov	r1, r3
 8002f74:	4807      	ldr	r0, [pc, #28]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f76:	f004 fc27 	bl	80077c8 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002f80:	f7ff fdd6 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f84:	4803      	ldr	r0, [pc, #12]	; (8002f94 <MX_TIM3_Init+0xac>)
 8002f86:	f000 f8b9 	bl	80030fc <HAL_TIM_MspPostInit>

}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	; 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200013f8 	.word	0x200013f8
 8002f98:	40000400 	.word	0x40000400

08002f9c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <MX_TIM10_Init+0x44>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fa8:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002fac:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fb6:	f240 2257 	movw	r2, #599	; 0x257
 8002fba:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_TIM10_Init+0x40>)
 8002fca:	f004 f9e5 	bl	8007398 <HAL_TIM_Base_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002fd4:	f7ff fdac 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20001440 	.word	0x20001440
 8002fe0:	40014400 	.word	0x40014400

08002fe4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <MX_TIM11_Init+0x40>)
 8002fea:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <MX_TIM11_Init+0x44>)
 8002fec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <MX_TIM11_Init+0x40>)
 8002ff0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002ff4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <MX_TIM11_Init+0x40>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <MX_TIM11_Init+0x40>)
 8002ffe:	f240 5213 	movw	r2, #1299	; 0x513
 8003002:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <MX_TIM11_Init+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <MX_TIM11_Init+0x40>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003010:	4804      	ldr	r0, [pc, #16]	; (8003024 <MX_TIM11_Init+0x40>)
 8003012:	f004 f9c1 	bl	8007398 <HAL_TIM_Base_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800301c:	f7ff fd88 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20001488 	.word	0x20001488
 8003028:	40014800 	.word	0x40014800

0800302c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <HAL_TIM_PWM_MspInit+0x3c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10d      	bne.n	800305a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_TIM_PWM_MspInit+0x40>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_TIM_PWM_MspInit+0x40>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_TIM_PWM_MspInit+0x40>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40000400 	.word	0x40000400
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_TIM_Base_MspInit+0x80>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d116      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_TIM_Base_MspInit+0x84>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_TIM_Base_MspInit+0x84>)
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_TIM_Base_MspInit+0x84>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	2019      	movs	r0, #25
 80030a4:	f000 faf3 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030a8:	2019      	movs	r0, #25
 80030aa:	f000 fb0c 	bl	80036c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80030ae:	e01a      	b.n	80030e6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_TIM_Base_MspInit+0x88>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d115      	bne.n	80030e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_TIM_Base_MspInit+0x84>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_TIM_Base_MspInit+0x84>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_TIM_Base_MspInit+0x84>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	201a      	movs	r0, #26
 80030dc:	f000 fad7 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80030e0:	201a      	movs	r0, #26
 80030e2:	f000 faf0 	bl	80036c6 <HAL_NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40014800 	.word	0x40014800

080030fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a12      	ldr	r2, [pc, #72]	; (8003164 <HAL_TIM_MspPostInit+0x68>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d11e      	bne.n	800315c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_TIM_MspPostInit+0x6c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_TIM_MspPostInit+0x6c>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_TIM_MspPostInit+0x6c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 800313a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800314c:	2302      	movs	r3, #2
 800314e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	4619      	mov	r1, r3
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_TIM_MspPostInit+0x70>)
 8003158:	f000 fdea 	bl	8003d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40000400 	.word	0x40000400
 8003168:	40023800 	.word	0x40023800
 800316c:	40020800 	.word	0x40020800

08003170 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <MX_UART5_Init+0x4c>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <MX_UART5_Init+0x50>)
 8003178:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <MX_UART5_Init+0x4c>)
 800317c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003180:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <MX_UART5_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <MX_UART5_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <MX_UART5_Init+0x4c>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <MX_UART5_Init+0x4c>)
 8003196:	220c      	movs	r2, #12
 8003198:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <MX_UART5_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <MX_UART5_Init+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <MX_UART5_Init+0x4c>)
 80031a8:	f004 fed8 	bl	8007f5c <HAL_UART_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80031b2:	f7ff fcbd 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200014d0 	.word	0x200014d0
 80031c0:	40005000 	.word	0x40005000

080031c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_USART3_UART_Init+0x50>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031fc:	f004 feae 	bl	8007f5c <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f7ff fc93 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20001514 	.word	0x20001514
 8003214:	40004800 	.word	0x40004800

08003218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_UART_MspInit+0x128>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d14b      	bne.n	80032d2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_UART_MspInit+0x12c>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <HAL_UART_MspInit+0x12c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a39      	ldr	r2, [pc, #228]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b33      	ldr	r3, [pc, #204]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <HAL_UART_MspInit+0x12c>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b30      	ldr	r3, [pc, #192]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800328e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032a0:	2308      	movs	r3, #8
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	4619      	mov	r1, r3
 80032aa:	4827      	ldr	r0, [pc, #156]	; (8003348 <HAL_UART_MspInit+0x130>)
 80032ac:	f000 fd40 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032b0:	2304      	movs	r3, #4
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032bc:	2303      	movs	r3, #3
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032c0:	2308      	movs	r3, #8
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c4:	f107 031c 	add.w	r3, r7, #28
 80032c8:	4619      	mov	r1, r3
 80032ca:	4820      	ldr	r0, [pc, #128]	; (800334c <HAL_UART_MspInit+0x134>)
 80032cc:	f000 fd30 	bl	8003d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032d0:	e031      	b.n	8003336 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_UART_MspInit+0x138>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d12c      	bne.n	8003336 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <HAL_UART_MspInit+0x12c>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_UART_MspInit+0x12c>)
 80032e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ea:	6413      	str	r3, [r2, #64]	; 0x40
 80032ec:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_UART_MspInit+0x12c>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_UART_MspInit+0x12c>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a10      	ldr	r2, [pc, #64]	; (8003344 <HAL_UART_MspInit+0x12c>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_UART_MspInit+0x12c>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8003314:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003326:	2307      	movs	r3, #7
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	4808      	ldr	r0, [pc, #32]	; (8003354 <HAL_UART_MspInit+0x13c>)
 8003332:	f000 fcfd 	bl	8003d30 <HAL_GPIO_Init>
}
 8003336:	bf00      	nop
 8003338:	3730      	adds	r7, #48	; 0x30
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40005000 	.word	0x40005000
 8003344:	40023800 	.word	0x40023800
 8003348:	40020800 	.word	0x40020800
 800334c:	40020c00 	.word	0x40020c00
 8003350:	40004800 	.word	0x40004800
 8003354:	40020400 	.word	0x40020400

08003358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800335c:	480d      	ldr	r0, [pc, #52]	; (8003394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800335e:	490e      	ldr	r1, [pc, #56]	; (8003398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003360:	4a0e      	ldr	r2, [pc, #56]	; (800339c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003364:	e002      	b.n	800336c <LoopCopyDataInit>

08003366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336a:	3304      	adds	r3, #4

0800336c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800336c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003370:	d3f9      	bcc.n	8003366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003372:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003374:	4c0b      	ldr	r4, [pc, #44]	; (80033a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003378:	e001      	b.n	800337e <LoopFillZerobss>

0800337a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800337c:	3204      	adds	r2, #4

0800337e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003380:	d3fb      	bcc.n	800337a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003382:	f7ff fd9f 	bl	8002ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003386:	f005 f9ab 	bl	80086e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800338a:	f7ff fb33 	bl	80029f4 <main>
  bx  lr    
 800338e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003398:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800339c:	0800af54 	.word	0x0800af54
  ldr r2, =_sbss
 80033a0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80033a4:	2000155c 	.word	0x2000155c

080033a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a8:	e7fe      	b.n	80033a8 <ADC_IRQHandler>
	...

080033ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <HAL_Init+0x40>)
 80033b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <HAL_Init+0x40>)
 80033c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_Init+0x40>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a07      	ldr	r2, [pc, #28]	; (80033ec <HAL_Init+0x40>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d4:	2003      	movs	r0, #3
 80033d6:	f000 f94f 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033da:	200f      	movs	r0, #15
 80033dc:	f000 f808 	bl	80033f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e0:	f7ff fcd0 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023c00 	.word	0x40023c00

080033f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_InitTick+0x54>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_InitTick+0x58>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003406:	fbb3 f3f1 	udiv	r3, r3, r1
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f967 	bl	80036e2 <HAL_SYSTICK_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e00e      	b.n	800343c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d80a      	bhi.n	800343a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003424:	2200      	movs	r2, #0
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f000 f92f 	bl	800368e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003430:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_InitTick+0x5c>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000000c 	.word	0x2000000c
 8003448:	20000014 	.word	0x20000014
 800344c:	20000010 	.word	0x20000010

08003450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_IncTick+0x20>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_IncTick+0x24>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4413      	add	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_IncTick+0x24>)
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000014 	.word	0x20000014
 8003474:	20001558 	.word	0x20001558

08003478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return uwTick;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_GetTick+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20001558 	.word	0x20001558

08003490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff ffee 	bl	8003478 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d005      	beq.n	80034b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_Delay+0x44>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034b6:	bf00      	nop
 80034b8:	f7ff ffde 	bl	8003478 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d8f7      	bhi.n	80034b8 <HAL_Delay+0x28>
  {
  }
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000014 	.word	0x20000014

080034d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f4:	4013      	ands	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	60d3      	str	r3, [r2, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <__NVIC_GetPriorityGrouping+0x18>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	f003 0307 	and.w	r3, r3, #7
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	2b00      	cmp	r3, #0
 800354c:	db0b      	blt.n	8003566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	4907      	ldr	r1, [pc, #28]	; (8003574 <__NVIC_EnableIRQ+0x38>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2001      	movs	r0, #1
 800355e:	fa00 f202 	lsl.w	r2, r0, r2
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000e100 	.word	0xe000e100

08003578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0a      	blt.n	80035a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	490c      	ldr	r1, [pc, #48]	; (80035c4 <__NVIC_SetPriority+0x4c>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	440b      	add	r3, r1
 800359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a0:	e00a      	b.n	80035b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <__NVIC_SetPriority+0x50>)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	3b04      	subs	r3, #4
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	761a      	strb	r2, [r3, #24]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f1c3 0307 	rsb	r3, r3, #7
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	bf28      	it	cs
 80035ea:	2304      	movcs	r3, #4
 80035ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d902      	bls.n	80035fc <NVIC_EncodePriority+0x30>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3b03      	subs	r3, #3
 80035fa:	e000      	b.n	80035fe <NVIC_EncodePriority+0x32>
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	401a      	ands	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003614:	f04f 31ff 	mov.w	r1, #4294967295
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43d9      	mvns	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	4313      	orrs	r3, r2
         );
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003644:	d301      	bcc.n	800364a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003646:	2301      	movs	r3, #1
 8003648:	e00f      	b.n	800366a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <SysTick_Config+0x40>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003652:	210f      	movs	r1, #15
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f7ff ff8e 	bl	8003578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SysTick_Config+0x40>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SysTick_Config+0x40>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	e000e010 	.word	0xe000e010

08003678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff29 	bl	80034d8 <__NVIC_SetPriorityGrouping>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff3e 	bl	8003520 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff8e 	bl	80035cc <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5d 	bl	8003578 <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff31 	bl	800353c <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffa2 	bl	8003634 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7ff feb6 	bl	8003478 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e099      	b.n	800384c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003738:	e00f      	b.n	800375a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800373a:	f7ff fe9d 	bl	8003478 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b05      	cmp	r3, #5
 8003746:	d908      	bls.n	800375a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2203      	movs	r2, #3
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e078      	b.n	800384c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e8      	bne.n	800373a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <HAL_DMA_Init+0x158>)
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d107      	bne.n	80037c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4313      	orrs	r3, r2
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d117      	bne.n	800381e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa19 	bl	8003c38 <DMA_CheckFifoParam>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800381a:	2301      	movs	r3, #1
 800381c:	e016      	b.n	800384c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9d0 	bl	8003bcc <DMA_CalcBaseAndBitshift>
 800382c:	4603      	mov	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	223f      	movs	r2, #63	; 0x3f
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	f010803f 	.word	0xf010803f

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d004      	beq.n	8003876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00c      	b.n	8003890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2205      	movs	r2, #5
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a8:	4b8e      	ldr	r3, [pc, #568]	; (8003ae4 <HAL_DMA_IRQHandler+0x248>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a8e      	ldr	r2, [pc, #568]	; (8003ae8 <HAL_DMA_IRQHandler+0x24c>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	0a9b      	lsrs	r3, r3, #10
 80038b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c6:	2208      	movs	r2, #8
 80038c8:	409a      	lsls	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01a      	beq.n	8003908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	2208      	movs	r2, #8
 80038f6:	409a      	lsls	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2201      	movs	r2, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	2201      	movs	r2, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f043 0202 	orr.w	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2204      	movs	r2, #4
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	2204      	movs	r2, #4
 8003962:	409a      	lsls	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f043 0204 	orr.w	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	2210      	movs	r2, #16
 800397a:	409a      	lsls	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d043      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d03c      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	2210      	movs	r2, #16
 8003998:	409a      	lsls	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d024      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
 80039ca:	e01f      	b.n	8003a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
 80039dc:	e016      	b.n	8003a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0208 	bic.w	r2, r2, #8
 80039fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2220      	movs	r2, #32
 8003a12:	409a      	lsls	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 808f 	beq.w	8003b3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8087 	beq.w	8003b3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	2220      	movs	r2, #32
 8003a34:	409a      	lsls	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d136      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0216 	bic.w	r2, r2, #22
 8003a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x1da>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	223f      	movs	r2, #63	; 0x3f
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d07e      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
        }
        return;
 8003ab2:	e079      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d031      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
 8003ae0:	e02c      	b.n	8003b3c <HAL_DMA_IRQHandler+0x2a0>
 8003ae2:	bf00      	nop
 8003ae4:	2000000c 	.word	0x2000000c
 8003ae8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d023      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	4798      	blx	r3
 8003afc:	e01e      	b.n	8003b3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0210 	bic.w	r2, r2, #16
 8003b1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d032      	beq.n	8003baa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2205      	movs	r2, #5
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d307      	bcc.n	8003b84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f2      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x2cc>
 8003b82:	e000      	b.n	8003b86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ba8:	bf00      	nop
    }
  }
}
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bbe:	b2db      	uxtb	r3, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	3b10      	subs	r3, #16
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <DMA_CalcBaseAndBitshift+0x64>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <DMA_CalcBaseAndBitshift+0x68>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d909      	bls.n	8003c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c0c:	e007      	b.n	8003c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	aaaaaaab 	.word	0xaaaaaaab
 8003c34:	0800af14 	.word	0x0800af14

08003c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11f      	bne.n	8003c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d856      	bhi.n	8003d06 <DMA_CheckFifoParam+0xce>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <DMA_CheckFifoParam+0x28>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c83 	.word	0x08003c83
 8003c68:	08003c71 	.word	0x08003c71
 8003c6c:	08003d07 	.word	0x08003d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d046      	beq.n	8003d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c80:	e043      	b.n	8003d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c8a:	d140      	bne.n	8003d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e03d      	b.n	8003d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	d121      	bne.n	8003ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d837      	bhi.n	8003d12 <DMA_CheckFifoParam+0xda>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <DMA_CheckFifoParam+0x70>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cbf 	.word	0x08003cbf
 8003cb0:	08003cb9 	.word	0x08003cb9
 8003cb4:	08003cd1 	.word	0x08003cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e030      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d025      	beq.n	8003d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cce:	e022      	b.n	8003d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd8:	d11f      	bne.n	8003d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cde:	e01c      	b.n	8003d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d903      	bls.n	8003cee <DMA_CheckFifoParam+0xb6>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d003      	beq.n	8003cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cec:	e018      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf2:	e015      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e00b      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d06:	bf00      	nop
 8003d08:	e00a      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e008      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e006      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
 8003d14:	e004      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop

08003d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e16b      	b.n	8004024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	f040 815a 	bne.w	800401e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d005      	beq.n	8003d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d130      	bne.n	8003de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db8:	2201      	movs	r2, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 0201 	and.w	r2, r3, #1
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d017      	beq.n	8003e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d123      	bne.n	8003e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	08da      	lsrs	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3208      	adds	r2, #8
 8003e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	220f      	movs	r2, #15
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	08da      	lsrs	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0203 	and.w	r2, r3, #3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80b4 	beq.w	800401e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b60      	ldr	r3, [pc, #384]	; (800403c <HAL_GPIO_Init+0x30c>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4a5f      	ldr	r2, [pc, #380]	; (800403c <HAL_GPIO_Init+0x30c>)
 8003ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec6:	4b5d      	ldr	r3, [pc, #372]	; (800403c <HAL_GPIO_Init+0x30c>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_GPIO_Init+0x310>)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a52      	ldr	r2, [pc, #328]	; (8004044 <HAL_GPIO_Init+0x314>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02b      	beq.n	8003f56 <HAL_GPIO_Init+0x226>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a51      	ldr	r2, [pc, #324]	; (8004048 <HAL_GPIO_Init+0x318>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d025      	beq.n	8003f52 <HAL_GPIO_Init+0x222>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a50      	ldr	r2, [pc, #320]	; (800404c <HAL_GPIO_Init+0x31c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <HAL_GPIO_Init+0x21e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4f      	ldr	r2, [pc, #316]	; (8004050 <HAL_GPIO_Init+0x320>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d019      	beq.n	8003f4a <HAL_GPIO_Init+0x21a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a4e      	ldr	r2, [pc, #312]	; (8004054 <HAL_GPIO_Init+0x324>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_Init+0x216>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a4d      	ldr	r2, [pc, #308]	; (8004058 <HAL_GPIO_Init+0x328>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_GPIO_Init+0x212>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4c      	ldr	r2, [pc, #304]	; (800405c <HAL_GPIO_Init+0x32c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_Init+0x20e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	; (8004060 <HAL_GPIO_Init+0x330>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_GPIO_Init+0x20a>
 8003f36:	2307      	movs	r3, #7
 8003f38:	e00e      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	e00c      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f3e:	2306      	movs	r3, #6
 8003f40:	e00a      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f42:	2305      	movs	r3, #5
 8003f44:	e008      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f46:	2304      	movs	r3, #4
 8003f48:	e006      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e004      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e002      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_GPIO_Init+0x228>
 8003f56:	2300      	movs	r3, #0
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	f002 0203 	and.w	r2, r2, #3
 8003f5e:	0092      	lsls	r2, r2, #2
 8003f60:	4093      	lsls	r3, r2
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f68:	4935      	ldr	r1, [pc, #212]	; (8004040 <HAL_GPIO_Init+0x310>)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	3302      	adds	r3, #2
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f9a:	4a32      	ldr	r2, [pc, #200]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fee:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004018:	4a12      	ldr	r2, [pc, #72]	; (8004064 <HAL_GPIO_Init+0x334>)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3301      	adds	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	f67f ae90 	bls.w	8003d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3724      	adds	r7, #36	; 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	40013800 	.word	0x40013800
 8004044:	40020000 	.word	0x40020000
 8004048:	40020400 	.word	0x40020400
 800404c:	40020800 	.word	0x40020800
 8004050:	40020c00 	.word	0x40020c00
 8004054:	40021000 	.word	0x40021000
 8004058:	40021400 	.word	0x40021400
 800405c:	40021800 	.word	0x40021800
 8004060:	40021c00 	.word	0x40021c00
 8004064:	40013c00 	.word	0x40013c00

08004068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
 8004074:	4613      	mov	r3, r2
 8004076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407e:	887a      	ldrh	r2, [r7, #2]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004084:	e003      	b.n	800408e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e12b      	b.n	8004306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fb5a 	bl	800277c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004100:	f002 fa5c 	bl	80065bc <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a81      	ldr	r2, [pc, #516]	; (8004310 <HAL_I2C_Init+0x274>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d807      	bhi.n	8004120 <HAL_I2C_Init+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a80      	ldr	r2, [pc, #512]	; (8004314 <HAL_I2C_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	bf94      	ite	ls
 8004118:	2301      	movls	r3, #1
 800411a:	2300      	movhi	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e006      	b.n	800412e <HAL_I2C_Init+0x92>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a7d      	ldr	r2, [pc, #500]	; (8004318 <HAL_I2C_Init+0x27c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0e7      	b.n	8004306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a78      	ldr	r2, [pc, #480]	; (800431c <HAL_I2C_Init+0x280>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0c9b      	lsrs	r3, r3, #18
 8004140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_I2C_Init+0x274>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <HAL_I2C_Init+0xd4>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	e009      	b.n	8004184 <HAL_I2C_Init+0xe8>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4a69      	ldr	r2, [pc, #420]	; (8004320 <HAL_I2C_Init+0x284>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	495c      	ldr	r1, [pc, #368]	; (8004310 <HAL_I2C_Init+0x274>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d819      	bhi.n	80041d8 <HAL_I2C_Init+0x13c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e59      	subs	r1, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_I2C_Init+0x138>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e59      	subs	r1, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	e051      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e04f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_I2C_Init+0x168>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e012      	b.n	800422a <HAL_I2C_Init+0x18e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	0099      	lsls	r1, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Init+0x196>
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10e      	bne.n	8004258 <HAL_I2C_Init+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e58      	subs	r0, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	440b      	add	r3, r1
 8004248:	fbb0 f3f3 	udiv	r3, r0, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	0099      	lsls	r1, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	fbb0 f3f3 	udiv	r3, r0, r3
 800426e:	3301      	adds	r3, #1
 8004270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6809      	ldr	r1, [r1, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6911      	ldr	r1, [r2, #16]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	000186a0 	.word	0x000186a0
 8004314:	001e847f 	.word	0x001e847f
 8004318:	003d08ff 	.word	0x003d08ff
 800431c:	431bde83 	.word	0x431bde83
 8004320:	10624dd3 	.word	0x10624dd3

08004324 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004344:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b10      	cmp	r3, #16
 8004352:	d003      	beq.n	800435c <HAL_I2C_EV_IRQHandler+0x38>
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	f040 80c1 	bne.w	80044de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <HAL_I2C_EV_IRQHandler+0x6e>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800437c:	d003      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0x62>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004384:	d101      	bne.n	800438a <HAL_I2C_EV_IRQHandler+0x66>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x68>
 800438a:	2300      	movs	r3, #0
 800438c:	2b01      	cmp	r3, #1
 800438e:	f000 8132 	beq.w	80045f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x92>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	0a5b      	lsrs	r3, r3, #9
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f001 fc7b 	bl	8005ca4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fd83 	bl	8004eba <I2C_Master_SB>
 80043b4:	e092      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	0a5b      	lsrs	r3, r3, #9
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fdf9 	bl	8004fc6 <I2C_Master_ADD10>
 80043d4:	e082      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fe13 	bl	800501a <I2C_Master_ADDR>
 80043f4:	e072      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d03b      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004410:	f000 80f3 	beq.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	09db      	lsrs	r3, r3, #7
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00f      	beq.n	8004440 <HAL_I2C_EV_IRQHandler+0x11c>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	0a9b      	lsrs	r3, r3, #10
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_I2C_EV_IRQHandler+0x11c>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d103      	bne.n	8004440 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9f3 	bl	8004824 <I2C_MasterTransmit_TXE>
 800443e:	e04d      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80d6 	beq.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	0a5b      	lsrs	r3, r3, #9
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80cf 	beq.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800445c:	7bbb      	ldrb	r3, [r7, #14]
 800445e:	2b21      	cmp	r3, #33	; 0x21
 8004460:	d103      	bne.n	800446a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa7a 	bl	800495c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004468:	e0c7      	b.n	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	f040 80c4 	bne.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fae8 	bl	8004a48 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004478:	e0bf      	b.n	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004488:	f000 80b7 	beq.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <HAL_I2C_EV_IRQHandler+0x194>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_I2C_EV_IRQHandler+0x194>
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fb5d 	bl	8004b70 <I2C_MasterReceive_RXNE>
 80044b6:	e011      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 809a 	beq.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	0a5b      	lsrs	r3, r3, #9
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8093 	beq.w	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fc06 	bl	8004ce6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044da:	e08e      	b.n	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80044dc:	e08d      	b.n	80045fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	e007      	b.n	8004500 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <HAL_I2C_EV_IRQHandler+0x20e>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	0a5b      	lsrs	r3, r3, #9
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00c      	beq.n	8004532 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 ffc4 	bl	80054b8 <I2C_Slave_ADDR>
 8004530:	e066      	b.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x22e>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	0a5b      	lsrs	r3, r3, #9
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fffe 	bl	800554c <I2C_Slave_STOPF>
 8004550:	e056      	b.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004552:	7bbb      	ldrb	r3, [r7, #14]
 8004554:	2b21      	cmp	r3, #33	; 0x21
 8004556:	d002      	beq.n	800455e <HAL_I2C_EV_IRQHandler+0x23a>
 8004558:	7bbb      	ldrb	r3, [r7, #14]
 800455a:	2b29      	cmp	r3, #41	; 0x29
 800455c:	d125      	bne.n	80045aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	09db      	lsrs	r3, r3, #7
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00f      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x266>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	0a9b      	lsrs	r3, r3, #10
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x266>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 feda 	bl	800533c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004588:	e039      	b.n	80045fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d033      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x2da>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	0a5b      	lsrs	r3, r3, #9
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02d      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 ff07 	bl	80053b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045a8:	e029      	b.n	80045fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00f      	beq.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	0a9b      	lsrs	r3, r3, #10
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 ff12 	bl	80053f8 <I2C_SlaveReceive_RXNE>
 80045d4:	e014      	b.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	0a5b      	lsrs	r3, r3, #9
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 ff40 	bl	8005474 <I2C_SlaveReceive_BTF>
 80045f4:	e004      	b.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b08a      	sub	sp, #40	; 0x28
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800461e:	2300      	movs	r3, #0
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004628:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00e      	beq.n	8004654 <HAL_I2C_ER_IRQHandler+0x4e>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004652:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <HAL_I2C_ER_IRQHandler+0x78>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800467c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	0a9b      	lsrs	r3, r3, #10
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d03f      	beq.n	800470a <HAL_I2C_ER_IRQHandler+0x104>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d039      	beq.n	800470a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004696:	7efb      	ldrb	r3, [r7, #27]
 8004698:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80046b0:	7ebb      	ldrb	r3, [r7, #26]
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d112      	bne.n	80046dc <HAL_I2C_ER_IRQHandler+0xd6>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <HAL_I2C_ER_IRQHandler+0xd6>
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	2b21      	cmp	r3, #33	; 0x21
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b29      	cmp	r3, #41	; 0x29
 80046c6:	d005      	beq.n	80046d4 <HAL_I2C_ER_IRQHandler+0xce>
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b28      	cmp	r3, #40	; 0x28
 80046cc:	d106      	bne.n	80046dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b21      	cmp	r3, #33	; 0x21
 80046d2:	d103      	bne.n	80046dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f001 f869 	bl	80057ac <I2C_Slave_AF>
 80046da:	e016      	b.n	800470a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046ee:	7efb      	ldrb	r3, [r7, #27]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d002      	beq.n	80046fa <HAL_I2C_ER_IRQHandler+0xf4>
 80046f4:	7efb      	ldrb	r3, [r7, #27]
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d107      	bne.n	800470a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	0adb      	lsrs	r3, r3, #11
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <HAL_I2C_ER_IRQHandler+0x12e>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004732:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 f8a0 	bl	800588c <I2C_ITError>
  }
}
 800474c:	bf00      	nop
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
 80047b0:	4613      	mov	r3, r2
 80047b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d150      	bne.n	80048ec <I2C_MasterTransmit_TXE+0xc8>
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b21      	cmp	r3, #33	; 0x21
 800484e:	d14d      	bne.n	80048ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d01d      	beq.n	8004892 <I2C_MasterTransmit_TXE+0x6e>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b20      	cmp	r3, #32
 800485a:	d01a      	beq.n	8004892 <I2C_MasterTransmit_TXE+0x6e>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004862:	d016      	beq.n	8004892 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004872:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2211      	movs	r2, #17
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ff62 	bl	8004754 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004890:	e060      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d107      	bne.n	80048dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff7d 	bl	80047d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048da:	e03b      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff35 	bl	8004754 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ea:	e033      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b21      	cmp	r3, #33	; 0x21
 80048f0:	d005      	beq.n	80048fe <I2C_MasterTransmit_TXE+0xda>
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d12d      	bne.n	8004954 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b22      	cmp	r3, #34	; 0x22
 80048fc:	d12a      	bne.n	8004954 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004918:	e01c      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d103      	bne.n	800492e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f88e 	bl	8004a48 <I2C_MemoryTransmit_TXE_BTF>
}
 800492c:	e012      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	781a      	ldrb	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004952:	e7ff      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d164      	bne.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d012      	beq.n	80049a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049a4:	e04c      	b.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d01d      	beq.n	80049e8 <I2C_MasterTransmit_BTF+0x8c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d01a      	beq.n	80049e8 <I2C_MasterTransmit_BTF+0x8c>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b8:	d016      	beq.n	80049e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2211      	movs	r2, #17
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff feb7 	bl	8004754 <HAL_I2C_MasterTxCpltCallback>
}
 80049e6:	e02b      	b.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a06:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d107      	bne.n	8004a32 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fed2 	bl	80047d4 <HAL_I2C_MemTxCpltCallback>
}
 8004a30:	e006      	b.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fe8a 	bl	8004754 <HAL_I2C_MasterTxCpltCallback>
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11d      	bne.n	8004a9c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10b      	bne.n	8004a80 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a7e:	e073      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	121b      	asrs	r3, r3, #8
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a9a:	e065      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10b      	bne.n	8004abc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004aba:	e055      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d151      	bne.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b22      	cmp	r3, #34	; 0x22
 8004ac8:	d10d      	bne.n	8004ae6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ae4:	e040      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b21      	cmp	r3, #33	; 0x21
 8004af4:	d112      	bne.n	8004b1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b1a:	e025      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d120      	bne.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b21      	cmp	r3, #33	; 0x21
 8004b2a:	d11d      	bne.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fe36 	bl	80047d4 <HAL_I2C_MemTxCpltCallback>
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b22      	cmp	r3, #34	; 0x22
 8004b82:	f040 80ac 	bne.w	8004cde <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d921      	bls.n	8004bd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	f040 808c 	bne.w	8004cde <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004bd6:	e082      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d075      	beq.n	8004ccc <I2C_MasterReceive_RXNE+0x15c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d002      	beq.n	8004bec <I2C_MasterReceive_RXNE+0x7c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d16f      	bne.n	8004ccc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 f827 	bl	8005c40 <I2C_WaitOnSTOPRequestThroughIT>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d142      	bne.n	8004c7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d10a      	bne.n	8004c68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fdc1 	bl	80047e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c66:	e03a      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2212      	movs	r2, #18
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fd76 	bl	8004768 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c7c:	e02f      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fd99 	bl	80047fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cca:	e008      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	605a      	str	r2, [r3, #4]
}
 8004cdc:	e7ff      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d11b      	bne.n	8004d36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d34:	e0bd      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d129      	bne.n	8004d94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d00a      	beq.n	8004d6c <I2C_MasterReceive_BTF+0x86>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d007      	beq.n	8004d6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d92:	e08e      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d176      	bne.n	8004e8c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <I2C_MasterReceive_BTF+0xc4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d108      	bne.n	8004dbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e019      	b.n	8004df0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d002      	beq.n	8004dc8 <I2C_MasterReceive_BTF+0xe2>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d108      	bne.n	8004dda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e00a      	b.n	8004df0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d007      	beq.n	8004df0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d10a      	bne.n	8004e76 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fcba 	bl	80047e8 <HAL_I2C_MemRxCpltCallback>
}
 8004e74:	e01d      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2212      	movs	r2, #18
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fc6f 	bl	8004768 <HAL_I2C_MasterRxCpltCallback>
}
 8004e8a:	e012      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d117      	bne.n	8004efe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ee8:	e067      	b.n	8004fba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]
}
 8004efc:	e05d      	b.n	8004fba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f06:	d133      	bne.n	8004f70 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b21      	cmp	r3, #33	; 0x21
 8004f12:	d109      	bne.n	8004f28 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f24:	611a      	str	r2, [r3, #16]
 8004f26:	e008      	b.n	8004f3a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <I2C_Master_SB+0x92>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d032      	beq.n	8004fba <I2C_Master_SB+0x100>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d02d      	beq.n	8004fba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6c:	605a      	str	r2, [r3, #4]
}
 8004f6e:	e024      	b.n	8004fba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10e      	bne.n	8004f96 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	11db      	asrs	r3, r3, #7
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0306 	and.w	r3, r3, #6
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f063 030f 	orn	r3, r3, #15
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]
}
 8004f94:	e011      	b.n	8004fba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10d      	bne.n	8004fba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	11db      	asrs	r3, r3, #7
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f063 030e 	orn	r3, r3, #14
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <I2C_Master_ADD10+0x26>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <I2C_Master_ADD10+0x48>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500c:	605a      	str	r2, [r3, #4]
  }
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b091      	sub	sp, #68	; 0x44
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b22      	cmp	r3, #34	; 0x22
 8005042:	f040 8169 	bne.w	8005318 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <I2C_Master_ADDR+0x54>
 800504e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d10b      	bne.n	800506e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	633b      	str	r3, [r7, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	633b      	str	r3, [r7, #48]	; 0x30
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	e160      	b.n	8005330 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11d      	bne.n	80050b2 <I2C_Master_ADDR+0x98>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800507e:	d118      	bne.n	80050b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005080:	2300      	movs	r3, #0
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
 80050b0:	e13e      	b.n	8005330 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d113      	bne.n	80050e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e115      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 808a 	bne.w	8005204 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f6:	d137      	bne.n	8005168 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005116:	d113      	bne.n	8005140 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	e0e7      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e0d3      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2b08      	cmp	r3, #8
 800516c:	d02e      	beq.n	80051cc <I2C_Master_ADDR+0x1b2>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2b20      	cmp	r3, #32
 8005172:	d02b      	beq.n	80051cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	2b12      	cmp	r3, #18
 8005178:	d102      	bne.n	8005180 <I2C_Master_ADDR+0x166>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b01      	cmp	r3, #1
 800517e:	d125      	bne.n	80051cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	2b04      	cmp	r3, #4
 8005184:	d00e      	beq.n	80051a4 <I2C_Master_ADDR+0x18a>
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b02      	cmp	r3, #2
 800518a:	d00b      	beq.n	80051a4 <I2C_Master_ADDR+0x18a>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	2b10      	cmp	r3, #16
 8005190:	d008      	beq.n	80051a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e007      	b.n	80051b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	e0a1      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e085      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d14d      	bne.n	80052aa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2b04      	cmp	r3, #4
 8005212:	d016      	beq.n	8005242 <I2C_Master_ADDR+0x228>
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	2b02      	cmp	r3, #2
 8005218:	d013      	beq.n	8005242 <I2C_Master_ADDR+0x228>
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b10      	cmp	r3, #16
 800521e:	d010      	beq.n	8005242 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e007      	b.n	8005252 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005250:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005260:	d117      	bne.n	8005292 <I2C_Master_ADDR+0x278>
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005268:	d00b      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b01      	cmp	r3, #1
 800526e:	d008      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	2b08      	cmp	r3, #8
 8005274:	d005      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b10      	cmp	r3, #16
 800527a:	d002      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	2b20      	cmp	r3, #32
 8005280:	d107      	bne.n	8005292 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005290:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	e032      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c8:	d117      	bne.n	80052fa <I2C_Master_ADDR+0x2e0>
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052d0:	d00b      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d008      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d005      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d002      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d107      	bne.n	80052fa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005316:	e00b      	b.n	8005330 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	e7ff      	b.n	8005330 <I2C_Master_ADDR+0x316>
 8005330:	bf00      	nop
 8005332:	3744      	adds	r7, #68	; 0x44
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02b      	beq.n	80053ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d114      	bne.n	80053ae <I2C_SlaveTransmit_TXE+0x72>
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b29      	cmp	r3, #41	; 0x29
 8005388:	d111      	bne.n	80053ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005398:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2221      	movs	r2, #33	; 0x21
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2228      	movs	r2, #40	; 0x28
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff f9e7 	bl	800477c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02c      	beq.n	800546c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d114      	bne.n	800546c <I2C_SlaveReceive_RXNE+0x74>
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b2a      	cmp	r3, #42	; 0x2a
 8005446:	d111      	bne.n	800546c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2222      	movs	r2, #34	; 0x22
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2228      	movs	r2, #40	; 0x28
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff f992 	bl	8004790 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d2:	2b28      	cmp	r3, #40	; 0x28
 80054d4:	d127      	bne.n	8005526 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	09db      	lsrs	r3, r3, #7
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	81bb      	strh	r3, [r7, #12]
 8005508:	e002      	b.n	8005510 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005518:	89ba      	ldrh	r2, [r7, #12]
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff f940 	bl	80047a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005524:	e00e      	b.n	8005544 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800556a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800556c:	2300      	movs	r3, #0
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	60bb      	str	r3, [r7, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a8:	d172      	bne.n	8005690 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b22      	cmp	r3, #34	; 0x22
 80055ae:	d002      	beq.n	80055b6 <I2C_Slave_STOPF+0x6a>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b2a      	cmp	r3, #42	; 0x2a
 80055b4:	d135      	bne.n	8005622 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fade 	bl	8003bb0 <HAL_DMA_GetState>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d049      	beq.n	800568e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	4a69      	ldr	r2, [pc, #420]	; (80057a4 <I2C_Slave_STOPF+0x258>)
 8005600:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe f926 	bl	8003858 <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d03d      	beq.n	800568e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005620:	e035      	b.n	800568e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0204 	orr.w	r2, r3, #4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005654:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe faa8 	bl	8003bb0 <HAL_DMA_GetState>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d014      	beq.n	8005690 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	4a4e      	ldr	r2, [pc, #312]	; (80057a4 <I2C_Slave_STOPF+0x258>)
 800566c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe f8f0 	bl	8003858 <HAL_DMA_Abort_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	e000      	b.n	8005690 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800568e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d03e      	beq.n	8005718 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d112      	bne.n	80056ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d112      	bne.n	8005702 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f043 0204 	orr.w	r2, r3, #4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8b3 	bl	800588c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005726:	e039      	b.n	800579c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b2a      	cmp	r3, #42	; 0x2a
 800572c:	d109      	bne.n	8005742 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2228      	movs	r2, #40	; 0x28
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff f827 	bl	8004790 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b28      	cmp	r3, #40	; 0x28
 800574c:	d111      	bne.n	8005772 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <I2C_Slave_STOPF+0x25c>)
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff f828 	bl	80047c0 <HAL_I2C_ListenCpltCallback>
}
 8005770:	e014      	b.n	800579c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	2b22      	cmp	r3, #34	; 0x22
 8005778:	d002      	beq.n	8005780 <I2C_Slave_STOPF+0x234>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b22      	cmp	r3, #34	; 0x22
 800577e:	d10d      	bne.n	800579c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fe fffa 	bl	8004790 <HAL_I2C_SlaveRxCpltCallback>
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08005af1 	.word	0x08005af1
 80057a8:	ffff0000 	.word	0xffff0000

080057ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d002      	beq.n	80057ce <I2C_Slave_AF+0x22>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d129      	bne.n	8005822 <I2C_Slave_AF+0x76>
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b28      	cmp	r3, #40	; 0x28
 80057d2:	d126      	bne.n	8005822 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a2c      	ldr	r2, [pc, #176]	; (8005888 <I2C_Slave_AF+0xdc>)
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fe ffd0 	bl	80047c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005820:	e02e      	b.n	8005880 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b21      	cmp	r3, #33	; 0x21
 8005826:	d126      	bne.n	8005876 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <I2C_Slave_AF+0xdc>)
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2221      	movs	r2, #33	; 0x21
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005852:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800585c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fe ff84 	bl	800477c <HAL_I2C_SlaveTxCpltCallback>
}
 8005874:	e004      	b.n	8005880 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587e:	615a      	str	r2, [r3, #20]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	ffff0000 	.word	0xffff0000

0800588c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d002      	beq.n	80058b0 <I2C_ITError+0x24>
 80058aa:	7bbb      	ldrb	r3, [r7, #14]
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d10a      	bne.n	80058c6 <I2C_ITError+0x3a>
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b22      	cmp	r3, #34	; 0x22
 80058b4:	d107      	bne.n	80058c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058cc:	2b28      	cmp	r3, #40	; 0x28
 80058ce:	d107      	bne.n	80058e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2228      	movs	r2, #40	; 0x28
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058de:	e015      	b.n	800590c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ee:	d00a      	beq.n	8005906 <I2C_ITError+0x7a>
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b60      	cmp	r3, #96	; 0x60
 80058f4:	d007      	beq.n	8005906 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591a:	d162      	bne.n	80059e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d020      	beq.n	800597c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	4a6a      	ldr	r2, [pc, #424]	; (8005ae8 <I2C_ITError+0x25c>)
 8005940:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd ff86 	bl	8003858 <HAL_DMA_Abort_IT>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8089 	beq.w	8005a66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005976:	4610      	mov	r0, r2
 8005978:	4798      	blx	r3
 800597a:	e074      	b.n	8005a66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	4a59      	ldr	r2, [pc, #356]	; (8005ae8 <I2C_ITError+0x25c>)
 8005982:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd ff65 	bl	8003858 <HAL_DMA_Abort_IT>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d068      	beq.n	8005a66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d10b      	bne.n	80059ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	e041      	b.n	8005a66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b60      	cmp	r3, #96	; 0x60
 80059ec:	d125      	bne.n	8005a3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d10b      	bne.n	8005a22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fe feec 	bl	8004810 <HAL_I2C_AbortCpltCallback>
 8005a38:	e015      	b.n	8005a66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d10b      	bne.n	8005a60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fe fecb 	bl	80047fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10e      	bne.n	8005a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aa2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d113      	bne.n	8005ae0 <I2C_ITError+0x254>
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b28      	cmp	r3, #40	; 0x28
 8005abc:	d110      	bne.n	8005ae0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <I2C_ITError+0x260>)
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fe fe70 	bl	80047c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	08005af1 	.word	0x08005af1
 8005aec:	ffff0000 	.word	0xffff0000

08005af0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b0a:	4b4b      	ldr	r3, [pc, #300]	; (8005c38 <I2C_DMAAbort+0x148>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	4a4a      	ldr	r2, [pc, #296]	; (8005c3c <I2C_DMAAbort+0x14c>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	0a1a      	lsrs	r2, r3, #8
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00da      	lsls	r2, r3, #3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b36:	e00a      	b.n	8005b4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4c:	d0ea      	beq.n	8005b24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b60      	cmp	r3, #96	; 0x60
 8005bbe:	d10e      	bne.n	8005bde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7fe fe1a 	bl	8004810 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bdc:	e027      	b.n	8005c2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005be4:	2b28      	cmp	r3, #40	; 0x28
 8005be6:	d117      	bne.n	8005c18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2228      	movs	r2, #40	; 0x28
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c16:	e007      	b.n	8005c28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f7fe fde7 	bl	80047fc <HAL_I2C_ErrorCallback>
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000000c 	.word	0x2000000c
 8005c3c:	14f8b589 	.word	0x14f8b589

08005c40 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	0a1a      	lsrs	r2, r3, #8
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d107      	bne.n	8005c7e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e008      	b.n	8005c90 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8c:	d0e9      	beq.n	8005c62 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	14f8b589 	.word	0x14f8b589

08005ca4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005cb4:	d103      	bne.n	8005cbe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cbc:	e007      	b.n	8005cce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cc6:	d102      	bne.n	8005cce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e267      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d075      	beq.n	8005de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfa:	4b88      	ldr	r3, [pc, #544]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d00c      	beq.n	8005d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d06:	4b85      	ldr	r3, [pc, #532]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d112      	bne.n	8005d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d12:	4b82      	ldr	r3, [pc, #520]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d1e:	d10b      	bne.n	8005d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d20:	4b7e      	ldr	r3, [pc, #504]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d05b      	beq.n	8005de4 <HAL_RCC_OscConfig+0x108>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d157      	bne.n	8005de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e242      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d106      	bne.n	8005d50 <HAL_RCC_OscConfig+0x74>
 8005d42:	4b76      	ldr	r3, [pc, #472]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a75      	ldr	r2, [pc, #468]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e01d      	b.n	8005d8c <HAL_RCC_OscConfig+0xb0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d58:	d10c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x98>
 8005d5a:	4b70      	ldr	r3, [pc, #448]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a6f      	ldr	r2, [pc, #444]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	4b6d      	ldr	r3, [pc, #436]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a6c      	ldr	r2, [pc, #432]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e00b      	b.n	8005d8c <HAL_RCC_OscConfig+0xb0>
 8005d74:	4b69      	ldr	r3, [pc, #420]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a68      	ldr	r2, [pc, #416]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	4b66      	ldr	r3, [pc, #408]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a65      	ldr	r2, [pc, #404]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fd fb70 	bl	8003478 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fd fb6c 	bl	8003478 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e207      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dae:	4b5b      	ldr	r3, [pc, #364]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0xc0>
 8005dba:	e014      	b.n	8005de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fd fb5c 	bl	8003478 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc4:	f7fd fb58 	bl	8003478 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e1f3      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd6:	4b51      	ldr	r3, [pc, #324]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0xe8>
 8005de2:	e000      	b.n	8005de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d063      	beq.n	8005eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df2:	4b4a      	ldr	r3, [pc, #296]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dfe:	4b47      	ldr	r3, [pc, #284]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d11c      	bne.n	8005e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0a:	4b44      	ldr	r3, [pc, #272]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d116      	bne.n	8005e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e16:	4b41      	ldr	r3, [pc, #260]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_RCC_OscConfig+0x152>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d001      	beq.n	8005e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e1c7      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2e:	4b3b      	ldr	r3, [pc, #236]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4937      	ldr	r1, [pc, #220]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e42:	e03a      	b.n	8005eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e4c:	4b34      	ldr	r3, [pc, #208]	; (8005f20 <HAL_RCC_OscConfig+0x244>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e52:	f7fd fb11 	bl	8003478 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e5a:	f7fd fb0d 	bl	8003478 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e1a8      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6c:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4925      	ldr	r1, [pc, #148]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	600b      	str	r3, [r1, #0]
 8005e8c:	e015      	b.n	8005eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <HAL_RCC_OscConfig+0x244>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fd faf0 	bl	8003478 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9c:	f7fd faec 	bl	8003478 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e187      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eae:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d036      	beq.n	8005f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d016      	beq.n	8005efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <HAL_RCC_OscConfig+0x248>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed4:	f7fd fad0 	bl	8003478 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005edc:	f7fd facc 	bl	8003478 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e167      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eee:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_RCC_OscConfig+0x240>)
 8005ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x200>
 8005efa:	e01b      	b.n	8005f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCC_OscConfig+0x248>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f02:	f7fd fab9 	bl	8003478 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f08:	e00e      	b.n	8005f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f0a:	f7fd fab5 	bl	8003478 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d907      	bls.n	8005f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e150      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	42470000 	.word	0x42470000
 8005f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f28:	4b88      	ldr	r3, [pc, #544]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ea      	bne.n	8005f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8097 	beq.w	8006070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f46:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10f      	bne.n	8005f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	4b7d      	ldr	r3, [pc, #500]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	4a7c      	ldr	r2, [pc, #496]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6413      	str	r3, [r2, #64]	; 0x40
 8005f62:	4b7a      	ldr	r3, [pc, #488]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f72:	4b77      	ldr	r3, [pc, #476]	; (8006150 <HAL_RCC_OscConfig+0x474>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d118      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f7e:	4b74      	ldr	r3, [pc, #464]	; (8006150 <HAL_RCC_OscConfig+0x474>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a73      	ldr	r2, [pc, #460]	; (8006150 <HAL_RCC_OscConfig+0x474>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f8a:	f7fd fa75 	bl	8003478 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f92:	f7fd fa71 	bl	8003478 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e10c      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa4:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <HAL_RCC_OscConfig+0x474>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x2ea>
 8005fb8:	4b64      	ldr	r3, [pc, #400]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a63      	ldr	r2, [pc, #396]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc4:	e01c      	b.n	8006000 <HAL_RCC_OscConfig+0x324>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x30c>
 8005fce:	4b5f      	ldr	r3, [pc, #380]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	4a5e      	ldr	r2, [pc, #376]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fd4:	f043 0304 	orr.w	r3, r3, #4
 8005fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fda:	4b5c      	ldr	r3, [pc, #368]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	4a5b      	ldr	r2, [pc, #364]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	e00b      	b.n	8006000 <HAL_RCC_OscConfig+0x324>
 8005fe8:	4b58      	ldr	r3, [pc, #352]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	4a57      	ldr	r2, [pc, #348]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff4:	4b55      	ldr	r3, [pc, #340]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff8:	4a54      	ldr	r2, [pc, #336]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8005ffa:	f023 0304 	bic.w	r3, r3, #4
 8005ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d015      	beq.n	8006034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006008:	f7fd fa36 	bl	8003478 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800600e:	e00a      	b.n	8006026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006010:	f7fd fa32 	bl	8003478 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	; 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e0cb      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006026:	4b49      	ldr	r3, [pc, #292]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0ee      	beq.n	8006010 <HAL_RCC_OscConfig+0x334>
 8006032:	e014      	b.n	800605e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006034:	f7fd fa20 	bl	8003478 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fd fa1c 	bl	8003478 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0b5      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006052:	4b3e      	ldr	r3, [pc, #248]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1ee      	bne.n	800603c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d105      	bne.n	8006070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	4a38      	ldr	r2, [pc, #224]	; (800614c <HAL_RCC_OscConfig+0x470>)
 800606a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80a1 	beq.w	80061bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800607a:	4b34      	ldr	r3, [pc, #208]	; (800614c <HAL_RCC_OscConfig+0x470>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 030c 	and.w	r3, r3, #12
 8006082:	2b08      	cmp	r3, #8
 8006084:	d05c      	beq.n	8006140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d141      	bne.n	8006112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCC_OscConfig+0x478>)
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006094:	f7fd f9f0 	bl	8003478 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800609c:	f7fd f9ec 	bl	8003478 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e087      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ae:	4b27      	ldr	r3, [pc, #156]	; (800614c <HAL_RCC_OscConfig+0x470>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f0      	bne.n	800609c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	3b01      	subs	r3, #1
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	491b      	ldr	r1, [pc, #108]	; (800614c <HAL_RCC_OscConfig+0x470>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <HAL_RCC_OscConfig+0x478>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ea:	f7fd f9c5 	bl	8003478 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f2:	f7fd f9c1 	bl	8003478 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e05c      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f0      	beq.n	80060f2 <HAL_RCC_OscConfig+0x416>
 8006110:	e054      	b.n	80061bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <HAL_RCC_OscConfig+0x478>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006118:	f7fd f9ae 	bl	8003478 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006120:	f7fd f9aa 	bl	8003478 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e045      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCC_OscConfig+0x470>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x444>
 800613e:	e03d      	b.n	80061bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d107      	bne.n	8006158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e038      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
 800614c:	40023800 	.word	0x40023800
 8006150:	40007000 	.word	0x40007000
 8006154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCC_OscConfig+0x4ec>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d028      	beq.n	80061b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d121      	bne.n	80061b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617e:	429a      	cmp	r2, r3
 8006180:	d11a      	bne.n	80061b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006188:	4013      	ands	r3, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800618e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006190:	4293      	cmp	r3, r2
 8006192:	d111      	bne.n	80061b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	3b01      	subs	r3, #1
 80061a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d107      	bne.n	80061b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40023800 	.word	0x40023800

080061cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0cc      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061e0:	4b68      	ldr	r3, [pc, #416]	; (8006384 <HAL_RCC_ClockConfig+0x1b8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d90c      	bls.n	8006208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ee:	4b65      	ldr	r3, [pc, #404]	; (8006384 <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f6:	4b63      	ldr	r3, [pc, #396]	; (8006384 <HAL_RCC_ClockConfig+0x1b8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0b8      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d020      	beq.n	8006256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006220:	4b59      	ldr	r3, [pc, #356]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4a58      	ldr	r2, [pc, #352]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800622a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006238:	4b53      	ldr	r3, [pc, #332]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	4a52      	ldr	r2, [pc, #328]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006244:	4b50      	ldr	r3, [pc, #320]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	494d      	ldr	r1, [pc, #308]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d044      	beq.n	80062ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d107      	bne.n	800627a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626a:	4b47      	ldr	r3, [pc, #284]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d119      	bne.n	80062aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e07f      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d003      	beq.n	800628a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006286:	2b03      	cmp	r3, #3
 8006288:	d107      	bne.n	800629a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628a:	4b3f      	ldr	r3, [pc, #252]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e06f      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629a:	4b3b      	ldr	r3, [pc, #236]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e067      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062aa:	4b37      	ldr	r3, [pc, #220]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f023 0203 	bic.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4934      	ldr	r1, [pc, #208]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062bc:	f7fd f8dc 	bl	8003478 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c2:	e00a      	b.n	80062da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c4:	f7fd f8d8 	bl	8003478 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e04f      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062da:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 020c 	and.w	r2, r3, #12
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d1eb      	bne.n	80062c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ec:	4b25      	ldr	r3, [pc, #148]	; (8006384 <HAL_RCC_ClockConfig+0x1b8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d20c      	bcs.n	8006314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	4b22      	ldr	r3, [pc, #136]	; (8006384 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e032      	b.n	800637a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006320:	4b19      	ldr	r3, [pc, #100]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	4916      	ldr	r1, [pc, #88]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	4313      	orrs	r3, r2
 8006330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800633e:	4b12      	ldr	r3, [pc, #72]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	490e      	ldr	r1, [pc, #56]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006352:	f000 f821 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8006356:	4602      	mov	r2, r0
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	490a      	ldr	r1, [pc, #40]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 8006364:	5ccb      	ldrb	r3, [r1, r3]
 8006366:	fa22 f303 	lsr.w	r3, r2, r3
 800636a:	4a09      	ldr	r2, [pc, #36]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800636c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <HAL_RCC_ClockConfig+0x1c8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fd f83c 	bl	80033f0 <HAL_InitTick>

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40023c00 	.word	0x40023c00
 8006388:	40023800 	.word	0x40023800
 800638c:	0800aefc 	.word	0x0800aefc
 8006390:	2000000c 	.word	0x2000000c
 8006394:	20000010 	.word	0x20000010

08006398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b094      	sub	sp, #80	; 0x50
 800639e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	647b      	str	r3, [r7, #68]	; 0x44
 80063a4:	2300      	movs	r3, #0
 80063a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a8:	2300      	movs	r3, #0
 80063aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063b0:	4b79      	ldr	r3, [pc, #484]	; (8006598 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 030c 	and.w	r3, r3, #12
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d00d      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0x40>
 80063bc:	2b08      	cmp	r3, #8
 80063be:	f200 80e1 	bhi.w	8006584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x34>
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d003      	beq.n	80063d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ca:	e0db      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063cc:	4b73      	ldr	r3, [pc, #460]	; (800659c <HAL_RCC_GetSysClockFreq+0x204>)
 80063ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063d0:	e0db      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063d2:	4b73      	ldr	r3, [pc, #460]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063d6:	e0d8      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063d8:	4b6f      	ldr	r3, [pc, #444]	; (8006598 <HAL_RCC_GetSysClockFreq+0x200>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063e2:	4b6d      	ldr	r3, [pc, #436]	; (8006598 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d063      	beq.n	80064b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ee:	4b6a      	ldr	r3, [pc, #424]	; (8006598 <HAL_RCC_GetSysClockFreq+0x200>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	099b      	lsrs	r3, r3, #6
 80063f4:	2200      	movs	r2, #0
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80063f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006400:	633b      	str	r3, [r7, #48]	; 0x30
 8006402:	2300      	movs	r3, #0
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
 8006406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800640a:	4622      	mov	r2, r4
 800640c:	462b      	mov	r3, r5
 800640e:	f04f 0000 	mov.w	r0, #0
 8006412:	f04f 0100 	mov.w	r1, #0
 8006416:	0159      	lsls	r1, r3, #5
 8006418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800641c:	0150      	lsls	r0, r2, #5
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4621      	mov	r1, r4
 8006424:	1a51      	subs	r1, r2, r1
 8006426:	6139      	str	r1, [r7, #16]
 8006428:	4629      	mov	r1, r5
 800642a:	eb63 0301 	sbc.w	r3, r3, r1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800643c:	4659      	mov	r1, fp
 800643e:	018b      	lsls	r3, r1, #6
 8006440:	4651      	mov	r1, sl
 8006442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006446:	4651      	mov	r1, sl
 8006448:	018a      	lsls	r2, r1, #6
 800644a:	4651      	mov	r1, sl
 800644c:	ebb2 0801 	subs.w	r8, r2, r1
 8006450:	4659      	mov	r1, fp
 8006452:	eb63 0901 	sbc.w	r9, r3, r1
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800646a:	4690      	mov	r8, r2
 800646c:	4699      	mov	r9, r3
 800646e:	4623      	mov	r3, r4
 8006470:	eb18 0303 	adds.w	r3, r8, r3
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	462b      	mov	r3, r5
 8006478:	eb49 0303 	adc.w	r3, r9, r3
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800648a:	4629      	mov	r1, r5
 800648c:	024b      	lsls	r3, r1, #9
 800648e:	4621      	mov	r1, r4
 8006490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006494:	4621      	mov	r1, r4
 8006496:	024a      	lsls	r2, r1, #9
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649e:	2200      	movs	r2, #0
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064a8:	f7f9 fe96 	bl	80001d8 <__aeabi_uldivmod>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4613      	mov	r3, r2
 80064b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b4:	e058      	b.n	8006568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064b6:	4b38      	ldr	r3, [pc, #224]	; (8006598 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	099b      	lsrs	r3, r3, #6
 80064bc:	2200      	movs	r2, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	4611      	mov	r1, r2
 80064c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f04f 0100 	mov.w	r1, #0
 80064dc:	0159      	lsls	r1, r3, #5
 80064de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064e2:	0150      	lsls	r0, r2, #5
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4641      	mov	r1, r8
 80064ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80064ee:	4649      	mov	r1, r9
 80064f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006508:	ebb2 040a 	subs.w	r4, r2, sl
 800650c:	eb63 050b 	sbc.w	r5, r3, fp
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	00eb      	lsls	r3, r5, #3
 800651a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651e:	00e2      	lsls	r2, r4, #3
 8006520:	4614      	mov	r4, r2
 8006522:	461d      	mov	r5, r3
 8006524:	4643      	mov	r3, r8
 8006526:	18e3      	adds	r3, r4, r3
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	464b      	mov	r3, r9
 800652c:	eb45 0303 	adc.w	r3, r5, r3
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800653e:	4629      	mov	r1, r5
 8006540:	028b      	lsls	r3, r1, #10
 8006542:	4621      	mov	r1, r4
 8006544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006548:	4621      	mov	r1, r4
 800654a:	028a      	lsls	r2, r1, #10
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006552:	2200      	movs	r2, #0
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	61fa      	str	r2, [r7, #28]
 8006558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800655c:	f7f9 fe3c 	bl	80001d8 <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_GetSysClockFreq+0x200>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	3301      	adds	r3, #1
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800657a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006582:	e002      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <HAL_RCC_GetSysClockFreq+0x204>)
 8006586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800658a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800658c:	4618      	mov	r0, r3
 800658e:	3750      	adds	r7, #80	; 0x50
 8006590:	46bd      	mov	sp, r7
 8006592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	007a1200 	.word	0x007a1200

080065a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065aa:	681b      	ldr	r3, [r3, #0]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	2000000c 	.word	0x2000000c

080065bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065c0:	f7ff fff0 	bl	80065a4 <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	0a9b      	lsrs	r3, r3, #10
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4903      	ldr	r1, [pc, #12]	; (80065e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40023800 	.word	0x40023800
 80065e0:	0800af0c 	.word	0x0800af0c

080065e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065e8:	f7ff ffdc 	bl	80065a4 <HAL_RCC_GetHCLKFreq>
 80065ec:	4602      	mov	r2, r0
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	0b5b      	lsrs	r3, r3, #13
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	4903      	ldr	r1, [pc, #12]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065fa:	5ccb      	ldrb	r3, [r1, r3]
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40023800 	.word	0x40023800
 8006608:	0800af0c 	.word	0x0800af0c

0800660c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e07b      	b.n	8006716 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	2b00      	cmp	r3, #0
 8006624:	d108      	bne.n	8006638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662e:	d009      	beq.n	8006644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	61da      	str	r2, [r3, #28]
 8006636:	e005      	b.n	8006644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fc fad8 	bl	8002c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c8:	ea42 0103 	orr.w	r1, r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	f003 0104 	and.w	r1, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	f003 0210 	and.w	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006704:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b088      	sub	sp, #32
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	4613      	mov	r3, r2
 800672c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_SPI_Transmit+0x22>
 800673c:	2302      	movs	r3, #2
 800673e:	e126      	b.n	800698e <HAL_SPI_Transmit+0x270>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006748:	f7fc fe96 	bl	8003478 <HAL_GetTick>
 800674c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	d002      	beq.n	8006764 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800675e:	2302      	movs	r3, #2
 8006760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006762:	e10b      	b.n	800697c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_SPI_Transmit+0x52>
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006774:	e102      	b.n	800697c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2203      	movs	r2, #3
 800677a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067bc:	d10f      	bne.n	80067de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d007      	beq.n	80067fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006804:	d14b      	bne.n	800689e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_Transmit+0xf6>
 800680e:	8afb      	ldrh	r3, [r7, #22]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d13e      	bne.n	8006892 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006838:	e02b      	b.n	8006892 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d112      	bne.n	800686e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	86da      	strh	r2, [r3, #54]	; 0x36
 800686c:	e011      	b.n	8006892 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800686e:	f7fc fe03 	bl	8003478 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d803      	bhi.n	8006886 <HAL_SPI_Transmit+0x168>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d102      	bne.n	800688c <HAL_SPI_Transmit+0x16e>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006890:	e074      	b.n	800697c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1ce      	bne.n	800683a <HAL_SPI_Transmit+0x11c>
 800689c:	e04c      	b.n	8006938 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <HAL_SPI_Transmit+0x18e>
 80068a6:	8afb      	ldrh	r3, [r7, #22]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d140      	bne.n	800692e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068d2:	e02c      	b.n	800692e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d113      	bne.n	800690a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	330c      	adds	r3, #12
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	86da      	strh	r2, [r3, #54]	; 0x36
 8006908:	e011      	b.n	800692e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800690a:	f7fc fdb5 	bl	8003478 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d803      	bhi.n	8006922 <HAL_SPI_Transmit+0x204>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d102      	bne.n	8006928 <HAL_SPI_Transmit+0x20a>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d102      	bne.n	800692e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800692c:	e026      	b.n	800697c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1cd      	bne.n	80068d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fce9 	bl	8007314 <SPI_EndRxTxTransaction>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e000      	b.n	800697c <HAL_SPI_Transmit+0x25e>
  }

error:
 800697a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800698c:	7ffb      	ldrb	r3, [r7, #31]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b088      	sub	sp, #32
 800699a:	af02      	add	r7, sp, #8
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b2:	d112      	bne.n	80069da <HAL_SPI_Receive+0x44>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10e      	bne.n	80069da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2204      	movs	r2, #4
 80069c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069c4:	88fa      	ldrh	r2, [r7, #6]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f8f1 	bl	8006bb8 <HAL_SPI_TransmitReceive>
 80069d6:	4603      	mov	r3, r0
 80069d8:	e0ea      	b.n	8006bb0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_SPI_Receive+0x52>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e0e3      	b.n	8006bb0 <HAL_SPI_Receive+0x21a>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f0:	f7fc fd42 	bl	8003478 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d002      	beq.n	8006a08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
 8006a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a06:	e0ca      	b.n	8006b9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_SPI_Receive+0x7e>
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a18:	e0c1      	b.n	8006b9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	d10f      	bne.n	8006a82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d007      	beq.n	8006aa0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d162      	bne.n	8006b6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006aa8:	e02e      	b.n	8006b08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d115      	bne.n	8006ae4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f103 020c 	add.w	r2, r3, #12
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ae2:	e011      	b.n	8006b08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ae4:	f7fc fcc8 	bl	8003478 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d803      	bhi.n	8006afc <HAL_SPI_Receive+0x166>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d102      	bne.n	8006b02 <HAL_SPI_Receive+0x16c>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b06:	e04a      	b.n	8006b9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1cb      	bne.n	8006aaa <HAL_SPI_Receive+0x114>
 8006b12:	e031      	b.n	8006b78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d113      	bne.n	8006b4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	b292      	uxth	r2, r2
 8006b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b48:	e011      	b.n	8006b6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b4a:	f7fc fc95 	bl	8003478 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d803      	bhi.n	8006b62 <HAL_SPI_Receive+0x1cc>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d102      	bne.n	8006b68 <HAL_SPI_Receive+0x1d2>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b6c:	e017      	b.n	8006b9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1cd      	bne.n	8006b14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fb63 	bl	8007248 <SPI_EndRxTransaction>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
 8006b9a:	e000      	b.n	8006b9e <HAL_SPI_Receive+0x208>
  }

error :
 8006b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08c      	sub	sp, #48	; 0x30
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x26>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e18a      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x33c>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006be6:	f7fc fc47 	bl	8003478 <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d00f      	beq.n	8006c28 <HAL_SPI_TransmitReceive+0x70>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0e:	d107      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x68>
 8006c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d003      	beq.n	8006c28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c26:	e15b      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_SPI_TransmitReceive+0x82>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_SPI_TransmitReceive+0x82>
 8006c34:	887b      	ldrh	r3, [r7, #2]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c40:	e14e      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d003      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2205      	movs	r2, #5
 8006c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	887a      	ldrh	r2, [r7, #2]
 8006c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	887a      	ldrh	r2, [r7, #2]
 8006c6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	887a      	ldrh	r2, [r7, #2]
 8006c78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	887a      	ldrh	r2, [r7, #2]
 8006c7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d007      	beq.n	8006caa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d178      	bne.n	8006da6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0x10a>
 8006cbc:	8b7b      	ldrh	r3, [r7, #26]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d166      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	1c9a      	adds	r2, r3, #2
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce6:	e053      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d11b      	bne.n	8006d2e <HAL_SPI_TransmitReceive+0x176>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d016      	beq.n	8006d2e <HAL_SPI_TransmitReceive+0x176>
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d113      	bne.n	8006d2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	881a      	ldrh	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	1c9a      	adds	r2, r3, #2
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d119      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x1b8>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d014      	beq.n	8006d70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	b292      	uxth	r2, r2
 8006d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	1c9a      	adds	r2, r3, #2
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d70:	f7fc fb82 	bl	8003478 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d807      	bhi.n	8006d90 <HAL_SPI_TransmitReceive+0x1d8>
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d003      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d8e:	e0a7      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1a6      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x130>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1a1      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x130>
 8006da4:	e07c      	b.n	8006ea0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_SPI_TransmitReceive+0x1fc>
 8006dae:	8b7b      	ldrh	r3, [r7, #26]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d16b      	bne.n	8006e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	7812      	ldrb	r2, [r2, #0]
 8006dc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dda:	e057      	b.n	8006e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d11c      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x26c>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d017      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x26c>
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d114      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	330c      	adds	r3, #12
 8006e04:	7812      	ldrb	r2, [r2, #0]
 8006e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d119      	bne.n	8006e66 <HAL_SPI_TransmitReceive+0x2ae>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d014      	beq.n	8006e66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e62:	2301      	movs	r3, #1
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e66:	f7fc fb07 	bl	8003478 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d803      	bhi.n	8006e7e <HAL_SPI_TransmitReceive+0x2c6>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d102      	bne.n	8006e84 <HAL_SPI_TransmitReceive+0x2cc>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e8a:	e029      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1a2      	bne.n	8006ddc <HAL_SPI_TransmitReceive+0x224>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d19d      	bne.n	8006ddc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fa35 	bl	8007314 <SPI_EndRxTxTransaction>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d006      	beq.n	8006ebe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ebc:	e010      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10b      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	e000      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3730      	adds	r7, #48	; 0x30
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	099b      	lsrs	r3, r3, #6
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
    return;
 8006f3e:	e0d7      	b.n	80070f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <HAL_SPI_IRQHandler+0x66>
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	09db      	lsrs	r3, r3, #7
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
    return;
 8006f60:	e0c6      	b.n	80070f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10c      	bne.n	8006f88 <HAL_SPI_IRQHandler+0x8c>
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	099b      	lsrs	r3, r3, #6
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80b4 	beq.w	80070f0 <HAL_SPI_IRQHandler+0x1f4>
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80ad 	beq.w	80070f0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	099b      	lsrs	r3, r3, #6
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d023      	beq.n	8006fea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d011      	beq.n	8006fd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	f043 0204 	orr.w	r2, r3, #4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	e00b      	b.n	8006fea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	693b      	ldr	r3, [r7, #16]
        return;
 8006fe8:	e082      	b.n	80070f0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d014      	beq.n	8007020 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f043 0201 	orr.w	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	f043 0208 	orr.w	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007038:	2300      	movs	r3, #0
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	2b00      	cmp	r3, #0
 800704c:	d04f      	beq.n	80070ee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800705c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <HAL_SPI_IRQHandler+0x17e>
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d034      	beq.n	80070e4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0203 	bic.w	r2, r2, #3
 8007088:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d011      	beq.n	80070b6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <HAL_SPI_IRQHandler+0x1fc>)
 8007098:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fc fbda 	bl	8003858 <HAL_DMA_Abort_IT>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d016      	beq.n	80070ec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <HAL_SPI_IRQHandler+0x1fc>)
 80070c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fc fbc4 	bl	8003858 <HAL_DMA_Abort_IT>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80070e2:	e003      	b.n	80070ec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f809 	bl	80070fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80070ea:	e000      	b.n	80070ee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80070ec:	bf00      	nop
    return;
 80070ee:	bf00      	nop
  }
}
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	08007111 	.word	0x08007111

080070fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff ffe6 	bl	80070fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007148:	f7fc f996 	bl	8003478 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	4413      	add	r3, r2
 8007156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007158:	f7fc f98e 	bl	8003478 <HAL_GetTick>
 800715c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800715e:	4b39      	ldr	r3, [pc, #228]	; (8007244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	015b      	lsls	r3, r3, #5
 8007164:	0d1b      	lsrs	r3, r3, #20
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800716e:	e054      	b.n	800721a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d050      	beq.n	800721a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007178:	f7fc f97e 	bl	8003478 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	429a      	cmp	r2, r3
 8007186:	d902      	bls.n	800718e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d13d      	bne.n	800720a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800719c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a6:	d111      	bne.n	80071cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b0:	d004      	beq.n	80071bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ba:	d107      	bne.n	80071cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d4:	d10f      	bne.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e017      	b.n	800723a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	3b01      	subs	r3, #1
 8007218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	429a      	cmp	r2, r3
 8007228:	bf0c      	ite	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	2300      	movne	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	429a      	cmp	r2, r3
 8007236:	d19b      	bne.n	8007170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3720      	adds	r7, #32
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000000c 	.word	0x2000000c

08007248 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725c:	d111      	bne.n	8007282 <SPI_EndRxTransaction+0x3a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007266:	d004      	beq.n	8007272 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007270:	d107      	bne.n	8007282 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007280:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728a:	d12a      	bne.n	80072e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007294:	d012      	beq.n	80072bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff ff49 	bl	8007138 <SPI_WaitFlagStateUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02d      	beq.n	8007308 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e026      	b.n	800730a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	2101      	movs	r1, #1
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff ff36 	bl	8007138 <SPI_WaitFlagStateUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01a      	beq.n	8007308 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	f043 0220 	orr.w	r2, r3, #32
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e013      	b.n	800730a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	2101      	movs	r1, #1
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff ff23 	bl	8007138 <SPI_WaitFlagStateUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e000      	b.n	800730a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007320:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <SPI_EndRxTxTransaction+0x7c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <SPI_EndRxTxTransaction+0x80>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0d5b      	lsrs	r3, r3, #21
 800732c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007330:	fb02 f303 	mul.w	r3, r2, r3
 8007334:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733e:	d112      	bne.n	8007366 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2200      	movs	r2, #0
 8007348:	2180      	movs	r1, #128	; 0x80
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fef4 	bl	8007138 <SPI_WaitFlagStateUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e00f      	b.n	8007386 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	3b01      	subs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737c:	2b80      	cmp	r3, #128	; 0x80
 800737e:	d0f2      	beq.n	8007366 <SPI_EndRxTxTransaction+0x52>
 8007380:	e000      	b.n	8007384 <SPI_EndRxTxTransaction+0x70>
        break;
 8007382:	bf00      	nop
  }

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	2000000c 	.word	0x2000000c
 8007394:	165e9f81 	.word	0x165e9f81

08007398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e041      	b.n	800742e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fb fe56 	bl	8003070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f000 fae0 	bl	800799c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b01      	cmp	r3, #1
 800744a:	d001      	beq.n	8007450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e04e      	b.n	80074ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a23      	ldr	r2, [pc, #140]	; (80074fc <HAL_TIM_Base_Start_IT+0xc4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d022      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747a:	d01d      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1f      	ldr	r2, [pc, #124]	; (8007500 <HAL_TIM_Base_Start_IT+0xc8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d018      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <HAL_TIM_Base_Start_IT+0xcc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1c      	ldr	r2, [pc, #112]	; (8007508 <HAL_TIM_Base_Start_IT+0xd0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00e      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1b      	ldr	r2, [pc, #108]	; (800750c <HAL_TIM_Base_Start_IT+0xd4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a19      	ldr	r2, [pc, #100]	; (8007510 <HAL_TIM_Base_Start_IT+0xd8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x80>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a18      	ldr	r2, [pc, #96]	; (8007514 <HAL_TIM_Base_Start_IT+0xdc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d111      	bne.n	80074dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d010      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0201 	orr.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074da:	e007      	b.n	80074ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40000c00 	.word	0x40000c00
 800750c:	40010400 	.word	0x40010400
 8007510:	40014000 	.word	0x40014000
 8007514:	40001800 	.word	0x40001800

08007518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e041      	b.n	80075ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fb fd74 	bl	800302c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f000 fa20 	bl	800799c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d122      	bne.n	8007612 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d11b      	bne.n	8007612 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f06f 0202 	mvn.w	r2, #2
 80075e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f9b1 	bl	8007960 <HAL_TIM_IC_CaptureCallback>
 80075fe:	e005      	b.n	800760c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f9a3 	bl	800794c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9b4 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b04      	cmp	r3, #4
 800761e:	d122      	bne.n	8007666 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b04      	cmp	r3, #4
 800762c:	d11b      	bne.n	8007666 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f06f 0204 	mvn.w	r2, #4
 8007636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f987 	bl	8007960 <HAL_TIM_IC_CaptureCallback>
 8007652:	e005      	b.n	8007660 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f979 	bl	800794c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f98a 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b08      	cmp	r3, #8
 8007672:	d122      	bne.n	80076ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b08      	cmp	r3, #8
 8007680:	d11b      	bne.n	80076ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f06f 0208 	mvn.w	r2, #8
 800768a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2204      	movs	r2, #4
 8007690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f95d 	bl	8007960 <HAL_TIM_IC_CaptureCallback>
 80076a6:	e005      	b.n	80076b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f94f 	bl	800794c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f960 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d122      	bne.n	800770e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d11b      	bne.n	800770e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f06f 0210 	mvn.w	r2, #16
 80076de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2208      	movs	r2, #8
 80076e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f933 	bl	8007960 <HAL_TIM_IC_CaptureCallback>
 80076fa:	e005      	b.n	8007708 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f925 	bl	800794c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f936 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d10e      	bne.n	800773a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b01      	cmp	r3, #1
 8007728:	d107      	bne.n	800773a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f06f 0201 	mvn.w	r2, #1
 8007732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fb fbb3 	bl	8002ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007744:	2b80      	cmp	r3, #128	; 0x80
 8007746:	d10e      	bne.n	8007766 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d107      	bne.n	8007766 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800775e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fbf1 	bl	8007f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d10e      	bne.n	8007792 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d107      	bne.n	8007792 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800778a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f8fb 	bl	8007988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b20      	cmp	r3, #32
 800779e:	d10e      	bne.n	80077be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d107      	bne.n	80077be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f06f 0220 	mvn.w	r2, #32
 80077b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fbbb 	bl	8007f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e0ae      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b0c      	cmp	r3, #12
 80077f2:	f200 809f 	bhi.w	8007934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007831 	.word	0x08007831
 8007800:	08007935 	.word	0x08007935
 8007804:	08007935 	.word	0x08007935
 8007808:	08007935 	.word	0x08007935
 800780c:	08007871 	.word	0x08007871
 8007810:	08007935 	.word	0x08007935
 8007814:	08007935 	.word	0x08007935
 8007818:	08007935 	.word	0x08007935
 800781c:	080078b3 	.word	0x080078b3
 8007820:	08007935 	.word	0x08007935
 8007824:	08007935 	.word	0x08007935
 8007828:	08007935 	.word	0x08007935
 800782c:	080078f3 	.word	0x080078f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f950 	bl	8007adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0208 	orr.w	r2, r2, #8
 800784a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0204 	bic.w	r2, r2, #4
 800785a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6999      	ldr	r1, [r3, #24]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	619a      	str	r2, [r3, #24]
      break;
 800786e:	e064      	b.n	800793a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f9a0 	bl	8007bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800788a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6999      	ldr	r1, [r3, #24]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	021a      	lsls	r2, r3, #8
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	619a      	str	r2, [r3, #24]
      break;
 80078b0:	e043      	b.n	800793a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f9f5 	bl	8007ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0208 	orr.w	r2, r2, #8
 80078cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0204 	bic.w	r2, r2, #4
 80078dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69d9      	ldr	r1, [r3, #28]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	61da      	str	r2, [r3, #28]
      break;
 80078f0:	e023      	b.n	800793a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fa49 	bl	8007d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800790c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800791c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69d9      	ldr	r1, [r3, #28]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	021a      	lsls	r2, r3, #8
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	61da      	str	r2, [r3, #28]
      break;
 8007932:	e002      	b.n	800793a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	75fb      	strb	r3, [r7, #23]
      break;
 8007938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a40      	ldr	r2, [pc, #256]	; (8007ab0 <TIM_Base_SetConfig+0x114>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d00f      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a3d      	ldr	r2, [pc, #244]	; (8007ab4 <TIM_Base_SetConfig+0x118>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00b      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a3c      	ldr	r2, [pc, #240]	; (8007ab8 <TIM_Base_SetConfig+0x11c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3b      	ldr	r2, [pc, #236]	; (8007abc <TIM_Base_SetConfig+0x120>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <TIM_Base_SetConfig+0x124>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d108      	bne.n	80079ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2f      	ldr	r2, [pc, #188]	; (8007ab0 <TIM_Base_SetConfig+0x114>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d02b      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fc:	d027      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2c      	ldr	r2, [pc, #176]	; (8007ab4 <TIM_Base_SetConfig+0x118>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d023      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2b      	ldr	r2, [pc, #172]	; (8007ab8 <TIM_Base_SetConfig+0x11c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d01f      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2a      	ldr	r2, [pc, #168]	; (8007abc <TIM_Base_SetConfig+0x120>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01b      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a29      	ldr	r2, [pc, #164]	; (8007ac0 <TIM_Base_SetConfig+0x124>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d017      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a28      	ldr	r2, [pc, #160]	; (8007ac4 <TIM_Base_SetConfig+0x128>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <TIM_Base_SetConfig+0x12c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00f      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a26      	ldr	r2, [pc, #152]	; (8007acc <TIM_Base_SetConfig+0x130>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00b      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a25      	ldr	r2, [pc, #148]	; (8007ad0 <TIM_Base_SetConfig+0x134>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a24      	ldr	r2, [pc, #144]	; (8007ad4 <TIM_Base_SetConfig+0x138>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a23      	ldr	r2, [pc, #140]	; (8007ad8 <TIM_Base_SetConfig+0x13c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <TIM_Base_SetConfig+0x114>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_Base_SetConfig+0xf8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a0c      	ldr	r2, [pc, #48]	; (8007ac0 <TIM_Base_SetConfig+0x124>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d103      	bne.n	8007a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	615a      	str	r2, [r3, #20]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40010400 	.word	0x40010400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40014400 	.word	0x40014400
 8007acc:	40014800 	.word	0x40014800
 8007ad0:	40001800 	.word	0x40001800
 8007ad4:	40001c00 	.word	0x40001c00
 8007ad8:	40002000 	.word	0x40002000

08007adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0201 	bic.w	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f023 0302 	bic.w	r3, r3, #2
 8007b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a20      	ldr	r2, [pc, #128]	; (8007bb4 <TIM_OC1_SetConfig+0xd8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_OC1_SetConfig+0x64>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <TIM_OC1_SetConfig+0xdc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d10c      	bne.n	8007b5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0308 	bic.w	r3, r3, #8
 8007b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f023 0304 	bic.w	r3, r3, #4
 8007b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a15      	ldr	r2, [pc, #84]	; (8007bb4 <TIM_OC1_SetConfig+0xd8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_OC1_SetConfig+0x8e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <TIM_OC1_SetConfig+0xdc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d111      	bne.n	8007b8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	40010000 	.word	0x40010000
 8007bb8:	40010400 	.word	0x40010400

08007bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f023 0210 	bic.w	r2, r3, #16
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0320 	bic.w	r3, r3, #32
 8007c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a22      	ldr	r2, [pc, #136]	; (8007ca0 <TIM_OC2_SetConfig+0xe4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <TIM_OC2_SetConfig+0x68>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a21      	ldr	r2, [pc, #132]	; (8007ca4 <TIM_OC2_SetConfig+0xe8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d10d      	bne.n	8007c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a17      	ldr	r2, [pc, #92]	; (8007ca0 <TIM_OC2_SetConfig+0xe4>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_OC2_SetConfig+0x94>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a16      	ldr	r2, [pc, #88]	; (8007ca4 <TIM_OC2_SetConfig+0xe8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d113      	bne.n	8007c78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40010400 	.word	0x40010400

08007ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0303 	bic.w	r3, r3, #3
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a21      	ldr	r2, [pc, #132]	; (8007d88 <TIM_OC3_SetConfig+0xe0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_OC3_SetConfig+0x66>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a20      	ldr	r2, [pc, #128]	; (8007d8c <TIM_OC3_SetConfig+0xe4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d10d      	bne.n	8007d2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a16      	ldr	r2, [pc, #88]	; (8007d88 <TIM_OC3_SetConfig+0xe0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d003      	beq.n	8007d3a <TIM_OC3_SetConfig+0x92>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <TIM_OC3_SetConfig+0xe4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d113      	bne.n	8007d62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	621a      	str	r2, [r3, #32]
}
 8007d7c:	bf00      	nop
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	40010400 	.word	0x40010400

08007d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	031b      	lsls	r3, r3, #12
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a12      	ldr	r2, [pc, #72]	; (8007e34 <TIM_OC4_SetConfig+0xa4>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d003      	beq.n	8007df8 <TIM_OC4_SetConfig+0x68>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a11      	ldr	r2, [pc, #68]	; (8007e38 <TIM_OC4_SetConfig+0xa8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d109      	bne.n	8007e0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	019b      	lsls	r3, r3, #6
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	621a      	str	r2, [r3, #32]
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40010000 	.word	0x40010000
 8007e38:	40010400 	.word	0x40010400

08007e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e05a      	b.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea0:	d01d      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1a      	ldr	r2, [pc, #104]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a18      	ldr	r2, [pc, #96]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a17      	ldr	r2, [pc, #92]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d10c      	bne.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	40010400 	.word	0x40010400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40001800 	.word	0x40001800

08007f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e03f      	b.n	8007fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fb f948 	bl	8003218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2224      	movs	r2, #36	; 0x24
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f929 	bl	80081f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b08a      	sub	sp, #40	; 0x28
 8007ffa:	af02      	add	r7, sp, #8
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b20      	cmp	r3, #32
 8008014:	d17c      	bne.n	8008110 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <HAL_UART_Transmit+0x2c>
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e075      	b.n	8008112 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UART_Transmit+0x3e>
 8008030:	2302      	movs	r3, #2
 8008032:	e06e      	b.n	8008112 <HAL_UART_Transmit+0x11c>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2221      	movs	r2, #33	; 0x21
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800804a:	f7fb fa15 	bl	8003478 <HAL_GetTick>
 800804e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	88fa      	ldrh	r2, [r7, #6]
 800805a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008064:	d108      	bne.n	8008078 <HAL_UART_Transmit+0x82>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	e003      	b.n	8008080 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008088:	e02a      	b.n	80080e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2200      	movs	r2, #0
 8008092:	2180      	movs	r1, #128	; 0x80
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 f840 	bl	800811a <UART_WaitOnFlagUntilTimeout>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e036      	b.n	8008112 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10b      	bne.n	80080c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	3302      	adds	r3, #2
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	e007      	b.n	80080d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	3301      	adds	r3, #1
 80080d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1cf      	bne.n	800808a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2200      	movs	r2, #0
 80080f2:	2140      	movs	r1, #64	; 0x40
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f810 	bl	800811a <UART_WaitOnFlagUntilTimeout>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e006      	b.n	8008112 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b090      	sub	sp, #64	; 0x40
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	4613      	mov	r3, r2
 8008128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812a:	e050      	b.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d04c      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <UART_WaitOnFlagUntilTimeout+0x30>
 800813a:	f7fb f99d 	bl	8003478 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008146:	429a      	cmp	r2, r3
 8008148:	d241      	bcs.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800816a:	637a      	str	r2, [r7, #52]	; 0x34
 800816c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e5      	bne.n	800814a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	613b      	str	r3, [r7, #16]
   return(result);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	63bb      	str	r3, [r7, #56]	; 0x38
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3314      	adds	r3, #20
 800819c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800819e:	623a      	str	r2, [r7, #32]
 80081a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e5      	bne.n	800817e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e00f      	b.n	80081ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	bf0c      	ite	eq
 80081de:	2301      	moveq	r3, #1
 80081e0:	2300      	movne	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d09f      	beq.n	800812c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3740      	adds	r7, #64	; 0x40
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081fc:	b0c0      	sub	sp, #256	; 0x100
 80081fe:	af00      	add	r7, sp, #0
 8008200:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	ea40 0301 	orr.w	r3, r0, r1
 8008220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	431a      	orrs	r2, r3
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	431a      	orrs	r2, r3
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008250:	f021 010c 	bic.w	r1, r1, #12
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800825e:	430b      	orrs	r3, r1
 8008260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800826e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008272:	6999      	ldr	r1, [r3, #24]
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	ea40 0301 	orr.w	r3, r0, r1
 800827e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b8f      	ldr	r3, [pc, #572]	; (80084c4 <UART_SetConfig+0x2cc>)
 8008288:	429a      	cmp	r2, r3
 800828a:	d005      	beq.n	8008298 <UART_SetConfig+0xa0>
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b8d      	ldr	r3, [pc, #564]	; (80084c8 <UART_SetConfig+0x2d0>)
 8008294:	429a      	cmp	r2, r3
 8008296:	d104      	bne.n	80082a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fe f9a4 	bl	80065e4 <HAL_RCC_GetPCLK2Freq>
 800829c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082a0:	e003      	b.n	80082aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082a2:	f7fe f98b 	bl	80065bc <HAL_RCC_GetPCLK1Freq>
 80082a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b4:	f040 810c 	bne.w	80084d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082ca:	4622      	mov	r2, r4
 80082cc:	462b      	mov	r3, r5
 80082ce:	1891      	adds	r1, r2, r2
 80082d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80082d2:	415b      	adcs	r3, r3
 80082d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082da:	4621      	mov	r1, r4
 80082dc:	eb12 0801 	adds.w	r8, r2, r1
 80082e0:	4629      	mov	r1, r5
 80082e2:	eb43 0901 	adc.w	r9, r3, r1
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082fa:	4690      	mov	r8, r2
 80082fc:	4699      	mov	r9, r3
 80082fe:	4623      	mov	r3, r4
 8008300:	eb18 0303 	adds.w	r3, r8, r3
 8008304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008308:	462b      	mov	r3, r5
 800830a:	eb49 0303 	adc.w	r3, r9, r3
 800830e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800831e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008326:	460b      	mov	r3, r1
 8008328:	18db      	adds	r3, r3, r3
 800832a:	653b      	str	r3, [r7, #80]	; 0x50
 800832c:	4613      	mov	r3, r2
 800832e:	eb42 0303 	adc.w	r3, r2, r3
 8008332:	657b      	str	r3, [r7, #84]	; 0x54
 8008334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800833c:	f7f7 ff4c 	bl	80001d8 <__aeabi_uldivmod>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4b61      	ldr	r3, [pc, #388]	; (80084cc <UART_SetConfig+0x2d4>)
 8008346:	fba3 2302 	umull	r2, r3, r3, r2
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	011c      	lsls	r4, r3, #4
 800834e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008352:	2200      	movs	r2, #0
 8008354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008358:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800835c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	1891      	adds	r1, r2, r2
 8008366:	64b9      	str	r1, [r7, #72]	; 0x48
 8008368:	415b      	adcs	r3, r3
 800836a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800836c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008370:	4641      	mov	r1, r8
 8008372:	eb12 0a01 	adds.w	sl, r2, r1
 8008376:	4649      	mov	r1, r9
 8008378:	eb43 0b01 	adc.w	fp, r3, r1
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800838c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008390:	4692      	mov	sl, r2
 8008392:	469b      	mov	fp, r3
 8008394:	4643      	mov	r3, r8
 8008396:	eb1a 0303 	adds.w	r3, sl, r3
 800839a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800839e:	464b      	mov	r3, r9
 80083a0:	eb4b 0303 	adc.w	r3, fp, r3
 80083a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083bc:	460b      	mov	r3, r1
 80083be:	18db      	adds	r3, r3, r3
 80083c0:	643b      	str	r3, [r7, #64]	; 0x40
 80083c2:	4613      	mov	r3, r2
 80083c4:	eb42 0303 	adc.w	r3, r2, r3
 80083c8:	647b      	str	r3, [r7, #68]	; 0x44
 80083ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083d2:	f7f7 ff01 	bl	80001d8 <__aeabi_uldivmod>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	4b3b      	ldr	r3, [pc, #236]	; (80084cc <UART_SetConfig+0x2d4>)
 80083de:	fba3 2301 	umull	r2, r3, r3, r1
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	2264      	movs	r2, #100	; 0x64
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	1acb      	subs	r3, r1, r3
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083f2:	4b36      	ldr	r3, [pc, #216]	; (80084cc <UART_SetConfig+0x2d4>)
 80083f4:	fba3 2302 	umull	r2, r3, r3, r2
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008400:	441c      	add	r4, r3
 8008402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008406:	2200      	movs	r2, #0
 8008408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800840c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	1891      	adds	r1, r2, r2
 800841a:	63b9      	str	r1, [r7, #56]	; 0x38
 800841c:	415b      	adcs	r3, r3
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008424:	4641      	mov	r1, r8
 8008426:	1851      	adds	r1, r2, r1
 8008428:	6339      	str	r1, [r7, #48]	; 0x30
 800842a:	4649      	mov	r1, r9
 800842c:	414b      	adcs	r3, r1
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800843c:	4659      	mov	r1, fp
 800843e:	00cb      	lsls	r3, r1, #3
 8008440:	4651      	mov	r1, sl
 8008442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008446:	4651      	mov	r1, sl
 8008448:	00ca      	lsls	r2, r1, #3
 800844a:	4610      	mov	r0, r2
 800844c:	4619      	mov	r1, r3
 800844e:	4603      	mov	r3, r0
 8008450:	4642      	mov	r2, r8
 8008452:	189b      	adds	r3, r3, r2
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008458:	464b      	mov	r3, r9
 800845a:	460a      	mov	r2, r1
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008470:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008478:	460b      	mov	r3, r1
 800847a:	18db      	adds	r3, r3, r3
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
 800847e:	4613      	mov	r3, r2
 8008480:	eb42 0303 	adc.w	r3, r2, r3
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800848a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800848e:	f7f7 fea3 	bl	80001d8 <__aeabi_uldivmod>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <UART_SetConfig+0x2d4>)
 8008498:	fba3 1302 	umull	r1, r3, r3, r2
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	2164      	movs	r1, #100	; 0x64
 80084a0:	fb01 f303 	mul.w	r3, r1, r3
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	3332      	adds	r3, #50	; 0x32
 80084aa:	4a08      	ldr	r2, [pc, #32]	; (80084cc <UART_SetConfig+0x2d4>)
 80084ac:	fba2 2303 	umull	r2, r3, r2, r3
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	f003 0207 	and.w	r2, r3, #7
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4422      	add	r2, r4
 80084be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084c0:	e105      	b.n	80086ce <UART_SetConfig+0x4d6>
 80084c2:	bf00      	nop
 80084c4:	40011000 	.word	0x40011000
 80084c8:	40011400 	.word	0x40011400
 80084cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084e2:	4642      	mov	r2, r8
 80084e4:	464b      	mov	r3, r9
 80084e6:	1891      	adds	r1, r2, r2
 80084e8:	6239      	str	r1, [r7, #32]
 80084ea:	415b      	adcs	r3, r3
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
 80084ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084f2:	4641      	mov	r1, r8
 80084f4:	1854      	adds	r4, r2, r1
 80084f6:	4649      	mov	r1, r9
 80084f8:	eb43 0501 	adc.w	r5, r3, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	00eb      	lsls	r3, r5, #3
 8008506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800850a:	00e2      	lsls	r2, r4, #3
 800850c:	4614      	mov	r4, r2
 800850e:	461d      	mov	r5, r3
 8008510:	4643      	mov	r3, r8
 8008512:	18e3      	adds	r3, r4, r3
 8008514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008518:	464b      	mov	r3, r9
 800851a:	eb45 0303 	adc.w	r3, r5, r3
 800851e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800852e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800853e:	4629      	mov	r1, r5
 8008540:	008b      	lsls	r3, r1, #2
 8008542:	4621      	mov	r1, r4
 8008544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008548:	4621      	mov	r1, r4
 800854a:	008a      	lsls	r2, r1, #2
 800854c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008550:	f7f7 fe42 	bl	80001d8 <__aeabi_uldivmod>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4b60      	ldr	r3, [pc, #384]	; (80086dc <UART_SetConfig+0x4e4>)
 800855a:	fba3 2302 	umull	r2, r3, r3, r2
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	011c      	lsls	r4, r3, #4
 8008562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008566:	2200      	movs	r2, #0
 8008568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800856c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	1891      	adds	r1, r2, r2
 800857a:	61b9      	str	r1, [r7, #24]
 800857c:	415b      	adcs	r3, r3
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008584:	4641      	mov	r1, r8
 8008586:	1851      	adds	r1, r2, r1
 8008588:	6139      	str	r1, [r7, #16]
 800858a:	4649      	mov	r1, r9
 800858c:	414b      	adcs	r3, r1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800859c:	4659      	mov	r1, fp
 800859e:	00cb      	lsls	r3, r1, #3
 80085a0:	4651      	mov	r1, sl
 80085a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085a6:	4651      	mov	r1, sl
 80085a8:	00ca      	lsls	r2, r1, #3
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	4642      	mov	r2, r8
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085b8:	464b      	mov	r3, r9
 80085ba:	460a      	mov	r2, r1
 80085bc:	eb42 0303 	adc.w	r3, r2, r3
 80085c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80085ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085dc:	4649      	mov	r1, r9
 80085de:	008b      	lsls	r3, r1, #2
 80085e0:	4641      	mov	r1, r8
 80085e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085e6:	4641      	mov	r1, r8
 80085e8:	008a      	lsls	r2, r1, #2
 80085ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085ee:	f7f7 fdf3 	bl	80001d8 <__aeabi_uldivmod>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4b39      	ldr	r3, [pc, #228]	; (80086dc <UART_SetConfig+0x4e4>)
 80085f8:	fba3 1302 	umull	r1, r3, r3, r2
 80085fc:	095b      	lsrs	r3, r3, #5
 80085fe:	2164      	movs	r1, #100	; 0x64
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	3332      	adds	r3, #50	; 0x32
 800860a:	4a34      	ldr	r2, [pc, #208]	; (80086dc <UART_SetConfig+0x4e4>)
 800860c:	fba2 2303 	umull	r2, r3, r2, r3
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008616:	441c      	add	r4, r3
 8008618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800861c:	2200      	movs	r2, #0
 800861e:	673b      	str	r3, [r7, #112]	; 0x70
 8008620:	677a      	str	r2, [r7, #116]	; 0x74
 8008622:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	1891      	adds	r1, r2, r2
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	415b      	adcs	r3, r3
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008636:	4641      	mov	r1, r8
 8008638:	1851      	adds	r1, r2, r1
 800863a:	6039      	str	r1, [r7, #0]
 800863c:	4649      	mov	r1, r9
 800863e:	414b      	adcs	r3, r1
 8008640:	607b      	str	r3, [r7, #4]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800864e:	4659      	mov	r1, fp
 8008650:	00cb      	lsls	r3, r1, #3
 8008652:	4651      	mov	r1, sl
 8008654:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008658:	4651      	mov	r1, sl
 800865a:	00ca      	lsls	r2, r1, #3
 800865c:	4610      	mov	r0, r2
 800865e:	4619      	mov	r1, r3
 8008660:	4603      	mov	r3, r0
 8008662:	4642      	mov	r2, r8
 8008664:	189b      	adds	r3, r3, r2
 8008666:	66bb      	str	r3, [r7, #104]	; 0x68
 8008668:	464b      	mov	r3, r9
 800866a:	460a      	mov	r2, r1
 800866c:	eb42 0303 	adc.w	r3, r2, r3
 8008670:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	663b      	str	r3, [r7, #96]	; 0x60
 800867c:	667a      	str	r2, [r7, #100]	; 0x64
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800868a:	4649      	mov	r1, r9
 800868c:	008b      	lsls	r3, r1, #2
 800868e:	4641      	mov	r1, r8
 8008690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008694:	4641      	mov	r1, r8
 8008696:	008a      	lsls	r2, r1, #2
 8008698:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800869c:	f7f7 fd9c 	bl	80001d8 <__aeabi_uldivmod>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <UART_SetConfig+0x4e4>)
 80086a6:	fba3 1302 	umull	r1, r3, r3, r2
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	2164      	movs	r1, #100	; 0x64
 80086ae:	fb01 f303 	mul.w	r3, r1, r3
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	3332      	adds	r3, #50	; 0x32
 80086b8:	4a08      	ldr	r2, [pc, #32]	; (80086dc <UART_SetConfig+0x4e4>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	095b      	lsrs	r3, r3, #5
 80086c0:	f003 020f 	and.w	r2, r3, #15
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4422      	add	r2, r4
 80086cc:	609a      	str	r2, [r3, #8]
}
 80086ce:	bf00      	nop
 80086d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086d4:	46bd      	mov	sp, r7
 80086d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086da:	bf00      	nop
 80086dc:	51eb851f 	.word	0x51eb851f

080086e0 <__libc_init_array>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	4d0d      	ldr	r5, [pc, #52]	; (8008718 <__libc_init_array+0x38>)
 80086e4:	4c0d      	ldr	r4, [pc, #52]	; (800871c <__libc_init_array+0x3c>)
 80086e6:	1b64      	subs	r4, r4, r5
 80086e8:	10a4      	asrs	r4, r4, #2
 80086ea:	2600      	movs	r6, #0
 80086ec:	42a6      	cmp	r6, r4
 80086ee:	d109      	bne.n	8008704 <__libc_init_array+0x24>
 80086f0:	4d0b      	ldr	r5, [pc, #44]	; (8008720 <__libc_init_array+0x40>)
 80086f2:	4c0c      	ldr	r4, [pc, #48]	; (8008724 <__libc_init_array+0x44>)
 80086f4:	f000 f87c 	bl	80087f0 <_init>
 80086f8:	1b64      	subs	r4, r4, r5
 80086fa:	10a4      	asrs	r4, r4, #2
 80086fc:	2600      	movs	r6, #0
 80086fe:	42a6      	cmp	r6, r4
 8008700:	d105      	bne.n	800870e <__libc_init_array+0x2e>
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	f855 3b04 	ldr.w	r3, [r5], #4
 8008708:	4798      	blx	r3
 800870a:	3601      	adds	r6, #1
 800870c:	e7ee      	b.n	80086ec <__libc_init_array+0xc>
 800870e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008712:	4798      	blx	r3
 8008714:	3601      	adds	r6, #1
 8008716:	e7f2      	b.n	80086fe <__libc_init_array+0x1e>
 8008718:	0800af4c 	.word	0x0800af4c
 800871c:	0800af4c 	.word	0x0800af4c
 8008720:	0800af4c 	.word	0x0800af4c
 8008724:	0800af50 	.word	0x0800af50

08008728 <__itoa>:
 8008728:	1e93      	subs	r3, r2, #2
 800872a:	2b22      	cmp	r3, #34	; 0x22
 800872c:	b510      	push	{r4, lr}
 800872e:	460c      	mov	r4, r1
 8008730:	d904      	bls.n	800873c <__itoa+0x14>
 8008732:	2300      	movs	r3, #0
 8008734:	700b      	strb	r3, [r1, #0]
 8008736:	461c      	mov	r4, r3
 8008738:	4620      	mov	r0, r4
 800873a:	bd10      	pop	{r4, pc}
 800873c:	2a0a      	cmp	r2, #10
 800873e:	d109      	bne.n	8008754 <__itoa+0x2c>
 8008740:	2800      	cmp	r0, #0
 8008742:	da07      	bge.n	8008754 <__itoa+0x2c>
 8008744:	232d      	movs	r3, #45	; 0x2d
 8008746:	700b      	strb	r3, [r1, #0]
 8008748:	4240      	negs	r0, r0
 800874a:	2101      	movs	r1, #1
 800874c:	4421      	add	r1, r4
 800874e:	f000 f80d 	bl	800876c <__utoa>
 8008752:	e7f1      	b.n	8008738 <__itoa+0x10>
 8008754:	2100      	movs	r1, #0
 8008756:	e7f9      	b.n	800874c <__itoa+0x24>

08008758 <itoa>:
 8008758:	f7ff bfe6 	b.w	8008728 <__itoa>

0800875c <memset>:
 800875c:	4402      	add	r2, r0
 800875e:	4603      	mov	r3, r0
 8008760:	4293      	cmp	r3, r2
 8008762:	d100      	bne.n	8008766 <memset+0xa>
 8008764:	4770      	bx	lr
 8008766:	f803 1b01 	strb.w	r1, [r3], #1
 800876a:	e7f9      	b.n	8008760 <memset+0x4>

0800876c <__utoa>:
 800876c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876e:	4c1f      	ldr	r4, [pc, #124]	; (80087ec <__utoa+0x80>)
 8008770:	b08b      	sub	sp, #44	; 0x2c
 8008772:	4605      	mov	r5, r0
 8008774:	460b      	mov	r3, r1
 8008776:	466e      	mov	r6, sp
 8008778:	f104 0c20 	add.w	ip, r4, #32
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	6861      	ldr	r1, [r4, #4]
 8008780:	4637      	mov	r7, r6
 8008782:	c703      	stmia	r7!, {r0, r1}
 8008784:	3408      	adds	r4, #8
 8008786:	4564      	cmp	r4, ip
 8008788:	463e      	mov	r6, r7
 800878a:	d1f7      	bne.n	800877c <__utoa+0x10>
 800878c:	7921      	ldrb	r1, [r4, #4]
 800878e:	7139      	strb	r1, [r7, #4]
 8008790:	1e91      	subs	r1, r2, #2
 8008792:	6820      	ldr	r0, [r4, #0]
 8008794:	6038      	str	r0, [r7, #0]
 8008796:	2922      	cmp	r1, #34	; 0x22
 8008798:	f04f 0100 	mov.w	r1, #0
 800879c:	d904      	bls.n	80087a8 <__utoa+0x3c>
 800879e:	7019      	strb	r1, [r3, #0]
 80087a0:	460b      	mov	r3, r1
 80087a2:	4618      	mov	r0, r3
 80087a4:	b00b      	add	sp, #44	; 0x2c
 80087a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a8:	1e58      	subs	r0, r3, #1
 80087aa:	4684      	mov	ip, r0
 80087ac:	fbb5 f7f2 	udiv	r7, r5, r2
 80087b0:	fb02 5617 	mls	r6, r2, r7, r5
 80087b4:	3628      	adds	r6, #40	; 0x28
 80087b6:	446e      	add	r6, sp
 80087b8:	460c      	mov	r4, r1
 80087ba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80087be:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80087c2:	462e      	mov	r6, r5
 80087c4:	42b2      	cmp	r2, r6
 80087c6:	f101 0101 	add.w	r1, r1, #1
 80087ca:	463d      	mov	r5, r7
 80087cc:	d9ee      	bls.n	80087ac <__utoa+0x40>
 80087ce:	2200      	movs	r2, #0
 80087d0:	545a      	strb	r2, [r3, r1]
 80087d2:	1919      	adds	r1, r3, r4
 80087d4:	1aa5      	subs	r5, r4, r2
 80087d6:	42aa      	cmp	r2, r5
 80087d8:	dae3      	bge.n	80087a2 <__utoa+0x36>
 80087da:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80087de:	780e      	ldrb	r6, [r1, #0]
 80087e0:	7006      	strb	r6, [r0, #0]
 80087e2:	3201      	adds	r2, #1
 80087e4:	f801 5901 	strb.w	r5, [r1], #-1
 80087e8:	e7f4      	b.n	80087d4 <__utoa+0x68>
 80087ea:	bf00      	nop
 80087ec:	0800af1c 	.word	0x0800af1c

080087f0 <_init>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr

080087fc <_fini>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	bf00      	nop
 8008800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008802:	bc08      	pop	{r3}
 8008804:	469e      	mov	lr, r3
 8008806:	4770      	bx	lr
