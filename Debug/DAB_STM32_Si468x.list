
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003644  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a88  08010a88  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08010a88  08010a88  00020a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a90  08010a90  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a90  08010a90  00020a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a94  08010a94  00020a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08010a98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030188  2**0
                  CONTENTS
 10 .bss          00007054  20000188  20000188  00030188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200071dc  200071dc  00030188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196dd  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ad  00000000  00000000  00049895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0004d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0004e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024596  00000000  00000000  0004fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb32  00000000  00000000  00074146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c36  00000000  00000000  00090c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001638ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000592c  00000000  00000000  00163900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d42c 	.word	0x0800d42c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d42c 	.word	0x0800d42c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004f4:	f000 f914 	bl	8000720 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fb97 	bl	8000c2c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004fe:	20cb      	movs	r0, #203	; 0xcb
 8000500:	f000 fb94 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8000504:	2039      	movs	r0, #57	; 0x39
 8000506:	f000 fba0 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800050a:	202c      	movs	r0, #44	; 0x2c
 800050c:	f000 fb9d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fb9a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000516:	2034      	movs	r0, #52	; 0x34
 8000518:	f000 fb97 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fb94 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8000522:	20cf      	movs	r0, #207	; 0xcf
 8000524:	f000 fb82 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fb8e 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800052e:	20c1      	movs	r0, #193	; 0xc1
 8000530:	f000 fb8b 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000534:	2030      	movs	r0, #48	; 0x30
 8000536:	f000 fb88 	bl	8000c4a <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800053a:	20e8      	movs	r0, #232	; 0xe8
 800053c:	f000 fb76 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000540:	2085      	movs	r0, #133	; 0x85
 8000542:	f000 fb82 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb7f 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fb7c 	bl	8000c4a <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8000552:	20ea      	movs	r0, #234	; 0xea
 8000554:	f000 fb6a 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb76 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fb73 	bl	8000c4a <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000564:	20ed      	movs	r0, #237	; 0xed
 8000566:	f000 fb61 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f000 fb6d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 fb6a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000576:	2012      	movs	r0, #18
 8000578:	f000 fb67 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 800057c:	2081      	movs	r0, #129	; 0x81
 800057e:	f000 fb64 	bl	8000c4a <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8000582:	20f7      	movs	r0, #247	; 0xf7
 8000584:	f000 fb52 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 fb5e 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800058e:	20c0      	movs	r0, #192	; 0xc0
 8000590:	f000 fb4c 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000594:	2010      	movs	r0, #16
 8000596:	f000 fb58 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 800059a:	20c1      	movs	r0, #193	; 0xc1
 800059c:	f000 fb46 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005a0:	2010      	movs	r0, #16
 80005a2:	f000 fb52 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005a6:	20c5      	movs	r0, #197	; 0xc5
 80005a8:	f000 fb40 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005ac:	203e      	movs	r0, #62	; 0x3e
 80005ae:	f000 fb4c 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fb49 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005b8:	20c7      	movs	r0, #199	; 0xc7
 80005ba:	f000 fb37 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005be:	2086      	movs	r0, #134	; 0x86
 80005c0:	f000 fb43 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005c4:	2036      	movs	r0, #54	; 0x36
 80005c6:	f000 fb31 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005ca:	2048      	movs	r0, #72	; 0x48
 80005cc:	f000 fb3d 	bl	8000c4a <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005d0:	203a      	movs	r0, #58	; 0x3a
 80005d2:	f000 fb2b 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005d6:	2055      	movs	r0, #85	; 0x55
 80005d8:	f000 fb37 	bl	8000c4a <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005dc:	20b1      	movs	r0, #177	; 0xb1
 80005de:	f000 fb25 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fb31 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005e8:	2018      	movs	r0, #24
 80005ea:	f000 fb2e 	bl	8000c4a <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005ee:	20b6      	movs	r0, #182	; 0xb6
 80005f0:	f000 fb1c 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005f4:	2008      	movs	r0, #8
 80005f6:	f000 fb28 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005fa:	2082      	movs	r0, #130	; 0x82
 80005fc:	f000 fb25 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000600:	2027      	movs	r0, #39	; 0x27
 8000602:	f000 fb22 	bl	8000c4a <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8000606:	20f2      	movs	r0, #242	; 0xf2
 8000608:	f000 fb10 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fb1c 	bl	8000c4a <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8000612:	2026      	movs	r0, #38	; 0x26
 8000614:	f000 fb0a 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fb16 	bl	8000c4a <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800061e:	20e0      	movs	r0, #224	; 0xe0
 8000620:	f000 fb04 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000624:	200f      	movs	r0, #15
 8000626:	f000 fb10 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800062a:	2031      	movs	r0, #49	; 0x31
 800062c:	f000 fb0d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000630:	202b      	movs	r0, #43	; 0x2b
 8000632:	f000 fb0a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000636:	200c      	movs	r0, #12
 8000638:	f000 fb07 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800063c:	200e      	movs	r0, #14
 800063e:	f000 fb04 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000642:	2008      	movs	r0, #8
 8000644:	f000 fb01 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000648:	204e      	movs	r0, #78	; 0x4e
 800064a:	f000 fafe 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800064e:	20f1      	movs	r0, #241	; 0xf1
 8000650:	f000 fafb 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000654:	2037      	movs	r0, #55	; 0x37
 8000656:	f000 faf8 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800065a:	2007      	movs	r0, #7
 800065c:	f000 faf5 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000660:	2010      	movs	r0, #16
 8000662:	f000 faf2 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 faef 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800066c:	200e      	movs	r0, #14
 800066e:	f000 faec 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8000672:	2009      	movs	r0, #9
 8000674:	f000 fae9 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fae6 	bl	8000c4a <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800067e:	20e1      	movs	r0, #225	; 0xe1
 8000680:	f000 fad4 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fae0 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800068a:	200e      	movs	r0, #14
 800068c:	f000 fadd 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8000690:	2014      	movs	r0, #20
 8000692:	f000 fada 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 fad7 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 800069c:	2011      	movs	r0, #17
 800069e:	f000 fad4 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006a2:	2007      	movs	r0, #7
 80006a4:	f000 fad1 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 face 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006ae:	20c1      	movs	r0, #193	; 0xc1
 80006b0:	f000 facb 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006b4:	2048      	movs	r0, #72	; 0x48
 80006b6:	f000 fac8 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f000 fac5 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f000 fac2 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006c6:	200c      	movs	r0, #12
 80006c8:	f000 fabf 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006cc:	2031      	movs	r0, #49	; 0x31
 80006ce:	f000 fabc 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006d2:	2036      	movs	r0, #54	; 0x36
 80006d4:	f000 fab9 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006d8:	200f      	movs	r0, #15
 80006da:	f000 fab6 	bl	8000c4a <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f000 faa4 	bl	8000c2c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006e4:	2029      	movs	r0, #41	; 0x29
 80006e6:	f000 faa1 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006ea:	202c      	movs	r0, #44	; 0x2c
 80006ec:	f000 faad 	bl	8000c4a <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f83d 	bl	8000770 <ILI9341_Set_Rotation>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 8000706:	1df9      	adds	r1, r7, #7
 8000708:	2301      	movs	r3, #1
 800070a:	2201      	movs	r2, #1
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <ILI9341_SPI_Send+0x20>)
 800070e:	f00a fe24 	bl	800b35a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20006f58 	.word	0x20006f58

08000720 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	RESET_ON;
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <ILI9341_Reset+0x4c>)
 800072c:	f007 fc40 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000730:	2032      	movs	r0, #50	; 0x32
 8000732:	f006 fe39 	bl	80073a8 <HAL_Delay>
	RESET_OFF;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <ILI9341_Reset+0x4c>)
 800073e:	f007 fc37 	bl	8007fb0 <HAL_GPIO_WritePin>
	CS_ON;
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <ILI9341_Reset+0x4c>)
 800074a:	f007 fc31 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f006 fe2a 	bl	80073a8 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fa69 	bl	8000c2c <ILI9341_Send_Command>
	CS_OFF;
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_Reset+0x4c>)
 8000762:	f007 fc25 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020c00 	.word	0x40020c00

08000770 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fa56 	bl	8000c2c <ILI9341_Send_Command>
	switch (rotation) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d836      	bhi.n	80007f4 <ILI9341_Set_Rotation+0x84>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <ILI9341_Set_Rotation+0x1c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007b3 	.word	0x080007b3
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007df 	.word	0x080007df
	case 0:
		ILI9341_Send_Data(0x48);
 800079c:	2048      	movs	r0, #72	; 0x48
 800079e:	f000 fa54 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 240;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007a4:	22f0      	movs	r2, #240	; 0xf0
 80007a6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	601a      	str	r2, [r3, #0]
		break;
 80007b0:	e020      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f000 fa49 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 320;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	601a      	str	r2, [r3, #0]
		break;
 80007c6:	e015      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007c8:	2088      	movs	r0, #136	; 0x88
 80007ca:	f000 fa3e 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007d0:	22f0      	movs	r2, #240	; 0xf0
 80007d2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	601a      	str	r2, [r3, #0]
		break;
 80007dc:	e00a      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007de:	20e8      	movs	r0, #232	; 0xe8
 80007e0:	f000 fa33 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ea:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007ee:	22f0      	movs	r2, #240	; 0xf0
 80007f0:	601a      	str	r2, [r3, #0]
		break;
 80007f2:	bf00      	nop
	}
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000004 	.word	0x20000004

08000804 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000818:	f007 fbca 	bl	8007fb0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f007 fbc4 	bl	8007fb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff66 	bl	80006fc <ILI9341_SPI_Send>

	DC_DATA;
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000838:	f007 fbba 	bl	8007fb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	0e1b      	lsrs	r3, r3, #24
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff5a 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff54 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff4e 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff49 	bl	80006fc <ILI9341_SPI_Send>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000898:	6979      	ldr	r1, [r7, #20]
 800089a:	202a      	movs	r0, #42	; 0x2a
 800089c:	f7ff ffb2 	bl	8000804 <ILI9341_SPI_Send_32>
	t = y1;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	041b      	lsls	r3, r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	202b      	movs	r0, #43	; 0x2b
 80008b6:	f7ff ffa5 	bl	8000804 <ILI9341_SPI_Send_32>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ffcc 	bl	8000878 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	fb01 f202 	mul.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9b7 	bl	8000c68 <ILI9341_Send_Burst>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db31      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db2e      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d229      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d224      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	f7ff ff96 	bl	8000878 <ILI9341_Set_Address>
	DC_COMMAND;
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000954:	f007 fb2c 	bl	8007fb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000958:	202c      	movs	r0, #44	; 0x2c
 800095a:	f7ff fecf 	bl	80006fc <ILI9341_SPI_Send>
	DC_DATA;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000966:	f007 fb23 	bl	8007fb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec3 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff febe 	bl	80006fc <ILI9341_SPI_Send>
 8000980:	e000      	b.n	8000984 <ILI9341_Draw_Pixel+0x78>
		return;
 8000982:	bf00      	nop
}
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004
 8000994:	40020c00 	.word	0x40020c00

08000998 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f7ff ff63 	bl	8000878 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	b298      	uxth	r0, r3
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	3301      	adds	r3, #1
 80009be:	4619      	mov	r1, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	fb01 f303 	mul.w	r3, r1, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 f94b 	bl	8000c68 <ILI9341_Send_Burst>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b08c      	sub	sp, #48	; 0x30
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1acb      	subs	r3, r1, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bfb8      	it	lt
 8000a00:	425b      	neglt	r3, r3
 8000a02:	429a      	cmp	r2, r3
 8000a04:	bfcc      	ite	gt
 8000a06:	2301      	movgt	r3, #1
 8000a08:	2300      	movle	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00d      	beq.n	8000a30 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a20:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	843b      	strh	r3, [r7, #32]
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d90d      	bls.n	8000a54 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	83fb      	strh	r3, [r7, #30]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a44:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	83bb      	strh	r3, [r7, #28]
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	0fda      	lsrs	r2, r3, #31
 8000a6e:	4413      	add	r3, r2
 8000a70:	105b      	asrs	r3, r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d202      	bcs.n	8000a82 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a80:	e023      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a88:	e01f      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff38 	bl	800090c <ILI9341_Draw_Pixel>
 8000a9c:	e005      	b.n	8000aaa <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da05      	bge.n	8000ac4 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d9db      	bls.n	8000a8a <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
	switch (size)
 8000aea:	7f3b      	ldrb	r3, [r7, #28]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d061      	beq.n	8000bb4 <ILI9341_Draw_String+0xd8>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	f300 8092 	bgt.w	8000c1a <ILI9341_Draw_String+0x13e>
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d028      	beq.n	8000b4c <ILI9341_Draw_String+0x70>
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d02b      	beq.n	8000b56 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000afe:	e08c      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b00:	7f3b      	ldrb	r3, [r7, #28]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	441a      	add	r2, r3
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d907      	bls.n	8000b22 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b16:	7f3b      	ldrb	r3, [r7, #28]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	7f3a      	ldrb	r2, [r7, #28]
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	f000 f95a 	bl	8000dec <ILI9341_Draw_Char>
			x += size*8-2;
 8000b38:	7f3b      	ldrb	r3, [r7, #28]
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	3b02      	subs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1d5      	bne.n	8000b00 <ILI9341_Draw_String+0x24>
	break;
 8000b54:	e061      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b5c:	e025      	b.n	8000baa <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b5e:	7f3b      	ldrb	r3, [r7, #28]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	441a      	add	r2, r3
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d907      	bls.n	8000b80 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b74:	7f3b      	ldrb	r3, [r7, #28]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	7f3a      	ldrb	r2, [r7, #28]
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	f000 f92b 	bl	8000dec <ILI9341_Draw_Char>
			x += hh*8;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
			*str++;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1d5      	bne.n	8000b5e <ILI9341_Draw_String+0x82>
	break;
 8000bb2:	e032      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bba:	e029      	b.n	8000c10 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bbc:	7f3b      	ldrb	r3, [r7, #28]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d907      	bls.n	8000bde <ILI9341_Draw_String+0x102>
				x = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bd2:	7f3b      	ldrb	r3, [r7, #28]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7f3a      	ldrb	r2, [r7, #28]
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	f000 f8fc 	bl	8000dec <ILI9341_Draw_Char>
			x += hh*10;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1d1      	bne.n	8000bbc <ILI9341_Draw_String+0xe0>
	break;
 8000c18:	bf00      	nop
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c36:	f000 fa09 	bl	800104c <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fd5d 	bl	80006fc <ILI9341_SPI_Send>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c54:	f000 f9e8 	bl	8001028 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd4e 	bl	80006fc <ILI9341_SPI_Send>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	4858      	ldr	r0, [pc, #352]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c88:	f007 f992 	bl	8007fb0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4855      	ldr	r0, [pc, #340]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c94:	f007 f98c 	bl	8007fb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c98:	202c      	movs	r0, #44	; 0x2c
 8000c9a:	f7ff fd2f 	bl	80006fc <ILI9341_SPI_Send>
	DC_DATA;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	4850      	ldr	r0, [pc, #320]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000ca6:	f007 f983 	bl	8007fb0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd25 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cb2:	7afb      	ldrb	r3, [r7, #11]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd21 	bl	80006fc <ILI9341_SPI_Send>
	len--;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	099b      	lsrs	r3, r3, #6
 8000cc4:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d169      	bne.n	8000da2 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cce:	e027      	b.n	8000d20 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd10 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd0c 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd08 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd04 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd00 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcfc 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcf8 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fcf4 	bl	80006fc <ILI9341_SPI_Send>
			} while (--i);
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	737b      	strb	r3, [r7, #13]
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1d9      	bne.n	8000cd4 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	81fa      	strh	r2, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1d2      	bne.n	8000cd0 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d32:	737b      	strb	r3, [r7, #13]
 8000d34:	e007      	b.n	8000d46 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcdf 	bl	80006fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fcdb 	bl	80006fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	737a      	strb	r2, [r7, #13]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f2      	bne.n	8000d36 <ILI9341_Send_Burst+0xce>
 8000d50:	e03f      	b.n	8000dd2 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d52:	2310      	movs	r3, #16
 8000d54:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d56:	7b3b      	ldrb	r3, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fccf 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fccb 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d66:	7b3b      	ldrb	r3, [r7, #12]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcc7 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fcc3 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcbf 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fcbb 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcb7 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcb3 	bl	80006fc <ILI9341_SPI_Send>
			} while (--i);
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1d9      	bne.n	8000d56 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	81fa      	strh	r2, [r7, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1d2      	bne.n	8000d52 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000db4:	737b      	strb	r3, [r7, #13]
 8000db6:	e007      	b.n	8000dc8 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc9e 	bl	80006fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fc9a 	bl	80006fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	1e5a      	subs	r2, r3, #1
 8000dcc:	737a      	strb	r2, [r7, #13]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f2      	bne.n	8000db8 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000dda:	f007 f8e9 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020c00 	.word	0x40020c00

08000dec <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f000 80b2 	beq.w	8000f68 <ILI9341_Draw_Char+0x17c>
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f300 8104 	bgt.w	8001012 <ILI9341_Draw_Char+0x226>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <ILI9341_Draw_Char+0x28>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d055      	beq.n	8000ebe <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e12:	e0fe      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3305      	adds	r3, #5
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3308      	adds	r3, #8
 8000e22:	f7ff fd29 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	487b      	ldr	r0, [pc, #492]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e2e:	f007 f8bf 	bl	8007fb0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e32:	202c      	movs	r0, #44	; 0x2c
 8000e34:	f7ff fc62 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3e:	4877      	ldr	r0, [pc, #476]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e40:	f007 f8b6 	bl	8007fb0 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	e035      	b.n	8000eb6 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e02c      	b.n	8000eaa <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e54:	3b20      	subs	r3, #32
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <ILI9341_Draw_Char+0x234>)
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	441a      	add	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	fa42 f303 	asr.w	r3, r2, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc3d 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc38 	bl	80006fc <ILI9341_SPI_Send>
 8000e8c:	e00a      	b.n	8000ea4 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc31 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc2c 	bl	80006fc <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	ddcf      	ble.n	8000e50 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	ddc6      	ble.n	8000e4a <ILI9341_Draw_Char+0x5e>
			break;
 8000ebc:	e0a9      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3310      	adds	r3, #16
 8000ecc:	f7ff fcd4 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4851      	ldr	r0, [pc, #324]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000ed8:	f007 f86a 	bl	8007fb0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000edc:	202c      	movs	r0, #44	; 0x2c
 8000ede:	f7ff fc0d 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	484c      	ldr	r0, [pc, #304]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000eea:	f007 f861 	bl	8007fb0 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e035      	b.n	8000f60 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e02c      	b.n	8000f54 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efe:	3b20      	subs	r3, #32
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	441a      	add	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f1c3 0307 	rsb	r3, r3, #7
 8000f14:	fa42 f303 	asr.w	r3, r2, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fbe8 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fbe3 	bl	80006fc <ILI9341_SPI_Send>
 8000f36:	e00a      	b.n	8000f4e <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbdc 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbd7 	bl	80006fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	ddcf      	ble.n	8000efa <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	ddc6      	ble.n	8000ef4 <ILI9341_Draw_Char+0x108>
		break;
 8000f66:	e054      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3309      	adds	r3, #9
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3310      	adds	r3, #16
 8000f76:	f7ff fc7f 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f80:	4826      	ldr	r0, [pc, #152]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f82:	f007 f815 	bl	8007fb0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f86:	202c      	movs	r0, #44	; 0x2c
 8000f88:	f7ff fbb8 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f94:	f007 f80c 	bl	8007fb0 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e035      	b.n	800100a <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e02c      	b.n	8000ffe <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa8:	3b20      	subs	r3, #32
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	441a      	add	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	fa42 f303 	asr.w	r3, r2, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb93 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb8e 	bl	80006fc <ILI9341_SPI_Send>
 8000fe0:	e00a      	b.n	8000ff8 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb87 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb82 	bl	80006fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b07      	cmp	r3, #7
 8001002:	ddcf      	ble.n	8000fa4 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b1d      	cmp	r3, #29
 800100e:	ddc6      	ble.n	8000f9e <ILI9341_Draw_Char+0x1b2>
		break;
 8001010:	bf00      	nop
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020c00 	.word	0x40020c00
 8001020:	0800ea80 	.word	0x0800ea80
 8001024:	0800ed58 	.word	0x0800ed58

08001028 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <Before_Sending_Data+0x20>)
 8001034:	f006 ffbc 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <Before_Sending_Data+0x20>)
 8001040:	f006 ffb6 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020c00 	.word	0x40020c00

0800104c <Before_Sending_Command>:

static void Before_Sending_Command() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <Before_Sending_Command+0x20>)
 8001058:	f006 ffaa 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	4802      	ldr	r0, [pc, #8]	; (800106c <Before_Sending_Command+0x20>)
 8001064:	f006 ffa4 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020c00 	.word	0x40020c00

08001070 <Si468x_dab_init>:

static uint16_t rssi_hi_res;


void Si468x_dab_init()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001074:	2101      	movs	r1, #1
 8001076:	4828      	ldr	r0, [pc, #160]	; (8001118 <Si468x_dab_init+0xa8>)
 8001078:	f002 fc8a 	bl	8003990 <send_debug_msg>
	Si468x_reset();
 800107c:	f000 f84e 	bl	800111c <Si468x_reset>
	Si468x_power_up();
 8001080:	f000 f868 	bl	8001154 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001084:	f000 f8ea 	bl	800125c <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001088:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800108c:	f000 f95a 	bl	8001344 <Si468x_firmware_load_flash>
	Si468x_boot();
 8001090:	f000 f9f8 	bl	8001484 <Si468x_boot>
	Si468x_get_part_info();
 8001094:	f000 fbb0 	bl	80017f8 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001098:	f000 fb28 	bl	80016ec <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, dla FM dać 0x00 (otwarty), dla DAB 0x01 (zamkniety)
 800109c:	2101      	movs	r1, #1
 800109e:	f241 7012 	movw	r0, #5906	; 0x1712
 80010a2:	f000 fc19 	bl	80018d8 <Si468x_set_property>
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF468); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5. Wartość z kalibracji DAB: 0xF468 (-2968)
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x250); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3. Wartość z kalibracji DAB: 0x0250 (592)
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x5); 				//prog RSSI od kiedy łapie kanał, default 12
 80010a6:	2105      	movs	r1, #5
 80010a8:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010ac:	f000 fc14 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b0:	2130      	movs	r1, #48	; 0x30
 80010b2:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010b6:	f000 fc0f 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010ba:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010be:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c2:	f000 fc09 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 80010c6:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ca:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010ce:	f000 fc03 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d2:	2101      	movs	r1, #1
 80010d4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010d8:	f000 fbfe 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010dc:	2101      	movs	r1, #1
 80010de:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e2:	f000 fbf9 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010e6:	2101      	movs	r1, #1
 80010e8:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010ec:	f000 fbf4 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f0:	2105      	movs	r1, #5
 80010f2:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010f6:	f000 fbef 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fa:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 80010fe:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001102:	f000 fbe9 	bl	80018d8 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 8001106:	2101      	movs	r1, #1
 8001108:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 800110c:	f000 fbe4 	bl	80018d8 <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001110:	f000 faec 	bl	80016ec <Si468x_get_sys_state>

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800d4f4 	.word	0x0800d4f4

0800111c <Si468x_reset>:

void Si468x_reset()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001120:	2101      	movs	r1, #1
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <Si468x_reset+0x30>)
 8001124:	f002 fc34 	bl	8003990 <send_debug_msg>
	RESET_PIN_LOW;
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <Si468x_reset+0x34>)
 800112e:	f006 ff3f 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f006 f938 	bl	80073a8 <HAL_Delay>
	RESET_PIN_HIGH;
 8001138:	2201      	movs	r2, #1
 800113a:	2120      	movs	r1, #32
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <Si468x_reset+0x34>)
 800113e:	f006 ff37 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001142:	20c8      	movs	r0, #200	; 0xc8
 8001144:	f006 f930 	bl	80073a8 <HAL_Delay>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0800d544 	.word	0x0800d544
 8001150:	40020800 	.word	0x40020800

08001154 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001158:	2101      	movs	r1, #1
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <Si468x_power_up+0xa0>)
 800115c:	f002 fc18 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <Si468x_power_up+0xa4>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <Si468x_power_up+0xa4>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <Si468x_power_up+0xa4>)
 800116e:	2217      	movs	r2, #23
 8001170:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <Si468x_power_up+0xa4>)
 8001174:	2250      	movs	r2, #80	; 0x50
 8001176:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <Si468x_power_up+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <Si468x_power_up+0xa4>)
 8001180:	22f8      	movs	r2, #248	; 0xf8
 8001182:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <Si468x_power_up+0xa4>)
 8001186:	2224      	movs	r2, #36	; 0x24
 8001188:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Si468x_power_up+0xa4>)
 800118c:	2201      	movs	r2, #1
 800118e:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <Si468x_power_up+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <Si468x_power_up+0xa4>)
 8001198:	2210      	movs	r2, #16
 800119a:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <Si468x_power_up+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <Si468x_power_up+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <Si468x_power_up+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <Si468x_power_up+0xa4>)
 80011b0:	2228      	movs	r2, #40	; 0x28
 80011b2:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <Si468x_power_up+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <Si468x_power_up+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011c0:	490d      	ldr	r1, [pc, #52]	; (80011f8 <Si468x_power_up+0xa4>)
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 fa58 	bl	8001678 <Si468x_write_command>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <Si468x_power_up+0xa8>)
 80011ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f006 f8e9 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011d6:	490a      	ldr	r1, [pc, #40]	; (8001200 <Si468x_power_up+0xac>)
 80011d8:	2005      	movs	r0, #5
 80011da:	f000 fa6f 	bl	80016bc <Si468x_read_reply>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <Si468x_power_up+0xa8>)
 80011e4:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011e6:	2101      	movs	r1, #1
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <Si468x_power_up+0xb0>)
 80011ea:	f002 fbd1 	bl	8003990 <send_debug_msg>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	0800d558 	.word	0x0800d558
 80011f8:	200001a8 	.word	0x200001a8
 80011fc:	20003510 	.word	0x20003510
 8001200:	200011a8 	.word	0x200011a8
 8001204:	0800d594 	.word	0x0800d594

08001208 <Si468x_load_init>:

void Si468x_load_init()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 800120c:	2101      	movs	r1, #1
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <Si468x_load_init+0x44>)
 8001210:	f002 fbbe 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <Si468x_load_init+0x48>)
 8001216:	2206      	movs	r2, #6
 8001218:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Si468x_load_init+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <Si468x_load_init+0x48>)
 8001222:	2002      	movs	r0, #2
 8001224:	f000 fa28 	bl	8001678 <Si468x_write_command>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <Si468x_load_init+0x4c>)
 800122e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f006 f8b9 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <Si468x_load_init+0x50>)
 8001238:	2005      	movs	r0, #5
 800123a:	f000 fa3f 	bl	80016bc <Si468x_read_reply>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <Si468x_load_init+0x4c>)
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0800d5b4 	.word	0x0800d5b4
 8001250:	200001a8 	.word	0x200001a8
 8001254:	20003510 	.word	0x20003510
 8001258:	200011a8 	.word	0x200011a8

0800125c <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 8001262:	2101      	movs	r1, #1
 8001264:	4830      	ldr	r0, [pc, #192]	; (8001328 <Si468x_bootloader_load_host+0xcc>)
 8001266:	f002 fb93 	bl	8003990 <send_debug_msg>
	Si468x_load_init();
 800126a:	f7ff ffcd 	bl	8001208 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 800126e:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001272:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 8001276:	2204      	movs	r2, #4
 8001278:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 800127c:	2200      	movs	r2, #0
 800127e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 8001282:	2200      	movs	r2, #0
 8001284:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 8001288:	2200      	movs	r2, #0
 800128a:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	e03e      	b.n	8001310 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001292:	2300      	movs	r3, #0
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	e014      	b.n	80012c2 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001298:	88ba      	ldrh	r2, [r7, #4]
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	4924      	ldr	r1, [pc, #144]	; (8001330 <Si468x_bootloader_load_host+0xd4>)
 800129e:	fba1 1303 	umull	r1, r3, r1, r3
 80012a2:	085b      	lsrs	r3, r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	441a      	add	r2, r3
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	491f      	ldr	r1, [pc, #124]	; (8001334 <Si468x_bootloader_load_host+0xd8>)
 80012b6:	5c89      	ldrb	r1, [r1, r2]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 80012ba:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	80bb      	strh	r3, [r7, #4]
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <Si468x_bootloader_load_host+0xd4>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3e1      	bcc.n	8001298 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <Si468x_bootloader_load_host+0xd4>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3304      	adds	r3, #4
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4911      	ldr	r1, [pc, #68]	; (800132c <Si468x_bootloader_load_host+0xd0>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f9c6 	bl	8001678 <Si468x_write_command>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <Si468x_bootloader_load_host+0xdc>)
 80012f2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f006 f857 	bl	80073a8 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012fa:	4910      	ldr	r1, [pc, #64]	; (800133c <Si468x_bootloader_load_host+0xe0>)
 80012fc:	2005      	movs	r0, #5
 80012fe:	f000 f9dd 	bl	80016bc <Si468x_read_reply>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <Si468x_bootloader_load_host+0xdc>)
 8001308:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	3301      	adds	r3, #1
 800130e:	80fb      	strh	r3, [r7, #6]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d9bd      	bls.n	8001292 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 8001316:	2101      	movs	r1, #1
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <Si468x_bootloader_load_host+0xe4>)
 800131a:	f002 fb39 	bl	8003990 <send_debug_msg>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0800d5cc 	.word	0x0800d5cc
 800132c:	200001a8 	.word	0x200001a8
 8001330:	aaaaaaab 	.word	0xaaaaaaab
 8001334:	0800f348 	.word	0x0800f348
 8001338:	20003510 	.word	0x20003510
 800133c:	200011a8 	.word	0x200011a8
 8001340:	0800d608 	.word	0x0800d608

08001344 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 800134c:	2101      	movs	r1, #1
 800134e:	4845      	ldr	r0, [pc, #276]	; (8001464 <Si468x_firmware_load_flash+0x120>)
 8001350:	f002 fb1e 	bl	8003990 <send_debug_msg>
	Si468x_load_init();
 8001354:	f7ff ff58 	bl	8001208 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800135a:	2205      	movs	r2, #5
 800135c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 800135e:	4b42      	ldr	r3, [pc, #264]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001360:	2200      	movs	r2, #0
 8001362:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001366:	2200      	movs	r2, #0
 8001368:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 800136a:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800136c:	2200      	movs	r2, #0
 800136e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001376:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001380:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800138a:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0e1b      	lsrs	r3, r3, #24
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001394:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 8001396:	2100      	movs	r1, #0
 8001398:	4834      	ldr	r0, [pc, #208]	; (800146c <Si468x_firmware_load_flash+0x128>)
 800139a:	f002 faf9 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	2210      	movs	r2, #16
 80013a4:	4932      	ldr	r1, [pc, #200]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00b fff4 	bl	800d394 <itoa>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 faed 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013b8:	795b      	ldrb	r3, [r3, #5]
 80013ba:	2210      	movs	r2, #16
 80013bc:	492c      	ldr	r1, [pc, #176]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b ffe8 	bl	800d394 <itoa>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fae1 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013d0:	799b      	ldrb	r3, [r3, #6]
 80013d2:	2210      	movs	r2, #16
 80013d4:	4926      	ldr	r1, [pc, #152]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00b ffdc 	bl	800d394 <itoa>
 80013dc:	4603      	mov	r3, r0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fad5 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 80013e8:	79db      	ldrb	r3, [r3, #7]
 80013ea:	2210      	movs	r2, #16
 80013ec:	4920      	ldr	r1, [pc, #128]	; (8001470 <Si468x_firmware_load_flash+0x12c>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b ffd0 	bl	800d394 <itoa>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2101      	movs	r1, #1
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fac9 	bl	8003990 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001400:	2200      	movs	r2, #0
 8001402:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001406:	2200      	movs	r2, #0
 8001408:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 800140c:	2200      	movs	r2, #0
 800140e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001412:	2200      	movs	r2, #0
 8001414:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001416:	4914      	ldr	r1, [pc, #80]	; (8001468 <Si468x_firmware_load_flash+0x124>)
 8001418:	200c      	movs	r0, #12
 800141a:	f000 f92d 	bl	8001678 <Si468x_write_command>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <Si468x_firmware_load_flash+0x130>)
 8001424:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f005 ffbe 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <Si468x_firmware_load_flash+0x134>)
 800142e:	2005      	movs	r0, #5
 8001430:	f000 f944 	bl	80016bc <Si468x_read_reply>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <Si468x_firmware_load_flash+0x130>)
 800143a:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Si468x_firmware_load_flash+0x134>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001448:	2101      	movs	r1, #1
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <Si468x_firmware_load_flash+0x138>)
 800144c:	f002 faa0 	bl	8003990 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001450:	e003      	b.n	800145a <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001452:	2101      	movs	r1, #1
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <Si468x_firmware_load_flash+0x13c>)
 8001456:	f002 fa9b 	bl	8003990 <send_debug_msg>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800d628 	.word	0x0800d628
 8001468:	200001a8 	.word	0x200001a8
 800146c:	0800d664 	.word	0x0800d664
 8001470:	200034d0 	.word	0x200034d0
 8001474:	20003510 	.word	0x20003510
 8001478:	200011a8 	.word	0x200011a8
 800147c:	0800d678 	.word	0x0800d678
 8001480:	0800d688 	.word	0x0800d688

08001484 <Si468x_boot>:

void Si468x_boot()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001488:	2101      	movs	r1, #1
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <Si468x_boot+0x60>)
 800148c:	f002 fa80 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <Si468x_boot+0x64>)
 8001492:	2207      	movs	r2, #7
 8001494:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <Si468x_boot+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 800149c:	4912      	ldr	r1, [pc, #72]	; (80014e8 <Si468x_boot+0x64>)
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 f8ea 	bl	8001678 <Si468x_write_command>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <Si468x_boot+0x68>)
 80014aa:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f005 ff7b 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014b2:	490f      	ldr	r1, [pc, #60]	; (80014f0 <Si468x_boot+0x6c>)
 80014b4:	2005      	movs	r0, #5
 80014b6:	f000 f901 	bl	80016bc <Si468x_read_reply>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <Si468x_boot+0x68>)
 80014c0:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Si468x_boot+0x6c>)
 80014c4:	78db      	ldrb	r3, [r3, #3]
 80014c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ca:	2bc0      	cmp	r3, #192	; 0xc0
 80014cc:	d104      	bne.n	80014d8 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014ce:	2101      	movs	r1, #1
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <Si468x_boot+0x70>)
 80014d2:	f002 fa5d 	bl	8003990 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014d6:	e003      	b.n	80014e0 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014d8:	2101      	movs	r1, #1
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <Si468x_boot+0x74>)
 80014dc:	f002 fa58 	bl	8003990 <send_debug_msg>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	0800d6a4 	.word	0x0800d6a4
 80014e8:	200001a8 	.word	0x200001a8
 80014ec:	20003510 	.word	0x20003510
 80014f0:	200011a8 	.word	0x200011a8
 80014f4:	0800d6e0 	.word	0x0800d6e0
 80014f8:	0800d6fc 	.word	0x0800d6fc

080014fc <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 8001506:	1df9      	adds	r1, r7, #7
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2201      	movs	r2, #1
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <Si468x_write_single_byte+0x20>)
 800150e:	f009 ff24 	bl	800b35a <HAL_SPI_Transmit>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20006f00 	.word	0x20006f00

08001520 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800152a:	1df9      	adds	r1, r7, #7
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	2201      	movs	r2, #1
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <Si468x_read_single_byte+0x20>)
 8001532:	f00a f84e 	bl	800b5d2 <HAL_SPI_Receive>
	return data_buffer;
 8001536:	79fb      	ldrb	r3, [r7, #7]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20006f00 	.word	0x20006f00

08001544 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 800154e:	2300      	movs	r3, #0
 8001550:	81fb      	strh	r3, [r7, #14]
 8001552:	e01f      	b.n	8001594 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001554:	4916      	ldr	r1, [pc, #88]	; (80015b0 <Si468x_wait_for_CTS+0x6c>)
 8001556:	2001      	movs	r0, #1
 8001558:	f000 f8b0 	bl	80016bc <Si468x_read_reply>
		if(rd_reply.cts)
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <Si468x_wait_for_CTS+0x70>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00e      	beq.n	8001588 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <Si468x_wait_for_CTS+0x70>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001578:	2101      	movs	r1, #1
 800157a:	480f      	ldr	r0, [pc, #60]	; (80015b8 <Si468x_wait_for_CTS+0x74>)
 800157c:	f002 fa08 	bl	8003990 <send_debug_msg>
				return COMMAND_ERROR;
 8001580:	2320      	movs	r3, #32
 8001582:	e010      	b.n	80015a6 <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 8001584:	2300      	movs	r3, #0
 8001586:	e00e      	b.n	80015a6 <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f005 ff0d 	bl	80073a8 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	3301      	adds	r3, #1
 8001592:	81fb      	strh	r3, [r7, #14]
 8001594:	89fa      	ldrh	r2, [r7, #14]
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3db      	bcc.n	8001554 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 800159c:	2101      	movs	r1, #1
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <Si468x_wait_for_CTS+0x78>)
 80015a0:	f002 f9f6 	bl	8003990 <send_debug_msg>
	return TIMEOUT;
 80015a4:	2308      	movs	r3, #8
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200011a8 	.word	0x200011a8
 80015b4:	200035fc 	.word	0x200035fc
 80015b8:	0800d710 	.word	0x0800d710
 80015bc:	0800d738 	.word	0x0800d738

080015c0 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <Si468x_write_multiple+0x4c>)
 80015d6:	f006 fceb 	bl	8007fb0 <HAL_GPIO_WritePin>
	while(len--)
 80015da:	e009      	b.n	80015f0 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	81fa      	strh	r2, [r7, #14]
 80015e2:	461a      	mov	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff86 	bl	80014fc <Si468x_write_single_byte>
	while(len--)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	80fa      	strh	r2, [r7, #6]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80015fa:	2201      	movs	r2, #1
 80015fc:	2110      	movs	r1, #16
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <Si468x_write_multiple+0x4c>)
 8001600:	f006 fcd6 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020800 	.word	0x40020800

08001610 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <Si468x_read_multiple+0x64>)
 8001626:	f006 fcc3 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800162a:	2003      	movs	r0, #3
 800162c:	f005 febc 	bl	80073a8 <HAL_Delay>
	CS_PIN_LOW;
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <Si468x_read_multiple+0x64>)
 8001636:	f006 fcbb 	bl	8007fb0 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff ff5e 	bl	80014fc <Si468x_write_single_byte>
	while(len--)
 8001640:	e009      	b.n	8001656 <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	81fa      	strh	r2, [r7, #14]
 8001648:	461a      	mov	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	189c      	adds	r4, r3, r2
 800164e:	f7ff ff67 	bl	8001520 <Si468x_read_single_byte>
 8001652:	4603      	mov	r3, r0
 8001654:	7023      	strb	r3, [r4, #0]
	while(len--)
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	80fa      	strh	r2, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <Si468x_read_multiple+0x64>)
 8001666:	f006 fca3 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	40020800 	.word	0x40020800

08001678 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001684:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001688:	f7ff ff5c 	bl	8001544 <Si468x_wait_for_CTS>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <Si468x_write_command+0x24>
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b20      	cmp	r3, #32
 800169a:	d10a      	bne.n	80016b2 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff8d 	bl	80015c0 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016aa:	f7ff ff4b 	bl	8001544 <Si468x_wait_for_CTS>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff9f 	bl	8001610 <Si468x_read_multiple>
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <Si468x_read_reply+0x28>)
 80016d4:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <Si468x_read_reply+0x2c>)
 80016d8:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200011a8 	.word	0x200011a8
 80016e8:	200035fc 	.word	0x200035fc

080016ec <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80016f0:	2101      	movs	r1, #1
 80016f2:	4833      	ldr	r0, [pc, #204]	; (80017c0 <Si468x_get_sys_state+0xd4>)
 80016f4:	f002 f94c 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <Si468x_get_sys_state+0xd8>)
 80016fa:	2209      	movs	r2, #9
 80016fc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Si468x_get_sys_state+0xd8>)
 8001700:	2200      	movs	r2, #0
 8001702:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001704:	492f      	ldr	r1, [pc, #188]	; (80017c4 <Si468x_get_sys_state+0xd8>)
 8001706:	2002      	movs	r0, #2
 8001708:	f7ff ffb6 	bl	8001678 <Si468x_write_command>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <Si468x_get_sys_state+0xdc>)
 8001712:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f005 fe47 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800171a:	492c      	ldr	r1, [pc, #176]	; (80017cc <Si468x_get_sys_state+0xe0>)
 800171c:	2005      	movs	r0, #5
 800171e:	f7ff ffcd 	bl	80016bc <Si468x_read_reply>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <Si468x_get_sys_state+0xdc>)
 8001728:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800172a:	2100      	movs	r1, #0
 800172c:	4828      	ldr	r0, [pc, #160]	; (80017d0 <Si468x_get_sys_state+0xe4>)
 800172e:	f002 f92f 	bl	8003990 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <Si468x_get_sys_state+0xe0>)
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d83a      	bhi.n	80017b0 <Si468x_get_sys_state+0xc4>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <Si468x_get_sys_state+0x54>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001761 	.word	0x08001761
 8001744:	0800176b 	.word	0x0800176b
 8001748:	08001775 	.word	0x08001775
 800174c:	0800177f 	.word	0x0800177f
 8001750:	08001789 	.word	0x08001789
 8001754:	08001793 	.word	0x08001793
 8001758:	0800179d 	.word	0x0800179d
 800175c:	080017a7 	.word	0x080017a7
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001760:	2101      	movs	r1, #1
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <Si468x_get_sys_state+0xe8>)
 8001764:	f002 f914 	bl	8003990 <send_debug_msg>
			break;
 8001768:	e027      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800176a:	2101      	movs	r1, #1
 800176c:	481a      	ldr	r0, [pc, #104]	; (80017d8 <Si468x_get_sys_state+0xec>)
 800176e:	f002 f90f 	bl	8003990 <send_debug_msg>
			break;
 8001772:	e022      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001774:	2101      	movs	r1, #1
 8001776:	4819      	ldr	r0, [pc, #100]	; (80017dc <Si468x_get_sys_state+0xf0>)
 8001778:	f002 f90a 	bl	8003990 <send_debug_msg>
			break;
 800177c:	e01d      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 800177e:	2101      	movs	r1, #1
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <Si468x_get_sys_state+0xf4>)
 8001782:	f002 f905 	bl	8003990 <send_debug_msg>
			break;
 8001786:	e018      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 8001788:	2101      	movs	r1, #1
 800178a:	4816      	ldr	r0, [pc, #88]	; (80017e4 <Si468x_get_sys_state+0xf8>)
 800178c:	f002 f900 	bl	8003990 <send_debug_msg>
			break;
 8001790:	e013      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 8001792:	2101      	movs	r1, #1
 8001794:	4814      	ldr	r0, [pc, #80]	; (80017e8 <Si468x_get_sys_state+0xfc>)
 8001796:	f002 f8fb 	bl	8003990 <send_debug_msg>
			break;
 800179a:	e00e      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 800179c:	2101      	movs	r1, #1
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <Si468x_get_sys_state+0x100>)
 80017a0:	f002 f8f6 	bl	8003990 <send_debug_msg>
			break;
 80017a4:	e009      	b.n	80017ba <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017a6:	2101      	movs	r1, #1
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <Si468x_get_sys_state+0x104>)
 80017aa:	f002 f8f1 	bl	8003990 <send_debug_msg>
			break;
 80017ae:	e004      	b.n	80017ba <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017b0:	2101      	movs	r1, #1
 80017b2:	4810      	ldr	r0, [pc, #64]	; (80017f4 <Si468x_get_sys_state+0x108>)
 80017b4:	f002 f8ec 	bl	8003990 <send_debug_msg>
			break;
 80017b8:	bf00      	nop
	}
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800d748 	.word	0x0800d748
 80017c4:	200001a8 	.word	0x200001a8
 80017c8:	20003510 	.word	0x20003510
 80017cc:	200011a8 	.word	0x200011a8
 80017d0:	0800d784 	.word	0x0800d784
 80017d4:	0800d790 	.word	0x0800d790
 80017d8:	0800d7a8 	.word	0x0800d7a8
 80017dc:	0800d7c0 	.word	0x0800d7c0
 80017e0:	0800d7d8 	.word	0x0800d7d8
 80017e4:	0800d800 	.word	0x0800d800
 80017e8:	0800d81c 	.word	0x0800d81c
 80017ec:	0800d834 	.word	0x0800d834
 80017f0:	0800d850 	.word	0x0800d850
 80017f4:	0800d868 	.word	0x0800d868

080017f8 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 80017fe:	2101      	movs	r1, #1
 8001800:	482d      	ldr	r0, [pc, #180]	; (80018b8 <Si468x_get_part_info+0xc0>)
 8001802:	f002 f8c5 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <Si468x_get_part_info+0xc4>)
 8001808:	2208      	movs	r2, #8
 800180a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <Si468x_get_part_info+0xc4>)
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001812:	492a      	ldr	r1, [pc, #168]	; (80018bc <Si468x_get_part_info+0xc4>)
 8001814:	2002      	movs	r0, #2
 8001816:	f7ff ff2f 	bl	8001678 <Si468x_write_command>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <Si468x_get_part_info+0xc8>)
 8001820:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f005 fdc0 	bl	80073a8 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fe67 	bl	80014fc <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800182e:	4925      	ldr	r1, [pc, #148]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001830:	200a      	movs	r0, #10
 8001832:	f7ff ff43 	bl	80016bc <Si468x_read_reply>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <Si468x_get_part_info+0xc8>)
 800183c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800183e:	2100      	movs	r1, #0
 8001840:	4821      	ldr	r0, [pc, #132]	; (80018c8 <Si468x_get_part_info+0xd0>)
 8001842:	f002 f8a5 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	220a      	movs	r2, #10
 800184c:	491f      	ldr	r1, [pc, #124]	; (80018cc <Si468x_get_part_info+0xd4>)
 800184e:	4618      	mov	r0, r3
 8001850:	f00b fda0 	bl	800d394 <itoa>
 8001854:	4603      	mov	r3, r0
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f002 f899 	bl	8003990 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 800185e:	2100      	movs	r1, #0
 8001860:	481b      	ldr	r0, [pc, #108]	; (80018d0 <Si468x_get_part_info+0xd8>)
 8001862:	f002 f895 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001868:	795b      	ldrb	r3, [r3, #5]
 800186a:	220a      	movs	r2, #10
 800186c:	4917      	ldr	r1, [pc, #92]	; (80018cc <Si468x_get_part_info+0xd4>)
 800186e:	4618      	mov	r0, r3
 8001870:	f00b fd90 	bl	800d394 <itoa>
 8001874:	4603      	mov	r3, r0
 8001876:	2101      	movs	r1, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f002 f889 	bl	8003990 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 800187e:	2100      	movs	r1, #0
 8001880:	4814      	ldr	r0, [pc, #80]	; (80018d4 <Si468x_get_part_info+0xdc>)
 8001882:	f002 f885 	bl	8003990 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001888:	7a5b      	ldrb	r3, [r3, #9]
 800188a:	b29b      	uxth	r3, r3
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <Si468x_get_part_info+0xcc>)
 8001892:	7a1b      	ldrb	r3, [r3, #8]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	220a      	movs	r2, #10
 800189e:	490b      	ldr	r1, [pc, #44]	; (80018cc <Si468x_get_part_info+0xd4>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00b fd77 	bl	800d394 <itoa>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 f870 	bl	8003990 <send_debug_msg>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	0800d87c 	.word	0x0800d87c
 80018bc:	200001a8 	.word	0x200001a8
 80018c0:	20003510 	.word	0x20003510
 80018c4:	200011a8 	.word	0x200011a8
 80018c8:	0800d8b8 	.word	0x0800d8b8
 80018cc:	200034d0 	.word	0x200034d0
 80018d0:	0800d8c8 	.word	0x0800d8c8
 80018d4:	0800d8d4 	.word	0x0800d8d4

080018d8 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	80fb      	strh	r3, [r7, #6]
 80018e4:	4613      	mov	r3, r2
 80018e6:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 80018e8:	2101      	movs	r1, #1
 80018ea:	4832      	ldr	r0, [pc, #200]	; (80019b4 <Si468x_set_property+0xdc>)
 80018ec:	f002 f850 	bl	8003990 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80018f0:	2100      	movs	r1, #0
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <Si468x_set_property+0xe0>)
 80018f4:	f002 f84c 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	2210      	movs	r2, #16
 80018fc:	492f      	ldr	r1, [pc, #188]	; (80019bc <Si468x_set_property+0xe4>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f00b fd48 	bl	800d394 <itoa>
 8001904:	4603      	mov	r3, r0
 8001906:	2101      	movs	r1, #1
 8001908:	4618      	mov	r0, r3
 800190a:	f002 f841 	bl	8003990 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800190e:	2100      	movs	r1, #0
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <Si468x_set_property+0xe8>)
 8001912:	f002 f83d 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	2210      	movs	r2, #16
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <Si468x_set_property+0xe4>)
 800191c:	4618      	mov	r0, r3
 800191e:	f00b fd39 	bl	800d394 <itoa>
 8001922:	4603      	mov	r3, r0
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f832 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <Si468x_set_property+0xec>)
 800192e:	2213      	movs	r2, #19
 8001930:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <Si468x_set_property+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <Si468x_set_property+0xec>)
 800193e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <Si468x_set_property+0xec>)
 800194a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <Si468x_set_property+0xec>)
 8001952:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <Si468x_set_property+0xec>)
 800195e:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <Si468x_set_property+0xec>)
 8001962:	2006      	movs	r0, #6
 8001964:	f7ff fe88 	bl	8001678 <Si468x_write_command>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <Si468x_set_property+0xf0>)
 800196e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f005 fd19 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <Si468x_set_property+0xf4>)
 8001978:	2005      	movs	r0, #5
 800197a:	f7ff fe9f 	bl	80016bc <Si468x_read_reply>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <Si468x_set_property+0xf0>)
 8001984:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f825 	bl	80019d8 <Si468x_get_property>
 800198e:	4603      	mov	r3, r0
 8001990:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001992:	89fa      	ldrh	r2, [r7, #14]
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d104      	bne.n	80019a4 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 800199a:	2101      	movs	r1, #1
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <Si468x_set_property+0xf8>)
 800199e:	f001 fff7 	bl	8003990 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019a2:	e003      	b.n	80019ac <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019a4:	2101      	movs	r1, #1
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <Si468x_set_property+0xfc>)
 80019a8:	f001 fff2 	bl	8003990 <send_debug_msg>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	0800d8e4 	.word	0x0800d8e4
 80019b8:	0800d924 	.word	0x0800d924
 80019bc:	200034d0 	.word	0x200034d0
 80019c0:	0800d934 	.word	0x0800d934
 80019c4:	200001a8 	.word	0x200001a8
 80019c8:	20003510 	.word	0x20003510
 80019cc:	200011a8 	.word	0x200011a8
 80019d0:	0800d950 	.word	0x0800d950
 80019d4:	0800d96c 	.word	0x0800d96c

080019d8 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019e2:	2101      	movs	r1, #1
 80019e4:	482b      	ldr	r0, [pc, #172]	; (8001a94 <Si468x_get_property+0xbc>)
 80019e6:	f001 ffd3 	bl	8003990 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019ea:	2100      	movs	r1, #0
 80019ec:	482a      	ldr	r0, [pc, #168]	; (8001a98 <Si468x_get_property+0xc0>)
 80019ee:	f001 ffcf 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	2210      	movs	r2, #16
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <Si468x_get_property+0xc4>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00b fccb 	bl	800d394 <itoa>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2101      	movs	r1, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 ffc4 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a0a:	2214      	movs	r2, #20
 8001a0c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a1a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a26:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a28:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <Si468x_get_property+0xc8>)
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f7ff fe24 	bl	8001678 <Si468x_write_command>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <Si468x_get_property+0xcc>)
 8001a36:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f005 fcb5 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a3e:	491a      	ldr	r1, [pc, #104]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a40:	2006      	movs	r0, #6
 8001a42:	f7ff fe3b 	bl	80016bc <Si468x_read_reply>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <Si468x_get_property+0xcc>)
 8001a4c:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4816      	ldr	r0, [pc, #88]	; (8001aac <Si468x_get_property+0xd4>)
 8001a52:	f001 ff9d 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a58:	795b      	ldrb	r3, [r3, #5]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a5e:	7912      	ldrb	r2, [r2, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	2210      	movs	r2, #16
 8001a64:	490d      	ldr	r1, [pc, #52]	; (8001a9c <Si468x_get_property+0xc4>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00b fc94 	bl	800d394 <itoa>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 ff8d 	bl	8003990 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <Si468x_get_property+0xd0>)
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0800d984 	.word	0x0800d984
 8001a98:	0800d924 	.word	0x0800d924
 8001a9c:	200034d0 	.word	0x200034d0
 8001aa0:	200001a8 	.word	0x200001a8
 8001aa4:	20003510 	.word	0x20003510
 8001aa8:	200011a8 	.word	0x200011a8
 8001aac:	0800d9c0 	.word	0x0800d9c0

08001ab0 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t ant_cap)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460a      	mov	r2, r1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4858      	ldr	r0, [pc, #352]	; (8001c24 <Si468x_dab_tune_freq+0x174>)
 8001ac4:	f001 ff64 	bl	8003990 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4857      	ldr	r0, [pc, #348]	; (8001c28 <Si468x_dab_tune_freq+0x178>)
 8001acc:	f001 ff60 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <Si468x_dab_tune_freq+0x17c>)
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	220a      	movs	r2, #10
 8001ada:	4955      	ldr	r1, [pc, #340]	; (8001c30 <Si468x_dab_tune_freq+0x180>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b fc59 	bl	800d394 <itoa>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 ff52 	bl	8003990 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001aec:	2101      	movs	r1, #1
 8001aee:	4851      	ldr	r0, [pc, #324]	; (8001c34 <Si468x_dab_tune_freq+0x184>)
 8001af0:	f001 ff4e 	bl	8003990 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001af6:	22b0      	movs	r2, #176	; 0xb0
 8001af8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001afa:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b00:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	70da      	strb	r2, [r3, #3]

	switch(ant_cap)
 8001b0c:	88bb      	ldrh	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <Si468x_dab_tune_freq+0x88>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d117      	bne.n	8001b46 <Si468x_dab_tune_freq+0x96>
	{
		case USE_ANT_CAP:
			//use ANT_CAP value from table of best ANTCAP values
			dab_spi_tx_buffer[4] = ant_cap_values[channel] & 0xFF;	//antcap [7:0]
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <Si468x_dab_tune_freq+0x18c>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b22:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap_values[channel] >> 8;	//antcap [15:8]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <Si468x_dab_tune_freq+0x18c>)
 8001b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b34:	715a      	strb	r2, [r3, #5]
			break;
 8001b36:	e011      	b.n	8001b5c <Si468x_dab_tune_freq+0xac>
		case NOT_USE_ANT_CAP:
			//use algorithm of automatic setting ant_cap value based on tuning values written to Si4684
			dab_spi_tx_buffer[4] = 0x00;	//antcap [7:0]
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = 0x00;	//antcap [15:8]
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	715a      	strb	r2, [r3, #5]
			break;
 8001b44:	e00a      	b.n	8001b5c <Si468x_dab_tune_freq+0xac>
		default:
			//use ant_cap value as argument of this function
			dab_spi_tx_buffer[4] = ant_cap & 0xFF;	//antcap [7:0]
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b4c:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap >> 8;	//antcap [15:8]
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b58:	715a      	strb	r2, [r3, #5]
			break;
 8001b5a:	bf00      	nop
	}

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b5c:	4936      	ldr	r1, [pc, #216]	; (8001c38 <Si468x_dab_tune_freq+0x188>)
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f7ff fd8a 	bl	8001678 <Si468x_write_command>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <Si468x_dab_tune_freq+0x190>)
 8001b6a:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <Si468x_dab_tune_freq+0x194>)
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff fda4 	bl	80016bc <Si468x_read_reply>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <Si468x_dab_tune_freq+0x190>)
 8001b7a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <Si468x_dab_tune_freq+0x198>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <Si468x_dab_tune_freq+0xe2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	482f      	ldr	r0, [pc, #188]	; (8001c4c <Si468x_dab_tune_freq+0x19c>)
 8001b8e:	f001 feff 	bl	8003990 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	e03a      	b.n	8001c0e <Si468x_dab_tune_freq+0x15e>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b98:	492a      	ldr	r1, [pc, #168]	; (8001c44 <Si468x_dab_tune_freq+0x194>)
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7ff fd8e 	bl	80016bc <Si468x_read_reply>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <Si468x_dab_tune_freq+0x190>)
 8001ba6:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <Si468x_dab_tune_freq+0x198>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01c      	beq.n	8001bf0 <Si468x_dab_tune_freq+0x140>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4825      	ldr	r0, [pc, #148]	; (8001c50 <Si468x_dab_tune_freq+0x1a0>)
 8001bba:	f001 fee9 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	220a      	movs	r2, #10
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <Si468x_dab_tune_freq+0x180>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00b fbe5 	bl	800d394 <itoa>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fede 	bl	8003990 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	481f      	ldr	r0, [pc, #124]	; (8001c54 <Si468x_dab_tune_freq+0x1a4>)
 8001bd8:	f001 feda 	bl	8003990 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <Si468x_dab_tune_freq+0x1a8>)
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <Si468x_dab_tune_freq+0x17c>)
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <Si468x_dab_tune_freq+0x1a8>)
 8001bec:	6093      	str	r3, [r2, #8]
			break;
 8001bee:	e014      	b.n	8001c1a <Si468x_dab_tune_freq+0x16a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d103      	bne.n	8001c02 <Si468x_dab_tune_freq+0x152>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4817      	ldr	r0, [pc, #92]	; (8001c5c <Si468x_dab_tune_freq+0x1ac>)
 8001bfe:	f001 fec7 	bl	8003990 <send_debug_msg>
		}
		HAL_Delay(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f005 fbd0 	bl	80073a8 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001c08:	89fb      	ldrh	r3, [r7, #14]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	81fb      	strh	r3, [r7, #14]
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d9bf      	bls.n	8001b98 <Si468x_dab_tune_freq+0xe8>
	}
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0800da78 	.word	0x0800da78
 8001c28:	0800dab4 	.word	0x0800dab4
 8001c2c:	20003514 	.word	0x20003514
 8001c30:	200034d0 	.word	0x200034d0
 8001c34:	0800da34 	.word	0x0800da34
 8001c38:	200001a8 	.word	0x200001a8
 8001c3c:	080109ec 	.word	0x080109ec
 8001c40:	20003510 	.word	0x20003510
 8001c44:	200011a8 	.word	0x200011a8
 8001c48:	200035fc 	.word	0x200035fc
 8001c4c:	0800d678 	.word	0x0800d678
 8001c50:	0800dac0 	.word	0x0800dac0
 8001c54:	0800dadc 	.word	0x0800dadc
 8001c58:	20004bc4 	.word	0x20004bc4
 8001c5c:	0800dae4 	.word	0x0800dae4

08001c60 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <Si468x_dab_digrad_status+0x9c>)
 8001c6a:	22b2      	movs	r2, #178	; 0xb2
 8001c6c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <Si468x_dab_digrad_status+0x9c>)
 8001c70:	221a      	movs	r2, #26
 8001c72:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c74:	4921      	ldr	r1, [pc, #132]	; (8001cfc <Si468x_dab_digrad_status+0x9c>)
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff fcfe 	bl	8001678 <Si468x_write_command>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <Si468x_dab_digrad_status+0xa0>)
 8001c82:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f005 fb8f 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c8a:	491e      	ldr	r1, [pc, #120]	; (8001d04 <Si468x_dab_digrad_status+0xa4>)
 8001c8c:	2028      	movs	r0, #40	; 0x28
 8001c8e:	f7ff fd15 	bl	80016bc <Si468x_read_reply>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <Si468x_dab_digrad_status+0xa0>)
 8001c98:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <Si468x_dab_digrad_status+0xa8>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d019      	beq.n	8001cdc <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <Si468x_dab_digrad_status+0xa4>)
 8001cac:	4615      	mov	r5, r2
 8001cae:	1d1c      	adds	r4, r3, #4
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cbc:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	2b14      	cmp	r3, #20
 8001cc6:	d902      	bls.n	8001cce <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	2b36      	cmp	r3, #54	; 0x36
 8001cd4:	d902      	bls.n	8001cdc <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <Si468x_dab_digrad_status+0xac>)
 8001ce0:	461c      	mov	r4, r3
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cf0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	200001a8 	.word	0x200001a8
 8001d00:	20003510 	.word	0x20003510
 8001d04:	200011a8 	.word	0x200011a8
 8001d08:	200035fc 	.word	0x200035fc
 8001d0c:	200035d4 	.word	0x200035d4

08001d10 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001d16:	2300      	movs	r3, #0
 8001d18:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001d1e:	2300      	movs	r3, #0
 8001d20:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001d22:	2300      	movs	r3, #0
 8001d24:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001d26:	4ba2      	ldr	r3, [pc, #648]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001d2c:	4ba0      	ldr	r3, [pc, #640]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d32:	499f      	ldr	r1, [pc, #636]	; (8001fb0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff fc9f 	bl	8001678 <Si468x_write_command>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b9d      	ldr	r3, [pc, #628]	; (8001fb4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d40:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f005 fb30 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d48:	499b      	ldr	r1, [pc, #620]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4e:	f7ff fcb5 	bl	80016bc <Si468x_read_reply>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d58:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4897      	ldr	r0, [pc, #604]	; (8001fbc <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d5e:	f001 fe17 	bl	8003990 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d62:	4b97      	ldr	r3, [pc, #604]	; (8001fc0 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d70:	2101      	movs	r1, #1
 8001d72:	4894      	ldr	r0, [pc, #592]	; (8001fc4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d74:	f001 fe0c 	bl	8003990 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d78:	4b8f      	ldr	r3, [pc, #572]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d7a:	791b      	ldrb	r3, [r3, #4]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d80:	795b      	ldrb	r3, [r3, #5]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d8c:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d8e:	7a1b      	ldrb	r3, [r3, #8]
 8001d90:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	773b      	strb	r3, [r7, #28]
 8001d96:	e250      	b.n	800223a <Si468x_dab_get_digital_service_list+0x52a>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001d98:	7f3b      	ldrb	r3, [r7, #28]
 8001d9a:	4a8b      	ldr	r2, [pc, #556]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d9c:	7892      	ldrb	r2, [r2, #2]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a89      	ldr	r2, [pc, #548]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001da2:	6892      	ldr	r2, [r2, #8]
 8001da4:	4989      	ldr	r1, [pc, #548]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001da6:	2034      	movs	r0, #52	; 0x34
 8001da8:	fb00 f303 	mul.w	r3, r0, r3
 8001dac:	440b      	add	r3, r1
 8001dae:	3324      	adds	r3, #36	; 0x24
 8001db0:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001db2:	7f3b      	ldrb	r3, [r7, #28]
 8001db4:	4a84      	ldr	r2, [pc, #528]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001db6:	7892      	ldrb	r2, [r2, #2]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a83      	ldr	r2, [pc, #524]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dbc:	7b10      	ldrb	r0, [r2, #12]
 8001dbe:	4a83      	ldr	r2, [pc, #524]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dc0:	2134      	movs	r1, #52	; 0x34
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3328      	adds	r3, #40	; 0x28
 8001dca:	4602      	mov	r2, r0
 8001dcc:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001dce:	7fba      	ldrb	r2, [r7, #30]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	f103 0210 	add.w	r2, r3, #16
 8001ddc:	7f7b      	ldrb	r3, [r7, #29]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001de4:	5cd2      	ldrb	r2, [r2, r3]
 8001de6:	7f3b      	ldrb	r3, [r7, #28]
 8001de8:	4977      	ldr	r1, [pc, #476]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dea:	7889      	ldrb	r1, [r1, #2]
 8001dec:	440b      	add	r3, r1
 8001dee:	f002 0201 	and.w	r2, r2, #1
 8001df2:	b2d0      	uxtb	r0, r2
 8001df4:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001df6:	2134      	movs	r1, #52	; 0x34
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3314      	adds	r3, #20
 8001e00:	4602      	mov	r2, r0
 8001e02:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001e04:	7fba      	ldrb	r2, [r7, #30]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	f103 0211 	add.w	r2, r3, #17
 8001e12:	7f7b      	ldrb	r3, [r7, #29]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e1a:	5cd2      	ldrb	r2, [r2, r3]
 8001e1c:	7f3b      	ldrb	r3, [r7, #28]
 8001e1e:	496a      	ldr	r1, [pc, #424]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e20:	7889      	ldrb	r1, [r1, #2]
 8001e22:	440b      	add	r3, r1
 8001e24:	f002 020f 	and.w	r2, r2, #15
 8001e28:	b2d0      	uxtb	r0, r2
 8001e2a:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e2c:	2134      	movs	r1, #52	; 0x34
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3329      	adds	r3, #41	; 0x29
 8001e36:	4602      	mov	r2, r0
 8001e38:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e3a:	7f3b      	ldrb	r3, [r7, #28]
 8001e3c:	4a62      	ldr	r2, [pc, #392]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e3e:	7892      	ldrb	r2, [r2, #2]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a62      	ldr	r2, [pc, #392]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e44:	2134      	movs	r1, #52	; 0x34
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d017      	beq.n	8001e84 <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e54:	7fbb      	ldrb	r3, [r7, #30]
 8001e56:	3301      	adds	r3, #1
 8001e58:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e5a:	7f3b      	ldrb	r3, [r7, #28]
 8001e5c:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e5e:	7892      	ldrb	r2, [r2, #2]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e64:	2134      	movs	r1, #52	; 0x34
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3329      	adds	r3, #41	; 0x29
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	7f7b      	ldrb	r3, [r7, #29]
 8001e72:	4413      	add	r3, r2
 8001e74:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e76:	7f3b      	ldrb	r3, [r7, #28]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e7c:	7ffb      	ldrb	r3, [r7, #31]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	77fb      	strb	r3, [r7, #31]
			continue;
 8001e82:	e1d7      	b.n	8002234 <Si468x_dab_get_digital_service_list+0x524>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e84:	7fba      	ldrb	r2, [r7, #30]
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	f103 0210 	add.w	r2, r3, #16
 8001e92:	7f7b      	ldrb	r3, [r7, #29]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	105b      	asrs	r3, r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7f3b      	ldrb	r3, [r7, #28]
 8001ea2:	4949      	ldr	r1, [pc, #292]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ea4:	7889      	ldrb	r1, [r1, #2]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	b2d0      	uxtb	r0, r2
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001eb0:	2134      	movs	r1, #52	; 0x34
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3315      	adds	r3, #21
 8001eba:	4602      	mov	r2, r0
 8001ebc:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001ebe:	7f3b      	ldrb	r3, [r7, #28]
 8001ec0:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ec2:	7892      	ldrb	r2, [r2, #2]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ec8:	2134      	movs	r1, #52	; 0x34
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <Si468x_dab_get_digital_service_list+0x1ce>
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d079      	beq.n	8001fd0 <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001edc:	e0ee      	b.n	80020bc <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001ede:	7fba      	ldrb	r2, [r7, #30]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f103 020c 	add.w	r2, r3, #12
 8001eec:	7f7b      	ldrb	r3, [r7, #29]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	7fba      	ldrb	r2, [r7, #30]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f103 020d 	add.w	r2, r3, #13
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f16:	4419      	add	r1, r3
 8001f18:	7f3b      	ldrb	r3, [r7, #28]
 8001f1a:	4a2b      	ldr	r2, [pc, #172]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f1c:	7892      	ldrb	r2, [r2, #2]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4608      	mov	r0, r1
 8001f22:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f24:	2134      	movs	r1, #52	; 0x34
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001f30:	7fba      	ldrb	r2, [r7, #30]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	f103 020d 	add.w	r2, r3, #13
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f46:	5cd2      	ldrb	r2, [r2, r3]
 8001f48:	7f3b      	ldrb	r3, [r7, #28]
 8001f4a:	491f      	ldr	r1, [pc, #124]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f4c:	7889      	ldrb	r1, [r1, #2]
 8001f4e:	440b      	add	r3, r1
 8001f50:	0912      	lsrs	r2, r2, #4
 8001f52:	b2d0      	uxtb	r0, r2
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f56:	2134      	movs	r1, #52	; 0x34
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	331c      	adds	r3, #28
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f64:	7f3b      	ldrb	r3, [r7, #28]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f68:	7892      	ldrb	r2, [r2, #2]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f6e:	2134      	movs	r1, #52	; 0x34
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	331c      	adds	r3, #28
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	031b      	lsls	r3, r3, #12
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	7f3b      	ldrb	r3, [r7, #28]
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f82:	7892      	ldrb	r2, [r2, #2]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f88:	2134      	movs	r1, #52	; 0x34
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3318      	adds	r3, #24
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	7f3b      	ldrb	r3, [r7, #28]
 8001f96:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f98:	7889      	ldrb	r1, [r1, #2]
 8001f9a:	440b      	add	r3, r1
 8001f9c:	4402      	add	r2, r0
 8001f9e:	490b      	ldr	r1, [pc, #44]	; (8001fcc <Si468x_dab_get_digital_service_list+0x2bc>)
 8001fa0:	2034      	movs	r0, #52	; 0x34
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3320      	adds	r3, #32
 8001faa:	601a      	str	r2, [r3, #0]
				break;
 8001fac:	e086      	b.n	80020bc <Si468x_dab_get_digital_service_list+0x3ac>
 8001fae:	bf00      	nop
 8001fb0:	200001a8 	.word	0x200001a8
 8001fb4:	20003510 	.word	0x20003510
 8001fb8:	200011a8 	.word	0x200011a8
 8001fbc:	0800db44 	.word	0x0800db44
 8001fc0:	200035fc 	.word	0x200035fc
 8001fc4:	0800d678 	.word	0x0800d678
 8001fc8:	20004bc4 	.word	0x20004bc4
 8001fcc:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001fd0:	7fba      	ldrb	r2, [r7, #30]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	f103 020c 	add.w	r2, r3, #12
 8001fde:	7f7b      	ldrb	r3, [r7, #29]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4aa0      	ldr	r2, [pc, #640]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	7fba      	ldrb	r2, [r7, #30]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	f103 020d 	add.w	r2, r3, #13
 8001ff8:	7f7b      	ldrb	r3, [r7, #29]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a9a      	ldr	r2, [pc, #616]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4419      	add	r1, r3
 8002006:	7fba      	ldrb	r2, [r7, #30]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	f103 020e 	add.w	r2, r3, #14
 8002014:	7f7b      	ldrb	r3, [r7, #29]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	4a93      	ldr	r2, [pc, #588]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002024:	4419      	add	r1, r3
 8002026:	7f3b      	ldrb	r3, [r7, #28]
 8002028:	4a90      	ldr	r2, [pc, #576]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800202a:	7892      	ldrb	r2, [r2, #2]
 800202c:	4413      	add	r3, r2
 800202e:	4608      	mov	r0, r1
 8002030:	4a8f      	ldr	r2, [pc, #572]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002032:	2134      	movs	r1, #52	; 0x34
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3318      	adds	r3, #24
 800203c:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 800203e:	7fba      	ldrb	r2, [r7, #30]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	f103 020e 	add.w	r2, r3, #14
 800204c:	7f7b      	ldrb	r3, [r7, #29]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	4a85      	ldr	r2, [pc, #532]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8002054:	5cd2      	ldrb	r2, [r2, r3]
 8002056:	7f3b      	ldrb	r3, [r7, #28]
 8002058:	4984      	ldr	r1, [pc, #528]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800205a:	7889      	ldrb	r1, [r1, #2]
 800205c:	440b      	add	r3, r1
 800205e:	0912      	lsrs	r2, r2, #4
 8002060:	b2d0      	uxtb	r0, r2
 8002062:	4a83      	ldr	r2, [pc, #524]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002064:	2134      	movs	r1, #52	; 0x34
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	331c      	adds	r3, #28
 800206e:	4602      	mov	r2, r0
 8002070:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 8002072:	7f3b      	ldrb	r3, [r7, #28]
 8002074:	4a7d      	ldr	r2, [pc, #500]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002076:	7892      	ldrb	r2, [r2, #2]
 8002078:	4413      	add	r3, r2
 800207a:	4a7d      	ldr	r2, [pc, #500]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800207c:	2134      	movs	r1, #52	; 0x34
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	331c      	adds	r3, #28
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	051b      	lsls	r3, r3, #20
 800208a:	4618      	mov	r0, r3
 800208c:	7f3b      	ldrb	r3, [r7, #28]
 800208e:	4a77      	ldr	r2, [pc, #476]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002090:	7892      	ldrb	r2, [r2, #2]
 8002092:	4413      	add	r3, r2
 8002094:	4a76      	ldr	r2, [pc, #472]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002096:	2134      	movs	r1, #52	; 0x34
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3318      	adds	r3, #24
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	7f3b      	ldrb	r3, [r7, #28]
 80020a4:	4971      	ldr	r1, [pc, #452]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80020a6:	7889      	ldrb	r1, [r1, #2]
 80020a8:	440b      	add	r3, r1
 80020aa:	4402      	add	r2, r0
 80020ac:	4970      	ldr	r1, [pc, #448]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 80020ae:	2034      	movs	r0, #52	; 0x34
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	440b      	add	r3, r1
 80020b6:	3320      	adds	r3, #32
 80020b8:	601a      	str	r2, [r3, #0]
				break;
 80020ba:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 80020bc:	7fba      	ldrb	r2, [r7, #30]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f103 0214 	add.w	r2, r3, #20
 80020ca:	7f7b      	ldrb	r3, [r7, #29]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03f      	beq.n	8002158 <Si468x_dab_get_digital_service_list+0x448>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80020d8:	2300      	movs	r3, #0
 80020da:	76fb      	strb	r3, [r7, #27]
 80020dc:	e038      	b.n	8002150 <Si468x_dab_get_digital_service_list+0x440>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020de:	7efb      	ldrb	r3, [r7, #27]
 80020e0:	f103 0114 	add.w	r1, r3, #20
 80020e4:	7fba      	ldrb	r2, [r7, #30]
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	18ca      	adds	r2, r1, r3
 80020f0:	7f7b      	ldrb	r3, [r7, #29]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	18d1      	adds	r1, r2, r3
 80020f6:	7f3b      	ldrb	r3, [r7, #28]
 80020f8:	4a5c      	ldr	r2, [pc, #368]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80020fa:	7892      	ldrb	r2, [r2, #2]
 80020fc:	441a      	add	r2, r3
 80020fe:	7efb      	ldrb	r3, [r7, #27]
 8002100:	4859      	ldr	r0, [pc, #356]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 8002102:	5c44      	ldrb	r4, [r0, r1]
 8002104:	495a      	ldr	r1, [pc, #360]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002106:	2034      	movs	r0, #52	; 0x34
 8002108:	fb00 f202 	mul.w	r2, r0, r2
 800210c:	440a      	add	r2, r1
 800210e:	4413      	add	r3, r2
 8002110:	4622      	mov	r2, r4
 8002112:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 8002114:	7f3b      	ldrb	r3, [r7, #28]
 8002116:	4a55      	ldr	r2, [pc, #340]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002118:	7892      	ldrb	r2, [r2, #2]
 800211a:	441a      	add	r2, r3
 800211c:	7efb      	ldrb	r3, [r7, #27]
 800211e:	4954      	ldr	r1, [pc, #336]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 8002120:	2034      	movs	r0, #52	; 0x34
 8002122:	fb00 f202 	mul.w	r2, r0, r2
 8002126:	440a      	add	r2, r1
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b86      	cmp	r3, #134	; 0x86
 800212e:	d10c      	bne.n	800214a <Si468x_dab_get_digital_service_list+0x43a>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 8002130:	7f3b      	ldrb	r3, [r7, #28]
 8002132:	4a4e      	ldr	r2, [pc, #312]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002134:	7892      	ldrb	r2, [r2, #2]
 8002136:	441a      	add	r2, r3
 8002138:	7efb      	ldrb	r3, [r7, #27]
 800213a:	494d      	ldr	r1, [pc, #308]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800213c:	2034      	movs	r0, #52	; 0x34
 800213e:	fb00 f202 	mul.w	r2, r0, r2
 8002142:	440a      	add	r2, r1
 8002144:	4413      	add	r3, r2
 8002146:	226f      	movs	r2, #111	; 0x6f
 8002148:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800214a:	7efb      	ldrb	r3, [r7, #27]
 800214c:	3301      	adds	r3, #1
 800214e:	76fb      	strb	r3, [r7, #27]
 8002150:	7efb      	ldrb	r3, [r7, #27]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d9c3      	bls.n	80020de <Si468x_dab_get_digital_service_list+0x3ce>
 8002156:	e026      	b.n	80021a6 <Si468x_dab_get_digital_service_list+0x496>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <Si468x_dab_get_digital_service_list+0x564>)
 800215a:	463c      	mov	r4, r7
 800215c:	461d      	mov	r5, r3
 800215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	7023      	strb	r3, [r4, #0]
 8002166:	f107 0311 	add.w	r3, r7, #17
 800216a:	2200      	movs	r2, #0
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002170:	2300      	movs	r3, #0
 8002172:	76bb      	strb	r3, [r7, #26]
 8002174:	e014      	b.n	80021a0 <Si468x_dab_get_digital_service_list+0x490>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 8002176:	7eb9      	ldrb	r1, [r7, #26]
 8002178:	7f3b      	ldrb	r3, [r7, #28]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800217c:	7892      	ldrb	r2, [r2, #2]
 800217e:	441a      	add	r2, r3
 8002180:	7ebb      	ldrb	r3, [r7, #26]
 8002182:	3120      	adds	r1, #32
 8002184:	4439      	add	r1, r7
 8002186:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800218a:	4939      	ldr	r1, [pc, #228]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800218c:	2034      	movs	r0, #52	; 0x34
 800218e:	fb00 f202 	mul.w	r2, r0, r2
 8002192:	440a      	add	r2, r1
 8002194:	4413      	add	r3, r2
 8002196:	4622      	mov	r2, r4
 8002198:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800219a:	7ebb      	ldrb	r3, [r7, #26]
 800219c:	3301      	adds	r3, #1
 800219e:	76bb      	strb	r3, [r7, #26]
 80021a0:	7ebb      	ldrb	r3, [r7, #26]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d9e7      	bls.n	8002176 <Si468x_dab_get_digital_service_list+0x466>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	767b      	strb	r3, [r7, #25]
 80021aa:	e032      	b.n	8002212 <Si468x_dab_get_digital_service_list+0x502>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80021ac:	7f3b      	ldrb	r3, [r7, #28]
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80021b0:	7892      	ldrb	r2, [r2, #2]
 80021b2:	441a      	add	r2, r3
 80021b4:	7e7b      	ldrb	r3, [r7, #25]
 80021b6:	492e      	ldr	r1, [pc, #184]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 80021b8:	201a      	movs	r0, #26
 80021ba:	fb00 f202 	mul.w	r2, r0, r2
 80021be:	4413      	add	r3, r2
 80021c0:	3314      	adds	r3, #20
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	440b      	add	r3, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80021ca:	7fba      	ldrb	r2, [r7, #30]
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021d8:	7f7b      	ldrb	r3, [r7, #29]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <Si468x_dab_get_digital_service_list+0x558>)
 80021e0:	5cd1      	ldrb	r1, [r2, r3]
 80021e2:	7f3b      	ldrb	r3, [r7, #28]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 80021e6:	7892      	ldrb	r2, [r2, #2]
 80021e8:	441a      	add	r2, r3
 80021ea:	7e7b      	ldrb	r3, [r7, #25]
 80021ec:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021f0:	b2cc      	uxtb	r4, r1
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 80021f4:	201a      	movs	r0, #26
 80021f6:	fb00 f202 	mul.w	r2, r0, r2
 80021fa:	4413      	add	r3, r2
 80021fc:	3314      	adds	r3, #20
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	440b      	add	r3, r1
 8002202:	4622      	mov	r2, r4
 8002204:	709a      	strb	r2, [r3, #2]
			components_count++;
 8002206:	7f7b      	ldrb	r3, [r7, #29]
 8002208:	3301      	adds	r3, #1
 800220a:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 800220c:	7e7b      	ldrb	r3, [r7, #25]
 800220e:	3301      	adds	r3, #1
 8002210:	767b      	strb	r3, [r7, #25]
 8002212:	7f3b      	ldrb	r3, [r7, #28]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002216:	7892      	ldrb	r2, [r2, #2]
 8002218:	4413      	add	r3, r2
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <Si468x_dab_get_digital_service_list+0x560>)
 800221c:	2134      	movs	r1, #52	; 0x34
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3329      	adds	r3, #41	; 0x29
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	7e7a      	ldrb	r2, [r7, #25]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3be      	bcc.n	80021ac <Si468x_dab_get_digital_service_list+0x49c>
		}
		services_count++;
 800222e:	7fbb      	ldrb	r3, [r7, #30]
 8002230:	3301      	adds	r3, #1
 8002232:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8002234:	7f3b      	ldrb	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	773b      	strb	r3, [r7, #28]
 800223a:	7f3a      	ldrb	r2, [r7, #28]
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	429a      	cmp	r2, r3
 8002240:	f4ff adaa 	bcc.w	8001d98 <Si468x_dab_get_digital_service_list+0x88>
	}

	dab_management.total_services += number_of_services;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	4413      	add	r3, r2
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002250:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 8002254:	789a      	ldrb	r2, [r3, #2]
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	4413      	add	r3, r2
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <Si468x_dab_get_digital_service_list+0x55c>)
 800225e:	709a      	strb	r2, [r3, #2]
}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bdb0      	pop	{r4, r5, r7, pc}
 8002268:	200011a8 	.word	0x200011a8
 800226c:	20004bc4 	.word	0x20004bc4
 8002270:	20003774 	.word	0x20003774
 8002274:	0800db80 	.word	0x0800db80

08002278 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8002282:	2101      	movs	r1, #1
 8002284:	482d      	ldr	r0, [pc, #180]	; (800233c <Si468x_dab_start_digital_service+0xc4>)
 8002286:	f001 fb83 	bl	8003990 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 800228c:	2281      	movs	r2, #129	; 0x81
 800228e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 8002292:	2200      	movs	r2, #0
 8002294:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 8002298:	2200      	movs	r2, #0
 800229a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022a8:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022b2:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022bc:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0e1b      	lsrs	r3, r3, #24
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022c6:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022ce:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022d8:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022e2:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	0e1b      	lsrs	r3, r3, #24
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022ec:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80022ee:	4914      	ldr	r1, [pc, #80]	; (8002340 <Si468x_dab_start_digital_service+0xc8>)
 80022f0:	200c      	movs	r0, #12
 80022f2:	f7ff f9c1 	bl	8001678 <Si468x_write_command>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <Si468x_dab_start_digital_service+0xcc>)
 80022fc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f005 f852 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002304:	4910      	ldr	r1, [pc, #64]	; (8002348 <Si468x_dab_start_digital_service+0xd0>)
 8002306:	2005      	movs	r0, #5
 8002308:	f7ff f9d8 	bl	80016bc <Si468x_read_reply>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <Si468x_dab_start_digital_service+0xcc>)
 8002312:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <Si468x_dab_start_digital_service+0xd4>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002322:	2101      	movs	r1, #1
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <Si468x_dab_start_digital_service+0xd8>)
 8002326:	f001 fb33 	bl	8003990 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 800232a:	e003      	b.n	8002334 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 800232c:	2101      	movs	r1, #1
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <Si468x_dab_start_digital_service+0xdc>)
 8002330:	f001 fb2e 	bl	8003990 <send_debug_msg>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	0800db94 	.word	0x0800db94
 8002340:	200001a8 	.word	0x200001a8
 8002344:	20003510 	.word	0x20003510
 8002348:	200011a8 	.word	0x200011a8
 800234c:	200035fc 	.word	0x200035fc
 8002350:	0800d678 	.word	0x0800d678
 8002354:	0800dbd0 	.word	0x0800dbd0

08002358 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 8002362:	2101      	movs	r1, #1
 8002364:	484a      	ldr	r0, [pc, #296]	; (8002490 <Si468x_dab_get_ensemble_info+0x138>)
 8002366:	f001 fb13 	bl	8003990 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 800236a:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 800236c:	22b4      	movs	r2, #180	; 0xb4
 800236e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002370:	4b48      	ldr	r3, [pc, #288]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002376:	4947      	ldr	r1, [pc, #284]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff f97d 	bl	8001678 <Si468x_write_command>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 8002384:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8002386:	2002      	movs	r0, #2
 8002388:	f005 f80e 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 800238c:	4943      	ldr	r1, [pc, #268]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 800238e:	2015      	movs	r0, #21
 8002390:	f7ff f994 	bl	80016bc <Si468x_read_reply>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 800239a:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 800239c:	e012      	b.n	80023c4 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800239e:	493d      	ldr	r1, [pc, #244]	; (8002494 <Si468x_dab_get_ensemble_info+0x13c>)
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7ff f969 	bl	8001678 <Si468x_write_command>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 80023ac:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80023ae:	2002      	movs	r0, #2
 80023b0:	f004 fffa 	bl	80073a8 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80023b4:	4939      	ldr	r1, [pc, #228]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023b6:	2015      	movs	r0, #21
 80023b8:	f7ff f980 	bl	80016bc <Si468x_read_reply>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <Si468x_dab_get_ensemble_info+0x140>)
 80023c2:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023c6:	799b      	ldrb	r3, [r3, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0e8      	beq.n	800239e <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <Si468x_dab_get_ensemble_info+0x148>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023da:	2101      	movs	r1, #1
 80023dc:	4831      	ldr	r0, [pc, #196]	; (80024a4 <Si468x_dab_get_ensemble_info+0x14c>)
 80023de:	f001 fad7 	bl	8003990 <send_debug_msg>
		return 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e050      	b.n	8002488 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023e8:	795b      	ldrb	r3, [r3, #5]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 80023ee:	7912      	ldrb	r2, [r2, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d041      	beq.n	800247e <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80023fa:	2101      	movs	r1, #1
 80023fc:	482a      	ldr	r0, [pc, #168]	; (80024a8 <Si468x_dab_get_ensemble_info+0x150>)
 80023fe:	f001 fac7 	bl	8003990 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	b291      	uxth	r1, r2
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	4413      	add	r3, r2
 8002410:	460a      	mov	r2, r1
 8002412:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	4618      	mov	r0, r3
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 8002420:	0143      	lsls	r3, r0, #5
 8002422:	440b      	add	r3, r1
 8002424:	3318      	adds	r3, #24
 8002426:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 8002428:	4b20      	ldr	r3, [pc, #128]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	4618      	mov	r0, r3
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002430:	7b19      	ldrb	r1, [r3, #12]
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 8002434:	0143      	lsls	r3, r0, #5
 8002436:	4413      	add	r3, r2
 8002438:	331c      	adds	r3, #28
 800243a:	460a      	mov	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	e011      	b.n	8002468 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	1d9a      	adds	r2, r3, #6
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	461c      	mov	r4, r3
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4912      	ldr	r1, [pc, #72]	; (800249c <Si468x_dab_get_ensemble_info+0x144>)
 8002452:	5c88      	ldrb	r0, [r1, r2]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <Si468x_dab_get_ensemble_info+0x158>)
 8002456:	0162      	lsls	r2, r4, #5
 8002458:	440a      	add	r2, r1
 800245a:	4413      	add	r3, r2
 800245c:	3302      	adds	r3, #2
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	3301      	adds	r3, #1
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d9ea      	bls.n	8002444 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <Si468x_dab_get_ensemble_info+0x154>)
 8002478:	705a      	strb	r2, [r3, #1]
			return 1;
 800247a:	2301      	movs	r3, #1
 800247c:	e004      	b.n	8002488 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800247e:	2101      	movs	r1, #1
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <Si468x_dab_get_ensemble_info+0x15c>)
 8002482:	f001 fa85 	bl	8003990 <send_debug_msg>
			return 0;
 8002486:	2300      	movs	r3, #0
		}
	}
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	0800dbf0 	.word	0x0800dbf0
 8002494:	200001a8 	.word	0x200001a8
 8002498:	20003510 	.word	0x20003510
 800249c:	200011a8 	.word	0x200011a8
 80024a0:	200035fc 	.word	0x200035fc
 80024a4:	0800d678 	.word	0x0800d678
 80024a8:	0800dc2c 	.word	0x0800dc2c
 80024ac:	20004bc4 	.word	0x20004bc4
 80024b0:	20003634 	.word	0x20003634
 80024b4:	0800dc3c 	.word	0x0800dc3c

080024b8 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b099      	sub	sp, #100	; 0x64
 80024bc:	af0a      	add	r7, sp, #40	; 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 80024be:	2101      	movs	r1, #1
 80024c0:	4887      	ldr	r0, [pc, #540]	; (80026e0 <Si468x_dab_full_scan+0x228>)
 80024c2:	f001 fa65 	bl	8003990 <send_debug_msg>
	dab_management.total_services = 0;
 80024c6:	4b87      	ldr	r3, [pc, #540]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 80024cc:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 80024d2:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t fic_q_timeout = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t _scan_cancel_flag = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024f0:	e09e      	b.n	8002630 <Si468x_dab_full_scan+0x178>
	{
		_touch_coordinates = Touch_read();
 80024f2:	f004 fbb1 	bl	8006c58 <Touch_read>
 80024f6:	4603      	mov	r3, r0
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80024fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d90c      	bls.n	800251a <Si468x_dab_full_scan+0x62>
 8002500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002502:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002506:	d808      	bhi.n	800251a <Si468x_dab_full_scan+0x62>
 8002508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800250a:	2bc3      	cmp	r3, #195	; 0xc3
 800250c:	d905      	bls.n	800251a <Si468x_dab_full_scan+0x62>
 800250e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002510:	2bea      	cmp	r3, #234	; 0xea
 8002512:	d802      	bhi.n	800251a <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		if(_scan_cancel_flag)
 800251a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 808e 	bne.w	8002640 <Si468x_dab_full_scan+0x188>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 8002524:	2306      	movs	r3, #6
 8002526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 800252a:	2396      	movs	r3, #150	; 0x96
 800252c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		Si468x_dab_tune_freq(freq_index, USE_ANT_CAP);
 8002530:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff faba 	bl	8001ab0 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 800253c:	463b      	mov	r3, r7
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb8e 	bl	8001c60 <Si468x_dab_digrad_status>
			valid_timeout--;
 8002544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002548:	3b01      	subs	r3, #1
 800254a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(!valid_timeout)
 800254e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002556:	2101      	movs	r1, #1
 8002558:	4863      	ldr	r0, [pc, #396]	; (80026e8 <Si468x_dab_full_scan+0x230>)
 800255a:	f001 fa19 	bl	8003990 <send_debug_msg>
				break;
 800255e:	e010      	b.n	8002582 <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002560:	2032      	movs	r0, #50	; 0x32
 8002562:	f004 ff21 	bl	80073a8 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002566:	4b61      	ldr	r3, [pc, #388]	; (80026ec <Si468x_dab_full_scan+0x234>)
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0e3      	beq.n	800253c <Si468x_dab_full_scan+0x84>
 8002574:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <Si468x_dab_full_scan+0x234>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0dc      	beq.n	800253c <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 8002582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 800258a:	463b      	mov	r3, r7
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb67 	bl	8001c60 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 8002592:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002596:	3b01      	subs	r3, #1
 8002598:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(!fic_q_timeout)
 800259c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 80025a4:	2101      	movs	r1, #1
 80025a6:	4850      	ldr	r0, [pc, #320]	; (80026e8 <Si468x_dab_full_scan+0x230>)
 80025a8:	f001 f9f2 	bl	8003990 <send_debug_msg>
					break;
 80025ac:	e006      	b.n	80025bc <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80025ae:	2032      	movs	r0, #50	; 0x32
 80025b0:	f004 fefa 	bl	80073a8 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 80025b4:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <Si468x_dab_full_scan+0x234>)
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	2b31      	cmp	r3, #49	; 0x31
 80025ba:	d9e6      	bls.n	800258a <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 80025bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01d      	beq.n	8002600 <Si468x_dab_full_scan+0x148>
 80025c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d019      	beq.n	8002600 <Si468x_dab_full_scan+0x148>
		{
			do
			{
				Si468x_dab_get_event_status();
 80025cc:	f000 fb12 	bl	8002bf4 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80025d0:	200a      	movs	r0, #10
 80025d2:	f004 fee9 	bl	80073a8 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <Si468x_dab_full_scan+0x238>)
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f3      	beq.n	80025cc <Si468x_dab_full_scan+0x114>
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <Si468x_dab_full_scan+0x238>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ec      	bne.n	80025cc <Si468x_dab_full_scan+0x114>

			if(Si468x_dab_get_ensemble_info())
 80025f2:	f7ff feb1 	bl	8002358 <Si468x_dab_get_ensemble_info>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <Si468x_dab_full_scan+0x148>
			{
				Si468x_dab_get_digital_service_list();
 80025fc:	f7ff fb88 	bl	8001d10 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 8002600:	4e3a      	ldr	r6, [pc, #232]	; (80026ec <Si468x_dab_full_scan+0x234>)
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002604:	ac06      	add	r4, sp, #24
 8002606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800260c:	466d      	mov	r5, sp
 800260e:	f106 0410 	add.w	r4, r6, #16
 8002612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261a:	e885 0003 	stmia.w	r5, {r0, r1}
 800261e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002622:	f002 f827 	bl	8004674 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 8002626:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800262a:	3301      	adds	r3, #1
 800262c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002632:	7b5b      	ldrb	r3, [r3, #13]
 8002634:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002638:	429a      	cmp	r2, r3
 800263a:	f4ff af5a 	bcc.w	80024f2 <Si468x_dab_full_scan+0x3a>
 800263e:	e000      	b.n	8002642 <Si468x_dab_full_scan+0x18a>
			break;
 8002640:	bf00      	nop
	}

	if(_scan_cancel_flag)
 8002642:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <Si468x_dab_full_scan+0x1a2>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 800264a:	2101      	movs	r1, #1
 800264c:	4829      	ldr	r0, [pc, #164]	; (80026f4 <Si468x_dab_full_scan+0x23c>)
 800264e:	f001 f99f 	bl	8003990 <send_debug_msg>
		restore_from_eeprom();
 8002652:	f000 fe37 	bl	80032c4 <restore_from_eeprom>
		return 0;
 8002656:	2300      	movs	r3, #0
 8002658:	e1e9      	b.n	8002a2e <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 800265a:	f003 f86f 	bl	800573c <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d013      	beq.n	800268e <Si468x_dab_full_scan+0x1d6>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002668:	7819      	ldrb	r1, [r3, #0]
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <Si468x_dab_full_scan+0x240>)
 8002670:	4822      	ldr	r0, [pc, #136]	; (80026fc <Si468x_dab_full_scan+0x244>)
 8002672:	f003 f8bf 	bl	80057f4 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002678:	2200      	movs	r2, #0
 800267a:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 800267e:	2200      	movs	r2, #0
 8002680:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002682:	2201      	movs	r2, #1
 8002684:	491e      	ldr	r1, [pc, #120]	; (8002700 <Si468x_dab_full_scan+0x248>)
 8002686:	f240 1007 	movw	r0, #263	; 0x107
 800268a:	f003 f82f 	bl	80056ec <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800268e:	2100      	movs	r1, #0
 8002690:	481c      	ldr	r0, [pc, #112]	; (8002704 <Si468x_dab_full_scan+0x24c>)
 8002692:	f001 f97d 	bl	8003990 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <Si468x_dab_full_scan+0x22c>)
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	220a      	movs	r2, #10
 800269c:	491a      	ldr	r1, [pc, #104]	; (8002708 <Si468x_dab_full_scan+0x250>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f00a fe78 	bl	800d394 <itoa>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f971 	bl	8003990 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80026ae:	2101      	movs	r1, #1
 80026b0:	4816      	ldr	r0, [pc, #88]	; (800270c <Si468x_dab_full_scan+0x254>)
 80026b2:	f001 f96d 	bl	8003990 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80026b6:	2100      	movs	r1, #0
 80026b8:	4815      	ldr	r0, [pc, #84]	; (8002710 <Si468x_dab_full_scan+0x258>)
 80026ba:	f001 f969 	bl	8003990 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80026be:	2100      	movs	r1, #0
 80026c0:	4814      	ldr	r0, [pc, #80]	; (8002714 <Si468x_dab_full_scan+0x25c>)
 80026c2:	f001 f965 	bl	8003990 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80026c6:	2100      	movs	r1, #0
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <Si468x_dab_full_scan+0x260>)
 80026ca:	f001 f961 	bl	8003990 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80026ce:	2101      	movs	r1, #1
 80026d0:	4812      	ldr	r0, [pc, #72]	; (800271c <Si468x_dab_full_scan+0x264>)
 80026d2:	f001 f95d 	bl	8003990 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80026dc:	e07d      	b.n	80027da <Si468x_dab_full_scan+0x322>
 80026de:	bf00      	nop
 80026e0:	0800dc50 	.word	0x0800dc50
 80026e4:	20004bc4 	.word	0x20004bc4
 80026e8:	0800dc3c 	.word	0x0800dc3c
 80026ec:	200035d4 	.word	0x200035d4
 80026f0:	20003600 	.word	0x20003600
 80026f4:	0800dc8c 	.word	0x0800dc8c
 80026f8:	20003634 	.word	0x20003634
 80026fc:	20003774 	.word	0x20003774
 8002700:	20004bc8 	.word	0x20004bc8
 8002704:	0800dca0 	.word	0x0800dca0
 8002708:	200034d0 	.word	0x200034d0
 800270c:	0800dcb4 	.word	0x0800dcb4
 8002710:	0800dce8 	.word	0x0800dce8
 8002714:	0800dcf4 	.word	0x0800dcf4
 8002718:	0800dd08 	.word	0x0800dd08
 800271c:	0800dd18 	.word	0x0800dd18
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8002720:	2100      	movs	r1, #0
 8002722:	48c5      	ldr	r0, [pc, #788]	; (8002a38 <Si468x_dab_full_scan+0x580>)
 8002724:	f001 f934 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002728:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800272c:	3301      	adds	r3, #1
 800272e:	220a      	movs	r2, #10
 8002730:	49c2      	ldr	r1, [pc, #776]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fe2e 	bl	800d394 <itoa>
 8002738:	4603      	mov	r3, r0
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f001 f927 	bl	8003990 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8002742:	2100      	movs	r1, #0
 8002744:	48be      	ldr	r0, [pc, #760]	; (8002a40 <Si468x_dab_full_scan+0x588>)
 8002746:	f001 f923 	bl	8003990 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800274a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	4abc      	ldr	r2, [pc, #752]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 8002752:	4413      	add	r3, r2
 8002754:	3302      	adds	r3, #2
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f001 f919 	bl	8003990 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800275e:	2100      	movs	r1, #0
 8002760:	48b5      	ldr	r0, [pc, #724]	; (8002a38 <Si468x_dab_full_scan+0x580>)
 8002762:	f001 f915 	bl	8003990 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800276a:	4ab6      	ldr	r2, [pc, #728]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	4413      	add	r3, r2
 8002770:	3318      	adds	r3, #24
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	220a      	movs	r2, #10
 8002776:	49b1      	ldr	r1, [pc, #708]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 8002778:	4618      	mov	r0, r3
 800277a:	f00a fe0b 	bl	800d394 <itoa>
 800277e:	4603      	mov	r3, r0
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f001 f904 	bl	8003990 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002788:	2100      	movs	r1, #0
 800278a:	48af      	ldr	r0, [pc, #700]	; (8002a48 <Si468x_dab_full_scan+0x590>)
 800278c:	f001 f900 	bl	8003990 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002794:	4aab      	ldr	r2, [pc, #684]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	4413      	add	r3, r2
 800279a:	331c      	adds	r3, #28
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4baa      	ldr	r3, [pc, #680]	; (8002a4c <Si468x_dab_full_scan+0x594>)
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f8f1 	bl	8003990 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80027ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027b2:	4aa4      	ldr	r2, [pc, #656]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	4413      	add	r3, r2
 80027b8:	331c      	adds	r3, #28
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b13      	cmp	r3, #19
 80027be:	d803      	bhi.n	80027c8 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80027c0:	2100      	movs	r1, #0
 80027c2:	48a3      	ldr	r0, [pc, #652]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 80027c4:	f001 f8e4 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80027c8:	2101      	movs	r1, #1
 80027ca:	48a2      	ldr	r0, [pc, #648]	; (8002a54 <Si468x_dab_full_scan+0x59c>)
 80027cc:	f001 f8e0 	bl	8003990 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80027d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027d4:	3301      	adds	r3, #1
 80027d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80027da:	4b9f      	ldr	r3, [pc, #636]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d39c      	bcc.n	8002720 <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027e6:	2101      	movs	r1, #1
 80027e8:	489c      	ldr	r0, [pc, #624]	; (8002a5c <Si468x_dab_full_scan+0x5a4>)
 80027ea:	f001 f8d1 	bl	8003990 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80027ee:	2100      	movs	r1, #0
 80027f0:	489b      	ldr	r0, [pc, #620]	; (8002a60 <Si468x_dab_full_scan+0x5a8>)
 80027f2:	f001 f8cd 	bl	8003990 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80027f6:	4b98      	ldr	r3, [pc, #608]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	220a      	movs	r2, #10
 80027fc:	498f      	ldr	r1, [pc, #572]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f00a fdc8 	bl	800d394 <itoa>
 8002804:	4603      	mov	r3, r0
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f8c1 	bl	8003990 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800280e:	2101      	movs	r1, #1
 8002810:	4894      	ldr	r0, [pc, #592]	; (8002a64 <Si468x_dab_full_scan+0x5ac>)
 8002812:	f001 f8bd 	bl	8003990 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8002816:	2101      	movs	r1, #1
 8002818:	4893      	ldr	r0, [pc, #588]	; (8002a68 <Si468x_dab_full_scan+0x5b0>)
 800281a:	f001 f8b9 	bl	8003990 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002824:	e0f7      	b.n	8002a16 <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 8002826:	2100      	movs	r1, #0
 8002828:	4883      	ldr	r0, [pc, #524]	; (8002a38 <Si468x_dab_full_scan+0x580>)
 800282a:	f001 f8b1 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 800282e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002832:	3301      	adds	r3, #1
 8002834:	220a      	movs	r2, #10
 8002836:	4981      	ldr	r1, [pc, #516]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fdab 	bl	800d394 <itoa>
 800283e:	4603      	mov	r3, r0
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f8a4 	bl	8003990 <send_debug_msg>
			if((services_index + 1) < 10)
 8002848:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800284c:	2b08      	cmp	r3, #8
 800284e:	d803      	bhi.n	8002858 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002850:	2100      	movs	r1, #0
 8002852:	487f      	ldr	r0, [pc, #508]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 8002854:	f001 f89c 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002858:	2100      	movs	r1, #0
 800285a:	4884      	ldr	r0, [pc, #528]	; (8002a6c <Si468x_dab_full_scan+0x5b4>)
 800285c:	f001 f898 	bl	8003990 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002860:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002864:	2234      	movs	r2, #52	; 0x34
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	4a81      	ldr	r2, [pc, #516]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 800286c:	4413      	add	r3, r2
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f001 f88d 	bl	8003990 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002876:	2100      	movs	r1, #0
 8002878:	487e      	ldr	r0, [pc, #504]	; (8002a74 <Si468x_dab_full_scan+0x5bc>)
 800287a:	f001 f889 	bl	8003990 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002884:	e021      	b.n	80028ca <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002886:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800288a:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	4413      	add	r3, r2
 8002890:	331c      	adds	r3, #28
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002898:	4975      	ldr	r1, [pc, #468]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 800289a:	2034      	movs	r0, #52	; 0x34
 800289c:	fb00 f303 	mul.w	r3, r0, r3
 80028a0:	440b      	add	r3, r1
 80028a2:	3328      	adds	r3, #40	; 0x28
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10a      	bne.n	80028c0 <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80028aa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80028ae:	015b      	lsls	r3, r3, #5
 80028b0:	4a64      	ldr	r2, [pc, #400]	; (8002a44 <Si468x_dab_full_scan+0x58c>)
 80028b2:	4413      	add	r3, r2
 80028b4:	3302      	adds	r3, #2
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 f869 	bl	8003990 <send_debug_msg>
					break;
 80028be:	e00a      	b.n	80028d6 <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80028c0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80028c4:	3301      	adds	r3, #1
 80028c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3d7      	bcc.n	8002886 <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80028d6:	2100      	movs	r1, #0
 80028d8:	4866      	ldr	r0, [pc, #408]	; (8002a74 <Si468x_dab_full_scan+0x5bc>)
 80028da:	f001 f859 	bl	8003990 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80028de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028e2:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 80028e4:	2134      	movs	r1, #52	; 0x34
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3324      	adds	r3, #36	; 0x24
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	220a      	movs	r2, #10
 80028f2:	4952      	ldr	r1, [pc, #328]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00a fd4d 	bl	800d394 <itoa>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f846 	bl	8003990 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002904:	2100      	movs	r1, #0
 8002906:	4850      	ldr	r0, [pc, #320]	; (8002a48 <Si468x_dab_full_scan+0x590>)
 8002908:	f001 f842 	bl	8003990 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 800290c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 8002912:	2134      	movs	r1, #52	; 0x34
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3328      	adds	r3, #40	; 0x28
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <Si468x_dab_full_scan+0x594>)
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f831 	bl	8003990 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 800292e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002932:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 8002934:	2134      	movs	r1, #52	; 0x34
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3328      	adds	r3, #40	; 0x28
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b13      	cmp	r3, #19
 8002942:	d803      	bhi.n	800294c <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002944:	2100      	movs	r1, #0
 8002946:	4842      	ldr	r0, [pc, #264]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 8002948:	f001 f822 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800294c:	2100      	movs	r1, #0
 800294e:	4847      	ldr	r0, [pc, #284]	; (8002a6c <Si468x_dab_full_scan+0x5b4>)
 8002950:	f001 f81e 	bl	8003990 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002954:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002958:	4a45      	ldr	r2, [pc, #276]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 800295a:	2134      	movs	r1, #52	; 0x34
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3315      	adds	r3, #21
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	220a      	movs	r2, #10
 8002968:	4934      	ldr	r1, [pc, #208]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 800296a:	4618      	mov	r0, r3
 800296c:	f00a fd12 	bl	800d394 <itoa>
 8002970:	4603      	mov	r3, r0
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f001 f80b 	bl	8003990 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 800297a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 8002980:	2134      	movs	r1, #52	; 0x34
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3315      	adds	r3, #21
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d803      	bhi.n	8002998 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002990:	2100      	movs	r1, #0
 8002992:	482f      	ldr	r0, [pc, #188]	; (8002a50 <Si468x_dab_full_scan+0x598>)
 8002994:	f000 fffc 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002998:	2100      	movs	r1, #0
 800299a:	4837      	ldr	r0, [pc, #220]	; (8002a78 <Si468x_dab_full_scan+0x5c0>)
 800299c:	f000 fff8 	bl	8003990 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029a0:	2100      	movs	r1, #0
 80029a2:	4836      	ldr	r0, [pc, #216]	; (8002a7c <Si468x_dab_full_scan+0x5c4>)
 80029a4:	f000 fff4 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 80029ae:	2134      	movs	r1, #52	; 0x34
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3320      	adds	r3, #32
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2210      	movs	r2, #16
 80029bc:	491f      	ldr	r1, [pc, #124]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f00a fce8 	bl	800d394 <itoa>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 ffe1 	bl	8003990 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029ce:	2100      	movs	r1, #0
 80029d0:	4826      	ldr	r0, [pc, #152]	; (8002a6c <Si468x_dab_full_scan+0x5b4>)
 80029d2:	f000 ffdd 	bl	8003990 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029d6:	2100      	movs	r1, #0
 80029d8:	4828      	ldr	r0, [pc, #160]	; (8002a7c <Si468x_dab_full_scan+0x5c4>)
 80029da:	f000 ffd9 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <Si468x_dab_full_scan+0x5b8>)
 80029e4:	2134      	movs	r1, #52	; 0x34
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	332a      	adds	r3, #42	; 0x2a
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	4912      	ldr	r1, [pc, #72]	; (8002a3c <Si468x_dab_full_scan+0x584>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00a fccd 	bl	800d394 <itoa>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ffc6 	bl	8003990 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8002a04:	2101      	movs	r1, #1
 8002a06:	481e      	ldr	r0, [pc, #120]	; (8002a80 <Si468x_dab_full_scan+0x5c8>)
 8002a08:	f000 ffc2 	bl	8003990 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002a0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a10:	3301      	adds	r3, #1
 8002a12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <Si468x_dab_full_scan+0x5a0>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	f4ff af01 	bcc.w	8002826 <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002a24:	2101      	movs	r1, #1
 8002a26:	480f      	ldr	r0, [pc, #60]	; (8002a64 <Si468x_dab_full_scan+0x5ac>)
 8002a28:	f000 ffb2 	bl	8003990 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002a2c:	2301      	movs	r3, #1
	}
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	373c      	adds	r7, #60	; 0x3c
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	0800dd28 	.word	0x0800dd28
 8002a3c:	200034d0 	.word	0x200034d0
 8002a40:	0800dd2c 	.word	0x0800dd2c
 8002a44:	20003634 	.word	0x20003634
 8002a48:	0800dd38 	.word	0x0800dd38
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	0800dd40 	.word	0x0800dd40
 8002a54:	0800dd44 	.word	0x0800dd44
 8002a58:	20004bc4 	.word	0x20004bc4
 8002a5c:	0800dcb4 	.word	0x0800dcb4
 8002a60:	0800dd4c 	.word	0x0800dd4c
 8002a64:	0800dd60 	.word	0x0800dd60
 8002a68:	0800ddcc 	.word	0x0800ddcc
 8002a6c:	0800de38 	.word	0x0800de38
 8002a70:	20003774 	.word	0x20003774
 8002a74:	0800de40 	.word	0x0800de40
 8002a78:	0800de44 	.word	0x0800de44
 8002a7c:	0800de4c 	.word	0x0800de4c
 8002a80:	0800de50 	.word	0x0800de50

08002a84 <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	484d      	ldr	r0, [pc, #308]	; (8002bc4 <Si468x_dab_get_audio_info+0x140>)
 8002a90:	f000 ff7e 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <Si468x_dab_get_audio_info+0x144>)
 8002a96:	22bd      	movs	r2, #189	; 0xbd
 8002a98:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002a9a:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <Si468x_dab_get_audio_info+0x144>)
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002aa0:	4949      	ldr	r1, [pc, #292]	; (8002bc8 <Si468x_dab_get_audio_info+0x144>)
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f7fe fde8 	bl	8001678 <Si468x_write_command>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <Si468x_dab_get_audio_info+0x148>)
 8002aae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f004 fc79 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002ab6:	4946      	ldr	r1, [pc, #280]	; (8002bd0 <Si468x_dab_get_audio_info+0x14c>)
 8002ab8:	2014      	movs	r0, #20
 8002aba:	f7fe fdff 	bl	80016bc <Si468x_read_reply>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <Si468x_dab_get_audio_info+0x148>)
 8002ac4:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002ac6:	4a43      	ldr	r2, [pc, #268]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002ac8:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <Si468x_dab_get_audio_info+0x14c>)
 8002aca:	4614      	mov	r4, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4840      	ldr	r0, [pc, #256]	; (8002bd8 <Si468x_dab_get_audio_info+0x154>)
 8002ad8:	f000 ff5a 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	220a      	movs	r2, #10
 8002ae2:	493e      	ldr	r1, [pc, #248]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00a fc55 	bl	800d394 <itoa>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 ff4e 	bl	8003990 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002af4:	2100      	movs	r1, #0
 8002af6:	483a      	ldr	r0, [pc, #232]	; (8002be0 <Si468x_dab_get_audio_info+0x15c>)
 8002af8:	f000 ff4a 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002afe:	885b      	ldrh	r3, [r3, #2]
 8002b00:	220a      	movs	r2, #10
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00a fc45 	bl	800d394 <itoa>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 ff3e 	bl	8003990 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002b14:	2100      	movs	r1, #0
 8002b16:	4833      	ldr	r0, [pc, #204]	; (8002be4 <Si468x_dab_get_audio_info+0x160>)
 8002b18:	f000 ff3a 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b1e:	791b      	ldrb	r3, [r3, #4]
 8002b20:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	220a      	movs	r2, #10
 8002b28:	492c      	ldr	r1, [pc, #176]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f00a fc32 	bl	800d394 <itoa>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 ff2b 	bl	8003990 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	482a      	ldr	r0, [pc, #168]	; (8002be8 <Si468x_dab_get_audio_info+0x164>)
 8002b3e:	f000 ff27 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	220a      	movs	r2, #10
 8002b4e:	4923      	ldr	r1, [pc, #140]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00a fc1f 	bl	800d394 <itoa>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ff18 	bl	8003990 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b60:	2100      	movs	r1, #0
 8002b62:	4822      	ldr	r0, [pc, #136]	; (8002bec <Si468x_dab_get_audio_info+0x168>)
 8002b64:	f000 ff14 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	220a      	movs	r2, #10
 8002b74:	4919      	ldr	r1, [pc, #100]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00a fc0c 	bl	800d394 <itoa>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 ff05 	bl	8003990 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002b86:	2100      	movs	r1, #0
 8002b88:	4819      	ldr	r0, [pc, #100]	; (8002bf0 <Si468x_dab_get_audio_info+0x16c>)
 8002b8a:	f000 ff01 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	220a      	movs	r2, #10
 8002b9a:	4910      	ldr	r1, [pc, #64]	; (8002bdc <Si468x_dab_get_audio_info+0x158>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00a fbf9 	bl	800d394 <itoa>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fef2 	bl	8003990 <send_debug_msg>

	return dab_audio_info;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <Si468x_dab_get_audio_info+0x150>)
 8002bb0:	461c      	mov	r4, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	0800de5c 	.word	0x0800de5c
 8002bc8:	200001a8 	.word	0x200001a8
 8002bcc:	20003510 	.word	0x20003510
 8002bd0:	200011a8 	.word	0x200011a8
 8002bd4:	20003610 	.word	0x20003610
 8002bd8:	0800de98 	.word	0x0800de98
 8002bdc:	200034d0 	.word	0x200034d0
 8002be0:	0800dea4 	.word	0x0800dea4
 8002be4:	0800deb4 	.word	0x0800deb4
 8002be8:	0800dec8 	.word	0x0800dec8
 8002bec:	0800ded4 	.word	0x0800ded4
 8002bf0:	0800dee0 	.word	0x0800dee0

08002bf4 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4811      	ldr	r0, [pc, #68]	; (8002c40 <Si468x_dab_get_event_status+0x4c>)
 8002bfc:	f000 fec8 	bl	8003990 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <Si468x_dab_get_event_status+0x50>)
 8002c02:	22b3      	movs	r2, #179	; 0xb3
 8002c04:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <Si468x_dab_get_event_status+0x50>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002c0c:	490d      	ldr	r1, [pc, #52]	; (8002c44 <Si468x_dab_get_event_status+0x50>)
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7fe fd32 	bl	8001678 <Si468x_write_command>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <Si468x_dab_get_event_status+0x54>)
 8002c1a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f004 fbc3 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <Si468x_dab_get_event_status+0x58>)
 8002c24:	2009      	movs	r0, #9
 8002c26:	f7fe fd49 	bl	80016bc <Si468x_read_reply>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <Si468x_dab_get_event_status+0x54>)
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <Si468x_dab_get_event_status+0x58>)
 8002c34:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002c36:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <Si468x_dab_get_event_status+0x5c>)
 8002c38:	6013      	str	r3, [r2, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800def0 	.word	0x0800def0
 8002c44:	200001a8 	.word	0x200001a8
 8002c48:	20003510 	.word	0x20003510
 8002c4c:	200011a8 	.word	0x200011a8
 8002c50:	20003600 	.word	0x20003600

08002c54 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c60:	2101      	movs	r1, #1
 8002c62:	484a      	ldr	r0, [pc, #296]	; (8002d8c <Si468x_dab_get_component_info+0x138>)
 8002c64:	f000 fe94 	bl	8003990 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c6a:	22bb      	movs	r2, #187	; 0xbb
 8002c6c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c6e:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c7a:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c86:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c90:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002c9a:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0e1b      	lsrs	r3, r3, #24
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002ca4:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002ca6:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	121b      	asrs	r3, r3, #8
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002cb4:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	141b      	asrs	r3, r3, #16
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002cbe:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	161b      	asrs	r3, r3, #24
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002cc8:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002cca:	4931      	ldr	r1, [pc, #196]	; (8002d90 <Si468x_dab_get_component_info+0x13c>)
 8002ccc:	200c      	movs	r0, #12
 8002cce:	f7fe fcd3 	bl	8001678 <Si468x_write_command>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <Si468x_dab_get_component_info+0x140>)
 8002cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002cda:	2005      	movs	r0, #5
 8002cdc:	f004 fb64 	bl	80073a8 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002ce0:	492d      	ldr	r1, [pc, #180]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002ce2:	201a      	movs	r0, #26
 8002ce4:	f7fe fcea 	bl	80016bc <Si468x_read_reply>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <Si468x_dab_get_component_info+0x140>)
 8002cee:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002cf2:	799b      	ldrb	r3, [r3, #6]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf8:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e00c      	b.n	8002d1a <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
 8002d02:	f103 0208 	add.w	r2, r3, #8
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	4923      	ldr	r1, [pc, #140]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002d0a:	5c8a      	ldrb	r2, [r1, r2]
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	443b      	add	r3, r7
 8002d10:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
 8002d16:	3301      	adds	r3, #1
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d9ef      	bls.n	8002d00 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <Si468x_dab_get_component_info+0x144>)
 8002d28:	7e5b      	ldrb	r3, [r3, #25]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002d34:	2100      	movs	r1, #0
 8002d36:	4819      	ldr	r0, [pc, #100]	; (8002d9c <Si468x_dab_get_component_info+0x148>)
 8002d38:	f000 fe2a 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d3c:	7fbb      	ldrb	r3, [r7, #30]
 8002d3e:	220a      	movs	r2, #10
 8002d40:	4917      	ldr	r1, [pc, #92]	; (8002da0 <Si468x_dab_get_component_info+0x14c>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f00a fb26 	bl	800d394 <itoa>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fe1f 	bl	8003990 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d52:	2100      	movs	r1, #0
 8002d54:	4813      	ldr	r0, [pc, #76]	; (8002da4 <Si468x_dab_get_component_info+0x150>)
 8002d56:	f000 fe1b 	bl	8003990 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fe15 	bl	8003990 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d66:	2100      	movs	r1, #0
 8002d68:	480f      	ldr	r0, [pc, #60]	; (8002da8 <Si468x_dab_get_component_info+0x154>)
 8002d6a:	f000 fe11 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d6e:	8bbb      	ldrh	r3, [r7, #28]
 8002d70:	2202      	movs	r2, #2
 8002d72:	490b      	ldr	r1, [pc, #44]	; (8002da0 <Si468x_dab_get_component_info+0x14c>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00a fb0d 	bl	800d394 <itoa>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fe06 	bl	8003990 <send_debug_msg>

}
 8002d84:	bf00      	nop
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	0800df30 	.word	0x0800df30
 8002d90:	200001a8 	.word	0x200001a8
 8002d94:	20003510 	.word	0x20003510
 8002d98:	200011a8 	.word	0x200011a8
 8002d9c:	0800df64 	.word	0x0800df64
 8002da0:	200034d0 	.word	0x200034d0
 8002da4:	0800df70 	.word	0x0800df70
 8002da8:	0800df84 	.word	0x0800df84

08002dac <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002dac:	b5b0      	push	{r4, r5, r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002db2:	49ab      	ldr	r1, [pc, #684]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002db4:	2005      	movs	r0, #5
 8002db6:	f7fe fc81 	bl	80016bc <Si468x_read_reply>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4ba9      	ldr	r3, [pc, #676]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dc0:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002dc2:	4ba9      	ldr	r3, [pc, #676]	; (8003068 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8142 	beq.w	8003056 <Si468x_dab_get_digital_service_data+0x2aa>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002dd2:	4ba6      	ldr	r3, [pc, #664]	; (800306c <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dd4:	2284      	movs	r2, #132	; 0x84
 8002dd6:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002dd8:	4ba4      	ldr	r3, [pc, #656]	; (800306c <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002dde:	49a3      	ldr	r1, [pc, #652]	; (800306c <Si468x_dab_get_digital_service_data+0x2c0>)
 8002de0:	2002      	movs	r0, #2
 8002de2:	f7fe fc49 	bl	8001678 <Si468x_write_command>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b9e      	ldr	r3, [pc, #632]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dec:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002dee:	2005      	movs	r0, #5
 8002df0:	f004 fada 	bl	80073a8 <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002df4:	499a      	ldr	r1, [pc, #616]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002df6:	201e      	movs	r0, #30
 8002df8:	f7fe fc60 	bl	80016bc <Si468x_read_reply>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b98      	ldr	r3, [pc, #608]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e02:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002e04:	4a9a      	ldr	r2, [pc, #616]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e06:	4b96      	ldr	r3, [pc, #600]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e08:	4615      	mov	r5, r2
 8002e0a:	1d1c      	adds	r4, r3, #4
 8002e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002e14:	2101      	movs	r1, #1
 8002e16:	4897      	ldr	r0, [pc, #604]	; (8003074 <Si468x_dab_get_digital_service_data+0x2c8>)
 8002e18:	f000 fdba 	bl	8003990 <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002e1c:	4b94      	ldr	r3, [pc, #592]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8115 	bne.w	8003056 <Si468x_dab_get_digital_service_data+0x2aa>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002e2c:	4b90      	ldr	r3, [pc, #576]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e2e:	89db      	ldrh	r3, [r3, #14]
 8002e30:	3318      	adds	r3, #24
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	498a      	ldr	r1, [pc, #552]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fc40 	bl	80016bc <Si468x_read_reply>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b88      	ldr	r3, [pc, #544]	; (8003064 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e42:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002e44:	4b8a      	ldr	r3, [pc, #552]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b3c      	cmp	r3, #60	; 0x3c
 8002e50:	f040 80a7 	bne.w	8002fa2 <Si468x_dab_get_digital_service_data+0x1f6>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002e54:	2101      	movs	r1, #1
 8002e56:	4888      	ldr	r0, [pc, #544]	; (8003078 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002e58:	f000 fd9a 	bl	8003990 <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8002e5c:	4b80      	ldr	r3, [pc, #512]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e5e:	7e1b      	ldrb	r3, [r3, #24]
 8002e60:	051a      	lsls	r2, r3, #20
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	441a      	add	r2, r3
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e6c:	7e9b      	ldrb	r3, [r3, #26]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8002e74:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e76:	7edb      	ldrb	r3, [r3, #27]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <Si468x_dab_get_digital_service_data+0xd6>
 8002e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e80:	e000      	b.n	8002e84 <Si468x_dab_get_digital_service_data+0xd8>
 8002e82:	2200      	movs	r2, #0
 8002e84:	4b76      	ldr	r3, [pc, #472]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e86:	7f1b      	ldrb	r3, [r3, #28]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8002e92:	2300      	movs	r3, #0
 8002e94:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e98:	7f5b      	ldrb	r3, [r3, #29]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <Si468x_dab_get_digital_service_data+0xf8>
 8002e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea2:	e000      	b.n	8002ea6 <Si468x_dab_get_digital_service_data+0xfa>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002ea8:	7f9b      	ldrb	r3, [r3, #30]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	82fb      	strh	r3, [r7, #22]
 8002eb4:	e006      	b.n	8002ec4 <Si468x_dab_get_digital_service_data+0x118>
					{
						slideshow_data[i] = 0;
 8002eb6:	8afb      	ldrh	r3, [r7, #22]
 8002eb8:	4a70      	ldr	r2, [pc, #448]	; (800307c <Si468x_dab_get_digital_service_data+0x2d0>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	82fb      	strh	r3, [r7, #22]
 8002ec4:	8afb      	ldrh	r3, [r7, #22]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d3f4      	bcc.n	8002eb6 <Si468x_dab_get_digital_service_data+0x10a>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	82bb      	strh	r3, [r7, #20]
 8002ed0:	e00a      	b.n	8002ee8 <Si468x_dab_get_digital_service_data+0x13c>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002ed2:	8abb      	ldrh	r3, [r7, #20]
 8002ed4:	f103 0218 	add.w	r2, r3, #24
 8002ed8:	8abb      	ldrh	r3, [r7, #20]
 8002eda:	4961      	ldr	r1, [pc, #388]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002edc:	5c89      	ldrb	r1, [r1, r2]
 8002ede:	4a67      	ldr	r2, [pc, #412]	; (800307c <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ee0:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ee2:	8abb      	ldrh	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	82bb      	strh	r3, [r7, #20]
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002eea:	89db      	ldrh	r3, [r3, #14]
 8002eec:	8aba      	ldrh	r2, [r7, #20]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3ef      	bcc.n	8002ed2 <Si468x_dab_get_digital_service_data+0x126>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	827b      	strh	r3, [r7, #18]
 8002ef6:	e00f      	b.n	8002f18 <Si468x_dab_get_digital_service_data+0x16c>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 8002ef8:	8a7b      	ldrh	r3, [r7, #18]
 8002efa:	4a60      	ldr	r2, [pc, #384]	; (800307c <Si468x_dab_get_digital_service_data+0x2d0>)
 8002efc:	5cd3      	ldrb	r3, [r2, r3]
 8002efe:	220a      	movs	r2, #10
 8002f00:	495f      	ldr	r1, [pc, #380]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00a fa46 	bl	800d394 <itoa>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd3f 	bl	8003990 <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f12:	8a7b      	ldrh	r3, [r7, #18]
 8002f14:	3301      	adds	r3, #1
 8002f16:	827b      	strh	r3, [r7, #18]
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002f1a:	89db      	ldrh	r3, [r3, #14]
 8002f1c:	8a7a      	ldrh	r2, [r7, #18]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3ea      	bcc.n	8002ef8 <Si468x_dab_get_digital_service_data+0x14c>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 8002f22:	2101      	movs	r1, #1
 8002f24:	4857      	ldr	r0, [pc, #348]	; (8003084 <Si468x_dab_get_digital_service_data+0x2d8>)
 8002f26:	f000 fd33 	bl	8003990 <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4856      	ldr	r0, [pc, #344]	; (8003088 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002f2e:	f000 fd2f 	bl	8003990 <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	220a      	movs	r2, #10
 8002f36:	4952      	ldr	r1, [pc, #328]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00a fa2b 	bl	800d394 <itoa>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fd24 	bl	8003990 <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4850      	ldr	r0, [pc, #320]	; (800308c <Si468x_dab_get_digital_service_data+0x2e0>)
 8002f4c:	f000 fd20 	bl	8003990 <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	220a      	movs	r2, #10
 8002f54:	494a      	ldr	r1, [pc, #296]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00a fa1c 	bl	800d394 <itoa>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fd15 	bl	8003990 <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 8002f66:	2100      	movs	r1, #0
 8002f68:	4849      	ldr	r0, [pc, #292]	; (8003090 <Si468x_dab_get_digital_service_data+0x2e4>)
 8002f6a:	f000 fd11 	bl	8003990 <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 8002f6e:	797b      	ldrb	r3, [r7, #5]
 8002f70:	220a      	movs	r2, #10
 8002f72:	4943      	ldr	r1, [pc, #268]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00a fa0d 	bl	800d394 <itoa>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fd06 	bl	8003990 <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 8002f84:	2100      	movs	r1, #0
 8002f86:	4843      	ldr	r0, [pc, #268]	; (8003094 <Si468x_dab_get_digital_service_data+0x2e8>)
 8002f88:	f000 fd02 	bl	8003990 <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	220a      	movs	r2, #10
 8002f90:	493b      	ldr	r1, [pc, #236]	; (8003080 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00a f9fe 	bl	800d394 <itoa>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fcf7 	bl	8003990 <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 8002fa2:	4b33      	ldr	r3, [pc, #204]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002fa4:	78db      	ldrb	r3, [r3, #3]
 8002fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d152      	bne.n	8003056 <Si468x_dab_get_digital_service_data+0x2aa>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4839      	ldr	r0, [pc, #228]	; (8003098 <Si468x_dab_get_digital_service_data+0x2ec>)
 8002fb4:	f000 fcec 	bl	8003990 <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	747b      	strb	r3, [r7, #17]
 8002fbc:	e006      	b.n	8002fcc <Si468x_dab_get_digital_service_data+0x220>
					{
						dls_label[i] = 0;
 8002fbe:	7c7b      	ldrb	r3, [r7, #17]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 8002fc6:	7c7b      	ldrb	r3, [r7, #17]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	747b      	strb	r3, [r7, #17]
 8002fcc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	daf4      	bge.n	8002fbe <Si468x_dab_get_digital_service_data+0x212>
					}

					uint8_t label_pos = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e031      	b.n	8003042 <Si468x_dab_get_digital_service_data+0x296>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	f103 021a 	add.w	r2, r3, #26
 8002fe4:	7c3b      	ldrb	r3, [r7, #16]
 8002fe6:	491e      	ldr	r1, [pc, #120]	; (8003060 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002fe8:	5c89      	ldrb	r1, [r1, r2]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fec:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8002fee:	7c3b      	ldrb	r3, [r7, #16]
 8002ff0:	4a2a      	ldr	r2, [pc, #168]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	2bc3      	cmp	r3, #195	; 0xc3
 8002ff6:	d106      	bne.n	8003006 <Si468x_dab_get_digital_service_data+0x25a>
						{
							dls_label[label_pos] = 111;//lub 243
 8002ff8:	7c3b      	ldrb	r3, [r7, #16]
 8002ffa:	4a28      	ldr	r2, [pc, #160]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8002ffc:	216f      	movs	r1, #111	; 0x6f
 8002ffe:	54d1      	strb	r1, [r2, r3]
							i++;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	3301      	adds	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 8003006:	7c3b      	ldrb	r3, [r7, #16]
 8003008:	4a24      	ldr	r2, [pc, #144]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	2bc4      	cmp	r3, #196	; 0xc4
 800300e:	d106      	bne.n	800301e <Si468x_dab_get_digital_service_data+0x272>
						{
							dls_label[label_pos] = 99; //lub 230
 8003010:	7c3b      	ldrb	r3, [r7, #16]
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8003014:	2163      	movs	r1, #99	; 0x63
 8003016:	54d1      	strb	r1, [r2, r3]
							i++;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 800301e:	7c3b      	ldrb	r3, [r7, #16]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	2bc5      	cmp	r3, #197	; 0xc5
 8003026:	d106      	bne.n	8003036 <Si468x_dab_get_digital_service_data+0x28a>
						{
							dls_label[label_pos] = 108; //lub 179
 8003028:	7c3b      	ldrb	r3, [r7, #16]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 800302c:	216c      	movs	r1, #108	; 0x6c
 800302e:	54d1      	strb	r1, [r2, r3]
							i++;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	3301      	adds	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 8003036:	7c3b      	ldrb	r3, [r7, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	3301      	adds	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <Si468x_dab_get_digital_service_data+0x2c4>)
 8003048:	89db      	ldrh	r3, [r3, #14]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3c7      	bcc.n	8002fde <Si468x_dab_get_digital_service_data+0x232>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 800304e:	2101      	movs	r1, #1
 8003050:	4812      	ldr	r0, [pc, #72]	; (800309c <Si468x_dab_get_digital_service_data+0x2f0>)
 8003052:	f000 fc9d 	bl	8003990 <send_debug_msg>
				}
			}
		}
	}
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bdb0      	pop	{r4, r5, r7, pc}
 800305e:	bf00      	nop
 8003060:	200011a8 	.word	0x200011a8
 8003064:	20003510 	.word	0x20003510
 8003068:	200035fc 	.word	0x200035fc
 800306c:	200001a8 	.word	0x200001a8
 8003070:	20003620 	.word	0x20003620
 8003074:	0800df98 	.word	0x0800df98
 8003078:	0800dfcc 	.word	0x0800dfcc
 800307c:	20004c58 	.word	0x20004c58
 8003080:	200034d0 	.word	0x200034d0
 8003084:	0800dfe0 	.word	0x0800dfe0
 8003088:	0800dfe4 	.word	0x0800dfe4
 800308c:	0800dff0 	.word	0x0800dff0
 8003090:	0800e000 	.word	0x0800e000
 8003094:	0800e010 	.word	0x0800e010
 8003098:	0800e024 	.word	0x0800e024
 800309c:	20004bd4 	.word	0x20004bd4

080030a0 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <Si468x_dab_get_time+0x78>)
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02f      	beq.n	8003112 <Si468x_dab_get_time+0x72>
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <Si468x_dab_get_time+0x78>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d028      	beq.n	8003112 <Si468x_dab_get_time+0x72>
 80030c0:	4b15      	ldr	r3, [pc, #84]	; (8003118 <Si468x_dab_get_time+0x78>)
 80030c2:	791b      	ldrb	r3, [r3, #4]
 80030c4:	2b5a      	cmp	r3, #90	; 0x5a
 80030c6:	d924      	bls.n	8003112 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <Si468x_dab_get_time+0x7c>)
 80030ca:	22bc      	movs	r2, #188	; 0xbc
 80030cc:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <Si468x_dab_get_time+0x7c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <Si468x_dab_get_time+0x7c>)
 80030d6:	2002      	movs	r0, #2
 80030d8:	f7fe face 	bl	8001678 <Si468x_write_command>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <Si468x_dab_get_time+0x80>)
 80030e2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f004 f95f 	bl	80073a8 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 80030ea:	490e      	ldr	r1, [pc, #56]	; (8003124 <Si468x_dab_get_time+0x84>)
 80030ec:	200b      	movs	r0, #11
 80030ee:	f7fe fae5 	bl	80016bc <Si468x_read_reply>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <Si468x_dab_get_time+0x80>)
 80030f8:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <Si468x_dab_get_time+0x88>)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <Si468x_dab_get_time+0x84>)
 80030fe:	3304      	adds	r3, #4
 8003100:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003104:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <Si468x_dab_get_time+0x88>)
 800310a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800310e:	f002 fa15 	bl	800553c <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200035d4 	.word	0x200035d4
 800311c:	200001a8 	.word	0x200001a8
 8003120:	20003510 	.word	0x20003510
 8003124:	200011a8 	.word	0x200011a8
 8003128:	20003608 	.word	0x20003608

0800312c <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003140:	f7fe fbca 	bl	80018d8 <Si468x_set_property>
	dab_management.audio_volume = _volume;
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <Si468x_set_audio_volume+0x5c>)
 8003148:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 800314a:	2100      	movs	r1, #0
 800314c:	480f      	ldr	r0, [pc, #60]	; (800318c <Si468x_set_audio_volume+0x60>)
 800314e:	f000 fc1f 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <Si468x_set_audio_volume+0x5c>)
 8003154:	7b9b      	ldrb	r3, [r3, #14]
 8003156:	220a      	movs	r2, #10
 8003158:	490d      	ldr	r1, [pc, #52]	; (8003190 <Si468x_set_audio_volume+0x64>)
 800315a:	4618      	mov	r0, r3
 800315c:	f00a f91a 	bl	800d394 <itoa>
 8003160:	4603      	mov	r3, r0
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc13 	bl	8003990 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 800316a:	2101      	movs	r1, #1
 800316c:	4809      	ldr	r0, [pc, #36]	; (8003194 <Si468x_set_audio_volume+0x68>)
 800316e:	f000 fc0f 	bl	8003990 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	2201      	movs	r2, #1
 8003176:	4619      	mov	r1, r3
 8003178:	200b      	movs	r0, #11
 800317a:	f002 fab7 	bl	80056ec <eeprom_write>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20004bc4 	.word	0x20004bc4
 800318c:	0800e078 	.word	0x0800e078
 8003190:	200034d0 	.word	0x200034d0
 8003194:	0800e084 	.word	0x0800e084

08003198 <play_station>:
}



void play_station(uint8_t station_id)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08c      	sub	sp, #48	; 0x30
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dab_management.actual_station = station_id;
 80031a4:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <play_station+0x110>)
 80031a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031aa:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 80031ac:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <play_station+0x110>)
 80031ae:	78da      	ldrb	r2, [r3, #3]
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <play_station+0x110>)
 80031b2:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80031b4:	2201      	movs	r2, #1
 80031b6:	493d      	ldr	r1, [pc, #244]	; (80032ac <play_station+0x114>)
 80031b8:	f240 1007 	movw	r0, #263	; 0x107
 80031bc:	f002 fa96 	bl	80056ec <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 80031c0:	2101      	movs	r1, #1
 80031c2:	483b      	ldr	r0, [pc, #236]	; (80032b0 <play_station+0x118>)
 80031c4:	f000 fbe4 	bl	8003990 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 80031c8:	2100      	movs	r1, #0
 80031ca:	483a      	ldr	r0, [pc, #232]	; (80032b4 <play_station+0x11c>)
 80031cc:	f000 fbe0 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 80031d0:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <play_station+0x110>)
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	3301      	adds	r3, #1
 80031d6:	220a      	movs	r2, #10
 80031d8:	4937      	ldr	r1, [pc, #220]	; (80032b8 <play_station+0x120>)
 80031da:	4618      	mov	r0, r3
 80031dc:	f00a f8da 	bl	800d394 <itoa>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fbd3 	bl	8003990 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 80031ea:	2100      	movs	r1, #0
 80031ec:	4833      	ldr	r0, [pc, #204]	; (80032bc <play_station+0x124>)
 80031ee:	f000 fbcf 	bl	8003990 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <play_station+0x110>)
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	461a      	mov	r2, r3
 80031f8:	2334      	movs	r3, #52	; 0x34
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <play_station+0x128>)
 8003200:	4413      	add	r3, r2
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fbc3 	bl	8003990 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, USE_ANT_CAP); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <play_station+0x110>)
 800320c:	78db      	ldrb	r3, [r3, #3]
 800320e:	4619      	mov	r1, r3
 8003210:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <play_station+0x128>)
 8003212:	2334      	movs	r3, #52	; 0x34
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3328      	adds	r3, #40	; 0x28
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fc45 	bl	8001ab0 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <play_station+0x110>)
 8003228:	78db      	ldrb	r3, [r3, #3]
 800322a:	4619      	mov	r1, r3
 800322c:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <play_station+0x128>)
 800322e:	2334      	movs	r3, #52	; 0x34
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3320      	adds	r3, #32
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <play_station+0x110>)
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	4618      	mov	r0, r3
 8003240:	491f      	ldr	r1, [pc, #124]	; (80032c0 <play_station+0x128>)
 8003242:	2334      	movs	r3, #52	; 0x34
 8003244:	fb00 f303 	mul.w	r3, r0, r3
 8003248:	440b      	add	r3, r1
 800324a:	332a      	adds	r3, #42	; 0x2a
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff fcff 	bl	8002c54 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <play_station+0x110>)
 8003258:	78db      	ldrb	r3, [r3, #3]
 800325a:	4619      	mov	r1, r3
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <play_station+0x128>)
 800325e:	2334      	movs	r3, #52	; 0x34
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3320      	adds	r3, #32
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <play_station+0x110>)
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	4618      	mov	r0, r3
 8003270:	4913      	ldr	r1, [pc, #76]	; (80032c0 <play_station+0x128>)
 8003272:	2334      	movs	r3, #52	; 0x34
 8003274:	fb00 f303 	mul.w	r3, r0, r3
 8003278:	440b      	add	r3, r1
 800327a:	332a      	adds	r3, #42	; 0x2a
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7fe fff9 	bl	8002278 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 8003286:	463b      	mov	r3, r7
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fce9 	bl	8001c60 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 800328e:	463b      	mov	r3, r7
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fbf7 	bl	8002a84 <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 8003296:	2103      	movs	r1, #3
 8003298:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 800329c:	f7fe fb1c 	bl	80018d8 <Si468x_set_property>
}
 80032a0:	bf00      	nop
 80032a2:	3730      	adds	r7, #48	; 0x30
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20004bc4 	.word	0x20004bc4
 80032ac:	20004bc8 	.word	0x20004bc8
 80032b0:	0800e098 	.word	0x0800e098
 80032b4:	0800e0bc 	.word	0x0800e0bc
 80032b8:	200034d0 	.word	0x200034d0
 80032bc:	0800e0d0 	.word	0x0800e0d0
 80032c0:	20003774 	.word	0x20003774

080032c4 <restore_from_eeprom>:

void restore_from_eeprom()
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 80032ca:	2101      	movs	r1, #1
 80032cc:	4895      	ldr	r0, [pc, #596]	; (8003524 <restore_from_eeprom+0x260>)
 80032ce:	f000 fb5f 	bl	8003990 <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 80032d2:	2201      	movs	r2, #1
 80032d4:	4994      	ldr	r1, [pc, #592]	; (8003528 <restore_from_eeprom+0x264>)
 80032d6:	203f      	movs	r0, #63	; 0x3f
 80032d8:	f002 f9ea 	bl	80056b0 <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
 80032e0:	e012      	b.n	8003308 <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	3301      	adds	r3, #1
 80032e6:	019b      	lsls	r3, r3, #6
 80032e8:	4618      	mov	r0, r3
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4a8e      	ldr	r2, [pc, #568]	; (800352c <restore_from_eeprom+0x268>)
 80032f2:	4413      	add	r3, r2
 80032f4:	2240      	movs	r2, #64	; 0x40
 80032f6:	4619      	mov	r1, r3
 80032f8:	f002 f9da 	bl	80056b0 <eeprom_read>
		HAL_Delay(5);
 80032fc:	2005      	movs	r0, #5
 80032fe:	f004 f853 	bl	80073a8 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	3301      	adds	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d9e9      	bls.n	80032e2 <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 800330e:	2100      	movs	r1, #0
 8003310:	4887      	ldr	r0, [pc, #540]	; (8003530 <restore_from_eeprom+0x26c>)
 8003312:	f000 fb3d 	bl	8003990 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003316:	4b87      	ldr	r3, [pc, #540]	; (8003534 <restore_from_eeprom+0x270>)
 8003318:	7b5b      	ldrb	r3, [r3, #13]
 800331a:	220a      	movs	r2, #10
 800331c:	4986      	ldr	r1, [pc, #536]	; (8003538 <restore_from_eeprom+0x274>)
 800331e:	4618      	mov	r0, r3
 8003320:	f00a f838 	bl	800d394 <itoa>
 8003324:	4603      	mov	r3, r0
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb31 	bl	8003990 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 800332e:	2101      	movs	r1, #1
 8003330:	4882      	ldr	r0, [pc, #520]	; (800353c <restore_from_eeprom+0x278>)
 8003332:	f000 fb2d 	bl	8003990 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e022      	b.n	8003382 <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800333c:	220a      	movs	r2, #10
 800333e:	497e      	ldr	r1, [pc, #504]	; (8003538 <restore_from_eeprom+0x274>)
 8003340:	6938      	ldr	r0, [r7, #16]
 8003342:	f00a f827 	bl	800d394 <itoa>
 8003346:	4603      	mov	r3, r0
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb20 	bl	8003990 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003350:	2100      	movs	r1, #0
 8003352:	487b      	ldr	r0, [pc, #492]	; (8003540 <restore_from_eeprom+0x27c>)
 8003354:	f000 fb1c 	bl	8003990 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003358:	4a74      	ldr	r2, [pc, #464]	; (800352c <restore_from_eeprom+0x268>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	220a      	movs	r2, #10
 8003362:	4975      	ldr	r1, [pc, #468]	; (8003538 <restore_from_eeprom+0x274>)
 8003364:	4618      	mov	r0, r3
 8003366:	f00a f815 	bl	800d394 <itoa>
 800336a:	4603      	mov	r3, r0
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fb0e 	bl	8003990 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003374:	2101      	movs	r1, #1
 8003376:	4873      	ldr	r0, [pc, #460]	; (8003544 <restore_from_eeprom+0x280>)
 8003378:	f000 fb0a 	bl	8003990 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3301      	adds	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <restore_from_eeprom+0x270>)
 8003384:	7b5b      	ldrb	r3, [r3, #13]
 8003386:	461a      	mov	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4293      	cmp	r3, r2
 800338c:	dbd6      	blt.n	800333c <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 800338e:	2201      	movs	r2, #1
 8003390:	496d      	ldr	r1, [pc, #436]	; (8003548 <restore_from_eeprom+0x284>)
 8003392:	f240 1005 	movw	r0, #261	; 0x105
 8003396:	f002 f98b 	bl	80056b0 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 800339a:	2201      	movs	r2, #1
 800339c:	4965      	ldr	r1, [pc, #404]	; (8003534 <restore_from_eeprom+0x270>)
 800339e:	f44f 7083 	mov.w	r0, #262	; 0x106
 80033a2:	f002 f985 	bl	80056b0 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <restore_from_eeprom+0x270>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	f000 828b 	beq.w	80038c6 <restore_from_eeprom+0x602>
 80033b0:	4b60      	ldr	r3, [pc, #384]	; (8003534 <restore_from_eeprom+0x270>)
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2bff      	cmp	r3, #255	; 0xff
 80033b6:	f000 8286 	beq.w	80038c6 <restore_from_eeprom+0x602>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 80033ba:	2204      	movs	r2, #4
 80033bc:	4963      	ldr	r1, [pc, #396]	; (800354c <restore_from_eeprom+0x288>)
 80033be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033c2:	f002 f975 	bl	80056b0 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 80033c6:	2201      	movs	r2, #1
 80033c8:	4961      	ldr	r1, [pc, #388]	; (8003550 <restore_from_eeprom+0x28c>)
 80033ca:	f44f 7082 	mov.w	r0, #260	; 0x104
 80033ce:	f002 f96f 	bl	80056b0 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80033d2:	2201      	movs	r2, #1
 80033d4:	495f      	ldr	r1, [pc, #380]	; (8003554 <restore_from_eeprom+0x290>)
 80033d6:	f240 1007 	movw	r0, #263	; 0x107
 80033da:	f002 f969 	bl	80056b0 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <restore_from_eeprom+0x270>)
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	2bff      	cmp	r3, #255	; 0xff
 80033e4:	d102      	bne.n	80033ec <restore_from_eeprom+0x128>
		{
			dab_management.last_station_index = 0;
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <restore_from_eeprom+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 80033ec:	4b51      	ldr	r3, [pc, #324]	; (8003534 <restore_from_eeprom+0x270>)
 80033ee:	791a      	ldrb	r2, [r3, #4]
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <restore_from_eeprom+0x270>)
 80033f2:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e00e      	b.n	8003418 <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	3305      	adds	r3, #5
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	4618      	mov	r0, r3
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	015b      	lsls	r3, r3, #5
 8003406:	4a54      	ldr	r2, [pc, #336]	; (8003558 <restore_from_eeprom+0x294>)
 8003408:	4413      	add	r3, r2
 800340a:	2220      	movs	r2, #32
 800340c:	4619      	mov	r1, r3
 800340e:	f002 f94f 	bl	80056b0 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	3301      	adds	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <restore_from_eeprom+0x270>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3eb      	bcc.n	80033fa <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003422:	2300      	movs	r3, #0
 8003424:	73bb      	strb	r3, [r7, #14]
 8003426:	e010      	b.n	800344a <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	330f      	adds	r3, #15
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	4618      	mov	r0, r3
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2234      	movs	r2, #52	; 0x34
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a48      	ldr	r2, [pc, #288]	; (800355c <restore_from_eeprom+0x298>)
 800343a:	4413      	add	r3, r2
 800343c:	2234      	movs	r2, #52	; 0x34
 800343e:	4619      	mov	r1, r3
 8003440:	f002 f936 	bl	80056b0 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003444:	7bbb      	ldrb	r3, [r7, #14]
 8003446:	3301      	adds	r3, #1
 8003448:	73bb      	strb	r3, [r7, #14]
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <restore_from_eeprom+0x270>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	7bba      	ldrb	r2, [r7, #14]
 8003450:	429a      	cmp	r2, r3
 8003452:	d3e9      	bcc.n	8003428 <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 8003454:	2100      	movs	r1, #0
 8003456:	4836      	ldr	r0, [pc, #216]	; (8003530 <restore_from_eeprom+0x26c>)
 8003458:	f000 fa9a 	bl	8003990 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <restore_from_eeprom+0x270>)
 800345e:	7b5b      	ldrb	r3, [r3, #13]
 8003460:	220a      	movs	r2, #10
 8003462:	4935      	ldr	r1, [pc, #212]	; (8003538 <restore_from_eeprom+0x274>)
 8003464:	4618      	mov	r0, r3
 8003466:	f009 ff95 	bl	800d394 <itoa>
 800346a:	4603      	mov	r3, r0
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa8e 	bl	8003990 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003474:	2101      	movs	r1, #1
 8003476:	4831      	ldr	r0, [pc, #196]	; (800353c <restore_from_eeprom+0x278>)
 8003478:	f000 fa8a 	bl	8003990 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e022      	b.n	80034c8 <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003482:	220a      	movs	r2, #10
 8003484:	492c      	ldr	r1, [pc, #176]	; (8003538 <restore_from_eeprom+0x274>)
 8003486:	68b8      	ldr	r0, [r7, #8]
 8003488:	f009 ff84 	bl	800d394 <itoa>
 800348c:	4603      	mov	r3, r0
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa7d 	bl	8003990 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 8003496:	2100      	movs	r1, #0
 8003498:	4829      	ldr	r0, [pc, #164]	; (8003540 <restore_from_eeprom+0x27c>)
 800349a:	f000 fa79 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <restore_from_eeprom+0x268>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	220a      	movs	r2, #10
 80034a8:	4923      	ldr	r1, [pc, #140]	; (8003538 <restore_from_eeprom+0x274>)
 80034aa:	4618      	mov	r0, r3
 80034ac:	f009 ff72 	bl	800d394 <itoa>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa6b 	bl	8003990 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 80034ba:	2101      	movs	r1, #1
 80034bc:	4821      	ldr	r0, [pc, #132]	; (8003544 <restore_from_eeprom+0x280>)
 80034be:	f000 fa67 	bl	8003990 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <restore_from_eeprom+0x270>)
 80034ca:	7b5b      	ldrb	r3, [r3, #13]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4293      	cmp	r3, r2
 80034d2:	dbd6      	blt.n	8003482 <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80034d4:	2100      	movs	r1, #0
 80034d6:	4822      	ldr	r0, [pc, #136]	; (8003560 <restore_from_eeprom+0x29c>)
 80034d8:	f000 fa5a 	bl	8003990 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <restore_from_eeprom+0x270>)
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	220a      	movs	r2, #10
 80034e2:	4915      	ldr	r1, [pc, #84]	; (8003538 <restore_from_eeprom+0x274>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f009 ff55 	bl	800d394 <itoa>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2101      	movs	r1, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa4e 	bl	8003990 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80034f4:	2101      	movs	r1, #1
 80034f6:	481b      	ldr	r0, [pc, #108]	; (8003564 <restore_from_eeprom+0x2a0>)
 80034f8:	f000 fa4a 	bl	8003990 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80034fc:	2100      	movs	r1, #0
 80034fe:	481a      	ldr	r0, [pc, #104]	; (8003568 <restore_from_eeprom+0x2a4>)
 8003500:	f000 fa46 	bl	8003990 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8003504:	2100      	movs	r1, #0
 8003506:	4819      	ldr	r0, [pc, #100]	; (800356c <restore_from_eeprom+0x2a8>)
 8003508:	f000 fa42 	bl	8003990 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 800350c:	2100      	movs	r1, #0
 800350e:	4818      	ldr	r0, [pc, #96]	; (8003570 <restore_from_eeprom+0x2ac>)
 8003510:	f000 fa3e 	bl	8003990 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003514:	2101      	movs	r1, #1
 8003516:	4817      	ldr	r0, [pc, #92]	; (8003574 <restore_from_eeprom+0x2b0>)
 8003518:	f000 fa3a 	bl	8003990 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800351c:	2300      	movs	r3, #0
 800351e:	71fb      	strb	r3, [r7, #7]
 8003520:	e080      	b.n	8003624 <restore_from_eeprom+0x360>
 8003522:	bf00      	nop
 8003524:	0800e0d8 	.word	0x0800e0d8
 8003528:	20004bd1 	.word	0x20004bd1
 800352c:	20003514 	.word	0x20003514
 8003530:	0800da10 	.word	0x0800da10
 8003534:	20004bc4 	.word	0x20004bc4
 8003538:	200034d0 	.word	0x200034d0
 800353c:	0800da18 	.word	0x0800da18
 8003540:	0800da30 	.word	0x0800da30
 8003544:	0800da34 	.word	0x0800da34
 8003548:	20004bc5 	.word	0x20004bc5
 800354c:	20004bcc 	.word	0x20004bcc
 8003550:	20004bd0 	.word	0x20004bd0
 8003554:	20004bc8 	.word	0x20004bc8
 8003558:	20003634 	.word	0x20003634
 800355c:	20003774 	.word	0x20003774
 8003560:	0800dca0 	.word	0x0800dca0
 8003564:	0800dcb4 	.word	0x0800dcb4
 8003568:	0800dce8 	.word	0x0800dce8
 800356c:	0800dcf4 	.word	0x0800dcf4
 8003570:	0800dd08 	.word	0x0800dd08
 8003574:	0800dd18 	.word	0x0800dd18
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003578:	2100      	movs	r1, #0
 800357a:	485f      	ldr	r0, [pc, #380]	; (80036f8 <restore_from_eeprom+0x434>)
 800357c:	f000 fa08 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	3301      	adds	r3, #1
 8003584:	220a      	movs	r2, #10
 8003586:	495d      	ldr	r1, [pc, #372]	; (80036fc <restore_from_eeprom+0x438>)
 8003588:	4618      	mov	r0, r3
 800358a:	f009 ff03 	bl	800d394 <itoa>
 800358e:	4603      	mov	r3, r0
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f9fc 	bl	8003990 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003598:	2100      	movs	r1, #0
 800359a:	4859      	ldr	r0, [pc, #356]	; (8003700 <restore_from_eeprom+0x43c>)
 800359c:	f000 f9f8 	bl	8003990 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	015b      	lsls	r3, r3, #5
 80035a4:	4a57      	ldr	r2, [pc, #348]	; (8003704 <restore_from_eeprom+0x440>)
 80035a6:	4413      	add	r3, r2
 80035a8:	3302      	adds	r3, #2
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f9ef 	bl	8003990 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 80035b2:	2100      	movs	r1, #0
 80035b4:	4850      	ldr	r0, [pc, #320]	; (80036f8 <restore_from_eeprom+0x434>)
 80035b6:	f000 f9eb 	bl	8003990 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <restore_from_eeprom+0x440>)
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	4413      	add	r3, r2
 80035c2:	3318      	adds	r3, #24
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	220a      	movs	r2, #10
 80035c8:	494c      	ldr	r1, [pc, #304]	; (80036fc <restore_from_eeprom+0x438>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f009 fee2 	bl	800d394 <itoa>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f9db 	bl	8003990 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80035da:	2100      	movs	r1, #0
 80035dc:	484a      	ldr	r0, [pc, #296]	; (8003708 <restore_from_eeprom+0x444>)
 80035de:	f000 f9d7 	bl	8003990 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	4a47      	ldr	r2, [pc, #284]	; (8003704 <restore_from_eeprom+0x440>)
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	4413      	add	r3, r2
 80035ea:	331c      	adds	r3, #28
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <restore_from_eeprom+0x448>)
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f9c9 	bl	8003990 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	4a40      	ldr	r2, [pc, #256]	; (8003704 <restore_from_eeprom+0x440>)
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	4413      	add	r3, r2
 8003606:	331c      	adds	r3, #28
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b13      	cmp	r3, #19
 800360c:	d803      	bhi.n	8003616 <restore_from_eeprom+0x352>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800360e:	2100      	movs	r1, #0
 8003610:	483f      	ldr	r0, [pc, #252]	; (8003710 <restore_from_eeprom+0x44c>)
 8003612:	f000 f9bd 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8003616:	2101      	movs	r1, #1
 8003618:	483e      	ldr	r0, [pc, #248]	; (8003714 <restore_from_eeprom+0x450>)
 800361a:	f000 f9b9 	bl	8003990 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	3301      	adds	r3, #1
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <restore_from_eeprom+0x454>)
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d3a4      	bcc.n	8003578 <restore_from_eeprom+0x2b4>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800362e:	2101      	movs	r1, #1
 8003630:	483a      	ldr	r0, [pc, #232]	; (800371c <restore_from_eeprom+0x458>)
 8003632:	f000 f9ad 	bl	8003990 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003636:	2100      	movs	r1, #0
 8003638:	4839      	ldr	r0, [pc, #228]	; (8003720 <restore_from_eeprom+0x45c>)
 800363a:	f000 f9a9 	bl	8003990 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <restore_from_eeprom+0x454>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	220a      	movs	r2, #10
 8003644:	492d      	ldr	r1, [pc, #180]	; (80036fc <restore_from_eeprom+0x438>)
 8003646:	4618      	mov	r0, r3
 8003648:	f009 fea4 	bl	800d394 <itoa>
 800364c:	4603      	mov	r3, r0
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f99d 	bl	8003990 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003656:	2101      	movs	r1, #1
 8003658:	4832      	ldr	r0, [pc, #200]	; (8003724 <restore_from_eeprom+0x460>)
 800365a:	f000 f999 	bl	8003990 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 800365e:	2101      	movs	r1, #1
 8003660:	4831      	ldr	r0, [pc, #196]	; (8003728 <restore_from_eeprom+0x464>)
 8003662:	f000 f995 	bl	8003990 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003666:	2300      	movs	r3, #0
 8003668:	71bb      	strb	r3, [r7, #6]
 800366a:	e104      	b.n	8003876 <restore_from_eeprom+0x5b2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 800366c:	2100      	movs	r1, #0
 800366e:	4822      	ldr	r0, [pc, #136]	; (80036f8 <restore_from_eeprom+0x434>)
 8003670:	f000 f98e 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	3301      	adds	r3, #1
 8003678:	220a      	movs	r2, #10
 800367a:	4920      	ldr	r1, [pc, #128]	; (80036fc <restore_from_eeprom+0x438>)
 800367c:	4618      	mov	r0, r3
 800367e:	f009 fe89 	bl	800d394 <itoa>
 8003682:	4603      	mov	r3, r0
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f982 	bl	8003990 <send_debug_msg>
			if((services_index +1) < 10)
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d803      	bhi.n	800369a <restore_from_eeprom+0x3d6>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003692:	2100      	movs	r1, #0
 8003694:	481e      	ldr	r0, [pc, #120]	; (8003710 <restore_from_eeprom+0x44c>)
 8003696:	f000 f97b 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800369a:	2100      	movs	r1, #0
 800369c:	4823      	ldr	r0, [pc, #140]	; (800372c <restore_from_eeprom+0x468>)
 800369e:	f000 f977 	bl	8003990 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80036a2:	79bb      	ldrb	r3, [r7, #6]
 80036a4:	2234      	movs	r2, #52	; 0x34
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <restore_from_eeprom+0x46c>)
 80036ac:	4413      	add	r3, r2
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f96d 	bl	8003990 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 80036b6:	2100      	movs	r1, #0
 80036b8:	481e      	ldr	r0, [pc, #120]	; (8003734 <restore_from_eeprom+0x470>)
 80036ba:	f000 f969 	bl	8003990 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	717b      	strb	r3, [r7, #5]
 80036c2:	e03c      	b.n	800373e <restore_from_eeprom+0x47a>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80036c4:	797b      	ldrb	r3, [r7, #5]
 80036c6:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <restore_from_eeprom+0x440>)
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	4413      	add	r3, r2
 80036cc:	331c      	adds	r3, #28
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	79bb      	ldrb	r3, [r7, #6]
 80036d2:	4917      	ldr	r1, [pc, #92]	; (8003730 <restore_from_eeprom+0x46c>)
 80036d4:	2034      	movs	r0, #52	; 0x34
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	440b      	add	r3, r1
 80036dc:	3328      	adds	r3, #40	; 0x28
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d129      	bne.n	8003738 <restore_from_eeprom+0x474>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80036e4:	797b      	ldrb	r3, [r7, #5]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <restore_from_eeprom+0x440>)
 80036ea:	4413      	add	r3, r2
 80036ec:	3302      	adds	r3, #2
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f94d 	bl	8003990 <send_debug_msg>
					break;
 80036f6:	e027      	b.n	8003748 <restore_from_eeprom+0x484>
 80036f8:	0800dd28 	.word	0x0800dd28
 80036fc:	200034d0 	.word	0x200034d0
 8003700:	0800dd2c 	.word	0x0800dd2c
 8003704:	20003634 	.word	0x20003634
 8003708:	0800dd38 	.word	0x0800dd38
 800370c:	20000008 	.word	0x20000008
 8003710:	0800dd40 	.word	0x0800dd40
 8003714:	0800dd44 	.word	0x0800dd44
 8003718:	20004bc4 	.word	0x20004bc4
 800371c:	0800dcb4 	.word	0x0800dcb4
 8003720:	0800dd4c 	.word	0x0800dd4c
 8003724:	0800dd60 	.word	0x0800dd60
 8003728:	0800ddcc 	.word	0x0800ddcc
 800372c:	0800de38 	.word	0x0800de38
 8003730:	20003774 	.word	0x20003774
 8003734:	0800de40 	.word	0x0800de40
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003738:	797b      	ldrb	r3, [r7, #5]
 800373a:	3301      	adds	r3, #1
 800373c:	717b      	strb	r3, [r7, #5]
 800373e:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <restore_from_eeprom+0x634>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	797a      	ldrb	r2, [r7, #5]
 8003744:	429a      	cmp	r2, r3
 8003746:	d3bd      	bcc.n	80036c4 <restore_from_eeprom+0x400>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003748:	2100      	movs	r1, #0
 800374a:	486c      	ldr	r0, [pc, #432]	; (80038fc <restore_from_eeprom+0x638>)
 800374c:	f000 f920 	bl	8003990 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003750:	79bb      	ldrb	r3, [r7, #6]
 8003752:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <restore_from_eeprom+0x63c>)
 8003754:	2134      	movs	r1, #52	; 0x34
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3324      	adds	r3, #36	; 0x24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	220a      	movs	r2, #10
 8003762:	4968      	ldr	r1, [pc, #416]	; (8003904 <restore_from_eeprom+0x640>)
 8003764:	4618      	mov	r0, r3
 8003766:	f009 fe15 	bl	800d394 <itoa>
 800376a:	4603      	mov	r3, r0
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f90e 	bl	8003990 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003774:	2100      	movs	r1, #0
 8003776:	4864      	ldr	r0, [pc, #400]	; (8003908 <restore_from_eeprom+0x644>)
 8003778:	f000 f90a 	bl	8003990 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 800377c:	79bb      	ldrb	r3, [r7, #6]
 800377e:	4a60      	ldr	r2, [pc, #384]	; (8003900 <restore_from_eeprom+0x63c>)
 8003780:	2134      	movs	r1, #52	; 0x34
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3328      	adds	r3, #40	; 0x28
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b5f      	ldr	r3, [pc, #380]	; (800390c <restore_from_eeprom+0x648>)
 8003790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f8fa 	bl	8003990 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	4a58      	ldr	r2, [pc, #352]	; (8003900 <restore_from_eeprom+0x63c>)
 80037a0:	2134      	movs	r1, #52	; 0x34
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3328      	adds	r3, #40	; 0x28
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b13      	cmp	r3, #19
 80037ae:	d803      	bhi.n	80037b8 <restore_from_eeprom+0x4f4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80037b0:	2100      	movs	r1, #0
 80037b2:	4857      	ldr	r0, [pc, #348]	; (8003910 <restore_from_eeprom+0x64c>)
 80037b4:	f000 f8ec 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80037b8:	2100      	movs	r1, #0
 80037ba:	4856      	ldr	r0, [pc, #344]	; (8003914 <restore_from_eeprom+0x650>)
 80037bc:	f000 f8e8 	bl	8003990 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 80037c0:	79bb      	ldrb	r3, [r7, #6]
 80037c2:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <restore_from_eeprom+0x63c>)
 80037c4:	2134      	movs	r1, #52	; 0x34
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3315      	adds	r3, #21
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	220a      	movs	r2, #10
 80037d2:	494c      	ldr	r1, [pc, #304]	; (8003904 <restore_from_eeprom+0x640>)
 80037d4:	4618      	mov	r0, r3
 80037d6:	f009 fddd 	bl	800d394 <itoa>
 80037da:	4603      	mov	r3, r0
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f8d6 	bl	8003990 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 80037e4:	79bb      	ldrb	r3, [r7, #6]
 80037e6:	4a46      	ldr	r2, [pc, #280]	; (8003900 <restore_from_eeprom+0x63c>)
 80037e8:	2134      	movs	r1, #52	; 0x34
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3315      	adds	r3, #21
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	d803      	bhi.n	8003800 <restore_from_eeprom+0x53c>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80037f8:	2100      	movs	r1, #0
 80037fa:	4845      	ldr	r0, [pc, #276]	; (8003910 <restore_from_eeprom+0x64c>)
 80037fc:	f000 f8c8 	bl	8003990 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8003800:	2100      	movs	r1, #0
 8003802:	4845      	ldr	r0, [pc, #276]	; (8003918 <restore_from_eeprom+0x654>)
 8003804:	f000 f8c4 	bl	8003990 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003808:	2100      	movs	r1, #0
 800380a:	4844      	ldr	r0, [pc, #272]	; (800391c <restore_from_eeprom+0x658>)
 800380c:	f000 f8c0 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003810:	79bb      	ldrb	r3, [r7, #6]
 8003812:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <restore_from_eeprom+0x63c>)
 8003814:	2134      	movs	r1, #52	; 0x34
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3320      	adds	r3, #32
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2210      	movs	r2, #16
 8003822:	4938      	ldr	r1, [pc, #224]	; (8003904 <restore_from_eeprom+0x640>)
 8003824:	4618      	mov	r0, r3
 8003826:	f009 fdb5 	bl	800d394 <itoa>
 800382a:	4603      	mov	r3, r0
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f8ae 	bl	8003990 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003834:	2100      	movs	r1, #0
 8003836:	4837      	ldr	r0, [pc, #220]	; (8003914 <restore_from_eeprom+0x650>)
 8003838:	f000 f8aa 	bl	8003990 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800383c:	2100      	movs	r1, #0
 800383e:	4837      	ldr	r0, [pc, #220]	; (800391c <restore_from_eeprom+0x658>)
 8003840:	f000 f8a6 	bl	8003990 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003844:	79bb      	ldrb	r3, [r7, #6]
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <restore_from_eeprom+0x63c>)
 8003848:	2134      	movs	r1, #52	; 0x34
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	332a      	adds	r3, #42	; 0x2a
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	492b      	ldr	r1, [pc, #172]	; (8003904 <restore_from_eeprom+0x640>)
 8003858:	4618      	mov	r0, r3
 800385a:	f009 fd9b 	bl	800d394 <itoa>
 800385e:	4603      	mov	r3, r0
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f894 	bl	8003990 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003868:	2101      	movs	r1, #1
 800386a:	482d      	ldr	r0, [pc, #180]	; (8003920 <restore_from_eeprom+0x65c>)
 800386c:	f000 f890 	bl	8003990 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003870:	79bb      	ldrb	r3, [r7, #6]
 8003872:	3301      	adds	r3, #1
 8003874:	71bb      	strb	r3, [r7, #6]
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <restore_from_eeprom+0x634>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	79ba      	ldrb	r2, [r7, #6]
 800387c:	429a      	cmp	r2, r3
 800387e:	f4ff aef5 	bcc.w	800366c <restore_from_eeprom+0x3a8>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003882:	2101      	movs	r1, #1
 8003884:	4827      	ldr	r0, [pc, #156]	; (8003924 <restore_from_eeprom+0x660>)
 8003886:	f000 f883 	bl	8003990 <send_debug_msg>

		//restore volume level
		eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 800388a:	2201      	movs	r2, #1
 800388c:	4926      	ldr	r1, [pc, #152]	; (8003928 <restore_from_eeprom+0x664>)
 800388e:	200b      	movs	r0, #11
 8003890:	f001 ff0e 	bl	80056b0 <eeprom_read>
		Si468x_set_audio_volume(dab_management.audio_volume);
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <restore_from_eeprom+0x634>)
 8003896:	7b9b      	ldrb	r3, [r3, #14]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fc47 	bl	800312c <Si468x_set_audio_volume>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, USE_ANT_CAP);
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <restore_from_eeprom+0x634>)
 80038a0:	791b      	ldrb	r3, [r3, #4]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <restore_from_eeprom+0x63c>)
 80038a6:	2334      	movs	r3, #52	; 0x34
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3328      	adds	r3, #40	; 0x28
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe f8fb 	bl	8001ab0 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <restore_from_eeprom+0x634>)
 80038bc:	791b      	ldrb	r3, [r3, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fc6a 	bl	8003198 <play_station>
 80038c4:	e013      	b.n	80038ee <restore_from_eeprom+0x62a>

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 80038c6:	2101      	movs	r1, #1
 80038c8:	4818      	ldr	r0, [pc, #96]	; (800392c <restore_from_eeprom+0x668>)
 80038ca:	f000 f861 	bl	8003990 <send_debug_msg>
		dab_management.actual_freq = 0;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <restore_from_eeprom+0x634>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <restore_from_eeprom+0x634>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <restore_from_eeprom+0x634>)
 80038dc:	2200      	movs	r2, #0
 80038de:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <restore_from_eeprom+0x634>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <restore_from_eeprom+0x634>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	70da      	strb	r2, [r3, #3]
	}
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20004bc4 	.word	0x20004bc4
 80038fc:	0800de40 	.word	0x0800de40
 8003900:	20003774 	.word	0x20003774
 8003904:	200034d0 	.word	0x200034d0
 8003908:	0800dd38 	.word	0x0800dd38
 800390c:	20000008 	.word	0x20000008
 8003910:	0800dd40 	.word	0x0800dd40
 8003914:	0800de38 	.word	0x0800de38
 8003918:	0800de44 	.word	0x0800de44
 800391c:	0800de4c 	.word	0x0800de4c
 8003920:	0800de50 	.word	0x0800de50
 8003924:	0800dd60 	.word	0x0800dd60
 8003928:	20004bd2 	.word	0x20004bd2
 800392c:	0800e114 	.word	0x0800e114

08003930 <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
	return services_list;
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <get_dab_service_list+0x10>)
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	20003774 	.word	0x20003774

08003944 <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
	return ensembles_list;
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <get_dab_ensemble_list+0x10>)
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	20003634 	.word	0x20003634

08003958 <get_dab_management>:

dab_management_t get_dab_management()
{
 8003958:	b490      	push	{r4, r7}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	return dab_management;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <get_dab_management+0x20>)
 8003964:	461c      	mov	r4, r3
 8003966:	4613      	mov	r3, r2
 8003968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bc90      	pop	{r4, r7}
 8003976:	4770      	bx	lr
 8003978:	20004bc4 	.word	0x20004bc4

0800397c <get_dls_label>:

char* get_dls_label()
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
	return dls_label;
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <get_dls_label+0x10>)
}
 8003982:	4618      	mov	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20004bd4 	.word	0x20004bd4

08003990 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fc fc1d 	bl	80001dc <strlen>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	2364      	movs	r3, #100	; 0x64
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	480a      	ldr	r0, [pc, #40]	; (80039d8 <send_debug_msg+0x48>)
 80039b0:	f009 f93f 	bl	800cc32 <HAL_UART_Transmit>

	if(is_crlf)
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80039ba:	f640 230d 	movw	r3, #2573	; 0xa0d
 80039be:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80039c0:	f107 010c 	add.w	r1, r7, #12
 80039c4:	2364      	movs	r3, #100	; 0x64
 80039c6:	2202      	movs	r2, #2
 80039c8:	4803      	ldr	r0, [pc, #12]	; (80039d8 <send_debug_msg+0x48>)
 80039ca:	f009 f932 	bl	800cc32 <HAL_UART_Transmit>
	}
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20007194 	.word	0x20007194

080039dc <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fc ff6e 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80039e8:	2311      	movs	r3, #17
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80039f0:	2211      	movs	r2, #17
 80039f2:	2100      	movs	r1, #0
 80039f4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80039f8:	f7fc ffef 	bl	80009da <ILI9341_Draw_Line>
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <Display_booting_screen>:

void Display_booting_screen()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7fc ff5a 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003a10:	2302      	movs	r3, #2
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <Display_booting_screen+0xc4>)
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a1e:	2128      	movs	r1, #40	; 0x28
 8003a20:	205f      	movs	r0, #95	; 0x5f
 8003a22:	f7fd f85b 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003a26:	2302      	movs	r3, #2
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <Display_booting_screen+0xc8>)
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a34:	213c      	movs	r1, #60	; 0x3c
 8003a36:	2046      	movs	r0, #70	; 0x46
 8003a38:	f7fd f850 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <Display_booting_screen+0xcc>)
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4a:	2150      	movs	r1, #80	; 0x50
 8003a4c:	2082      	movs	r0, #130	; 0x82
 8003a4e:	f7fd f845 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003a52:	2302      	movs	r3, #2
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <Display_booting_screen+0xd0>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a60:	2164      	movs	r1, #100	; 0x64
 8003a62:	2064      	movs	r0, #100	; 0x64
 8003a64:	f7fd f83a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <Display_booting_screen+0xd4>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a76:	2178      	movs	r1, #120	; 0x78
 8003a78:	205a      	movs	r0, #90	; 0x5a
 8003a7a:	f7fd f82f 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <Display_booting_screen+0xd8>)
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8c:	218c      	movs	r1, #140	; 0x8c
 8003a8e:	2032      	movs	r0, #50	; 0x32
 8003a90:	f7fd f824 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003a94:	2302      	movs	r3, #2
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <Display_booting_screen+0xdc>)
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa2:	21a0      	movs	r1, #160	; 0xa0
 8003aa4:	205a      	movs	r0, #90	; 0x5a
 8003aa6:	f7fd f819 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003aaa:	2302      	movs	r3, #2
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <Display_booting_screen+0xe0>)
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab8:	21b4      	movs	r1, #180	; 0xb4
 8003aba:	2078      	movs	r0, #120	; 0x78
 8003abc:	f7fd f80e 	bl	8000adc <ILI9341_Draw_String>
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	0800e248 	.word	0x0800e248
 8003acc:	0800e258 	.word	0x0800e258
 8003ad0:	0800e270 	.word	0x0800e270
 8003ad4:	0800e278 	.word	0x0800e278
 8003ad8:	0800e288 	.word	0x0800e288
 8003adc:	0800e29c 	.word	0x0800e29c
 8003ae0:	0800e2b8 	.word	0x0800e2b8
 8003ae4:	0800e2cc 	.word	0x0800e2cc

08003ae8 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003aee:	f7ff ff75 	bl	80039dc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2); //Naglowek
 8003af2:	2302      	movs	r3, #2
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <Display_main_screen_background+0x110>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b00:	2101      	movs	r1, #1
 8003b02:	2005      	movs	r0, #5
 8003b04:	f7fc ffea 	bl	8000adc <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003b08:	2328      	movs	r3, #40	; 0x28
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	238c      	movs	r3, #140	; 0x8c
 8003b0e:	2214      	movs	r2, #20
 8003b10:	2105      	movs	r1, #5
 8003b12:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b16:	f7fc ff3f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003b1a:	2341      	movs	r3, #65	; 0x41
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	238c      	movs	r3, #140	; 0x8c
 8003b20:	222d      	movs	r2, #45	; 0x2d
 8003b22:	2105      	movs	r1, #5
 8003b24:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b28:	f7fc ff36 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003b2c:	235a      	movs	r3, #90	; 0x5a
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	238c      	movs	r3, #140	; 0x8c
 8003b32:	2246      	movs	r2, #70	; 0x46
 8003b34:	2105      	movs	r1, #5
 8003b36:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b3a:	f7fc ff2d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003b3e:	2373      	movs	r3, #115	; 0x73
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	238c      	movs	r3, #140	; 0x8c
 8003b44:	225f      	movs	r2, #95	; 0x5f
 8003b46:	2105      	movs	r1, #5
 8003b48:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b4c:	f7fc ff24 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003b50:	238c      	movs	r3, #140	; 0x8c
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	238c      	movs	r3, #140	; 0x8c
 8003b56:	2278      	movs	r2, #120	; 0x78
 8003b58:	2105      	movs	r1, #5
 8003b5a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b5e:	f7fc ff1b 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003b62:	23a5      	movs	r3, #165	; 0xa5
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	238c      	movs	r3, #140	; 0x8c
 8003b68:	2291      	movs	r2, #145	; 0x91
 8003b6a:	2105      	movs	r1, #5
 8003b6c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b70:	f7fc ff12 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003b74:	23be      	movs	r3, #190	; 0xbe
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	238c      	movs	r3, #140	; 0x8c
 8003b7a:	22aa      	movs	r2, #170	; 0xaa
 8003b7c:	2105      	movs	r1, #5
 8003b7e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b82:	f7fc ff09 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003b86:	23be      	movs	r3, #190	; 0xbe
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f240 133b 	movw	r3, #315	; 0x13b
 8003b8e:	2214      	movs	r2, #20
 8003b90:	2191      	movs	r1, #145	; 0x91
 8003b92:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b96:	f7fc feff 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003b9a:	23eb      	movs	r3, #235	; 0xeb
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	239d      	movs	r3, #157	; 0x9d
 8003ba0:	22c3      	movs	r2, #195	; 0xc3
 8003ba2:	2105      	movs	r1, #5
 8003ba4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003ba8:	f7fc fef6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003bac:	23eb      	movs	r3, #235	; 0xeb
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f240 133b 	movw	r3, #315	; 0x13b
 8003bb4:	22c3      	movs	r2, #195	; 0xc3
 8003bb6:	21a3      	movs	r1, #163	; 0xa3
 8003bb8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003bbc:	f7fc feec 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <Display_main_screen_background+0x114>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd0:	21cf      	movs	r1, #207	; 0xcf
 8003bd2:	2032      	movs	r0, #50	; 0x32
 8003bd4:	f7fc ff82 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003bd8:	2302      	movs	r3, #2
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <Display_main_screen_background+0x118>)
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be8:	21cf      	movs	r1, #207	; 0xcf
 8003bea:	20c0      	movs	r0, #192	; 0xc0
 8003bec:	f7fc ff76 	bl	8000adc <ILI9341_Draw_String>
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	0800e2d8 	.word	0x0800e2d8
 8003bfc:	0800e2e8 	.word	0x0800e2e8
 8003c00:	0800e2f4 	.word	0x0800e2f4

08003c04 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003c04:	b082      	sub	sp, #8
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
 8003c10:	f107 0118 	add.w	r1, r7, #24
 8003c14:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003c18:	7efb      	ldrb	r3, [r7, #27]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2334      	movs	r3, #52	; 0x34
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	461a      	mov	r2, r3
 8003c28:	2302      	movs	r3, #2
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	9200      	str	r2, [sp, #0]
 8003c2e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	2117      	movs	r1, #23
 8003c38:	2008      	movs	r0, #8
 8003c3a:	f7fc ff4f 	bl	8000adc <ILI9341_Draw_String>
	//Bar1
//	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);


	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "", 2);
 8003c3e:	2302      	movs	r3, #2
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	4b90      	ldr	r3, [pc, #576]	; (8003e84 <Display_main_screen_data+0x280>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c4e:	2149      	movs	r1, #73	; 0x49
 8003c50:	2008      	movs	r0, #8
 8003c52:	f7fc ff43 	bl	8000adc <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);
 8003c56:	2302      	movs	r3, #2
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	4b8a      	ldr	r3, [pc, #552]	; (8003e84 <Display_main_screen_data+0x280>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c66:	2162      	movs	r1, #98	; 0x62
 8003c68:	2008      	movs	r0, #8
 8003c6a:	f7fc ff37 	bl	8000adc <ILI9341_Draw_String>

	//BAr4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c70:	2b63      	cmp	r3, #99	; 0x63
 8003c72:	d81e      	bhi.n	8003cb2 <Display_main_screen_data+0xae>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003c74:	2302      	movs	r3, #2
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <Display_main_screen_data+0x284>)
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c84:	217b      	movs	r1, #123	; 0x7b
 8003c86:	2008      	movs	r0, #8
 8003c88:	f7fc ff28 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003c8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c8e:	220a      	movs	r2, #10
 8003c90:	497e      	ldr	r1, [pc, #504]	; (8003e8c <Display_main_screen_data+0x288>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f009 fb7e 	bl	800d394 <itoa>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	9201      	str	r2, [sp, #4]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca8:	217b      	movs	r1, #123	; 0x7b
 8003caa:	2011      	movs	r0, #17
 8003cac:	f7fc ff16 	bl	8000adc <ILI9341_Draw_String>
 8003cb0:	e011      	b.n	8003cd6 <Display_main_screen_data+0xd2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003cb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cb4:	220a      	movs	r2, #10
 8003cb6:	4975      	ldr	r1, [pc, #468]	; (8003e8c <Display_main_screen_data+0x288>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f009 fb6b 	bl	800d394 <itoa>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	9201      	str	r2, [sp, #4]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cce:	217b      	movs	r1, #123	; 0x7b
 8003cd0:	2008      	movs	r0, #8
 8003cd2:	f7fc ff03 	bl	8000adc <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <Display_main_screen_data+0x28c>)
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce6:	217b      	movs	r1, #123	; 0x7b
 8003ce8:	2024      	movs	r0, #36	; 0x24
 8003cea:	f7fc fef7 	bl	8000adc <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003cee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cf0:	220a      	movs	r2, #10
 8003cf2:	4966      	ldr	r1, [pc, #408]	; (8003e8c <Display_main_screen_data+0x288>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f009 fb4d 	bl	800d394 <itoa>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	9201      	str	r2, [sp, #4]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0a:	217b      	movs	r1, #123	; 0x7b
 8003d0c:	204e      	movs	r0, #78	; 0x4e
 8003d0e:	f7fc fee5 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003d12:	2302      	movs	r3, #2
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <Display_main_screen_data+0x290>)
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d22:	217b      	movs	r1, #123	; 0x7b
 8003d24:	207a      	movs	r0, #122	; 0x7a
 8003d26:	f7fc fed9 	bl	8000adc <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e022      	b.n	8003d76 <Display_main_screen_data+0x172>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	015b      	lsls	r3, r3, #5
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	7f1a      	ldrb	r2, [r3, #28]
 8003d3a:	7efb      	ldrb	r3, [r7, #27]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	2334      	movs	r3, #52	; 0x34
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	440b      	add	r3, r1
 8003d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d10f      	bne.n	8003d70 <Display_main_screen_data+0x16c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	015b      	lsls	r3, r3, #5
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	9201      	str	r2, [sp, #4]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d68:	2194      	movs	r1, #148	; 0x94
 8003d6a:	2008      	movs	r0, #8
 8003d6c:	f7fc feb6 	bl	8000adc <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	3301      	adds	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
 8003d76:	7e7b      	ldrb	r3, [r7, #25]
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3d8      	bcc.n	8003d30 <Display_main_screen_data+0x12c>
		}
	}

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003d7e:	7efb      	ldrb	r3, [r7, #27]
 8003d80:	461a      	mov	r2, r3
 8003d82:	2334      	movs	r3, #52	; 0x34
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <Display_main_screen_data+0x294>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	220a      	movs	r2, #10
 8003d98:	493c      	ldr	r1, [pc, #240]	; (8003e8c <Display_main_screen_data+0x288>)
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f009 fafa 	bl	800d394 <itoa>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2202      	movs	r2, #2
 8003da4:	9201      	str	r2, [sp, #4]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003db0:	21ad      	movs	r1, #173	; 0xad
 8003db2:	2008      	movs	r0, #8
 8003db4:	f7fc fe92 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003db8:	2302      	movs	r3, #2
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <Display_main_screen_data+0x298>)
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc8:	21ad      	movs	r1, #173	; 0xad
 8003dca:	201f      	movs	r0, #31
 8003dcc:	f7fc fe86 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003dd0:	7efb      	ldrb	r3, [r7, #27]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2334      	movs	r3, #52	; 0x34
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <Display_main_screen_data+0x294>)
 8003de2:	fba3 1302 	umull	r1, r3, r3, r2
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	220a      	movs	r2, #10
 8003df4:	4925      	ldr	r1, [pc, #148]	; (8003e8c <Display_main_screen_data+0x288>)
 8003df6:	4618      	mov	r0, r3
 8003df8:	f009 facc 	bl	800d394 <itoa>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2202      	movs	r2, #2
 8003e00:	9201      	str	r2, [sp, #4]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0c:	21ad      	movs	r1, #173	; 0xad
 8003e0e:	2026      	movs	r0, #38	; 0x26
 8003e10:	f7fc fe64 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003e14:	2302      	movs	r3, #2
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <Display_main_screen_data+0x29c>)
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e24:	21ad      	movs	r1, #173	; 0xad
 8003e26:	2041      	movs	r0, #65	; 0x41
 8003e28:	f7fc fe58 	bl	8000adc <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <Display_main_screen_data+0x2a0>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e3c:	21ad      	movs	r1, #173	; 0xad
 8003e3e:	205f      	movs	r0, #95	; 0x5f
 8003e40:	f7fc fe4c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003e44:	7efb      	ldrb	r3, [r7, #27]
 8003e46:	461a      	mov	r2, r3
 8003e48:	2334      	movs	r3, #52	; 0x34
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <Display_main_screen_data+0x2a4>)
 8003e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	9201      	str	r2, [sp, #4]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e6c:	21ad      	movs	r1, #173	; 0xad
 8003e6e:	2073      	movs	r0, #115	; 0x73
 8003e70:	f7fc fe34 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e7e:	b002      	add	sp, #8
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	0800e304 	.word	0x0800e304
 8003e88:	0800e308 	.word	0x0800e308
 8003e8c:	20006d8c 	.word	0x20006d8c
 8003e90:	0800e30c 	.word	0x0800e30c
 8003e94:	0800e314 	.word	0x0800e314
 8003e98:	10624dd3 	.word	0x10624dd3
 8003e9c:	0800e318 	.word	0x0800e318
 8003ea0:	0800e31c 	.word	0x0800e31c
 8003ea4:	0800e320 	.word	0x0800e320
 8003ea8:	200000ac 	.word	0x200000ac

08003eac <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003eb4:	4919      	ldr	r1, [pc, #100]	; (8003f1c <Display_main_screen_dls+0x70>)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fc f986 	bl	80001c8 <strcmp>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d027      	beq.n	8003f12 <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <Display_main_screen_dls+0x74>)
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ed2:	2130      	movs	r1, #48	; 0x30
 8003ed4:	2008      	movs	r0, #8
 8003ed6:	f7fc fe01 	bl	8000adc <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003eda:	2302      	movs	r3, #2
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eea:	2130      	movs	r1, #48	; 0x30
 8003eec:	2008      	movs	r0, #8
 8003eee:	f7fc fdf5 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e009      	b.n	8003f0c <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	441a      	add	r2, r3
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	7811      	ldrb	r1, [r2, #0]
 8003f02:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <Display_main_screen_dls+0x70>)
 8003f04:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d9f2      	bls.n	8003ef8 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20006dd0 	.word	0x20006dd0
 8003f20:	0800e324 	.word	0x0800e324

08003f24 <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af02      	add	r7, sp, #8
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <Display_main_screen_empty+0xb4>)
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f3a:	2117      	movs	r1, #23
 8003f3c:	2008      	movs	r0, #8
 8003f3e:	f7fc fdcd 	bl	8000adc <ILI9341_Draw_String>

	//Bar1
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003f42:	2302      	movs	r3, #2
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <Display_main_screen_empty+0xb8>)
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f52:	2130      	movs	r1, #48	; 0x30
 8003f54:	2008      	movs	r0, #8
 8003f56:	f7fc fdc1 	bl	8000adc <ILI9341_Draw_String>

	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <Display_main_screen_empty+0xbc>)
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6a:	2149      	movs	r1, #73	; 0x49
 8003f6c:	2008      	movs	r0, #8
 8003f6e:	f7fc fdb5 	bl	8000adc <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003f72:	2302      	movs	r3, #2
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <Display_main_screen_empty+0xc0>)
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f82:	2162      	movs	r1, #98	; 0x62
 8003f84:	2008      	movs	r0, #8
 8003f86:	f7fc fda9 	bl	8000adc <ILI9341_Draw_String>

	//BAr4
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <Display_main_screen_empty+0xc4>)
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9a:	217b      	movs	r1, #123	; 0x7b
 8003f9c:	2008      	movs	r0, #8
 8003f9e:	f7fc fd9d 	bl	8000adc <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)

	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <Display_main_screen_empty+0xc8>)
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fb2:	2194      	movs	r1, #148	; 0x94
 8003fb4:	2008      	movs	r0, #8
 8003fb6:	f7fc fd91 	bl	8000adc <ILI9341_Draw_String>

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8003fba:	2302      	movs	r3, #2
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <Display_main_screen_empty+0xc8>)
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fca:	21ad      	movs	r1, #173	; 0xad
 8003fcc:	2008      	movs	r0, #8
 8003fce:	f7fc fd85 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	0800e3a4 	.word	0x0800e3a4
 8003fdc:	0800e3b8 	.word	0x0800e3b8
 8003fe0:	0800e3cc 	.word	0x0800e3cc
 8003fe4:	0800e3e0 	.word	0x0800e3e0
 8003fe8:	0800e3f4 	.word	0x0800e3f4
 8003fec:	0800e408 	.word	0x0800e408

08003ff0 <Display_stations_list_background>:


void Display_stations_list_background()
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003ff6:	f7ff fcf1 	bl	80039dc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2); //Naglowek
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	4b59      	ldr	r3, [pc, #356]	; (8004164 <Display_stations_list_background+0x174>)
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004008:	2101      	movs	r1, #1
 800400a:	2005      	movs	r0, #5
 800400c:	f7fc fd66 	bl	8000adc <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8004010:	2332      	movs	r3, #50	; 0x32
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f240 131d 	movw	r3, #285	; 0x11d
 8004018:	2214      	movs	r2, #20
 800401a:	2105      	movs	r1, #5
 800401c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004020:	f7fc fcba 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8004024:	2355      	movs	r3, #85	; 0x55
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	f240 131d 	movw	r3, #285	; 0x11d
 800402c:	2237      	movs	r2, #55	; 0x37
 800402e:	2105      	movs	r1, #5
 8004030:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004034:	f7fc fcb0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8004038:	2378      	movs	r3, #120	; 0x78
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f240 131d 	movw	r3, #285	; 0x11d
 8004040:	225a      	movs	r2, #90	; 0x5a
 8004042:	2105      	movs	r1, #5
 8004044:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004048:	f7fc fca6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 800404c:	239b      	movs	r3, #155	; 0x9b
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	f240 131d 	movw	r3, #285	; 0x11d
 8004054:	227d      	movs	r2, #125	; 0x7d
 8004056:	2105      	movs	r1, #5
 8004058:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800405c:	f7fc fc9c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8004060:	23be      	movs	r3, #190	; 0xbe
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	f240 131d 	movw	r3, #285	; 0x11d
 8004068:	22a0      	movs	r2, #160	; 0xa0
 800406a:	2105      	movs	r1, #5
 800406c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004070:	f7fc fc92 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8004074:	2366      	movs	r3, #102	; 0x66
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f240 133b 	movw	r3, #315	; 0x13b
 800407c:	2214      	movs	r2, #20
 800407e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004082:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004086:	f7fc fc87 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 800408a:	2302      	movs	r3, #2
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <Display_stations_list_background+0x178>)
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800409a:	2138      	movs	r1, #56	; 0x38
 800409c:	f240 1027 	movw	r0, #295	; 0x127
 80040a0:	f7fc fd1c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 80040a4:	2302      	movs	r3, #2
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <Display_stations_list_background+0x17c>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040b4:	2138      	movs	r1, #56	; 0x38
 80040b6:	f44f 7097 	mov.w	r0, #302	; 0x12e
 80040ba:	f7fc fd0f 	bl	8000adc <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 80040be:	23be      	movs	r3, #190	; 0xbe
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f240 133b 	movw	r3, #315	; 0x13b
 80040c6:	226c      	movs	r2, #108	; 0x6c
 80040c8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80040cc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80040d0:	f7fc fc62 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 80040d4:	2302      	movs	r3, #2
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <Display_stations_list_background+0x17c>)
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e4:	2192      	movs	r1, #146	; 0x92
 80040e6:	f240 1027 	movw	r0, #295	; 0x127
 80040ea:	f7fc fcf7 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 80040ee:	2302      	movs	r3, #2
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <Display_stations_list_background+0x178>)
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040fe:	2192      	movs	r1, #146	; 0x92
 8004100:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8004104:	f7fc fcea 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004108:	23eb      	movs	r3, #235	; 0xeb
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	239d      	movs	r3, #157	; 0x9d
 800410e:	22c3      	movs	r2, #195	; 0xc3
 8004110:	2105      	movs	r1, #5
 8004112:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004116:	f7fc fc3f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800411a:	23eb      	movs	r3, #235	; 0xeb
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	f240 133b 	movw	r3, #315	; 0x13b
 8004122:	22c3      	movs	r2, #195	; 0xc3
 8004124:	21a3      	movs	r1, #163	; 0xa3
 8004126:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800412a:	f7fc fc35 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 800412e:	2302      	movs	r3, #2
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <Display_stations_list_background+0x180>)
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800413a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800413e:	21cf      	movs	r1, #207	; 0xcf
 8004140:	2025      	movs	r0, #37	; 0x25
 8004142:	f7fc fccb 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8004146:	2302      	movs	r3, #2
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <Display_stations_list_background+0x184>)
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004156:	21cf      	movs	r1, #207	; 0xcf
 8004158:	20c3      	movs	r0, #195	; 0xc3
 800415a:	f7fc fcbf 	bl	8000adc <ILI9341_Draw_String>

}
 800415e:	bf00      	nop
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	0800e41c 	.word	0x0800e41c
 8004168:	0800e430 	.word	0x0800e430
 800416c:	0800e434 	.word	0x0800e434
 8004170:	0800e438 	.word	0x0800e438
 8004174:	0800e444 	.word	0x0800e444

08004178 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8004178:	b084      	sub	sp, #16
 800417a:	b590      	push	{r4, r7, lr}
 800417c:	b087      	sub	sp, #28
 800417e:	af02      	add	r7, sp, #8
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(_dab_management.total_services)
 800418a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8133 	beq.w	80043fa <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e12a      	b.n	80043f0 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 800419a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800419e:	4619      	mov	r1, r3
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	4299      	cmp	r1, r3
 80041a8:	dc02      	bgt.n	80041b0 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	425b      	negs	r3, r3
 80041ae:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 80041b0:	7bfa      	ldrb	r2, [r7, #15]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	dc30      	bgt.n	800421c <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00da      	lsls	r2, r3, #3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	331c      	adds	r3, #28
 80041c8:	4619      	mov	r1, r3
 80041ca:	2302      	movs	r3, #2
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	4bac      	ldr	r3, [pc, #688]	; (8004480 <Display_stations_list_data+0x308>)
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041da:	2008      	movs	r0, #8
 80041dc:	f7fc fc7e 	bl	8000adc <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	00da      	lsls	r2, r3, #3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	331c      	adds	r3, #28
 80041ee:	461c      	mov	r4, r3
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	3301      	adds	r3, #1
 80041f8:	220a      	movs	r2, #10
 80041fa:	49a2      	ldr	r1, [pc, #648]	; (8004484 <Display_stations_list_data+0x30c>)
 80041fc:	4618      	mov	r0, r3
 80041fe:	f009 f8c9 	bl	800d394 <itoa>
 8004202:	4603      	mov	r3, r0
 8004204:	2202      	movs	r2, #2
 8004206:	9201      	str	r2, [sp, #4]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800420e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004212:	4621      	mov	r1, r4
 8004214:	2011      	movs	r0, #17
 8004216:	f7fc fc61 	bl	8000adc <ILI9341_Draw_String>
 800421a:	e01c      	b.n	8004256 <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00da      	lsls	r2, r3, #3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	331c      	adds	r3, #28
 800422a:	461c      	mov	r4, r3
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	3301      	adds	r3, #1
 8004234:	220a      	movs	r2, #10
 8004236:	4993      	ldr	r1, [pc, #588]	; (8004484 <Display_stations_list_data+0x30c>)
 8004238:	4618      	mov	r0, r3
 800423a:	f009 f8ab 	bl	800d394 <itoa>
 800423e:	4603      	mov	r3, r0
 8004240:	2202      	movs	r2, #2
 8004242:	9201      	str	r2, [sp, #4]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800424a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424e:	4621      	mov	r1, r4
 8004250:	2008      	movs	r0, #8
 8004252:	f7fc fc43 	bl	8000adc <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	00da      	lsls	r2, r3, #3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	331c      	adds	r3, #28
 8004264:	4619      	mov	r1, r3
 8004266:	2302      	movs	r3, #2
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	4b87      	ldr	r3, [pc, #540]	; (8004488 <Display_stations_list_data+0x310>)
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004276:	2018      	movs	r0, #24
 8004278:	f7fc fc30 	bl	8000adc <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	00da      	lsls	r2, r3, #3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	331c      	adds	r3, #28
 800428a:	4619      	mov	r1, r3
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	461a      	mov	r2, r3
 8004294:	2334      	movs	r3, #52	; 0x34
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429c:	4413      	add	r3, r2
 800429e:	461a      	mov	r2, r3
 80042a0:	2302      	movs	r3, #2
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	9200      	str	r2, [sp, #0]
 80042a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ae:	2022      	movs	r0, #34	; 0x22
 80042b0:	f7fc fc14 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	00da      	lsls	r2, r3, #3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	331c      	adds	r3, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	7bfa      	ldrb	r2, [r7, #15]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	2334      	movs	r3, #52	; 0x34
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d4:	4413      	add	r3, r2
 80042d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042da:	461a      	mov	r2, r3
 80042dc:	4b6b      	ldr	r3, [pc, #428]	; (800448c <Display_stations_list_data+0x314>)
 80042de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e2:	2202      	movs	r2, #2
 80042e4:	9201      	str	r2, [sp, #4]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f0:	20ab      	movs	r0, #171	; 0xab
 80042f2:	f7fc fbf3 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00da      	lsls	r2, r3, #3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	331c      	adds	r3, #28
 8004304:	461c      	mov	r4, r3
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	461a      	mov	r2, r3
 800430e:	2334      	movs	r3, #52	; 0x34
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004316:	4413      	add	r3, r2
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	4a5d      	ldr	r2, [pc, #372]	; (8004490 <Display_stations_list_data+0x318>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	220a      	movs	r2, #10
 8004324:	4957      	ldr	r1, [pc, #348]	; (8004484 <Display_stations_list_data+0x30c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f009 f834 	bl	800d394 <itoa>
 800432c:	4603      	mov	r3, r0
 800432e:	2202      	movs	r2, #2
 8004330:	9201      	str	r2, [sp, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433c:	4621      	mov	r1, r4
 800433e:	20ca      	movs	r0, #202	; 0xca
 8004340:	f7fc fbcc 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	00da      	lsls	r2, r3, #3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	331c      	adds	r3, #28
 8004352:	4619      	mov	r1, r3
 8004354:	2302      	movs	r3, #2
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <Display_stations_list_data+0x310>)
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004364:	20e1      	movs	r0, #225	; 0xe1
 8004366:	f7fc fbb9 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00da      	lsls	r2, r3, #3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	331c      	adds	r3, #28
 8004378:	461c      	mov	r4, r3
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	461a      	mov	r2, r3
 8004382:	2334      	movs	r3, #52	; 0x34
 8004384:	fb02 f303 	mul.w	r3, r2, r3
 8004388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800438a:	4413      	add	r3, r2
 800438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438e:	4b40      	ldr	r3, [pc, #256]	; (8004490 <Display_stations_list_data+0x318>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	099b      	lsrs	r3, r3, #6
 8004396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	220a      	movs	r2, #10
 80043a2:	4938      	ldr	r1, [pc, #224]	; (8004484 <Display_stations_list_data+0x30c>)
 80043a4:	4618      	mov	r0, r3
 80043a6:	f008 fff5 	bl	800d394 <itoa>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2202      	movs	r2, #2
 80043ae:	9201      	str	r2, [sp, #4]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ba:	4621      	mov	r1, r4
 80043bc:	20e8      	movs	r0, #232	; 0xe8
 80043be:	f7fc fb8d 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00da      	lsls	r2, r3, #3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	331c      	adds	r3, #28
 80043d0:	4619      	mov	r1, r3
 80043d2:	2302      	movs	r3, #2
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <Display_stations_list_data+0x31c>)
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e2:	f240 1003 	movw	r0, #259	; 0x103
 80043e6:	f7fc fb79 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	3301      	adds	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	f67f aed1 	bls.w	800419a <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 80043f8:	e03b      	b.n	8004472 <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 80043fa:	2302      	movs	r3, #2
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	4b26      	ldr	r3, [pc, #152]	; (8004498 <Display_stations_list_data+0x320>)
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800440a:	211c      	movs	r1, #28
 800440c:	2008      	movs	r0, #8
 800440e:	f7fc fb65 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 8004412:	2302      	movs	r3, #2
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <Display_stations_list_data+0x324>)
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800441e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004422:	213f      	movs	r1, #63	; 0x3f
 8004424:	2008      	movs	r0, #8
 8004426:	f7fc fb59 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 800442a:	2302      	movs	r3, #2
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <Display_stations_list_data+0x328>)
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800443a:	2162      	movs	r1, #98	; 0x62
 800443c:	2008      	movs	r0, #8
 800443e:	f7fc fb4d 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 8004442:	2302      	movs	r3, #2
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <Display_stations_list_data+0x32c>)
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800444e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004452:	2185      	movs	r1, #133	; 0x85
 8004454:	2008      	movs	r0, #8
 8004456:	f7fc fb41 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 800445a:	2302      	movs	r3, #2
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <Display_stations_list_data+0x330>)
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800446a:	21a8      	movs	r1, #168	; 0xa8
 800446c:	2008      	movs	r0, #8
 800446e:	f7fc fb35 	bl	8000adc <ILI9341_Draw_String>
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800447c:	b004      	add	sp, #16
 800447e:	4770      	bx	lr
 8004480:	0800e308 	.word	0x0800e308
 8004484:	20006d8c 	.word	0x20006d8c
 8004488:	0800e318 	.word	0x0800e318
 800448c:	200000ac 	.word	0x200000ac
 8004490:	10624dd3 	.word	0x10624dd3
 8004494:	0800e31c 	.word	0x0800e31c
 8004498:	0800e450 	.word	0x0800e450
 800449c:	0800e468 	.word	0x0800e468
 80044a0:	0800e480 	.word	0x0800e480
 80044a4:	0800e498 	.word	0x0800e498
 80044a8:	0800e4b4 	.word	0x0800e4b4

080044ac <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80044b2:	f7ff fa93 	bl	80039dc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2); //Naglowek
 80044b6:	2302      	movs	r3, #2
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	4b64      	ldr	r3, [pc, #400]	; (800464c <Display_scanning_screen_background+0x1a0>)
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c4:	2101      	movs	r1, #1
 80044c6:	2005      	movs	r0, #5
 80044c8:	f7fc fb08 	bl	8000adc <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 80044cc:	2328      	movs	r3, #40	; 0x28
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f240 133b 	movw	r3, #315	; 0x13b
 80044d4:	2214      	movs	r2, #20
 80044d6:	2105      	movs	r1, #5
 80044d8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044dc:	f7fc fa5c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 80044e0:	2302      	movs	r3, #2
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	4b5a      	ldr	r3, [pc, #360]	; (8004650 <Display_scanning_screen_background+0x1a4>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f0:	2117      	movs	r1, #23
 80044f2:	2050      	movs	r0, #80	; 0x50
 80044f4:	f7fc faf2 	bl	8000adc <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80044f8:	2341      	movs	r3, #65	; 0x41
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	f240 133b 	movw	r3, #315	; 0x13b
 8004500:	222d      	movs	r2, #45	; 0x2d
 8004502:	2105      	movs	r1, #5
 8004504:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004508:	f7fc fa46 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 800450c:	235a      	movs	r3, #90	; 0x5a
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	f240 133b 	movw	r3, #315	; 0x13b
 8004514:	2246      	movs	r2, #70	; 0x46
 8004516:	2105      	movs	r1, #5
 8004518:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800451c:	f7fc fa3c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8004520:	2302      	movs	r3, #2
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <Display_scanning_screen_background+0x1a8>)
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800452c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004530:	2149      	movs	r1, #73	; 0x49
 8004532:	200a      	movs	r0, #10
 8004534:	f7fc fad2 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004538:	2373      	movs	r3, #115	; 0x73
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	f240 133b 	movw	r3, #315	; 0x13b
 8004540:	225f      	movs	r2, #95	; 0x5f
 8004542:	2105      	movs	r1, #5
 8004544:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004548:	f7fc fa26 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 800454c:	2302      	movs	r3, #2
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	4b41      	ldr	r3, [pc, #260]	; (8004658 <Display_scanning_screen_background+0x1ac>)
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800455c:	2162      	movs	r1, #98	; 0x62
 800455e:	200a      	movs	r0, #10
 8004560:	f7fc fabc 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004564:	238c      	movs	r3, #140	; 0x8c
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f240 133b 	movw	r3, #315	; 0x13b
 800456c:	2278      	movs	r2, #120	; 0x78
 800456e:	2105      	movs	r1, #5
 8004570:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004574:	f7fc fa10 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8004578:	2302      	movs	r3, #2
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	4b37      	ldr	r3, [pc, #220]	; (800465c <Display_scanning_screen_background+0x1b0>)
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004588:	217b      	movs	r1, #123	; 0x7b
 800458a:	200a      	movs	r0, #10
 800458c:	f7fc faa6 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004590:	23a5      	movs	r3, #165	; 0xa5
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	f240 133b 	movw	r3, #315	; 0x13b
 8004598:	2291      	movs	r2, #145	; 0x91
 800459a:	2105      	movs	r1, #5
 800459c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045a0:	f7fc f9fa 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 80045a4:	2302      	movs	r3, #2
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <Display_scanning_screen_background+0x1b4>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b4:	2194      	movs	r1, #148	; 0x94
 80045b6:	200a      	movs	r0, #10
 80045b8:	f7fc fa90 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 80045bc:	2302      	movs	r3, #2
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	4b28      	ldr	r3, [pc, #160]	; (8004664 <Display_scanning_screen_background+0x1b8>)
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045cc:	2194      	movs	r1, #148	; 0x94
 80045ce:	2078      	movs	r0, #120	; 0x78
 80045d0:	f7fc fa84 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 80045d4:	2302      	movs	r3, #2
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <Display_scanning_screen_background+0x1bc>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e4:	2194      	movs	r1, #148	; 0x94
 80045e6:	209e      	movs	r0, #158	; 0x9e
 80045e8:	f7fc fa78 	bl	8000adc <ILI9341_Draw_String>


	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80045ec:	23be      	movs	r3, #190	; 0xbe
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	f240 133b 	movw	r3, #315	; 0x13b
 80045f4:	22aa      	movs	r2, #170	; 0xaa
 80045f6:	2105      	movs	r1, #5
 80045f8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045fc:	f7fc f9cc 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 8004600:	2302      	movs	r3, #2
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <Display_scanning_screen_background+0x1c0>)
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800460c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004610:	21ad      	movs	r1, #173	; 0xad
 8004612:	200a      	movs	r0, #10
 8004614:	f7fc fa62 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004618:	23eb      	movs	r3, #235	; 0xeb
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	f240 133b 	movw	r3, #315	; 0x13b
 8004620:	22c3      	movs	r2, #195	; 0xc3
 8004622:	2105      	movs	r1, #5
 8004624:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004628:	f7fc f9b6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 800462c:	2302      	movs	r3, #2
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <Display_scanning_screen_background+0x1c4>)
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800463c:	21cf      	movs	r1, #207	; 0xcf
 800463e:	2082      	movs	r0, #130	; 0x82
 8004640:	f7fc fa4c 	bl	8000adc <ILI9341_Draw_String>

}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	0800e4cc 	.word	0x0800e4cc
 8004650:	0800e4dc 	.word	0x0800e4dc
 8004654:	0800e4f4 	.word	0x0800e4f4
 8004658:	0800e508 	.word	0x0800e508
 800465c:	0800e518 	.word	0x0800e518
 8004660:	0800e528 	.word	0x0800e528
 8004664:	0800e318 	.word	0x0800e318
 8004668:	0800e31c 	.word	0x0800e31c
 800466c:	0800e534 	.word	0x0800e534
 8004670:	0800e540 	.word	0x0800e540

08004674 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8004674:	b084      	sub	sp, #16
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af02      	add	r7, sp, #8
 800467c:	f107 0c08 	add.w	ip, r7, #8
 8004680:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8004684:	7d3b      	ldrb	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004694:	fb93 f3f2 	sdiv	r3, r3, r2
 8004698:	330a      	adds	r3, #10
 800469a:	461a      	mov	r2, r3
 800469c:	233c      	movs	r3, #60	; 0x3c
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	2232      	movs	r2, #50	; 0x32
 80046a4:	210a      	movs	r1, #10
 80046a6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80046aa:	f7fc f975 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 80046ae:	7d3b      	ldrb	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046be:	fb93 f3f2 	sdiv	r3, r3, r2
 80046c2:	330a      	adds	r3, #10
 80046c4:	4619      	mov	r1, r3
 80046c6:	233c      	movs	r3, #60	; 0x3c
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f44f 739b 	mov.w	r3, #310	; 0x136
 80046ce:	2232      	movs	r2, #50	; 0x32
 80046d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046d4:	f7fc f960 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 80046d8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80046dc:	220a      	movs	r2, #10
 80046de:	4954      	ldr	r1, [pc, #336]	; (8004830 <Display_scanning_screen_data+0x1bc>)
 80046e0:	4618      	mov	r0, r3
 80046e2:	f008 fe57 	bl	800d394 <itoa>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2202      	movs	r2, #2
 80046ea:	9201      	str	r2, [sp, #4]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f6:	2149      	movs	r1, #73	; 0x49
 80046f8:	2091      	movs	r0, #145	; 0x91
 80046fa:	f7fc f9ef 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 80046fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004702:	220a      	movs	r2, #10
 8004704:	494a      	ldr	r1, [pc, #296]	; (8004830 <Display_scanning_screen_data+0x1bc>)
 8004706:	4618      	mov	r0, r3
 8004708:	f008 fe44 	bl	800d394 <itoa>
 800470c:	4603      	mov	r3, r0
 800470e:	2202      	movs	r2, #2
 8004710:	9201      	str	r2, [sp, #4]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471c:	2162      	movs	r1, #98	; 0x62
 800471e:	2087      	movs	r0, #135	; 0x87
 8004720:	f7fc f9dc 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 8004724:	7d3b      	ldrb	r3, [r7, #20]
 8004726:	3301      	adds	r3, #1
 8004728:	220a      	movs	r2, #10
 800472a:	4941      	ldr	r1, [pc, #260]	; (8004830 <Display_scanning_screen_data+0x1bc>)
 800472c:	4618      	mov	r0, r3
 800472e:	f008 fe31 	bl	800d394 <itoa>
 8004732:	4603      	mov	r3, r0
 8004734:	2202      	movs	r2, #2
 8004736:	9201      	str	r2, [sp, #4]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800473e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004742:	217b      	movs	r1, #123	; 0x7b
 8004744:	2076      	movs	r0, #118	; 0x76
 8004746:	f7fc f9c9 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 800474a:	2302      	movs	r3, #2
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <Display_scanning_screen_data+0x1c0>)
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800475a:	217b      	movs	r1, #123	; 0x7b
 800475c:	2089      	movs	r0, #137	; 0x89
 800475e:	f7fc f9bd 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 8004762:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004766:	220a      	movs	r2, #10
 8004768:	4931      	ldr	r1, [pc, #196]	; (8004830 <Display_scanning_screen_data+0x1bc>)
 800476a:	4618      	mov	r0, r3
 800476c:	f008 fe12 	bl	800d394 <itoa>
 8004770:	4603      	mov	r3, r0
 8004772:	2202      	movs	r2, #2
 8004774:	9201      	str	r2, [sp, #4]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800477c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004780:	217b      	movs	r1, #123	; 0x7b
 8004782:	2093      	movs	r0, #147	; 0x93
 8004784:	f7fc f9aa 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <Display_scanning_screen_data+0x1c4>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	220a      	movs	r2, #10
 8004794:	4926      	ldr	r1, [pc, #152]	; (8004830 <Display_scanning_screen_data+0x1bc>)
 8004796:	4618      	mov	r0, r3
 8004798:	f008 fdfc 	bl	800d394 <itoa>
 800479c:	4603      	mov	r3, r0
 800479e:	2202      	movs	r2, #2
 80047a0:	9201      	str	r2, [sp, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ac:	2194      	movs	r1, #148	; 0x94
 80047ae:	205f      	movs	r0, #95	; 0x5f
 80047b0:	f7fc f994 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <Display_scanning_screen_data+0x1c4>)
 80047b8:	fba3 1302 	umull	r1, r3, r3, r2
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	220a      	movs	r2, #10
 80047ca:	4919      	ldr	r1, [pc, #100]	; (8004830 <Display_scanning_screen_data+0x1bc>)
 80047cc:	4618      	mov	r0, r3
 80047ce:	f008 fde1 	bl	800d394 <itoa>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2202      	movs	r2, #2
 80047d6:	9201      	str	r2, [sp, #4]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e2:	2194      	movs	r1, #148	; 0x94
 80047e4:	2081      	movs	r0, #129	; 0x81
 80047e6:	f7fc f979 	bl	8000adc <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 80047ea:	2302      	movs	r3, #2
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <Display_scanning_screen_data+0x1c8>)
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fa:	21ad      	movs	r1, #173	; 0xad
 80047fc:	2050      	movs	r0, #80	; 0x50
 80047fe:	f7fc f96d 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 8004802:	7d3b      	ldrb	r3, [r7, #20]
 8004804:	461a      	mov	r2, r3
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <Display_scanning_screen_data+0x1cc>)
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	2202      	movs	r2, #2
 800480e:	9201      	str	r2, [sp, #4]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800481a:	21ad      	movs	r1, #173	; 0xad
 800481c:	2050      	movs	r0, #80	; 0x50
 800481e:	f7fc f95d 	bl	8000adc <ILI9341_Draw_String>


}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482a:	b004      	add	sp, #16
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20006d8c 	.word	0x20006d8c
 8004834:	0800e430 	.word	0x0800e430
 8004838:	10624dd3 	.word	0x10624dd3
 800483c:	0800e548 	.word	0x0800e548
 8004840:	200000ac 	.word	0x200000ac

08004844 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 800484a:	2328      	movs	r3, #40	; 0x28
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	f240 133b 	movw	r3, #315	; 0x13b
 8004852:	2214      	movs	r2, #20
 8004854:	2105      	movs	r1, #5
 8004856:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800485a:	f7fc f89d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 800485e:	2302      	movs	r3, #2
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <Display_scanning_screen_complete+0x64>)
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800486a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800486e:	2117      	movs	r1, #23
 8004870:	2050      	movs	r0, #80	; 0x50
 8004872:	f7fc f933 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004876:	23eb      	movs	r3, #235	; 0xeb
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	f240 133b 	movw	r3, #315	; 0x13b
 800487e:	22c3      	movs	r2, #195	; 0xc3
 8004880:	2105      	movs	r1, #5
 8004882:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004886:	f7fc f887 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 800488a:	2302      	movs	r3, #2
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <Display_scanning_screen_complete+0x68>)
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489a:	21cf      	movs	r1, #207	; 0xcf
 800489c:	2082      	movs	r0, #130	; 0x82
 800489e:	f7fc f91d 	bl	8000adc <ILI9341_Draw_String>

}
 80048a2:	bf00      	nop
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	0800e550 	.word	0x0800e550
 80048ac:	0800e568 	.word	0x0800e568

080048b0 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80048b6:	f7ff f891 	bl	80039dc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 80048ba:	2302      	movs	r3, #2
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	4bb4      	ldr	r3, [pc, #720]	; (8004b90 <Display_dab_digrad_status_background+0x2e0>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c8:	2101      	movs	r1, #1
 80048ca:	2005      	movs	r0, #5
 80048cc:	f7fc f906 	bl	8000adc <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 80048d0:	2328      	movs	r3, #40	; 0x28
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2369      	movs	r3, #105	; 0x69
 80048d6:	2214      	movs	r2, #20
 80048d8:	2105      	movs	r1, #5
 80048da:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048de:	f7fc f85b 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80048e2:	2328      	movs	r3, #40	; 0x28
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	23d2      	movs	r3, #210	; 0xd2
 80048e8:	2214      	movs	r2, #20
 80048ea:	216e      	movs	r1, #110	; 0x6e
 80048ec:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048f0:	f7fc f852 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80048f4:	2328      	movs	r3, #40	; 0x28
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	f240 133b 	movw	r3, #315	; 0x13b
 80048fc:	2214      	movs	r2, #20
 80048fe:	21d7      	movs	r1, #215	; 0xd7
 8004900:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004904:	f7fc f848 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004908:	2341      	movs	r3, #65	; 0x41
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	f240 133b 	movw	r3, #315	; 0x13b
 8004910:	222d      	movs	r2, #45	; 0x2d
 8004912:	2105      	movs	r1, #5
 8004914:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004918:	f7fc f83e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 800491c:	2302      	movs	r3, #2
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	4b9c      	ldr	r3, [pc, #624]	; (8004b94 <Display_dab_digrad_status_background+0x2e4>)
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800492c:	2130      	movs	r1, #48	; 0x30
 800492e:	200a      	movs	r0, #10
 8004930:	f7fc f8d4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8004934:	2302      	movs	r3, #2
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	4b97      	ldr	r3, [pc, #604]	; (8004b98 <Display_dab_digrad_status_background+0x2e8>)
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004944:	2130      	movs	r1, #48	; 0x30
 8004946:	205a      	movs	r0, #90	; 0x5a
 8004948:	f7fc f8c8 	bl	8000adc <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 800494c:	235a      	movs	r3, #90	; 0x5a
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	f240 133b 	movw	r3, #315	; 0x13b
 8004954:	2246      	movs	r2, #70	; 0x46
 8004956:	2105      	movs	r1, #5
 8004958:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800495c:	f7fc f81c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8004960:	2302      	movs	r3, #2
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	4b8d      	ldr	r3, [pc, #564]	; (8004b9c <Display_dab_digrad_status_background+0x2ec>)
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800496c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004970:	2149      	movs	r1, #73	; 0x49
 8004972:	200a      	movs	r0, #10
 8004974:	f7fc f8b2 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004978:	2302      	movs	r3, #2
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	4b88      	ldr	r3, [pc, #544]	; (8004ba0 <Display_dab_digrad_status_background+0x2f0>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004988:	2149      	movs	r1, #73	; 0x49
 800498a:	2069      	movs	r0, #105	; 0x69
 800498c:	f7fc f8a6 	bl	8000adc <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004990:	2373      	movs	r3, #115	; 0x73
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	f240 133b 	movw	r3, #315	; 0x13b
 8004998:	225f      	movs	r2, #95	; 0x5f
 800499a:	2105      	movs	r1, #5
 800499c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049a0:	f7fb fffa 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80049a4:	2302      	movs	r3, #2
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	4b7e      	ldr	r3, [pc, #504]	; (8004ba4 <Display_dab_digrad_status_background+0x2f4>)
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b4:	2162      	movs	r1, #98	; 0x62
 80049b6:	200a      	movs	r0, #10
 80049b8:	f7fc f890 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80049bc:	2302      	movs	r3, #2
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	4b77      	ldr	r3, [pc, #476]	; (8004ba0 <Display_dab_digrad_status_background+0x2f0>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049cc:	2162      	movs	r1, #98	; 0x62
 80049ce:	2069      	movs	r0, #105	; 0x69
 80049d0:	f7fc f884 	bl	8000adc <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80049d4:	238c      	movs	r3, #140	; 0x8c
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f240 133b 	movw	r3, #315	; 0x13b
 80049dc:	2278      	movs	r2, #120	; 0x78
 80049de:	2105      	movs	r1, #5
 80049e0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049e4:	f7fb ffd8 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 80049e8:	2302      	movs	r3, #2
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	4b6e      	ldr	r3, [pc, #440]	; (8004ba8 <Display_dab_digrad_status_background+0x2f8>)
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f8:	217b      	movs	r1, #123	; 0x7b
 80049fa:	200a      	movs	r0, #10
 80049fc:	f7fc f86e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004a00:	2302      	movs	r3, #2
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	4b69      	ldr	r3, [pc, #420]	; (8004bac <Display_dab_digrad_status_background+0x2fc>)
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a10:	217b      	movs	r1, #123	; 0x7b
 8004a12:	206e      	movs	r0, #110	; 0x6e
 8004a14:	f7fc f862 	bl	8000adc <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004a18:	23a5      	movs	r3, #165	; 0xa5
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	f240 133b 	movw	r3, #315	; 0x13b
 8004a20:	2291      	movs	r2, #145	; 0x91
 8004a22:	2105      	movs	r1, #5
 8004a24:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004a28:	f7fb ffb6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	4b5f      	ldr	r3, [pc, #380]	; (8004bb0 <Display_dab_digrad_status_background+0x300>)
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a3c:	2194      	movs	r1, #148	; 0x94
 8004a3e:	200a      	movs	r0, #10
 8004a40:	f7fc f84c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004a44:	2302      	movs	r3, #2
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	4b5a      	ldr	r3, [pc, #360]	; (8004bb4 <Display_dab_digrad_status_background+0x304>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a54:	2194      	movs	r1, #148	; 0x94
 8004a56:	2071      	movs	r0, #113	; 0x71
 8004a58:	f7fc f840 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	4b55      	ldr	r3, [pc, #340]	; (8004bb8 <Display_dab_digrad_status_background+0x308>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a6c:	2194      	movs	r1, #148	; 0x94
 8004a6e:	2094      	movs	r0, #148	; 0x94
 8004a70:	f7fc f834 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004a74:	2302      	movs	r3, #2
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <Display_dab_digrad_status_background+0x30c>)
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a84:	2194      	movs	r1, #148	; 0x94
 8004a86:	20b7      	movs	r0, #183	; 0xb7
 8004a88:	f7fc f828 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <Display_dab_digrad_status_background+0x310>)
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9c:	2194      	movs	r1, #148	; 0x94
 8004a9e:	20db      	movs	r0, #219	; 0xdb
 8004aa0:	f7fc f81c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <Display_dab_digrad_status_background+0x314>)
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab4:	2194      	movs	r1, #148	; 0x94
 8004ab6:	f240 101b 	movw	r0, #283	; 0x11b
 8004aba:	f7fc f80f 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004abe:	2302      	movs	r3, #2
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <Display_dab_digrad_status_background+0x318>)
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ace:	2194      	movs	r1, #148	; 0x94
 8004ad0:	f240 1025 	movw	r0, #293	; 0x125
 8004ad4:	f7fc f802 	bl	8000adc <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004ad8:	23be      	movs	r3, #190	; 0xbe
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	f240 133b 	movw	r3, #315	; 0x13b
 8004ae0:	22aa      	movs	r2, #170	; 0xaa
 8004ae2:	2105      	movs	r1, #5
 8004ae4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004ae8:	f7fb ff56 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004aec:	2302      	movs	r3, #2
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <Display_dab_digrad_status_background+0x31c>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004afc:	21ad      	movs	r1, #173	; 0xad
 8004afe:	200a      	movs	r0, #10
 8004b00:	f7fb ffec 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004b04:	2302      	movs	r3, #2
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <Display_dab_digrad_status_background+0x320>)
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b14:	21ad      	movs	r1, #173	; 0xad
 8004b16:	207d      	movs	r0, #125	; 0x7d
 8004b18:	f7fb ffe0 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	4b2c      	ldr	r3, [pc, #176]	; (8004bd4 <Display_dab_digrad_status_background+0x324>)
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b2c:	21ad      	movs	r1, #173	; 0xad
 8004b2e:	20b4      	movs	r0, #180	; 0xb4
 8004b30:	f7fb ffd4 	bl	8000adc <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004b34:	23eb      	movs	r3, #235	; 0xeb
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	239d      	movs	r3, #157	; 0x9d
 8004b3a:	22c3      	movs	r2, #195	; 0xc3
 8004b3c:	2105      	movs	r1, #5
 8004b3e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b42:	f7fb ff29 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004b46:	23eb      	movs	r3, #235	; 0xeb
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	f240 133b 	movw	r3, #315	; 0x13b
 8004b4e:	22c3      	movs	r2, #195	; 0xc3
 8004b50:	21a3      	movs	r1, #163	; 0xa3
 8004b52:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b56:	f7fb ff1f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <Display_dab_digrad_status_background+0x328>)
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6a:	21cf      	movs	r1, #207	; 0xcf
 8004b6c:	2023      	movs	r0, #35	; 0x23
 8004b6e:	f7fb ffb5 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004b72:	2302      	movs	r3, #2
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <Display_dab_digrad_status_background+0x32c>)
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b82:	21cf      	movs	r1, #207	; 0xcf
 8004b84:	20cd      	movs	r0, #205	; 0xcd
 8004b86:	f7fb ffa9 	bl	8000adc <ILI9341_Draw_String>
}
 8004b8a:	bf00      	nop
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	0800e570 	.word	0x0800e570
 8004b94:	0800e584 	.word	0x0800e584
 8004b98:	0800e58c 	.word	0x0800e58c
 8004b9c:	0800e594 	.word	0x0800e594
 8004ba0:	0800e598 	.word	0x0800e598
 8004ba4:	0800e59c 	.word	0x0800e59c
 8004ba8:	0800e5a0 	.word	0x0800e5a0
 8004bac:	0800e5a8 	.word	0x0800e5a8
 8004bb0:	0800e5ac 	.word	0x0800e5ac
 8004bb4:	0800e318 	.word	0x0800e318
 8004bb8:	0800e31c 	.word	0x0800e31c
 8004bbc:	0800e5b8 	.word	0x0800e5b8
 8004bc0:	0800e5c0 	.word	0x0800e5c0
 8004bc4:	0800e430 	.word	0x0800e430
 8004bc8:	0800e5c8 	.word	0x0800e5c8
 8004bcc:	0800e5cc 	.word	0x0800e5cc
 8004bd0:	0800e5d8 	.word	0x0800e5d8
 8004bd4:	0800e5dc 	.word	0x0800e5dc
 8004bd8:	0800e2f4 	.word	0x0800e2f4
 8004bdc:	0800e2e8 	.word	0x0800e2e8

08004be0 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004be0:	b084      	sub	sp, #16
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af02      	add	r7, sp, #8
 8004be8:	f107 0c18 	add.w	ip, r7, #24
 8004bec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	23fa      	movs	r3, #250	; 0xfa
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <Display_dab_digrad_status_data+0xec>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <Display_dab_digrad_status_data+0xec>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	099b      	lsrs	r3, r3, #6
 8004c12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 8004c1e:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <Display_dab_digrad_status_data+0xf0>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 8331 	bne.w	800528a <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 8004c28:	7e7b      	ldrb	r3, [r7, #25]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00c      	beq.n	8004c4e <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004c34:	2302      	movs	r3, #2
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <Display_dab_digrad_status_data+0xf4>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c40:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c44:	2117      	movs	r1, #23
 8004c46:	2023      	movs	r0, #35	; 0x23
 8004c48:	f7fb ff48 	bl	8000adc <ILI9341_Draw_String>
 8004c4c:	e00b      	b.n	8004c66 <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004c4e:	2302      	movs	r3, #2
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <Display_dab_digrad_status_data+0xf4>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c5a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c5e:	2117      	movs	r1, #23
 8004c60:	2023      	movs	r0, #35	; 0x23
 8004c62:	f7fb ff3b 	bl	8000adc <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 8004c66:	7e7b      	ldrb	r3, [r7, #25]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004c72:	2302      	movs	r3, #2
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <Display_dab_digrad_status_data+0xf8>)
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c7e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c82:	2117      	movs	r1, #23
 8004c84:	2085      	movs	r0, #133	; 0x85
 8004c86:	f7fb ff29 	bl	8000adc <ILI9341_Draw_String>
 8004c8a:	e00b      	b.n	8004ca4 <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <Display_dab_digrad_status_data+0xf8>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c98:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c9c:	2117      	movs	r1, #23
 8004c9e:	2085      	movs	r0, #133	; 0x85
 8004ca0:	f7fb ff1c 	bl	8000adc <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 8004ca4:	7e7b      	ldrb	r3, [r7, #25]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d017      	beq.n	8004ce0 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <Display_dab_digrad_status_data+0xfc>)
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cbc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004cc0:	2117      	movs	r1, #23
 8004cc2:	20e4      	movs	r0, #228	; 0xe4
 8004cc4:	f7fb ff0a 	bl	8000adc <ILI9341_Draw_String>
 8004cc8:	e016      	b.n	8004cf8 <Display_dab_digrad_status_data+0x118>
 8004cca:	bf00      	nop
 8004ccc:	10624dd3 	.word	0x10624dd3
 8004cd0:	20006dcc 	.word	0x20006dcc
 8004cd4:	0800e5e0 	.word	0x0800e5e0
 8004cd8:	0800e5e8 	.word	0x0800e5e8
 8004cdc:	0800e5f0 	.word	0x0800e5f0
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	4bb6      	ldr	r3, [pc, #728]	; (8004fc0 <Display_dab_digrad_status_data+0x3e0>)
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cf0:	2117      	movs	r1, #23
 8004cf2:	20e4      	movs	r0, #228	; 0xe4
 8004cf4:	f7fb fef2 	bl	8000adc <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 8004cf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cfc:	2b0d      	cmp	r3, #13
 8004cfe:	dc02      	bgt.n	8004d06 <Display_dab_digrad_status_data+0x126>
 8004d00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d04:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004d06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d0a:	2b1a      	cmp	r3, #26
 8004d0c:	dc06      	bgt.n	8004d1c <Display_dab_digrad_status_data+0x13c>
 8004d0e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d12:	2b0d      	cmp	r3, #13
 8004d14:	dd02      	ble.n	8004d1c <Display_dab_digrad_status_data+0x13c>
 8004d16:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d1a:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004d1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d20:	2b27      	cmp	r3, #39	; 0x27
 8004d22:	dc06      	bgt.n	8004d32 <Display_dab_digrad_status_data+0x152>
 8004d24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d28:	2b1a      	cmp	r3, #26
 8004d2a:	dd02      	ble.n	8004d32 <Display_dab_digrad_status_data+0x152>
 8004d2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d30:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004d32:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d36:	2b34      	cmp	r3, #52	; 0x34
 8004d38:	dc06      	bgt.n	8004d48 <Display_dab_digrad_status_data+0x168>
 8004d3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d3e:	2b27      	cmp	r3, #39	; 0x27
 8004d40:	dd02      	ble.n	8004d48 <Display_dab_digrad_status_data+0x168>
 8004d42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d46:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 8004d48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d4c:	2b34      	cmp	r3, #52	; 0x34
 8004d4e:	dd02      	ble.n	8004d56 <Display_dab_digrad_status_data+0x176>
 8004d50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d54:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004d56:	2302      	movs	r3, #2
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	4b9a      	ldr	r3, [pc, #616]	; (8004fc4 <Display_dab_digrad_status_data+0x3e4>)
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d66:	2130      	movs	r1, #48	; 0x30
 8004d68:	2032      	movs	r0, #50	; 0x32
 8004d6a:	f7fb feb7 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004d6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d72:	220a      	movs	r2, #10
 8004d74:	4994      	ldr	r1, [pc, #592]	; (8004fc8 <Display_dab_digrad_status_data+0x3e8>)
 8004d76:	4618      	mov	r0, r3
 8004d78:	f008 fb0c 	bl	800d394 <itoa>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2202      	movs	r2, #2
 8004d80:	9201      	str	r2, [sp, #4]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d8c:	2130      	movs	r1, #48	; 0x30
 8004d8e:	2032      	movs	r0, #50	; 0x32
 8004d90:	f7fb fea4 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004d94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	23b4      	movs	r3, #180	; 0xb4
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da00      	bge.n	8004da6 <Display_dab_digrad_status_data+0x1c6>
 8004da4:	333f      	adds	r3, #63	; 0x3f
 8004da6:	119b      	asrs	r3, r3, #6
 8004da8:	3382      	adds	r3, #130	; 0x82
 8004daa:	461a      	mov	r2, r3
 8004dac:	233c      	movs	r3, #60	; 0x3c
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	2232      	movs	r2, #50	; 0x32
 8004db4:	2182      	movs	r1, #130	; 0x82
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7fb fdee 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004dbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	23b4      	movs	r3, #180	; 0xb4
 8004dc4:	fb02 f303 	mul.w	r3, r2, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	da00      	bge.n	8004dce <Display_dab_digrad_status_data+0x1ee>
 8004dcc:	333f      	adds	r3, #63	; 0x3f
 8004dce:	119b      	asrs	r3, r3, #6
 8004dd0:	3382      	adds	r3, #130	; 0x82
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	233c      	movs	r3, #60	; 0x3c
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004ddc:	2232      	movs	r2, #50	; 0x32
 8004dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004de2:	f7fb fdd9 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 8004de6:	7efb      	ldrb	r3, [r7, #27]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d802      	bhi.n	8004df2 <Display_dab_digrad_status_data+0x212>
 8004dec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004df0:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d805      	bhi.n	8004e04 <Display_dab_digrad_status_data+0x224>
 8004df8:	7efb      	ldrb	r3, [r7, #27]
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d902      	bls.n	8004e04 <Display_dab_digrad_status_data+0x224>
 8004dfe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e02:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004e04:	7efb      	ldrb	r3, [r7, #27]
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	d805      	bhi.n	8004e16 <Display_dab_digrad_status_data+0x236>
 8004e0a:	7efb      	ldrb	r3, [r7, #27]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d902      	bls.n	8004e16 <Display_dab_digrad_status_data+0x236>
 8004e10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e14:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004e16:	7efb      	ldrb	r3, [r7, #27]
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d805      	bhi.n	8004e28 <Display_dab_digrad_status_data+0x248>
 8004e1c:	7efb      	ldrb	r3, [r7, #27]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d902      	bls.n	8004e28 <Display_dab_digrad_status_data+0x248>
 8004e22:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e26:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8004e28:	7efb      	ldrb	r3, [r7, #27]
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d902      	bls.n	8004e34 <Display_dab_digrad_status_data+0x254>
 8004e2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e32:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004e34:	2302      	movs	r3, #2
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	4b62      	ldr	r3, [pc, #392]	; (8004fc4 <Display_dab_digrad_status_data+0x3e4>)
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e44:	2149      	movs	r1, #73	; 0x49
 8004e46:	2032      	movs	r0, #50	; 0x32
 8004e48:	f7fb fe48 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004e4c:	7efb      	ldrb	r3, [r7, #27]
 8004e4e:	220a      	movs	r2, #10
 8004e50:	495d      	ldr	r1, [pc, #372]	; (8004fc8 <Display_dab_digrad_status_data+0x3e8>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f008 fa9e 	bl	800d394 <itoa>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	9201      	str	r2, [sp, #4]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e68:	2149      	movs	r1, #73	; 0x49
 8004e6a:	2032      	movs	r0, #50	; 0x32
 8004e6c:	f7fb fe36 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004e70:	7efb      	ldrb	r3, [r7, #27]
 8004e72:	461a      	mov	r2, r3
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	3382      	adds	r3, #130	; 0x82
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2355      	movs	r3, #85	; 0x55
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	224b      	movs	r2, #75	; 0x4b
 8004e86:	2182      	movs	r1, #130	; 0x82
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7fb fd85 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004e8e:	7efb      	ldrb	r3, [r7, #27]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	3382      	adds	r3, #130	; 0x82
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	2355      	movs	r3, #85	; 0x55
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004ea4:	224b      	movs	r2, #75	; 0x4b
 8004ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004eaa:	f7fb fd75 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 8004eae:	7f7b      	ldrb	r3, [r7, #29]
 8004eb0:	2b0b      	cmp	r3, #11
 8004eb2:	d802      	bhi.n	8004eba <Display_dab_digrad_status_data+0x2da>
 8004eb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eb8:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004eba:	7f7b      	ldrb	r3, [r7, #29]
 8004ebc:	2b16      	cmp	r3, #22
 8004ebe:	d805      	bhi.n	8004ecc <Display_dab_digrad_status_data+0x2ec>
 8004ec0:	7f7b      	ldrb	r3, [r7, #29]
 8004ec2:	2b0b      	cmp	r3, #11
 8004ec4:	d902      	bls.n	8004ecc <Display_dab_digrad_status_data+0x2ec>
 8004ec6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004eca:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004ecc:	7f7b      	ldrb	r3, [r7, #29]
 8004ece:	2b21      	cmp	r3, #33	; 0x21
 8004ed0:	d805      	bhi.n	8004ede <Display_dab_digrad_status_data+0x2fe>
 8004ed2:	7f7b      	ldrb	r3, [r7, #29]
 8004ed4:	2b16      	cmp	r3, #22
 8004ed6:	d902      	bls.n	8004ede <Display_dab_digrad_status_data+0x2fe>
 8004ed8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004edc:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004ede:	7f7b      	ldrb	r3, [r7, #29]
 8004ee0:	2b2c      	cmp	r3, #44	; 0x2c
 8004ee2:	d805      	bhi.n	8004ef0 <Display_dab_digrad_status_data+0x310>
 8004ee4:	7f7b      	ldrb	r3, [r7, #29]
 8004ee6:	2b21      	cmp	r3, #33	; 0x21
 8004ee8:	d902      	bls.n	8004ef0 <Display_dab_digrad_status_data+0x310>
 8004eea:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eee:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 8004ef0:	7f7b      	ldrb	r3, [r7, #29]
 8004ef2:	2b2c      	cmp	r3, #44	; 0x2c
 8004ef4:	d902      	bls.n	8004efc <Display_dab_digrad_status_data+0x31c>
 8004ef6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004efa:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004efc:	2302      	movs	r3, #2
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <Display_dab_digrad_status_data+0x3e4>)
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f0c:	2162      	movs	r1, #98	; 0x62
 8004f0e:	2032      	movs	r0, #50	; 0x32
 8004f10:	f7fb fde4 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004f14:	7f7b      	ldrb	r3, [r7, #29]
 8004f16:	220a      	movs	r2, #10
 8004f18:	492b      	ldr	r1, [pc, #172]	; (8004fc8 <Display_dab_digrad_status_data+0x3e8>)
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f008 fa3a 	bl	800d394 <itoa>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2202      	movs	r2, #2
 8004f24:	9201      	str	r2, [sp, #4]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f30:	2162      	movs	r1, #98	; 0x62
 8004f32:	2032      	movs	r0, #50	; 0x32
 8004f34:	f7fb fdd2 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004f38:	7f7b      	ldrb	r3, [r7, #29]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	23b4      	movs	r3, #180	; 0xb4
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <Display_dab_digrad_status_data+0x3ec>)
 8004f44:	fb82 1203 	smull	r1, r2, r2, r3
 8004f48:	1112      	asrs	r2, r2, #4
 8004f4a:	17db      	asrs	r3, r3, #31
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	3382      	adds	r3, #130	; 0x82
 8004f50:	461a      	mov	r2, r3
 8004f52:	236e      	movs	r3, #110	; 0x6e
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	2264      	movs	r2, #100	; 0x64
 8004f5a:	2182      	movs	r1, #130	; 0x82
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7fb fd1b 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004f62:	7f7b      	ldrb	r3, [r7, #29]
 8004f64:	461a      	mov	r2, r3
 8004f66:	23b4      	movs	r3, #180	; 0xb4
 8004f68:	fb02 f303 	mul.w	r3, r2, r3
 8004f6c:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <Display_dab_digrad_status_data+0x3ec>)
 8004f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8004f72:	1112      	asrs	r2, r2, #4
 8004f74:	17db      	asrs	r3, r3, #31
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	3382      	adds	r3, #130	; 0x82
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	236e      	movs	r3, #110	; 0x6e
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004f84:	2264      	movs	r2, #100	; 0x64
 8004f86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004f8a:	f7fb fd05 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 8004f8e:	7f3b      	ldrb	r3, [r7, #28]
 8004f90:	2b14      	cmp	r3, #20
 8004f92:	d802      	bhi.n	8004f9a <Display_dab_digrad_status_data+0x3ba>
 8004f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f98:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004f9a:	7f3b      	ldrb	r3, [r7, #28]
 8004f9c:	2b28      	cmp	r3, #40	; 0x28
 8004f9e:	d805      	bhi.n	8004fac <Display_dab_digrad_status_data+0x3cc>
 8004fa0:	7f3b      	ldrb	r3, [r7, #28]
 8004fa2:	2b14      	cmp	r3, #20
 8004fa4:	d902      	bls.n	8004fac <Display_dab_digrad_status_data+0x3cc>
 8004fa6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004faa:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004fac:	7f3b      	ldrb	r3, [r7, #28]
 8004fae:	2b3c      	cmp	r3, #60	; 0x3c
 8004fb0:	d80e      	bhi.n	8004fd0 <Display_dab_digrad_status_data+0x3f0>
 8004fb2:	7f3b      	ldrb	r3, [r7, #28]
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d90b      	bls.n	8004fd0 <Display_dab_digrad_status_data+0x3f0>
 8004fb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e007      	b.n	8004fd0 <Display_dab_digrad_status_data+0x3f0>
 8004fc0:	0800e5f0 	.word	0x0800e5f0
 8004fc4:	0800e5fc 	.word	0x0800e5fc
 8004fc8:	20006d8c 	.word	0x20006d8c
 8004fcc:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8004fd0:	7f3b      	ldrb	r3, [r7, #28]
 8004fd2:	2b50      	cmp	r3, #80	; 0x50
 8004fd4:	d805      	bhi.n	8004fe2 <Display_dab_digrad_status_data+0x402>
 8004fd6:	7f3b      	ldrb	r3, [r7, #28]
 8004fd8:	2b3c      	cmp	r3, #60	; 0x3c
 8004fda:	d902      	bls.n	8004fe2 <Display_dab_digrad_status_data+0x402>
 8004fdc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fe0:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 8004fe2:	7f3b      	ldrb	r3, [r7, #28]
 8004fe4:	2b50      	cmp	r3, #80	; 0x50
 8004fe6:	d902      	bls.n	8004fee <Display_dab_digrad_status_data+0x40e>
 8004fe8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fec:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8004fee:	2302      	movs	r3, #2
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	4ba9      	ldr	r3, [pc, #676]	; (8005298 <Display_dab_digrad_status_data+0x6b8>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ffe:	217b      	movs	r1, #123	; 0x7b
 8005000:	204b      	movs	r0, #75	; 0x4b
 8005002:	f7fb fd6b 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8005006:	7f3b      	ldrb	r3, [r7, #28]
 8005008:	220a      	movs	r2, #10
 800500a:	49a4      	ldr	r1, [pc, #656]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 800500c:	4618      	mov	r0, r3
 800500e:	f008 f9c1 	bl	800d394 <itoa>
 8005012:	4603      	mov	r3, r0
 8005014:	2202      	movs	r2, #2
 8005016:	9201      	str	r2, [sp, #4]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800501e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005022:	217b      	movs	r1, #123	; 0x7b
 8005024:	204b      	movs	r0, #75	; 0x4b
 8005026:	f7fb fd59 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 800502a:	7f3b      	ldrb	r3, [r7, #28]
 800502c:	461a      	mov	r2, r3
 800502e:	23b4      	movs	r3, #180	; 0xb4
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	4a9a      	ldr	r2, [pc, #616]	; (80052a0 <Display_dab_digrad_status_data+0x6c0>)
 8005036:	fb82 1203 	smull	r1, r2, r2, r3
 800503a:	1152      	asrs	r2, r2, #5
 800503c:	17db      	asrs	r3, r3, #31
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	3382      	adds	r3, #130	; 0x82
 8005042:	461a      	mov	r2, r3
 8005044:	2387      	movs	r3, #135	; 0x87
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	227d      	movs	r2, #125	; 0x7d
 800504c:	2182      	movs	r1, #130	; 0x82
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7fb fca2 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8005054:	7f3b      	ldrb	r3, [r7, #28]
 8005056:	461a      	mov	r2, r3
 8005058:	23b4      	movs	r3, #180	; 0xb4
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	4a90      	ldr	r2, [pc, #576]	; (80052a0 <Display_dab_digrad_status_data+0x6c0>)
 8005060:	fb82 1203 	smull	r1, r2, r2, r3
 8005064:	1152      	asrs	r2, r2, #5
 8005066:	17db      	asrs	r3, r3, #31
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	3382      	adds	r3, #130	; 0x82
 800506c:	4619      	mov	r1, r3
 800506e:	2387      	movs	r3, #135	; 0x87
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	f44f 739b 	mov.w	r3, #310	; 0x136
 8005076:	227d      	movs	r2, #125	; 0x7d
 8005078:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800507c:	f7fb fc8c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	4a88      	ldr	r2, [pc, #544]	; (80052a4 <Display_dab_digrad_status_data+0x6c4>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	220a      	movs	r2, #10
 800508c:	4983      	ldr	r1, [pc, #524]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 800508e:	4618      	mov	r0, r3
 8005090:	f008 f980 	bl	800d394 <itoa>
 8005094:	4603      	mov	r3, r0
 8005096:	2202      	movs	r2, #2
 8005098:	9201      	str	r2, [sp, #4]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050a4:	2194      	movs	r1, #148	; 0x94
 80050a6:	205b      	movs	r0, #91	; 0x5b
 80050a8:	f7fb fd18 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80050ac:	6a3a      	ldr	r2, [r7, #32]
 80050ae:	4b7d      	ldr	r3, [pc, #500]	; (80052a4 <Display_dab_digrad_status_data+0x6c4>)
 80050b0:	fba3 1302 	umull	r1, r3, r3, r2
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	220a      	movs	r2, #10
 80050c2:	4976      	ldr	r1, [pc, #472]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 80050c4:	4618      	mov	r0, r3
 80050c6:	f008 f965 	bl	800d394 <itoa>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2202      	movs	r2, #2
 80050ce:	9201      	str	r2, [sp, #4]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050da:	2194      	movs	r1, #148	; 0x94
 80050dc:	2078      	movs	r0, #120	; 0x78
 80050de:	f7fb fcfd 	bl	8000adc <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 80050e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d821      	bhi.n	800512e <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 80050ea:	2302      	movs	r3, #2
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	4b6e      	ldr	r3, [pc, #440]	; (80052a8 <Display_dab_digrad_status_data+0x6c8>)
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050fa:	2194      	movs	r1, #148	; 0x94
 80050fc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8005100:	f7fb fcec 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005104:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005108:	220a      	movs	r2, #10
 800510a:	4964      	ldr	r1, [pc, #400]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 800510c:	4618      	mov	r0, r3
 800510e:	f008 f941 	bl	800d394 <itoa>
 8005112:	4603      	mov	r3, r0
 8005114:	2202      	movs	r2, #2
 8005116:	9201      	str	r2, [sp, #4]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800511e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005122:	2194      	movs	r1, #148	; 0x94
 8005124:	f240 1011 	movw	r0, #273	; 0x111
 8005128:	f7fb fcd8 	bl	8000adc <ILI9341_Draw_String>
 800512c:	e013      	b.n	8005156 <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 800512e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005132:	220a      	movs	r2, #10
 8005134:	4959      	ldr	r1, [pc, #356]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 8005136:	4618      	mov	r0, r3
 8005138:	f008 f92c 	bl	800d394 <itoa>
 800513c:	4603      	mov	r3, r0
 800513e:	2202      	movs	r2, #2
 8005140:	9201      	str	r2, [sp, #4]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800514c:	2194      	movs	r1, #148	; 0x94
 800514e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8005152:	f7fb fcc3 	bl	8000adc <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	2b09      	cmp	r3, #9
 800515a:	d81d      	bhi.n	8005198 <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 800515c:	2302      	movs	r3, #2
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	4b52      	ldr	r3, [pc, #328]	; (80052ac <Display_dab_digrad_status_data+0x6cc>)
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800516c:	21ad      	movs	r1, #173	; 0xad
 800516e:	204f      	movs	r0, #79	; 0x4f
 8005170:	f7fb fcb4 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	220a      	movs	r2, #10
 8005178:	4948      	ldr	r1, [pc, #288]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 800517a:	4618      	mov	r0, r3
 800517c:	f008 f90a 	bl	800d394 <itoa>
 8005180:	4603      	mov	r3, r0
 8005182:	2202      	movs	r2, #2
 8005184:	9201      	str	r2, [sp, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800518c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005190:	21ad      	movs	r1, #173	; 0xad
 8005192:	2057      	movs	r0, #87	; 0x57
 8005194:	f7fb fca2 	bl	8000adc <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2b09      	cmp	r3, #9
 800519c:	d911      	bls.n	80051c2 <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	220a      	movs	r2, #10
 80051a2:	493e      	ldr	r1, [pc, #248]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 80051a4:	4618      	mov	r0, r3
 80051a6:	f008 f8f5 	bl	800d394 <itoa>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2202      	movs	r2, #2
 80051ae:	9201      	str	r2, [sp, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ba:	21ad      	movs	r1, #173	; 0xad
 80051bc:	204f      	movs	r0, #79	; 0x4f
 80051be:	f7fb fc8d 	bl	8000adc <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 80051c2:	2302      	movs	r3, #2
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	4b3a      	ldr	r3, [pc, #232]	; (80052b0 <Display_dab_digrad_status_data+0x6d0>)
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d2:	21ad      	movs	r1, #173	; 0xad
 80051d4:	205f      	movs	r0, #95	; 0x5f
 80051d6:	f7fb fc81 	bl	8000adc <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 80051da:	88bb      	ldrh	r3, [r7, #4]
 80051dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d023      	beq.n	800522c <Display_dab_digrad_status_data+0x64c>
 80051e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80051e8:	4293      	cmp	r3, r2
 80051ea:	dc2c      	bgt.n	8005246 <Display_dab_digrad_status_data+0x666>
 80051ec:	2bfa      	cmp	r3, #250	; 0xfa
 80051ee:	d003      	beq.n	80051f8 <Display_dab_digrad_status_data+0x618>
 80051f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051f4:	d00d      	beq.n	8005212 <Display_dab_digrad_status_data+0x632>
 80051f6:	e026      	b.n	8005246 <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 80051f8:	2302      	movs	r3, #2
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <Display_dab_digrad_status_data+0x6d4>)
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005208:	21ad      	movs	r1, #173	; 0xad
 800520a:	2067      	movs	r0, #103	; 0x67
 800520c:	f7fb fc66 	bl	8000adc <ILI9341_Draw_String>
			break;
 8005210:	e026      	b.n	8005260 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8005212:	2302      	movs	r3, #2
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <Display_dab_digrad_status_data+0x6d8>)
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800521e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005222:	21ad      	movs	r1, #173	; 0xad
 8005224:	2067      	movs	r0, #103	; 0x67
 8005226:	f7fb fc59 	bl	8000adc <ILI9341_Draw_String>
			break;
 800522a:	e019      	b.n	8005260 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 800522c:	2302      	movs	r3, #2
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	4b22      	ldr	r3, [pc, #136]	; (80052bc <Display_dab_digrad_status_data+0x6dc>)
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523c:	21ad      	movs	r1, #173	; 0xad
 800523e:	2067      	movs	r0, #103	; 0x67
 8005240:	f7fb fc4c 	bl	8000adc <ILI9341_Draw_String>
			break;
 8005244:	e00c      	b.n	8005260 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8005246:	2302      	movs	r3, #2
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <Display_dab_digrad_status_data+0x6e0>)
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005256:	21ad      	movs	r1, #173	; 0xad
 8005258:	2067      	movs	r0, #103	; 0x67
 800525a:	f7fb fc3f 	bl	8000adc <ILI9341_Draw_String>
			break;
 800525e:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8005260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	220a      	movs	r2, #10
 800526a:	490c      	ldr	r1, [pc, #48]	; (800529c <Display_dab_digrad_status_data+0x6bc>)
 800526c:	4618      	mov	r0, r3
 800526e:	f008 f891 	bl	800d394 <itoa>
 8005272:	4603      	mov	r3, r0
 8005274:	2202      	movs	r2, #2
 8005276:	9201      	str	r2, [sp, #4]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800527e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005282:	21ad      	movs	r1, #173	; 0xad
 8005284:	20d7      	movs	r0, #215	; 0xd7
 8005286:	f7fb fc29 	bl	8000adc <ILI9341_Draw_String>
	}
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005294:	b004      	add	sp, #16
 8005296:	4770      	bx	lr
 8005298:	0800e5fc 	.word	0x0800e5fc
 800529c:	20006d8c 	.word	0x20006d8c
 80052a0:	51eb851f 	.word	0x51eb851f
 80052a4:	10624dd3 	.word	0x10624dd3
 80052a8:	0800e600 	.word	0x0800e600
 80052ac:	0800e308 	.word	0x0800e308
 80052b0:	0800e318 	.word	0x0800e318
 80052b4:	0800e604 	.word	0x0800e604
 80052b8:	0800e608 	.word	0x0800e608
 80052bc:	0800e60c 	.word	0x0800e60c
 80052c0:	0800e610 	.word	0x0800e610

080052c4 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80052ca:	f7fe fb87 	bl	80039dc <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 80052ce:	2302      	movs	r3, #2
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	4b6d      	ldr	r3, [pc, #436]	; (8005488 <Display_settings_screen_background+0x1c4>)
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2300      	movs	r3, #0
 80052d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052dc:	2101      	movs	r1, #1
 80052de:	2005      	movs	r0, #5
 80052e0:	f7fb fbfc 	bl	8000adc <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 80052e4:	2337      	movs	r3, #55	; 0x37
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f240 133b 	movw	r3, #315	; 0x13b
 80052ec:	2214      	movs	r2, #20
 80052ee:	2105      	movs	r1, #5
 80052f0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80052f4:	f7fb fb50 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 80052f8:	2302      	movs	r3, #2
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	4b63      	ldr	r3, [pc, #396]	; (800548c <Display_settings_screen_background+0x1c8>)
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005308:	2116      	movs	r1, #22
 800530a:	2037      	movs	r0, #55	; 0x37
 800530c:	f7fb fbe6 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 8005310:	2302      	movs	r3, #2
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	4b5e      	ldr	r3, [pc, #376]	; (8005490 <Display_settings_screen_background+0x1cc>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800531c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005320:	2116      	movs	r1, #22
 8005322:	20ce      	movs	r0, #206	; 0xce
 8005324:	f7fb fbda 	bl	8000adc <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8005328:	2364      	movs	r3, #100	; 0x64
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	239d      	movs	r3, #157	; 0x9d
 800532e:	223c      	movs	r2, #60	; 0x3c
 8005330:	2105      	movs	r1, #5
 8005332:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005336:	f7fb fb2f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 800533a:	2364      	movs	r3, #100	; 0x64
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f240 133b 	movw	r3, #315	; 0x13b
 8005342:	223c      	movs	r2, #60	; 0x3c
 8005344:	21a3      	movs	r1, #163	; 0xa3
 8005346:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800534a:	f7fb fb25 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 800534e:	2302      	movs	r3, #2
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	4b50      	ldr	r3, [pc, #320]	; (8005494 <Display_settings_screen_background+0x1d0>)
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800535a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800535e:	2148      	movs	r1, #72	; 0x48
 8005360:	2036      	movs	r0, #54	; 0x36
 8005362:	f7fb fbbb 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8005366:	2302      	movs	r3, #2
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <Display_settings_screen_background+0x1d4>)
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005376:	2148      	movs	r1, #72	; 0x48
 8005378:	20d3      	movs	r0, #211	; 0xd3
 800537a:	f7fb fbaf 	bl	8000adc <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 800537e:	2391      	movs	r3, #145	; 0x91
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	239d      	movs	r3, #157	; 0x9d
 8005384:	2269      	movs	r2, #105	; 0x69
 8005386:	2105      	movs	r1, #5
 8005388:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800538c:	f7fb fb04 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8005390:	2391      	movs	r3, #145	; 0x91
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	f240 133b 	movw	r3, #315	; 0x13b
 8005398:	2269      	movs	r2, #105	; 0x69
 800539a:	21a3      	movs	r1, #163	; 0xa3
 800539c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053a0:	f7fb fafa 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 80053a4:	2302      	movs	r3, #2
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	4b3c      	ldr	r3, [pc, #240]	; (800549c <Display_settings_screen_background+0x1d8>)
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b4:	2175      	movs	r1, #117	; 0x75
 80053b6:	2023      	movs	r0, #35	; 0x23
 80053b8:	f7fb fb90 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 80053bc:	2302      	movs	r3, #2
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	4b37      	ldr	r3, [pc, #220]	; (80054a0 <Display_settings_screen_background+0x1dc>)
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053cc:	2175      	movs	r1, #117	; 0x75
 80053ce:	20c1      	movs	r0, #193	; 0xc1
 80053d0:	f7fb fb84 	bl	8000adc <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 80053d4:	23be      	movs	r3, #190	; 0xbe
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	239d      	movs	r3, #157	; 0x9d
 80053da:	2296      	movs	r2, #150	; 0x96
 80053dc:	2105      	movs	r1, #5
 80053de:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053e2:	f7fb fad9 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 80053e6:	23be      	movs	r3, #190	; 0xbe
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	f240 133b 	movw	r3, #315	; 0x13b
 80053ee:	2296      	movs	r2, #150	; 0x96
 80053f0:	21a3      	movs	r1, #163	; 0xa3
 80053f2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053f6:	f7fb facf 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 80053fa:	2302      	movs	r3, #2
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <Display_settings_screen_background+0x1e0>)
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800540a:	21a2      	movs	r1, #162	; 0xa2
 800540c:	2020      	movs	r0, #32
 800540e:	f7fb fb65 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 8005412:	2302      	movs	r3, #2
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <Display_settings_screen_background+0x1e4>)
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800541e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005422:	21a2      	movs	r1, #162	; 0xa2
 8005424:	20a8      	movs	r0, #168	; 0xa8
 8005426:	f7fb fb59 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 800542a:	23eb      	movs	r3, #235	; 0xeb
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	239d      	movs	r3, #157	; 0x9d
 8005430:	22c3      	movs	r2, #195	; 0xc3
 8005432:	2105      	movs	r1, #5
 8005434:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005438:	f7fb faae 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800543c:	23eb      	movs	r3, #235	; 0xeb
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	f240 133b 	movw	r3, #315	; 0x13b
 8005444:	22c3      	movs	r2, #195	; 0xc3
 8005446:	21a3      	movs	r1, #163	; 0xa3
 8005448:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800544c:	f7fb faa4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8005450:	2302      	movs	r3, #2
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	4b15      	ldr	r3, [pc, #84]	; (80054ac <Display_settings_screen_background+0x1e8>)
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800545c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005460:	21cf      	movs	r1, #207	; 0xcf
 8005462:	2025      	movs	r0, #37	; 0x25
 8005464:	f7fb fb3a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8005468:	2302      	movs	r3, #2
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <Display_settings_screen_background+0x1ec>)
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005478:	21cf      	movs	r1, #207	; 0xcf
 800547a:	20c3      	movs	r0, #195	; 0xc3
 800547c:	f7fb fb2e 	bl	8000adc <ILI9341_Draw_String>

}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	0800e614 	.word	0x0800e614
 800548c:	0800e624 	.word	0x0800e624
 8005490:	0800e62c 	.word	0x0800e62c
 8005494:	0800e638 	.word	0x0800e638
 8005498:	0800e644 	.word	0x0800e644
 800549c:	0800e650 	.word	0x0800e650
 80054a0:	0800e65c 	.word	0x0800e65c
 80054a4:	0800e668 	.word	0x0800e668
 80054a8:	0800e678 	.word	0x0800e678
 80054ac:	0800e444 	.word	0x0800e444
 80054b0:	0800e438 	.word	0x0800e438

080054b4 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	463c      	mov	r4, r7
 80054bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 80054c0:	7bbb      	ldrb	r3, [r7, #14]
 80054c2:	461a      	mov	r2, r3
 80054c4:	238c      	movs	r3, #140	; 0x8c
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <Display_settings_screen_data+0x84>)
 80054cc:	fb82 1203 	smull	r1, r2, r2, r3
 80054d0:	441a      	add	r2, r3
 80054d2:	1152      	asrs	r2, r2, #5
 80054d4:	17db      	asrs	r3, r3, #31
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	330c      	adds	r3, #12
 80054da:	4619      	mov	r1, r3
 80054dc:	2332      	movs	r3, #50	; 0x32
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2398      	movs	r3, #152	; 0x98
 80054e2:	2228      	movs	r2, #40	; 0x28
 80054e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054e8:	f7fb fa56 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	461a      	mov	r2, r3
 80054f0:	238c      	movs	r3, #140	; 0x8c
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <Display_settings_screen_data+0x84>)
 80054f8:	fb82 1203 	smull	r1, r2, r2, r3
 80054fc:	441a      	add	r2, r3
 80054fe:	1152      	asrs	r2, r2, #5
 8005500:	17db      	asrs	r3, r3, #31
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	330c      	adds	r3, #12
 8005506:	461a      	mov	r2, r3
 8005508:	2332      	movs	r3, #50	; 0x32
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	2228      	movs	r2, #40	; 0x28
 8005510:	210c      	movs	r1, #12
 8005512:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005516:	f7fb fa3f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 800551a:	2332      	movs	r3, #50	; 0x32
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	f44f 739a 	mov.w	r3, #308	; 0x134
 8005522:	2228      	movs	r2, #40	; 0x28
 8005524:	21a8      	movs	r1, #168	; 0xa8
 8005526:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800552a:	f7fb fa35 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	bf00      	nop
 8005538:	82082083 	.word	0x82082083

0800553c <Display_time>:

void Display_time(time_t time_val)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af02      	add	r7, sp, #8
 8005542:	463b      	mov	r3, r7
 8005544:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005548:	883b      	ldrh	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d076      	beq.n	800563c <Display_time+0x100>
 800554e:	78bb      	ldrb	r3, [r7, #2]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d073      	beq.n	800563c <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8005554:	793b      	ldrb	r3, [r7, #4]
 8005556:	2b09      	cmp	r3, #9
 8005558:	d81e      	bhi.n	8005598 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 800555a:	2302      	movs	r3, #2
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	4b39      	ldr	r3, [pc, #228]	; (8005644 <Display_time+0x108>)
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	2300      	movs	r3, #0
 8005564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005568:	2101      	movs	r1, #1
 800556a:	f240 100f 	movw	r0, #271	; 0x10f
 800556e:	f7fb fab5 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005572:	793b      	ldrb	r3, [r7, #4]
 8005574:	220a      	movs	r2, #10
 8005576:	4934      	ldr	r1, [pc, #208]	; (8005648 <Display_time+0x10c>)
 8005578:	4618      	mov	r0, r3
 800557a:	f007 ff0b 	bl	800d394 <itoa>
 800557e:	4603      	mov	r3, r0
 8005580:	2202      	movs	r2, #2
 8005582:	9201      	str	r2, [sp, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	2300      	movs	r3, #0
 8005588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800558c:	2101      	movs	r1, #1
 800558e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8005592:	f7fb faa3 	bl	8000adc <ILI9341_Draw_String>
 8005596:	e011      	b.n	80055bc <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005598:	793b      	ldrb	r3, [r7, #4]
 800559a:	220a      	movs	r2, #10
 800559c:	492a      	ldr	r1, [pc, #168]	; (8005648 <Display_time+0x10c>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f007 fef8 	bl	800d394 <itoa>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2202      	movs	r2, #2
 80055a8:	9201      	str	r2, [sp, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055b2:	2101      	movs	r1, #1
 80055b4:	f240 100f 	movw	r0, #271	; 0x10f
 80055b8:	f7fb fa90 	bl	8000adc <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80055bc:	2302      	movs	r3, #2
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	4b22      	ldr	r3, [pc, #136]	; (800564c <Display_time+0x110>)
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ca:	2101      	movs	r1, #1
 80055cc:	f240 101f 	movw	r0, #287	; 0x11f
 80055d0:	f7fb fa84 	bl	8000adc <ILI9341_Draw_String>

		if(time_val.minute < 10)
 80055d4:	797b      	ldrb	r3, [r7, #5]
 80055d6:	2b09      	cmp	r3, #9
 80055d8:	d81e      	bhi.n	8005618 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 80055da:	2302      	movs	r3, #2
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	4b19      	ldr	r3, [pc, #100]	; (8005644 <Display_time+0x108>)
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e8:	2101      	movs	r1, #1
 80055ea:	f240 1027 	movw	r0, #295	; 0x127
 80055ee:	f7fb fa75 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80055f2:	797b      	ldrb	r3, [r7, #5]
 80055f4:	220a      	movs	r2, #10
 80055f6:	4914      	ldr	r1, [pc, #80]	; (8005648 <Display_time+0x10c>)
 80055f8:	4618      	mov	r0, r3
 80055fa:	f007 fecb 	bl	800d394 <itoa>
 80055fe:	4603      	mov	r3, r0
 8005600:	2202      	movs	r2, #2
 8005602:	9201      	str	r2, [sp, #4]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800560c:	2101      	movs	r1, #1
 800560e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8005612:	f7fb fa63 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 8005616:	e011      	b.n	800563c <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005618:	797b      	ldrb	r3, [r7, #5]
 800561a:	220a      	movs	r2, #10
 800561c:	490a      	ldr	r1, [pc, #40]	; (8005648 <Display_time+0x10c>)
 800561e:	4618      	mov	r0, r3
 8005620:	f007 feb8 	bl	800d394 <itoa>
 8005624:	4603      	mov	r3, r0
 8005626:	2202      	movs	r2, #2
 8005628:	9201      	str	r2, [sp, #4]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	2300      	movs	r3, #0
 800562e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005632:	2101      	movs	r1, #1
 8005634:	f240 1027 	movw	r0, #295	; 0x127
 8005638:	f7fb fa50 	bl	8000adc <ILI9341_Draw_String>
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	0800e600 	.word	0x0800e600
 8005648:	20006d8c 	.word	0x20006d8c
 800564c:	0800e68c 	.word	0x0800e68c

08005650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <MX_DMA_Init+0x3c>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a0b      	ldr	r2, [pc, #44]	; (800568c <MX_DMA_Init+0x3c>)
 8005660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <MX_DMA_Init+0x3c>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005672:	2200      	movs	r2, #0
 8005674:	2100      	movs	r1, #0
 8005676:	200f      	movs	r0, #15
 8005678:	f001 ff95 	bl	80075a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800567c:	200f      	movs	r0, #15
 800567e:	f001 ffae 	bl	80075de <HAL_NVIC_EnableIRQ>

}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40023800 	.word	0x40023800

08005690 <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 8005694:	bf00      	nop
 8005696:	f001 fe7b 	bl	8007390 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <eeprom_wait+0x1c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b14      	cmp	r3, #20
 80056a4:	d9f7      	bls.n	8005696 <eeprom_wait+0x6>
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20006e54 	.word	0x20006e54

080056b0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af04      	add	r7, sp, #16
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80056bc:	f7ff ffe8 	bl	8005690 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80056cc:	9102      	str	r1, [sp, #8]
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2302      	movs	r3, #2
 80056d6:	21a0      	movs	r1, #160	; 0xa0
 80056d8:	4803      	ldr	r0, [pc, #12]	; (80056e8 <eeprom_read+0x38>)
 80056da:	f002 fec1 	bl	8008460 <HAL_I2C_Mem_Read>
 80056de:	4603      	mov	r3, r0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20006e58 	.word	0x20006e58

080056ec <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	; 0x28
 80056f0:	af04      	add	r7, sp, #16
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80056f8:	f7ff ffca 	bl	8005690 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005708:	9102      	str	r1, [sp, #8]
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	2302      	movs	r3, #2
 8005712:	21a0      	movs	r1, #160	; 0xa0
 8005714:	4807      	ldr	r0, [pc, #28]	; (8005734 <eeprom_write+0x48>)
 8005716:	f002 fda9 	bl	800826c <HAL_I2C_Mem_Write>
 800571a:	4603      	mov	r3, r0
 800571c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800571e:	f001 fe37 	bl	8007390 <HAL_GetTick>
 8005722:	4603      	mov	r3, r0
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <eeprom_write+0x4c>)
 8005726:	6013      	str	r3, [r2, #0]

    return rc;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20006e58 	.word	0x20006e58
 8005738:	20006e54 	.word	0x20006e54

0800573c <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b092      	sub	sp, #72	; 0x48
 8005740:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 8005742:	2101      	movs	r1, #1
 8005744:	4829      	ldr	r0, [pc, #164]	; (80057ec <eeprom_clear_scanning_data+0xb0>)
 8005746:	f7fe f923 	bl	8003990 <send_debug_msg>

	 uint8_t clear_page_sequence[64];

	 for (uint8_t i = 0; i < 64; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005750:	e00b      	b.n	800576a <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 8005752:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005756:	3348      	adds	r3, #72	; 0x48
 8005758:	443b      	add	r3, r7
 800575a:	22ff      	movs	r2, #255	; 0xff
 800575c:	f803 2c44 	strb.w	r2, [r3, #-68]
	 for (uint8_t i = 0; i < 64; i++)
 8005760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005764:	3301      	adds	r3, #1
 8005766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800576a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800576e:	2b3f      	cmp	r3, #63	; 0x3f
 8005770:	d9ef      	bls.n	8005752 <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	2240      	movs	r2, #64	; 0x40
 8005776:	4619      	mov	r1, r3
 8005778:	f44f 7080 	mov.w	r0, #256	; 0x100
 800577c:	f7ff ffb6 	bl	80056ec <eeprom_write>


	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005786:	e00e      	b.n	80057a6 <eeprom_clear_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 8005788:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800578c:	3305      	adds	r3, #5
 800578e:	019b      	lsls	r3, r3, #6
 8005790:	4618      	mov	r0, r3
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	2240      	movs	r2, #64	; 0x40
 8005796:	4619      	mov	r1, r3
 8005798:	f7ff ffa8 	bl	80056ec <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 800579c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80057a0:	3301      	adds	r3, #1
 80057a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80057a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	d9ec      	bls.n	8005788 <eeprom_clear_scanning_data+0x4c>
	}

	//clear services list
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80057b4:	e00e      	b.n	80057d4 <eeprom_clear_scanning_data+0x98>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80057b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057ba:	330f      	adds	r3, #15
 80057bc:	019b      	lsls	r3, r3, #6
 80057be:	4618      	mov	r0, r3
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	4619      	mov	r1, r3
 80057c6:	f7ff ff91 	bl	80056ec <eeprom_write>
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 80057ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057ce:	3301      	adds	r3, #1
 80057d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80057d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057d8:	2b63      	cmp	r3, #99	; 0x63
 80057da:	d9ec      	bls.n	80057b6 <eeprom_clear_scanning_data+0x7a>
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 80057dc:	2101      	movs	r1, #1
 80057de:	4804      	ldr	r0, [pc, #16]	; (80057f0 <eeprom_clear_scanning_data+0xb4>)
 80057e0:	f7fe f8d6 	bl	8003990 <send_debug_msg>
}
 80057e4:	bf00      	nop
 80057e6:	3748      	adds	r7, #72	; 0x48
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	0800e750 	.word	0x0800e750
 80057f0:	0800e770 	.word	0x0800e770

080057f4 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	461a      	mov	r2, r3
 8005800:	460b      	mov	r3, r1
 8005802:	72fb      	strb	r3, [r7, #11]
 8005804:	4613      	mov	r3, r2
 8005806:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8005808:	2101      	movs	r1, #1
 800580a:	4824      	ldr	r0, [pc, #144]	; (800589c <eeprom_save_scanning_data+0xa8>)
 800580c:	f7fe f8c0 	bl	8003990 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8005810:	f107 030a 	add.w	r3, r7, #10
 8005814:	2201      	movs	r2, #1
 8005816:	4619      	mov	r1, r3
 8005818:	f240 1005 	movw	r0, #261	; 0x105
 800581c:	f7ff ff66 	bl	80056ec <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8005820:	f107 030b 	add.w	r3, r7, #11
 8005824:	2201      	movs	r2, #1
 8005826:	4619      	mov	r1, r3
 8005828:	f44f 7083 	mov.w	r0, #262	; 0x106
 800582c:	f7ff ff5e 	bl	80056ec <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005830:	2300      	movs	r3, #0
 8005832:	75fb      	strb	r3, [r7, #23]
 8005834:	e00e      	b.n	8005854 <eeprom_save_scanning_data+0x60>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	3305      	adds	r3, #5
 800583a:	019b      	lsls	r3, r3, #6
 800583c:	4618      	mov	r0, r3
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	015b      	lsls	r3, r3, #5
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	2220      	movs	r2, #32
 8005848:	4619      	mov	r1, r3
 800584a:	f7ff ff4f 	bl	80056ec <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	3301      	adds	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
 8005854:	7abb      	ldrb	r3, [r7, #10]
 8005856:	7dfa      	ldrb	r2, [r7, #23]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3ec      	bcc.n	8005836 <eeprom_save_scanning_data+0x42>
	}

	//save services
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 800585c:	2300      	movs	r3, #0
 800585e:	75bb      	strb	r3, [r7, #22]
 8005860:	e010      	b.n	8005884 <eeprom_save_scanning_data+0x90>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE, &_services_list[services_index], sizeof(dab_service_t));
 8005862:	7dbb      	ldrb	r3, [r7, #22]
 8005864:	330f      	adds	r3, #15
 8005866:	019b      	lsls	r3, r3, #6
 8005868:	4618      	mov	r0, r3
 800586a:	7dbb      	ldrb	r3, [r7, #22]
 800586c:	2234      	movs	r2, #52	; 0x34
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	2234      	movs	r2, #52	; 0x34
 8005878:	4619      	mov	r1, r3
 800587a:	f7ff ff37 	bl	80056ec <eeprom_write>
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 800587e:	7dbb      	ldrb	r3, [r7, #22]
 8005880:	3301      	adds	r3, #1
 8005882:	75bb      	strb	r3, [r7, #22]
 8005884:	7afb      	ldrb	r3, [r7, #11]
 8005886:	7dba      	ldrb	r2, [r7, #22]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3ea      	bcc.n	8005862 <eeprom_save_scanning_data+0x6e>
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 800588c:	2101      	movs	r1, #1
 800588e:	4804      	ldr	r0, [pc, #16]	; (80058a0 <eeprom_save_scanning_data+0xac>)
 8005890:	f7fe f87e 	bl	8003990 <send_debug_msg>
}
 8005894:	bf00      	nop
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	0800e77c 	.word	0x0800e77c
 80058a0:	0800e798 	.word	0x0800e798

080058a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	; 0x30
 80058a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058aa:	f107 031c 	add.w	r3, r7, #28
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
 80058b4:	609a      	str	r2, [r3, #8]
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	4a6b      	ldr	r2, [pc, #428]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ca:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	4a64      	ldr	r2, [pc, #400]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	6313      	str	r3, [r2, #48]	; 0x30
 80058e6:	4b62      	ldr	r3, [pc, #392]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	4b5e      	ldr	r3, [pc, #376]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a5d      	ldr	r2, [pc, #372]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	4a56      	ldr	r2, [pc, #344]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	6313      	str	r3, [r2, #48]	; 0x30
 800591e:	4b54      	ldr	r3, [pc, #336]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4a4f      	ldr	r2, [pc, #316]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005934:	f043 0310 	orr.w	r3, r3, #16
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
 800593a:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	4b49      	ldr	r3, [pc, #292]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4a48      	ldr	r2, [pc, #288]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	6313      	str	r3, [r2, #48]	; 0x30
 8005956:	4b46      	ldr	r3, [pc, #280]	; (8005a70 <MX_GPIO_Init+0x1cc>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8005962:	2200      	movs	r2, #0
 8005964:	2130      	movs	r1, #48	; 0x30
 8005966:	4843      	ldr	r0, [pc, #268]	; (8005a74 <MX_GPIO_Init+0x1d0>)
 8005968:	f002 fb22 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005972:	4841      	ldr	r0, [pc, #260]	; (8005a78 <MX_GPIO_Init+0x1d4>)
 8005974:	f002 fb1c 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8005978:	2200      	movs	r2, #0
 800597a:	f24f 7180 	movw	r1, #63360	; 0xf780
 800597e:	483f      	ldr	r0, [pc, #252]	; (8005a7c <MX_GPIO_Init+0x1d8>)
 8005980:	f002 fb16 	bl	8007fb0 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8005984:	2200      	movs	r2, #0
 8005986:	2128      	movs	r1, #40	; 0x28
 8005988:	483d      	ldr	r0, [pc, #244]	; (8005a80 <MX_GPIO_Init+0x1dc>)
 800598a:	f002 fb11 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 800598e:	2310      	movs	r3, #16
 8005990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 800599a:	f107 031c 	add.w	r3, r7, #28
 800599e:	4619      	mov	r1, r3
 80059a0:	4838      	ldr	r0, [pc, #224]	; (8005a84 <MX_GPIO_Init+0x1e0>)
 80059a2:	f002 f951 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 80059a6:	2330      	movs	r3, #48	; 0x30
 80059a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059aa:	2301      	movs	r3, #1
 80059ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059b2:	2302      	movs	r3, #2
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059b6:	f107 031c 	add.w	r3, r7, #28
 80059ba:	4619      	mov	r1, r3
 80059bc:	482d      	ldr	r0, [pc, #180]	; (8005a74 <MX_GPIO_Init+0x1d0>)
 80059be:	f002 f943 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 80059c2:	2311      	movs	r3, #17
 80059c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059c6:	2300      	movs	r3, #0
 80059c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ce:	f107 031c 	add.w	r3, r7, #28
 80059d2:	4619      	mov	r1, r3
 80059d4:	482a      	ldr	r0, [pc, #168]	; (8005a80 <MX_GPIO_Init+0x1dc>)
 80059d6:	f002 f937 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80059da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e0:	2301      	movs	r3, #1
 80059e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80059ec:	f107 031c 	add.w	r3, r7, #28
 80059f0:	4619      	mov	r1, r3
 80059f2:	4821      	ldr	r0, [pc, #132]	; (8005a78 <MX_GPIO_Init+0x1d4>)
 80059f4:	f002 f928 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 80059f8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80059fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059fe:	2301      	movs	r3, #1
 8005a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a06:	2302      	movs	r3, #2
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a0a:	f107 031c 	add.w	r3, r7, #28
 8005a0e:	4619      	mov	r1, r3
 8005a10:	481a      	ldr	r0, [pc, #104]	; (8005a7c <MX_GPIO_Init+0x1d8>)
 8005a12:	f002 f919 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005a16:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a28:	f107 031c 	add.w	r3, r7, #28
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <MX_GPIO_Init+0x1d8>)
 8005a30:	f002 f90a 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005a40:	f107 031c 	add.w	r3, r7, #28
 8005a44:	4619      	mov	r1, r3
 8005a46:	480d      	ldr	r0, [pc, #52]	; (8005a7c <MX_GPIO_Init+0x1d8>)
 8005a48:	f002 f8fe 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8005a4c:	2328      	movs	r3, #40	; 0x28
 8005a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a50:	2301      	movs	r3, #1
 8005a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a5c:	f107 031c 	add.w	r3, r7, #28
 8005a60:	4619      	mov	r1, r3
 8005a62:	4807      	ldr	r0, [pc, #28]	; (8005a80 <MX_GPIO_Init+0x1dc>)
 8005a64:	f002 f8f0 	bl	8007c48 <HAL_GPIO_Init>

}
 8005a68:	bf00      	nop
 8005a6a:	3730      	adds	r7, #48	; 0x30
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40020800 	.word	0x40020800
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40020c00 	.word	0x40020c00
 8005a80:	40020400 	.word	0x40020400
 8005a84:	40020000 	.word	0x40020000

08005a88 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005a8c:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005a8e:	4a13      	ldr	r2, [pc, #76]	; (8005adc <MX_I2C1_Init+0x54>)
 8005a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005a94:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <MX_I2C1_Init+0x58>)
 8005a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005a98:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ac4:	4804      	ldr	r0, [pc, #16]	; (8005ad8 <MX_I2C1_Init+0x50>)
 8005ac6:	f002 fa8d 	bl	8007fe4 <HAL_I2C_Init>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005ad0:	f000 f982 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005ad4:	bf00      	nop
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20006e58 	.word	0x20006e58
 8005adc:	40005400 	.word	0x40005400
 8005ae0:	000186a0 	.word	0x000186a0

08005ae4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <MX_I2C3_Init+0x54>)
 8005aec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005af0:	4a12      	ldr	r2, [pc, #72]	; (8005b3c <MX_I2C3_Init+0x58>)
 8005af2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005b20:	4804      	ldr	r0, [pc, #16]	; (8005b34 <MX_I2C3_Init+0x50>)
 8005b22:	f002 fa5f 	bl	8007fe4 <HAL_I2C_Init>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005b2c:	f000 f954 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005b30:	bf00      	nop
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20006eac 	.word	0x20006eac
 8005b38:	40005c00 	.word	0x40005c00
 8005b3c:	000186a0 	.word	0x000186a0

08005b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b48:	f107 031c 	add.w	r3, r7, #28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a4a      	ldr	r2, [pc, #296]	; (8005c88 <HAL_I2C_MspInit+0x148>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d12c      	bne.n	8005bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	4b49      	ldr	r3, [pc, #292]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	4a48      	ldr	r2, [pc, #288]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	6313      	str	r3, [r2, #48]	; 0x30
 8005b72:	4b46      	ldr	r3, [pc, #280]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005b7e:	23c0      	movs	r3, #192	; 0xc0
 8005b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b82:	2312      	movs	r3, #18
 8005b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b8e:	2304      	movs	r3, #4
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b92:	f107 031c 	add.w	r3, r7, #28
 8005b96:	4619      	mov	r1, r3
 8005b98:	483d      	ldr	r0, [pc, #244]	; (8005c90 <HAL_I2C_MspInit+0x150>)
 8005b9a:	f002 f855 	bl	8007c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	4b3a      	ldr	r3, [pc, #232]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	4a39      	ldr	r2, [pc, #228]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bac:	6413      	str	r3, [r2, #64]	; 0x40
 8005bae:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005bba:	e060      	b.n	8005c7e <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a34      	ldr	r2, [pc, #208]	; (8005c94 <HAL_I2C_MspInit+0x154>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d15b      	bne.n	8005c7e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	4b30      	ldr	r3, [pc, #192]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005bd0:	f043 0304 	orr.w	r3, r3, #4
 8005bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd6:	4b2d      	ldr	r3, [pc, #180]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	4a28      	ldr	r2, [pc, #160]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf2:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c04:	2312      	movs	r3, #18
 8005c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005c10:	2304      	movs	r3, #4
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005c14:	f107 031c 	add.w	r3, r7, #28
 8005c18:	4619      	mov	r1, r3
 8005c1a:	481f      	ldr	r0, [pc, #124]	; (8005c98 <HAL_I2C_MspInit+0x158>)
 8005c1c:	f002 f814 	bl	8007c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c26:	2312      	movs	r3, #18
 8005c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005c32:	2304      	movs	r3, #4
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005c36:	f107 031c 	add.w	r3, r7, #28
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4817      	ldr	r0, [pc, #92]	; (8005c9c <HAL_I2C_MspInit+0x15c>)
 8005c3e:	f002 f803 	bl	8007c48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c50:	6413      	str	r3, [r2, #64]	; 0x40
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <HAL_I2C_MspInit+0x14c>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	2048      	movs	r0, #72	; 0x48
 8005c64:	f001 fc9f 	bl	80075a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005c68:	2048      	movs	r0, #72	; 0x48
 8005c6a:	f001 fcb8 	bl	80075de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2100      	movs	r1, #0
 8005c72:	2049      	movs	r0, #73	; 0x49
 8005c74:	f001 fc97 	bl	80075a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005c78:	2049      	movs	r0, #73	; 0x49
 8005c7a:	f001 fcb0 	bl	80075de <HAL_NVIC_EnableIRQ>
}
 8005c7e:	bf00      	nop
 8005c80:	3730      	adds	r7, #48	; 0x30
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40005400 	.word	0x40005400
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	40020400 	.word	0x40020400
 8005c94:	40005c00 	.word	0x40005c00
 8005c98:	40020800 	.word	0x40020800
 8005c9c:	40020000 	.word	0x40020000

08005ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ca4:	f001 fb0e 	bl	80072c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ca8:	f000 f82c 	bl	8005d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cac:	f7ff fdfa 	bl	80058a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8005cb0:	f7ff fcce 	bl	8005650 <MX_DMA_Init>
  MX_I2C1_Init();
 8005cb4:	f7ff fee8 	bl	8005a88 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005cb8:	f7ff ff14 	bl	8005ae4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005cbc:	f000 f892 	bl	8005de4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005cc0:	f000 f8c6 	bl	8005e50 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005cc4:	f000 fe84 	bl	80069d0 <MX_TIM3_Init>
  MX_UART5_Init();
 8005cc8:	f001 f9de 	bl	8007088 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005ccc:	f001 fa06 	bl	80070dc <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005cd0:	f000 fed8 	bl	8006a84 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005cd4:	f000 fefa 	bl	8006acc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4808      	ldr	r0, [pc, #32]	; (8005cfc <main+0x5c>)
 8005cdc:	f7fd fe58 	bl	8003990 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005ce0:	4807      	ldr	r0, [pc, #28]	; (8005d00 <main+0x60>)
 8005ce2:	f006 f9c7 	bl	800c074 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005ce6:	f7fa fc03 	bl	80004f0 <ILI9341_Init>

  Display_booting_screen();
 8005cea:	f7fd fe8b 	bl	8003a04 <Display_booting_screen>
  Si468x_dab_init();
 8005cee:	f7fb f9bf 	bl	8001070 <Si468x_dab_init>
  restore_from_eeprom();
 8005cf2:	f7fd fae7 	bl	80032c4 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005cf6:	f000 f999 	bl	800602c <state_machine>
 8005cfa:	e7fc      	b.n	8005cf6 <main+0x56>
 8005cfc:	0800ea70 	.word	0x0800ea70
 8005d00:	20007104 	.word	0x20007104

08005d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b094      	sub	sp, #80	; 0x50
 8005d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d0a:	f107 0320 	add.w	r3, r7, #32
 8005d0e:	2230      	movs	r2, #48	; 0x30
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f007 fb40 	bl	800d398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <SystemClock_Config+0xcc>)
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	4a27      	ldr	r2, [pc, #156]	; (8005dd0 <SystemClock_Config+0xcc>)
 8005d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6413      	str	r3, [r2, #64]	; 0x40
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <SystemClock_Config+0xcc>)
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d44:	2300      	movs	r3, #0
 8005d46:	607b      	str	r3, [r7, #4]
 8005d48:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <SystemClock_Config+0xd0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a21      	ldr	r2, [pc, #132]	; (8005dd4 <SystemClock_Config+0xd0>)
 8005d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <SystemClock_Config+0xd0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d60:	2301      	movs	r3, #1
 8005d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005d74:	2304      	movs	r3, #4
 8005d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8005d78:	23f0      	movs	r3, #240	; 0xf0
 8005d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005d80:	2304      	movs	r3, #4
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d84:	f107 0320 	add.w	r3, r7, #32
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f004 fdc5 	bl	800a918 <HAL_RCC_OscConfig>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005d94:	f000 f820 	bl	8005dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d98:	230f      	movs	r3, #15
 8005d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	2105      	movs	r1, #5
 8005db6:	4618      	mov	r0, r3
 8005db8:	f005 f826 	bl	800ae08 <HAL_RCC_ClockConfig>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005dc2:	f000 f809 	bl	8005dd8 <Error_Handler>
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3750      	adds	r7, #80	; 0x50
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	40007000 	.word	0x40007000

08005dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ddc:	b672      	cpsid	i
}
 8005dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005de0:	e7fe      	b.n	8005de0 <Error_Handler+0x8>
	...

08005de4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005de8:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <MX_SPI1_Init+0x68>)
 8005dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005dee:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e18:	2220      	movs	r2, #32
 8005e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e30:	220a      	movs	r2, #10
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e34:	4804      	ldr	r0, [pc, #16]	; (8005e48 <MX_SPI1_Init+0x64>)
 8005e36:	f005 fa07 	bl	800b248 <HAL_SPI_Init>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005e40:	f7ff ffca 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20006f00 	.word	0x20006f00
 8005e4c:	40013000 	.word	0x40013000

08005e50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005e54:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <MX_SPI2_Init+0x68>)
 8005e58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e8e:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ea0:	4804      	ldr	r0, [pc, #16]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005ea2:	f005 f9d1 	bl	800b248 <HAL_SPI_Init>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005eac:	f7ff ff94 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20006f58 	.word	0x20006f58
 8005eb8:	40003800 	.word	0x40003800

08005ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	; 0x30
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec4:	f107 031c 	add.w	r3, r7, #28
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	609a      	str	r2, [r3, #8]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a4d      	ldr	r2, [pc, #308]	; (8006010 <HAL_SPI_MspInit+0x154>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d12c      	bne.n	8005f38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	4b4c      	ldr	r3, [pc, #304]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	4a4b      	ldr	r2, [pc, #300]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eec:	6453      	str	r3, [r2, #68]	; 0x44
 8005eee:	4b49      	ldr	r3, [pc, #292]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	4b45      	ldr	r3, [pc, #276]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	4a44      	ldr	r2, [pc, #272]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	6313      	str	r3, [r2, #48]	; 0x30
 8005f0a:	4b42      	ldr	r3, [pc, #264]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005f16:	23e0      	movs	r3, #224	; 0xe0
 8005f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f22:	2303      	movs	r3, #3
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f26:	2305      	movs	r3, #5
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2a:	f107 031c 	add.w	r3, r7, #28
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4839      	ldr	r0, [pc, #228]	; (8006018 <HAL_SPI_MspInit+0x15c>)
 8005f32:	f001 fe89 	bl	8007c48 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005f36:	e066      	b.n	8006006 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a37      	ldr	r2, [pc, #220]	; (800601c <HAL_SPI_MspInit+0x160>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d161      	bne.n	8006006 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	4b33      	ldr	r3, [pc, #204]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a32      	ldr	r2, [pc, #200]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f50:	6413      	str	r3, [r2, #64]	; 0x40
 8005f52:	4b30      	ldr	r3, [pc, #192]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	4b2c      	ldr	r3, [pc, #176]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	4a2b      	ldr	r2, [pc, #172]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f68:	f043 0302 	orr.w	r3, r3, #2
 8005f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <HAL_SPI_MspInit+0x158>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8005f7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f80:	2302      	movs	r3, #2
 8005f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005f8c:	2305      	movs	r3, #5
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f90:	f107 031c 	add.w	r3, r7, #28
 8005f94:	4619      	mov	r1, r3
 8005f96:	4822      	ldr	r0, [pc, #136]	; (8006020 <HAL_SPI_MspInit+0x164>)
 8005f98:	f001 fe56 	bl	8007c48 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005f9c:	4b21      	ldr	r3, [pc, #132]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005f9e:	4a22      	ldr	r2, [pc, #136]	; (8006028 <HAL_SPI_MspInit+0x16c>)
 8005fa0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005faa:	2240      	movs	r2, #64	; 0x40
 8005fac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fae:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fba:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005fda:	4812      	ldr	r0, [pc, #72]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fdc:	f001 fb1a 	bl	8007614 <HAL_DMA_Init>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8005fe6:	f7ff fef7 	bl	8005dd8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005fee:	649a      	str	r2, [r3, #72]	; 0x48
 8005ff0:	4a0c      	ldr	r2, [pc, #48]	; (8006024 <HAL_SPI_MspInit+0x168>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	2024      	movs	r0, #36	; 0x24
 8005ffc:	f001 fad3 	bl	80075a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006000:	2024      	movs	r0, #36	; 0x24
 8006002:	f001 faec 	bl	80075de <HAL_NVIC_EnableIRQ>
}
 8006006:	bf00      	nop
 8006008:	3730      	adds	r7, #48	; 0x30
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40013000 	.word	0x40013000
 8006014:	40023800 	.word	0x40023800
 8006018:	40020000 	.word	0x40020000
 800601c:	40003800 	.word	0x40003800
 8006020:	40020400 	.word	0x40020400
 8006024:	20006fb0 	.word	0x20006fb0
 8006028:	40026070 	.word	0x40026070

0800602c <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	b097      	sub	sp, #92	; 0x5c
 8006030:	af06      	add	r7, sp, #24
	if(state_change_done)
 8006032:	4b64      	ldr	r3, [pc, #400]	; (80061c4 <state_machine+0x198>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 800603a:	f000 fe0d 	bl	8006c58 <Touch_read>
 800603e:	4603      	mov	r3, r0
 8006040:	4a61      	ldr	r2, [pc, #388]	; (80061c8 <state_machine+0x19c>)
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	e005      	b.n	8006052 <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 8006046:	4b60      	ldr	r3, [pc, #384]	; (80061c8 <state_machine+0x19c>)
 8006048:	2200      	movs	r2, #0
 800604a:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 800604c:	4b5e      	ldr	r3, [pc, #376]	; (80061c8 <state_machine+0x19c>)
 800604e:	2200      	movs	r2, #0
 8006050:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 8006052:	4c5e      	ldr	r4, [pc, #376]	; (80061cc <state_machine+0x1a0>)
 8006054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006058:	4618      	mov	r0, r3
 800605a:	f7fd fc7d 	bl	8003958 <get_dab_management>
 800605e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 8006068:	f7fd fc88 	bl	800397c <get_dls_label>
 800606c:	4603      	mov	r3, r0
 800606e:	4a58      	ldr	r2, [pc, #352]	; (80061d0 <state_machine+0x1a4>)
 8006070:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 8006072:	f7fd f815 	bl	80030a0 <Si468x_dab_get_time>


	switch(system_state)
 8006076:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <state_machine+0x1a8>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b04      	cmp	r3, #4
 800607c:	f200 83e0 	bhi.w	8006840 <state_machine+0x814>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <state_machine+0x5c>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	0800609d 	.word	0x0800609d
 800608c:	080061ed 	.word	0x080061ed
 8006090:	08006655 	.word	0x08006655
 8006094:	08006585 	.word	0x08006585
 8006098:	080066c9 	.word	0x080066c9
	{
	case main_screen:

		if(!state_change_done)
 800609c:	4b49      	ldr	r3, [pc, #292]	; (80061c4 <state_machine+0x198>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d14e      	bne.n	8006142 <state_machine+0x116>
		{
			if(!dab_management_to_display.total_services)
 80060a4:	4b49      	ldr	r3, [pc, #292]	; (80061cc <state_machine+0x1a0>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <state_machine+0x88>
			{
				playing_state = not_playing;
 80060ac:	4b4a      	ldr	r3, [pc, #296]	; (80061d8 <state_machine+0x1ac>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e028      	b.n	8006106 <state_machine+0xda>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 80060b4:	f7fd fc3c 	bl	8003930 <get_dab_service_list>
 80060b8:	4603      	mov	r3, r0
 80060ba:	4a48      	ldr	r2, [pc, #288]	; (80061dc <state_machine+0x1b0>)
 80060bc:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 80060be:	f7fd fc41 	bl	8003944 <get_dab_ensemble_list>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4a46      	ldr	r2, [pc, #280]	; (80061e0 <state_machine+0x1b4>)
 80060c6:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 80060c8:	4b46      	ldr	r3, [pc, #280]	; (80061e4 <state_machine+0x1b8>)
 80060ca:	2232      	movs	r2, #50	; 0x32
 80060cc:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 80060ce:	e014      	b.n	80060fa <state_machine+0xce>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 80060d0:	4c45      	ldr	r4, [pc, #276]	; (80061e8 <state_machine+0x1bc>)
 80060d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc fcd4 	bl	8002a84 <Si468x_dab_get_audio_info>
 80060dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 80060e6:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <state_machine+0x1b8>)
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	4b3d      	ldr	r3, [pc, #244]	; (80061e4 <state_machine+0x1b8>)
 80060f0:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 80060f2:	4b3c      	ldr	r3, [pc, #240]	; (80061e4 <state_machine+0x1b8>)
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <state_machine+0xd8>
				while(!dab_audio_info_to_display.audio_sample_rate)
 80060fa:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <state_machine+0x1bc>)
 80060fc:	885b      	ldrh	r3, [r3, #2]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0e6      	beq.n	80060d0 <state_machine+0xa4>
 8006102:	e000      	b.n	8006106 <state_machine+0xda>
					{
						break;
 8006104:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 8006106:	f7fd fcef 	bl	8003ae8 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 800610a:	4b34      	ldr	r3, [pc, #208]	; (80061dc <state_machine+0x1b0>)
 800610c:	681e      	ldr	r6, [r3, #0]
 800610e:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <state_machine+0x1b4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	4c2d      	ldr	r4, [pc, #180]	; (80061cc <state_machine+0x1a0>)
 8006116:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <state_machine+0x1bc>)
 8006118:	ad02      	add	r5, sp, #8
 800611a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800611c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006120:	466a      	mov	r2, sp
 8006122:	f104 0308 	add.w	r3, r4, #8
 8006126:	e893 0003 	ldmia.w	r3, {r0, r1}
 800612a:	e882 0003 	stmia.w	r2, {r0, r1}
 800612e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4630      	mov	r0, r6
 8006136:	f7fd fd65 	bl	8003c04 <Display_main_screen_data>
			state_change_done = 1;
 800613a:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <state_machine+0x198>)
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e00d      	b.n	800615e <state_machine+0x132>
		}

		else
		{
			if(playing_state == playing)
 8006142:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <state_machine+0x1ac>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <state_machine+0x12e>
			{
				Si468x_dab_get_digital_service_data();
 800614a:	f7fc fe2f 	bl	8002dac <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 800614e:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <state_machine+0x1a4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd feaa 	bl	8003eac <Display_main_screen_dls>
 8006158:	e001      	b.n	800615e <state_machine+0x132>
			}
			else
			{
				Display_main_screen_empty();
 800615a:	f7fd fee3 	bl	8003f24 <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <state_machine+0x19c>)
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	2b05      	cmp	r3, #5
 8006164:	d911      	bls.n	800618a <state_machine+0x15e>
 8006166:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <state_machine+0x19c>)
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2b9c      	cmp	r3, #156	; 0x9c
 800616c:	d80d      	bhi.n	800618a <state_machine+0x15e>
 800616e:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <state_machine+0x19c>)
 8006170:	885b      	ldrh	r3, [r3, #2]
 8006172:	2bc3      	cmp	r3, #195	; 0xc3
 8006174:	d909      	bls.n	800618a <state_machine+0x15e>
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <state_machine+0x19c>)
 8006178:	885b      	ldrh	r3, [r3, #2]
 800617a:	2bea      	cmp	r3, #234	; 0xea
 800617c:	d805      	bhi.n	800618a <state_machine+0x15e>
		{
			state_change_done = 0;
 800617e:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <state_machine+0x198>)
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006184:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <state_machine+0x1a8>)
 8006186:	2204      	movs	r2, #4
 8006188:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <state_machine+0x19c>)
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2ba3      	cmp	r3, #163	; 0xa3
 8006190:	f240 8358 	bls.w	8006844 <state_machine+0x818>
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <state_machine+0x19c>)
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800619c:	f200 8352 	bhi.w	8006844 <state_machine+0x818>
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <state_machine+0x19c>)
 80061a2:	885b      	ldrh	r3, [r3, #2]
 80061a4:	2bc3      	cmp	r3, #195	; 0xc3
 80061a6:	f240 834d 	bls.w	8006844 <state_machine+0x818>
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <state_machine+0x19c>)
 80061ac:	885b      	ldrh	r3, [r3, #2]
 80061ae:	2bea      	cmp	r3, #234	; 0xea
 80061b0:	f200 8348 	bhi.w	8006844 <state_machine+0x818>
		{
			state_change_done = 0;
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <state_machine+0x198>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <state_machine+0x1a8>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
		}

		break;
 80061c0:	e340      	b.n	8006844 <state_machine+0x818>
 80061c2:	bf00      	nop
 80061c4:	20007011 	.word	0x20007011
 80061c8:	20007018 	.word	0x20007018
 80061cc:	20007044 	.word	0x20007044
 80061d0:	2000706c 	.word	0x2000706c
 80061d4:	20007010 	.word	0x20007010
 80061d8:	20000150 	.word	0x20000150
 80061dc:	20007054 	.word	0x20007054
 80061e0:	20007058 	.word	0x20007058
 80061e4:	20007072 	.word	0x20007072
 80061e8:	2000705c 	.word	0x2000705c

	case services_list_screen:
		if(!state_change_done)
 80061ec:	4b7d      	ldr	r3, [pc, #500]	; (80063e4 <state_machine+0x3b8>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d114      	bne.n	800621e <state_machine+0x1f2>
		{
			services_list_to_display = get_dab_service_list();
 80061f4:	f7fd fb9c 	bl	8003930 <get_dab_service_list>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4a7b      	ldr	r2, [pc, #492]	; (80063e8 <state_machine+0x3bc>)
 80061fc:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 80061fe:	f7fd fef7 	bl	8003ff0 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8006202:	4b7a      	ldr	r3, [pc, #488]	; (80063ec <state_machine+0x3c0>)
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	4b78      	ldr	r3, [pc, #480]	; (80063e8 <state_machine+0x3bc>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b79      	ldr	r3, [pc, #484]	; (80063f0 <state_machine+0x3c4>)
 800620c:	9201      	str	r2, [sp, #4]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	9200      	str	r2, [sp, #0]
 8006212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006214:	f7fd ffb0 	bl	8004178 <Display_stations_list_data>
			state_change_done = 1;
 8006218:	4b72      	ldr	r3, [pc, #456]	; (80063e4 <state_machine+0x3b8>)
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800621e:	4b75      	ldr	r3, [pc, #468]	; (80063f4 <state_machine+0x3c8>)
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	2b05      	cmp	r3, #5
 8006224:	d911      	bls.n	800624a <state_machine+0x21e>
 8006226:	4b73      	ldr	r3, [pc, #460]	; (80063f4 <state_machine+0x3c8>)
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	2b9c      	cmp	r3, #156	; 0x9c
 800622c:	d80d      	bhi.n	800624a <state_machine+0x21e>
 800622e:	4b71      	ldr	r3, [pc, #452]	; (80063f4 <state_machine+0x3c8>)
 8006230:	885b      	ldrh	r3, [r3, #2]
 8006232:	2bc3      	cmp	r3, #195	; 0xc3
 8006234:	d909      	bls.n	800624a <state_machine+0x21e>
 8006236:	4b6f      	ldr	r3, [pc, #444]	; (80063f4 <state_machine+0x3c8>)
 8006238:	885b      	ldrh	r3, [r3, #2]
 800623a:	2bea      	cmp	r3, #234	; 0xea
 800623c:	d805      	bhi.n	800624a <state_machine+0x21e>
		{
			state_change_done = 0;
 800623e:	4b69      	ldr	r3, [pc, #420]	; (80063e4 <state_machine+0x3b8>)
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006244:	4b6c      	ldr	r3, [pc, #432]	; (80063f8 <state_machine+0x3cc>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800624a:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <state_machine+0x3c8>)
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	2ba3      	cmp	r3, #163	; 0xa3
 8006250:	d912      	bls.n	8006278 <state_machine+0x24c>
 8006252:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <state_machine+0x3c8>)
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800625a:	d80d      	bhi.n	8006278 <state_machine+0x24c>
 800625c:	4b65      	ldr	r3, [pc, #404]	; (80063f4 <state_machine+0x3c8>)
 800625e:	885b      	ldrh	r3, [r3, #2]
 8006260:	2bc3      	cmp	r3, #195	; 0xc3
 8006262:	d909      	bls.n	8006278 <state_machine+0x24c>
 8006264:	4b63      	ldr	r3, [pc, #396]	; (80063f4 <state_machine+0x3c8>)
 8006266:	885b      	ldrh	r3, [r3, #2]
 8006268:	2bea      	cmp	r3, #234	; 0xea
 800626a:	d805      	bhi.n	8006278 <state_machine+0x24c>
		{
			state_change_done = 0;
 800626c:	4b5d      	ldr	r3, [pc, #372]	; (80063e4 <state_machine+0x3b8>)
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8006272:	4b61      	ldr	r3, [pc, #388]	; (80063f8 <state_machine+0x3cc>)
 8006274:	2203      	movs	r2, #3
 8006276:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006278:	4b5e      	ldr	r3, [pc, #376]	; (80063f4 <state_machine+0x3c8>)
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006280:	d930      	bls.n	80062e4 <state_machine+0x2b8>
 8006282:	4b5c      	ldr	r3, [pc, #368]	; (80063f4 <state_machine+0x3c8>)
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800628a:	d82b      	bhi.n	80062e4 <state_machine+0x2b8>
 800628c:	4b59      	ldr	r3, [pc, #356]	; (80063f4 <state_machine+0x3c8>)
 800628e:	885b      	ldrh	r3, [r3, #2]
 8006290:	2b14      	cmp	r3, #20
 8006292:	d927      	bls.n	80062e4 <state_machine+0x2b8>
 8006294:	4b57      	ldr	r3, [pc, #348]	; (80063f4 <state_machine+0x3c8>)
 8006296:	885b      	ldrh	r3, [r3, #2]
 8006298:	2b65      	cmp	r3, #101	; 0x65
 800629a:	d823      	bhi.n	80062e4 <state_machine+0x2b8>
		{
			if(dab_management_to_display.total_services)
 800629c:	4b54      	ldr	r3, [pc, #336]	; (80063f0 <state_machine+0x3c4>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01f      	beq.n	80062e4 <state_machine+0x2b8>
			{
				srv_list_start_index--;
 80062a4:	4b51      	ldr	r3, [pc, #324]	; (80063ec <state_machine+0x3c0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	4a50      	ldr	r2, [pc, #320]	; (80063ec <state_machine+0x3c0>)
 80062ac:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 80062ae:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <state_machine+0x3c4>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b4d      	ldr	r3, [pc, #308]	; (80063ec <state_machine+0x3c0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	db03      	blt.n	80062c4 <state_machine+0x298>
 80062bc:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <state_machine+0x3c0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da04      	bge.n	80062ce <state_machine+0x2a2>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 80062c4:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <state_machine+0x3c4>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	4a48      	ldr	r2, [pc, #288]	; (80063ec <state_machine+0x3c0>)
 80062cc:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80062ce:	4b47      	ldr	r3, [pc, #284]	; (80063ec <state_machine+0x3c0>)
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	4b45      	ldr	r3, [pc, #276]	; (80063e8 <state_machine+0x3bc>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <state_machine+0x3c4>)
 80062d8:	9201      	str	r2, [sp, #4]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	9200      	str	r2, [sp, #0]
 80062de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062e0:	f7fd ff4a 	bl	8004178 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 80062e4:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <state_machine+0x3c8>)
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80062ec:	d92a      	bls.n	8006344 <state_machine+0x318>
 80062ee:	4b41      	ldr	r3, [pc, #260]	; (80063f4 <state_machine+0x3c8>)
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80062f6:	d825      	bhi.n	8006344 <state_machine+0x318>
 80062f8:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <state_machine+0x3c8>)
 80062fa:	885b      	ldrh	r3, [r3, #2]
 80062fc:	2b6c      	cmp	r3, #108	; 0x6c
 80062fe:	d921      	bls.n	8006344 <state_machine+0x318>
 8006300:	4b3c      	ldr	r3, [pc, #240]	; (80063f4 <state_machine+0x3c8>)
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	2bbd      	cmp	r3, #189	; 0xbd
 8006306:	d81d      	bhi.n	8006344 <state_machine+0x318>
		{
			if(dab_management_to_display.total_services)
 8006308:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <state_machine+0x3c4>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d019      	beq.n	8006344 <state_machine+0x318>
			{
				srv_list_start_index++;
 8006310:	4b36      	ldr	r3, [pc, #216]	; (80063ec <state_machine+0x3c0>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	4a35      	ldr	r2, [pc, #212]	; (80063ec <state_machine+0x3c0>)
 8006318:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 800631a:	4b35      	ldr	r3, [pc, #212]	; (80063f0 <state_machine+0x3c4>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <state_machine+0x3c0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	dc02      	bgt.n	800632e <state_machine+0x302>
				{
					srv_list_start_index = 0;
 8006328:	4b30      	ldr	r3, [pc, #192]	; (80063ec <state_machine+0x3c0>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800632e:	4b2f      	ldr	r3, [pc, #188]	; (80063ec <state_machine+0x3c0>)
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <state_machine+0x3bc>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b2e      	ldr	r3, [pc, #184]	; (80063f0 <state_machine+0x3c4>)
 8006338:	9201      	str	r2, [sp, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	9200      	str	r2, [sp, #0]
 800633e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006340:	f7fd ff1a 	bl	8004178 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 8006344:	4b2b      	ldr	r3, [pc, #172]	; (80063f4 <state_machine+0x3c8>)
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	2b05      	cmp	r3, #5
 800634a:	d91f      	bls.n	800638c <state_machine+0x360>
 800634c:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <state_machine+0x3c8>)
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006354:	d81a      	bhi.n	800638c <state_machine+0x360>
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <state_machine+0x3c8>)
 8006358:	885b      	ldrh	r3, [r3, #2]
 800635a:	2b14      	cmp	r3, #20
 800635c:	d916      	bls.n	800638c <state_machine+0x360>
 800635e:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <state_machine+0x3c8>)
 8006360:	885b      	ldrh	r3, [r3, #2]
 8006362:	2b31      	cmp	r3, #49	; 0x31
 8006364:	d812      	bhi.n	800638c <state_machine+0x360>
		{
			if(dab_management_to_display.total_services)
 8006366:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <state_machine+0x3c4>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <state_machine+0x360>
			{
				state_change_done = 0;
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <state_machine+0x3b8>)
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8006374:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <state_machine+0x3c0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	4618      	mov	r0, r3
 800637c:	f7fc ff0c 	bl	8003198 <play_station>
				playing_state = playing;
 8006380:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <state_machine+0x3d0>)
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006386:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <state_machine+0x3cc>)
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 800638c:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <state_machine+0x3c8>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	2b05      	cmp	r3, #5
 8006392:	d943      	bls.n	800641c <state_machine+0x3f0>
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <state_machine+0x3c8>)
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800639c:	d83e      	bhi.n	800641c <state_machine+0x3f0>
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <state_machine+0x3c8>)
 80063a0:	885b      	ldrh	r3, [r3, #2]
 80063a2:	2b37      	cmp	r3, #55	; 0x37
 80063a4:	d93a      	bls.n	800641c <state_machine+0x3f0>
 80063a6:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <state_machine+0x3c8>)
 80063a8:	885b      	ldrh	r3, [r3, #2]
 80063aa:	2b54      	cmp	r3, #84	; 0x54
 80063ac:	d836      	bhi.n	800641c <state_machine+0x3f0>
		{
			if(dab_management_to_display.total_services)
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <state_machine+0x3c4>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d032      	beq.n	800641c <state_machine+0x3f0>
			{
				state_change_done = 0;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <state_machine+0x3b8>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <state_machine+0x3c0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	4a0b      	ldr	r2, [pc, #44]	; (80063f0 <state_machine+0x3c4>)
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	db1a      	blt.n	8006400 <state_machine+0x3d4>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <state_machine+0x3c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <state_machine+0x3c4>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	3301      	adds	r3, #1
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fc fedb 	bl	8003198 <play_station>
 80063e2:	e015      	b.n	8006410 <state_machine+0x3e4>
 80063e4:	20007011 	.word	0x20007011
 80063e8:	20007054 	.word	0x20007054
 80063ec:	20007014 	.word	0x20007014
 80063f0:	20007044 	.word	0x20007044
 80063f4:	20007018 	.word	0x20007018
 80063f8:	20007010 	.word	0x20007010
 80063fc:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 8006400:	4b8d      	ldr	r3, [pc, #564]	; (8006638 <state_machine+0x60c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	3301      	adds	r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	4618      	mov	r0, r3
 800640c:	f7fc fec4 	bl	8003198 <play_station>
				}

				playing_state = playing;
 8006410:	4b8a      	ldr	r3, [pc, #552]	; (800663c <state_machine+0x610>)
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006416:	4b8a      	ldr	r3, [pc, #552]	; (8006640 <state_machine+0x614>)
 8006418:	2200      	movs	r2, #0
 800641a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 800641c:	4b89      	ldr	r3, [pc, #548]	; (8006644 <state_machine+0x618>)
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	2b05      	cmp	r3, #5
 8006422:	d935      	bls.n	8006490 <state_machine+0x464>
 8006424:	4b87      	ldr	r3, [pc, #540]	; (8006644 <state_machine+0x618>)
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800642c:	d830      	bhi.n	8006490 <state_machine+0x464>
 800642e:	4b85      	ldr	r3, [pc, #532]	; (8006644 <state_machine+0x618>)
 8006430:	885b      	ldrh	r3, [r3, #2]
 8006432:	2b5a      	cmp	r3, #90	; 0x5a
 8006434:	d92c      	bls.n	8006490 <state_machine+0x464>
 8006436:	4b83      	ldr	r3, [pc, #524]	; (8006644 <state_machine+0x618>)
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	2b77      	cmp	r3, #119	; 0x77
 800643c:	d828      	bhi.n	8006490 <state_machine+0x464>
		{
			if(dab_management_to_display.total_services)
 800643e:	4b82      	ldr	r3, [pc, #520]	; (8006648 <state_machine+0x61c>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d024      	beq.n	8006490 <state_machine+0x464>
			{
				state_change_done = 0;
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <state_machine+0x620>)
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 800644c:	4b7a      	ldr	r3, [pc, #488]	; (8006638 <state_machine+0x60c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3302      	adds	r3, #2
 8006452:	4a7d      	ldr	r2, [pc, #500]	; (8006648 <state_machine+0x61c>)
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	4293      	cmp	r3, r2
 8006458:	db0c      	blt.n	8006474 <state_machine+0x448>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 800645a:	4b77      	ldr	r3, [pc, #476]	; (8006638 <state_machine+0x60c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	4b79      	ldr	r3, [pc, #484]	; (8006648 <state_machine+0x61c>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	b2db      	uxtb	r3, r3
 8006468:	3302      	adds	r3, #2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4618      	mov	r0, r3
 800646e:	f7fc fe93 	bl	8003198 <play_station>
 8006472:	e007      	b.n	8006484 <state_machine+0x458>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 8006474:	4b70      	ldr	r3, [pc, #448]	; (8006638 <state_machine+0x60c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	3302      	adds	r3, #2
 800647c:	b2db      	uxtb	r3, r3
 800647e:	4618      	mov	r0, r3
 8006480:	f7fc fe8a 	bl	8003198 <play_station>
				}

				playing_state = playing;
 8006484:	4b6d      	ldr	r3, [pc, #436]	; (800663c <state_machine+0x610>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800648a:	4b6d      	ldr	r3, [pc, #436]	; (8006640 <state_machine+0x614>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 8006490:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <state_machine+0x618>)
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	2b05      	cmp	r3, #5
 8006496:	d935      	bls.n	8006504 <state_machine+0x4d8>
 8006498:	4b6a      	ldr	r3, [pc, #424]	; (8006644 <state_machine+0x618>)
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80064a0:	d830      	bhi.n	8006504 <state_machine+0x4d8>
 80064a2:	4b68      	ldr	r3, [pc, #416]	; (8006644 <state_machine+0x618>)
 80064a4:	885b      	ldrh	r3, [r3, #2]
 80064a6:	2b7d      	cmp	r3, #125	; 0x7d
 80064a8:	d92c      	bls.n	8006504 <state_machine+0x4d8>
 80064aa:	4b66      	ldr	r3, [pc, #408]	; (8006644 <state_machine+0x618>)
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	2b9a      	cmp	r3, #154	; 0x9a
 80064b0:	d828      	bhi.n	8006504 <state_machine+0x4d8>
		{
			if(dab_management_to_display.total_services)
 80064b2:	4b65      	ldr	r3, [pc, #404]	; (8006648 <state_machine+0x61c>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d024      	beq.n	8006504 <state_machine+0x4d8>
			{
				state_change_done = 0;
 80064ba:	4b64      	ldr	r3, [pc, #400]	; (800664c <state_machine+0x620>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 80064c0:	4b5d      	ldr	r3, [pc, #372]	; (8006638 <state_machine+0x60c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3303      	adds	r3, #3
 80064c6:	4a60      	ldr	r2, [pc, #384]	; (8006648 <state_machine+0x61c>)
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	db0c      	blt.n	80064e8 <state_machine+0x4bc>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 80064ce:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <state_machine+0x60c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <state_machine+0x61c>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	3303      	adds	r3, #3
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fc fe59 	bl	8003198 <play_station>
 80064e6:	e007      	b.n	80064f8 <state_machine+0x4cc>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 80064e8:	4b53      	ldr	r3, [pc, #332]	; (8006638 <state_machine+0x60c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	3303      	adds	r3, #3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fc fe50 	bl	8003198 <play_station>
				}

				playing_state = playing;
 80064f8:	4b50      	ldr	r3, [pc, #320]	; (800663c <state_machine+0x610>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80064fe:	4b50      	ldr	r3, [pc, #320]	; (8006640 <state_machine+0x614>)
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 8006504:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <state_machine+0x618>)
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	2b05      	cmp	r3, #5
 800650a:	f240 819d 	bls.w	8006848 <state_machine+0x81c>
 800650e:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <state_machine+0x618>)
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006516:	f200 8197 	bhi.w	8006848 <state_machine+0x81c>
 800651a:	4b4a      	ldr	r3, [pc, #296]	; (8006644 <state_machine+0x618>)
 800651c:	885b      	ldrh	r3, [r3, #2]
 800651e:	2ba0      	cmp	r3, #160	; 0xa0
 8006520:	f240 8192 	bls.w	8006848 <state_machine+0x81c>
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <state_machine+0x618>)
 8006526:	885b      	ldrh	r3, [r3, #2]
 8006528:	2bbd      	cmp	r3, #189	; 0xbd
 800652a:	f200 818d 	bhi.w	8006848 <state_machine+0x81c>
		{
			if(dab_management_to_display.total_services)
 800652e:	4b46      	ldr	r3, [pc, #280]	; (8006648 <state_machine+0x61c>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8188 	beq.w	8006848 <state_machine+0x81c>
			{
				state_change_done = 0;
 8006538:	4b44      	ldr	r3, [pc, #272]	; (800664c <state_machine+0x620>)
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 800653e:	4b3e      	ldr	r3, [pc, #248]	; (8006638 <state_machine+0x60c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3304      	adds	r3, #4
 8006544:	4a40      	ldr	r2, [pc, #256]	; (8006648 <state_machine+0x61c>)
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	4293      	cmp	r3, r2
 800654a:	db0c      	blt.n	8006566 <state_machine+0x53a>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 800654c:	4b3a      	ldr	r3, [pc, #232]	; (8006638 <state_machine+0x60c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <state_machine+0x61c>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	3304      	adds	r3, #4
 800655c:	b2db      	uxtb	r3, r3
 800655e:	4618      	mov	r0, r3
 8006560:	f7fc fe1a 	bl	8003198 <play_station>
 8006564:	e007      	b.n	8006576 <state_machine+0x54a>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 8006566:	4b34      	ldr	r3, [pc, #208]	; (8006638 <state_machine+0x60c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	3304      	adds	r3, #4
 800656e:	b2db      	uxtb	r3, r3
 8006570:	4618      	mov	r0, r3
 8006572:	f7fc fe11 	bl	8003198 <play_station>
				}

				playing_state = playing;
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <state_machine+0x610>)
 8006578:	2201      	movs	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800657c:	4b30      	ldr	r3, [pc, #192]	; (8006640 <state_machine+0x614>)
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8006582:	e161      	b.n	8006848 <state_machine+0x81c>

	case signal_info:
		if(!state_change_done)
 8006584:	4b31      	ldr	r3, [pc, #196]	; (800664c <state_machine+0x620>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <state_machine+0x56a>
		{
			Display_dab_digrad_status_background();
 800658c:	f7fe f990 	bl	80048b0 <Display_dab_digrad_status_background>
			state_change_done = 1;
 8006590:	4b2e      	ldr	r3, [pc, #184]	; (800664c <state_machine+0x620>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8006596:	4c2e      	ldr	r4, [pc, #184]	; (8006650 <state_machine+0x624>)
 8006598:	f107 0308 	add.w	r3, r7, #8
 800659c:	4618      	mov	r0, r3
 800659e:	f7fb fb5f 	bl	8001c60 <Si468x_dab_digrad_status>
 80065a2:	4625      	mov	r5, r4
 80065a4:	f107 0408 	add.w	r4, r7, #8
 80065a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065b4:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 80065b8:	4e25      	ldr	r6, [pc, #148]	; (8006650 <state_machine+0x624>)
 80065ba:	466d      	mov	r5, sp
 80065bc:	f106 0410 	add.w	r4, r6, #16
 80065c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80065cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80065d0:	f7fe fb06 	bl	8004be0 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80065d4:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <state_machine+0x618>)
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d911      	bls.n	8006600 <state_machine+0x5d4>
 80065dc:	4b19      	ldr	r3, [pc, #100]	; (8006644 <state_machine+0x618>)
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	2b9c      	cmp	r3, #156	; 0x9c
 80065e2:	d80d      	bhi.n	8006600 <state_machine+0x5d4>
 80065e4:	4b17      	ldr	r3, [pc, #92]	; (8006644 <state_machine+0x618>)
 80065e6:	885b      	ldrh	r3, [r3, #2]
 80065e8:	2bc3      	cmp	r3, #195	; 0xc3
 80065ea:	d909      	bls.n	8006600 <state_machine+0x5d4>
 80065ec:	4b15      	ldr	r3, [pc, #84]	; (8006644 <state_machine+0x618>)
 80065ee:	885b      	ldrh	r3, [r3, #2]
 80065f0:	2bea      	cmp	r3, #234	; 0xea
 80065f2:	d805      	bhi.n	8006600 <state_machine+0x5d4>
		{
			state_change_done = 0;
 80065f4:	4b15      	ldr	r3, [pc, #84]	; (800664c <state_machine+0x620>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <state_machine+0x614>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006600:	4b10      	ldr	r3, [pc, #64]	; (8006644 <state_machine+0x618>)
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	2ba3      	cmp	r3, #163	; 0xa3
 8006606:	f240 8121 	bls.w	800684c <state_machine+0x820>
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <state_machine+0x618>)
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006612:	f200 811b 	bhi.w	800684c <state_machine+0x820>
 8006616:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <state_machine+0x618>)
 8006618:	885b      	ldrh	r3, [r3, #2]
 800661a:	2bc3      	cmp	r3, #195	; 0xc3
 800661c:	f240 8116 	bls.w	800684c <state_machine+0x820>
 8006620:	4b08      	ldr	r3, [pc, #32]	; (8006644 <state_machine+0x618>)
 8006622:	885b      	ldrh	r3, [r3, #2]
 8006624:	2bea      	cmp	r3, #234	; 0xea
 8006626:	f200 8111 	bhi.w	800684c <state_machine+0x820>
		{
			state_change_done = 0;
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <state_machine+0x620>)
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <state_machine+0x614>)
 8006632:	2204      	movs	r2, #4
 8006634:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006636:	e109      	b.n	800684c <state_machine+0x820>
 8006638:	20007014 	.word	0x20007014
 800663c:	20000150 	.word	0x20000150
 8006640:	20007010 	.word	0x20007010
 8006644:	20007018 	.word	0x20007018
 8006648:	20007044 	.word	0x20007044
 800664c:	20007011 	.word	0x20007011
 8006650:	2000701c 	.word	0x2000701c

	case scanning:
		if(!state_change_done)
 8006654:	4b82      	ldr	r3, [pc, #520]	; (8006860 <state_machine+0x834>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d116      	bne.n	800668a <state_machine+0x65e>
		{
			playing_state = not_playing;
 800665c:	4b81      	ldr	r3, [pc, #516]	; (8006864 <state_machine+0x838>)
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 8006662:	f7fd ff23 	bl	80044ac <Display_scanning_screen_background>
			state_change_done = 1;
 8006666:	4b7e      	ldr	r3, [pc, #504]	; (8006860 <state_machine+0x834>)
 8006668:	2201      	movs	r2, #1
 800666a:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 800666c:	f7fb ff24 	bl	80024b8 <Si468x_dab_full_scan>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	4b7c      	ldr	r3, [pc, #496]	; (8006868 <state_machine+0x83c>)
 8006676:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006678:	4b7b      	ldr	r3, [pc, #492]	; (8006868 <state_machine+0x83c>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <state_machine+0x65e>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006680:	f7fe f8e0 	bl	8004844 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8006684:	4b78      	ldr	r3, [pc, #480]	; (8006868 <state_machine+0x83c>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800668a:	4b78      	ldr	r3, [pc, #480]	; (800686c <state_machine+0x840>)
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	2b05      	cmp	r3, #5
 8006690:	f240 80de 	bls.w	8006850 <state_machine+0x824>
 8006694:	4b75      	ldr	r3, [pc, #468]	; (800686c <state_machine+0x840>)
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800669c:	f200 80d8 	bhi.w	8006850 <state_machine+0x824>
 80066a0:	4b72      	ldr	r3, [pc, #456]	; (800686c <state_machine+0x840>)
 80066a2:	885b      	ldrh	r3, [r3, #2]
 80066a4:	2bc3      	cmp	r3, #195	; 0xc3
 80066a6:	f240 80d3 	bls.w	8006850 <state_machine+0x824>
 80066aa:	4b70      	ldr	r3, [pc, #448]	; (800686c <state_machine+0x840>)
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	2bea      	cmp	r3, #234	; 0xea
 80066b0:	f200 80ce 	bhi.w	8006850 <state_machine+0x824>
		{
			scan_cancel_flag = 1;
 80066b4:	4b6e      	ldr	r3, [pc, #440]	; (8006870 <state_machine+0x844>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 80066ba:	4b69      	ldr	r3, [pc, #420]	; (8006860 <state_machine+0x834>)
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80066c0:	4b6c      	ldr	r3, [pc, #432]	; (8006874 <state_machine+0x848>)
 80066c2:	2204      	movs	r2, #4
 80066c4:	701a      	strb	r2, [r3, #0]
		}

		break;
 80066c6:	e0c3      	b.n	8006850 <state_machine+0x824>

	case settings:
		if(!state_change_done)
 80066c8:	4b65      	ldr	r3, [pc, #404]	; (8006860 <state_machine+0x834>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <state_machine+0x6b4>
		{
			Display_settings_screen_background();
 80066d0:	f7fe fdf8 	bl	80052c4 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 80066d4:	4b66      	ldr	r3, [pc, #408]	; (8006870 <state_machine+0x844>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 80066da:	4b61      	ldr	r3, [pc, #388]	; (8006860 <state_machine+0x834>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 80066e0:	4b65      	ldr	r3, [pc, #404]	; (8006878 <state_machine+0x84c>)
 80066e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066e4:	f7fe fee6 	bl	80054b4 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80066e8:	4b60      	ldr	r3, [pc, #384]	; (800686c <state_machine+0x840>)
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	2ba3      	cmp	r3, #163	; 0xa3
 80066ee:	d91e      	bls.n	800672e <state_machine+0x702>
 80066f0:	4b5e      	ldr	r3, [pc, #376]	; (800686c <state_machine+0x840>)
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80066f8:	d819      	bhi.n	800672e <state_machine+0x702>
 80066fa:	4b5c      	ldr	r3, [pc, #368]	; (800686c <state_machine+0x840>)
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	2b3c      	cmp	r3, #60	; 0x3c
 8006700:	d915      	bls.n	800672e <state_machine+0x702>
 8006702:	4b5a      	ldr	r3, [pc, #360]	; (800686c <state_machine+0x840>)
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	2b63      	cmp	r3, #99	; 0x63
 8006708:	d811      	bhi.n	800672e <state_machine+0x702>
		{
			dab_management_to_display.audio_volume += 2;
 800670a:	4b5b      	ldr	r3, [pc, #364]	; (8006878 <state_machine+0x84c>)
 800670c:	7b9b      	ldrb	r3, [r3, #14]
 800670e:	3302      	adds	r3, #2
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4b59      	ldr	r3, [pc, #356]	; (8006878 <state_machine+0x84c>)
 8006714:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 8006716:	4b58      	ldr	r3, [pc, #352]	; (8006878 <state_machine+0x84c>)
 8006718:	7b9b      	ldrb	r3, [r3, #14]
 800671a:	2b3f      	cmp	r3, #63	; 0x3f
 800671c:	d902      	bls.n	8006724 <state_machine+0x6f8>
			{
				dab_management_to_display.audio_volume = 63;
 800671e:	4b56      	ldr	r3, [pc, #344]	; (8006878 <state_machine+0x84c>)
 8006720:	223f      	movs	r2, #63	; 0x3f
 8006722:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006724:	4b54      	ldr	r3, [pc, #336]	; (8006878 <state_machine+0x84c>)
 8006726:	7b9b      	ldrb	r3, [r3, #14]
 8006728:	4618      	mov	r0, r3
 800672a:	f7fc fcff 	bl	800312c <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 800672e:	4b4f      	ldr	r3, [pc, #316]	; (800686c <state_machine+0x840>)
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	2b05      	cmp	r3, #5
 8006734:	d91d      	bls.n	8006772 <state_machine+0x746>
 8006736:	4b4d      	ldr	r3, [pc, #308]	; (800686c <state_machine+0x840>)
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	2b9c      	cmp	r3, #156	; 0x9c
 800673c:	d819      	bhi.n	8006772 <state_machine+0x746>
 800673e:	4b4b      	ldr	r3, [pc, #300]	; (800686c <state_machine+0x840>)
 8006740:	885b      	ldrh	r3, [r3, #2]
 8006742:	2b3c      	cmp	r3, #60	; 0x3c
 8006744:	d915      	bls.n	8006772 <state_machine+0x746>
 8006746:	4b49      	ldr	r3, [pc, #292]	; (800686c <state_machine+0x840>)
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	2b63      	cmp	r3, #99	; 0x63
 800674c:	d811      	bhi.n	8006772 <state_machine+0x746>
		{
			dab_management_to_display.audio_volume -= 2;
 800674e:	4b4a      	ldr	r3, [pc, #296]	; (8006878 <state_machine+0x84c>)
 8006750:	7b9b      	ldrb	r3, [r3, #14]
 8006752:	3b02      	subs	r3, #2
 8006754:	b2da      	uxtb	r2, r3
 8006756:	4b48      	ldr	r3, [pc, #288]	; (8006878 <state_machine+0x84c>)
 8006758:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 800675a:	4b47      	ldr	r3, [pc, #284]	; (8006878 <state_machine+0x84c>)
 800675c:	7b9b      	ldrb	r3, [r3, #14]
 800675e:	2b3f      	cmp	r3, #63	; 0x3f
 8006760:	d902      	bls.n	8006768 <state_machine+0x73c>
			{
				dab_management_to_display.audio_volume = 0;
 8006762:	4b45      	ldr	r3, [pc, #276]	; (8006878 <state_machine+0x84c>)
 8006764:	2200      	movs	r2, #0
 8006766:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006768:	4b43      	ldr	r3, [pc, #268]	; (8006878 <state_machine+0x84c>)
 800676a:	7b9b      	ldrb	r3, [r3, #14]
 800676c:	4618      	mov	r0, r3
 800676e:	f7fc fcdd 	bl	800312c <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006772:	4b3e      	ldr	r3, [pc, #248]	; (800686c <state_machine+0x840>)
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	2ba3      	cmp	r3, #163	; 0xa3
 8006778:	d907      	bls.n	800678a <state_machine+0x75e>
 800677a:	4b3c      	ldr	r3, [pc, #240]	; (800686c <state_machine+0x840>)
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006782:	d802      	bhi.n	800678a <state_machine+0x75e>
 8006784:	4b39      	ldr	r3, [pc, #228]	; (800686c <state_machine+0x840>)
 8006786:	885b      	ldrh	r3, [r3, #2]
 8006788:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800678a:	4b38      	ldr	r3, [pc, #224]	; (800686c <state_machine+0x840>)
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	2b05      	cmp	r3, #5
 8006790:	d906      	bls.n	80067a0 <state_machine+0x774>
 8006792:	4b36      	ldr	r3, [pc, #216]	; (800686c <state_machine+0x840>)
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	2b9c      	cmp	r3, #156	; 0x9c
 8006798:	d802      	bhi.n	80067a0 <state_machine+0x774>
 800679a:	4b34      	ldr	r3, [pc, #208]	; (800686c <state_machine+0x840>)
 800679c:	885b      	ldrh	r3, [r3, #2]
 800679e:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 80067a0:	4b32      	ldr	r3, [pc, #200]	; (800686c <state_machine+0x840>)
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d911      	bls.n	80067cc <state_machine+0x7a0>
 80067a8:	4b30      	ldr	r3, [pc, #192]	; (800686c <state_machine+0x840>)
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	2b9c      	cmp	r3, #156	; 0x9c
 80067ae:	d80d      	bhi.n	80067cc <state_machine+0x7a0>
 80067b0:	4b2e      	ldr	r3, [pc, #184]	; (800686c <state_machine+0x840>)
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	2b96      	cmp	r3, #150	; 0x96
 80067b6:	d909      	bls.n	80067cc <state_machine+0x7a0>
 80067b8:	4b2c      	ldr	r3, [pc, #176]	; (800686c <state_machine+0x840>)
 80067ba:	885b      	ldrh	r3, [r3, #2]
 80067bc:	2bbd      	cmp	r3, #189	; 0xbd
 80067be:	d805      	bhi.n	80067cc <state_machine+0x7a0>
		{
			state_change_done = 0;
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <state_machine+0x834>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 80067c6:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <state_machine+0x848>)
 80067c8:	2202      	movs	r2, #2
 80067ca:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 80067cc:	4b27      	ldr	r3, [pc, #156]	; (800686c <state_machine+0x840>)
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2ba3      	cmp	r3, #163	; 0xa3
 80067d2:	d907      	bls.n	80067e4 <state_machine+0x7b8>
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <state_machine+0x840>)
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80067dc:	d802      	bhi.n	80067e4 <state_machine+0x7b8>
 80067de:	4b23      	ldr	r3, [pc, #140]	; (800686c <state_machine+0x840>)
 80067e0:	885b      	ldrh	r3, [r3, #2]
 80067e2:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80067e4:	4b21      	ldr	r3, [pc, #132]	; (800686c <state_machine+0x840>)
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	2b05      	cmp	r3, #5
 80067ea:	d911      	bls.n	8006810 <state_machine+0x7e4>
 80067ec:	4b1f      	ldr	r3, [pc, #124]	; (800686c <state_machine+0x840>)
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	2b9c      	cmp	r3, #156	; 0x9c
 80067f2:	d80d      	bhi.n	8006810 <state_machine+0x7e4>
 80067f4:	4b1d      	ldr	r3, [pc, #116]	; (800686c <state_machine+0x840>)
 80067f6:	885b      	ldrh	r3, [r3, #2]
 80067f8:	2bc3      	cmp	r3, #195	; 0xc3
 80067fa:	d909      	bls.n	8006810 <state_machine+0x7e4>
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <state_machine+0x840>)
 80067fe:	885b      	ldrh	r3, [r3, #2]
 8006800:	2bea      	cmp	r3, #234	; 0xea
 8006802:	d805      	bhi.n	8006810 <state_machine+0x7e4>
		{
			state_change_done = 0;
 8006804:	4b16      	ldr	r3, [pc, #88]	; (8006860 <state_machine+0x834>)
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800680a:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <state_machine+0x848>)
 800680c:	2203      	movs	r2, #3
 800680e:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006810:	4b16      	ldr	r3, [pc, #88]	; (800686c <state_machine+0x840>)
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	2ba3      	cmp	r3, #163	; 0xa3
 8006816:	d91d      	bls.n	8006854 <state_machine+0x828>
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <state_machine+0x840>)
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006820:	d818      	bhi.n	8006854 <state_machine+0x828>
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <state_machine+0x840>)
 8006824:	885b      	ldrh	r3, [r3, #2]
 8006826:	2bc3      	cmp	r3, #195	; 0xc3
 8006828:	d914      	bls.n	8006854 <state_machine+0x828>
 800682a:	4b10      	ldr	r3, [pc, #64]	; (800686c <state_machine+0x840>)
 800682c:	885b      	ldrh	r3, [r3, #2]
 800682e:	2bea      	cmp	r3, #234	; 0xea
 8006830:	d810      	bhi.n	8006854 <state_machine+0x828>
		{
			state_change_done = 0;
 8006832:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <state_machine+0x834>)
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006838:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <state_machine+0x848>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
		}


		break;
 800683e:	e009      	b.n	8006854 <state_machine+0x828>

	default:
		break;
 8006840:	bf00      	nop
 8006842:	e008      	b.n	8006856 <state_machine+0x82a>
		break;
 8006844:	bf00      	nop
 8006846:	e006      	b.n	8006856 <state_machine+0x82a>
		break;
 8006848:	bf00      	nop
 800684a:	e004      	b.n	8006856 <state_machine+0x82a>
		break;
 800684c:	bf00      	nop
 800684e:	e002      	b.n	8006856 <state_machine+0x82a>
		break;
 8006850:	bf00      	nop
 8006852:	e000      	b.n	8006856 <state_machine+0x82a>
		break;
 8006854:	bf00      	nop
	}
}
 8006856:	bf00      	nop
 8006858:	3744      	adds	r7, #68	; 0x44
 800685a:	46bd      	mov	sp, r7
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	bf00      	nop
 8006860:	20007011 	.word	0x20007011
 8006864:	20000150 	.word	0x20000150
 8006868:	20007071 	.word	0x20007071
 800686c:	20007018 	.word	0x20007018
 8006870:	20007070 	.word	0x20007070
 8006874:	20007010 	.word	0x20007010
 8006878:	20007044 	.word	0x20007044

0800687c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006882:	2300      	movs	r3, #0
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <HAL_MspInit+0x4c>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	4a0f      	ldr	r2, [pc, #60]	; (80068c8 <HAL_MspInit+0x4c>)
 800688c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006890:	6453      	str	r3, [r2, #68]	; 0x44
 8006892:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <HAL_MspInit+0x4c>)
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_MspInit+0x4c>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <HAL_MspInit+0x4c>)
 80068a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6413      	str	r3, [r2, #64]	; 0x40
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <HAL_MspInit+0x4c>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800

080068cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068d0:	e7fe      	b.n	80068d0 <NMI_Handler+0x4>

080068d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068d2:	b480      	push	{r7}
 80068d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068d6:	e7fe      	b.n	80068d6 <HardFault_Handler+0x4>

080068d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068dc:	e7fe      	b.n	80068dc <MemManage_Handler+0x4>

080068de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068de:	b480      	push	{r7}
 80068e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068e2:	e7fe      	b.n	80068e2 <BusFault_Handler+0x4>

080068e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068e8:	e7fe      	b.n	80068e8 <UsageFault_Handler+0x4>

080068ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068ea:	b480      	push	{r7}
 80068ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068ee:	bf00      	nop
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068fc:	bf00      	nop
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006906:	b480      	push	{r7}
 8006908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800690a:	bf00      	nop
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006918:	f000 fd26 	bl	8007368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800691c:	bf00      	nop
 800691e:	bd80      	pop	{r7, pc}

08006920 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006924:	4802      	ldr	r0, [pc, #8]	; (8006930 <DMA1_Stream4_IRQHandler+0x10>)
 8006926:	f000 ff45 	bl	80077b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800692a:	bf00      	nop
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20006fb0 	.word	0x20006fb0

08006934 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006938:	4802      	ldr	r0, [pc, #8]	; (8006944 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800693a:	f005 fc5a 	bl	800c1f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800693e:	bf00      	nop
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200070bc 	.word	0x200070bc

08006948 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800694c:	4802      	ldr	r0, [pc, #8]	; (8006958 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800694e:	f005 fc50 	bl	800c1f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20007104 	.word	0x20007104

0800695c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006960:	4802      	ldr	r0, [pc, #8]	; (800696c <SPI2_IRQHandler+0x10>)
 8006962:	f005 f8e9 	bl	800bb38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20006f58 	.word	0x20006f58

08006970 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8006974:	4802      	ldr	r0, [pc, #8]	; (8006980 <I2C3_EV_IRQHandler+0x10>)
 8006976:	f001 ff99 	bl	80088ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20006eac 	.word	0x20006eac

08006984 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006988:	4802      	ldr	r0, [pc, #8]	; (8006994 <I2C3_ER_IRQHandler+0x10>)
 800698a:	f002 f900 	bl	8008b8e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20006eac 	.word	0x20006eac

08006998 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <SystemInit+0x20>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	4a05      	ldr	r2, [pc, #20]	; (80069cc <SystemInit+0x20>)
 80069b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	e000ed00 	.word	0xe000ed00

080069d0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069d6:	f107 0320 	add.w	r3, r7, #32
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069e0:	1d3b      	adds	r3, r7, #4
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	605a      	str	r2, [r3, #4]
 80069e8:	609a      	str	r2, [r3, #8]
 80069ea:	60da      	str	r2, [r3, #12]
 80069ec:	611a      	str	r2, [r3, #16]
 80069ee:	615a      	str	r2, [r3, #20]
 80069f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80069f2:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <MX_TIM3_Init+0xac>)
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <MX_TIM3_Init+0xb0>)
 80069f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80069f8:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <MX_TIM3_Init+0xac>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069fe:	4b1f      	ldr	r3, [pc, #124]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a04:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a12:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006a18:	4818      	ldr	r0, [pc, #96]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a1a:	f005 fb9b 	bl	800c154 <HAL_TIM_PWM_Init>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006a24:	f7ff f9d8 	bl	8005dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006a30:	f107 0320 	add.w	r3, r7, #32
 8006a34:	4619      	mov	r1, r3
 8006a36:	4811      	ldr	r0, [pc, #68]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a38:	f006 f81e 	bl	800ca78 <HAL_TIMEx_MasterConfigSynchronization>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006a42:	f7ff f9c9 	bl	8005dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a46:	2360      	movs	r3, #96	; 0x60
 8006a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	2208      	movs	r2, #8
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4807      	ldr	r0, [pc, #28]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a5e:	f005 fcd1 	bl	800c404 <HAL_TIM_PWM_ConfigChannel>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006a68:	f7ff f9b6 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006a6c:	4803      	ldr	r0, [pc, #12]	; (8006a7c <MX_TIM3_Init+0xac>)
 8006a6e:	f000 f8b9 	bl	8006be4 <HAL_TIM_MspPostInit>

}
 8006a72:	bf00      	nop
 8006a74:	3728      	adds	r7, #40	; 0x28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20007074 	.word	0x20007074
 8006a80:	40000400 	.word	0x40000400

08006a84 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006a88:	4b0e      	ldr	r3, [pc, #56]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006a8a:	4a0f      	ldr	r2, [pc, #60]	; (8006ac8 <MX_TIM10_Init+0x44>)
 8006a8c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006a90:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006a94:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006a9e:	f240 2257 	movw	r2, #599	; 0x257
 8006aa2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aa4:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006ab0:	4804      	ldr	r0, [pc, #16]	; (8006ac4 <MX_TIM10_Init+0x40>)
 8006ab2:	f005 fa8f 	bl	800bfd4 <HAL_TIM_Base_Init>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006abc:	f7ff f98c 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006ac0:	bf00      	nop
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	200070bc 	.word	0x200070bc
 8006ac8:	40014400 	.word	0x40014400

08006acc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006ad2:	4a0f      	ldr	r2, [pc, #60]	; (8006b10 <MX_TIM11_Init+0x44>)
 8006ad4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006ad8:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006adc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8006ae4:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006ae6:	f240 5213 	movw	r2, #1299	; 0x513
 8006aea:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006af8:	4804      	ldr	r0, [pc, #16]	; (8006b0c <MX_TIM11_Init+0x40>)
 8006afa:	f005 fa6b 	bl	800bfd4 <HAL_TIM_Base_Init>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8006b04:	f7ff f968 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006b08:	bf00      	nop
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20007104 	.word	0x20007104
 8006b10:	40014800 	.word	0x40014800

08006b14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0b      	ldr	r2, [pc, #44]	; (8006b50 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10d      	bne.n	8006b42 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <HAL_TIM_PWM_MspInit+0x40>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <HAL_TIM_PWM_MspInit+0x40>)
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	6413      	str	r3, [r2, #64]	; 0x40
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_TIM_PWM_MspInit+0x40>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40023800 	.word	0x40023800

08006b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <HAL_TIM_Base_MspInit+0x80>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d116      	bne.n	8006b98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <HAL_TIM_Base_MspInit+0x84>)
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <HAL_TIM_Base_MspInit+0x84>)
 8006b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b78:	6453      	str	r3, [r2, #68]	; 0x44
 8006b7a:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <HAL_TIM_Base_MspInit+0x84>)
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	2019      	movs	r0, #25
 8006b8c:	f000 fd0b 	bl	80075a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006b90:	2019      	movs	r0, #25
 8006b92:	f000 fd24 	bl	80075de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006b96:	e01a      	b.n	8006bce <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <HAL_TIM_Base_MspInit+0x88>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d115      	bne.n	8006bce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <HAL_TIM_Base_MspInit+0x84>)
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <HAL_TIM_Base_MspInit+0x84>)
 8006bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <HAL_TIM_Base_MspInit+0x84>)
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	201a      	movs	r0, #26
 8006bc4:	f000 fcef 	bl	80075a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006bc8:	201a      	movs	r0, #26
 8006bca:	f000 fd08 	bl	80075de <HAL_NVIC_EnableIRQ>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40014400 	.word	0x40014400
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	40014800 	.word	0x40014800

08006be4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 030c 	add.w	r3, r7, #12
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a12      	ldr	r2, [pc, #72]	; (8006c4c <HAL_TIM_MspPostInit+0x68>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d11e      	bne.n	8006c44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <HAL_TIM_MspPostInit+0x6c>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	4a10      	ldr	r2, [pc, #64]	; (8006c50 <HAL_TIM_MspPostInit+0x6c>)
 8006c10:	f043 0304 	orr.w	r3, r3, #4
 8006c14:	6313      	str	r3, [r2, #48]	; 0x30
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <HAL_TIM_MspPostInit+0x6c>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8006c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c34:	2302      	movs	r3, #2
 8006c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4805      	ldr	r0, [pc, #20]	; (8006c54 <HAL_TIM_MspPostInit+0x70>)
 8006c40:	f001 f802 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006c44:	bf00      	nop
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40023800 	.word	0x40023800
 8006c54:	40020800 	.word	0x40020800

08006c58 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8006c5e:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <Touch_read+0xa0>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2000      	movs	r0, #0
 8006c64:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <Touch_read+0xa0>)
 8006c68:	7c1b      	ldrb	r3, [r3, #16]
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	da32      	bge.n	8006cd6 <Touch_read+0x7e>
	{
		xtemp = TP_Read_XOY(0xD0);
 8006c70:	20d0      	movs	r0, #208	; 0xd0
 8006c72:	f000 f8e9 	bl	8006e48 <TP_Read_XOY>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <Touch_read+0xa4>)
 8006c7c:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8006c7e:	2090      	movs	r0, #144	; 0x90
 8006c80:	f000 f8e2 	bl	8006e48 <TP_Read_XOY>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <Touch_read+0xa8>)
 8006c8a:	801a      	strh	r2, [r3, #0]

		touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
 8006c8c:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <Touch_read+0xa8>)
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	019b      	lsls	r3, r3, #6
 8006c9c:	4a19      	ldr	r2, [pc, #100]	; (8006d04 <Touch_read+0xac>)
 8006c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8006ca2:	441a      	add	r2, r3
 8006ca4:	12d2      	asrs	r2, r2, #11
 8006ca6:	17db      	asrs	r3, r3, #31
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <Touch_read+0xa4>)
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	3bf0      	subs	r3, #240	; 0xf0
 8006cba:	22e6      	movs	r2, #230	; 0xe6
 8006cbc:	fb02 f303 	mul.w	r3, r2, r3
 8006cc0:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <Touch_read+0xb0>)
 8006cc2:	fb82 1203 	smull	r1, r2, r2, r3
 8006cc6:	1252      	asrs	r2, r2, #9
 8006cc8:	17db      	asrs	r3, r3, #31
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	33f0      	adds	r3, #240	; 0xf0
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	807b      	strh	r3, [r7, #2]
 8006cd4:	e003      	b.n	8006cde <Touch_read+0x86>

	}

	else
	{
		touch_coordinates.x = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	88ba      	ldrh	r2, [r7, #4]
 8006ce6:	f362 030f 	bfi	r3, r2, #0, #16
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000158 	.word	0x20000158
 8006cfc:	2000714c 	.word	0x2000714c
 8006d00:	2000714e 	.word	0x2000714e
 8006d04:	93afcf8b 	.word	0x93afcf8b
 8006d08:	24b70025 	.word	0x24b70025

08006d0c <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	e021      	b.n	8006d64 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8006d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da05      	bge.n	8006d34 <TP_Write_Byte+0x28>
			T_DIN_ON;
 8006d28:	2201      	movs	r2, #1
 8006d2a:	2120      	movs	r1, #32
 8006d2c:	4811      	ldr	r0, [pc, #68]	; (8006d74 <TP_Write_Byte+0x68>)
 8006d2e:	f001 f93f 	bl	8007fb0 <HAL_GPIO_WritePin>
 8006d32:	e004      	b.n	8006d3e <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8006d34:	2200      	movs	r2, #0
 8006d36:	2120      	movs	r1, #32
 8006d38:	480e      	ldr	r0, [pc, #56]	; (8006d74 <TP_Write_Byte+0x68>)
 8006d3a:	f001 f939 	bl	8007fb0 <HAL_GPIO_WritePin>

		num <<= 1;
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8006d44:	2200      	movs	r2, #0
 8006d46:	2108      	movs	r1, #8
 8006d48:	480a      	ldr	r0, [pc, #40]	; (8006d74 <TP_Write_Byte+0x68>)
 8006d4a:	f001 f931 	bl	8007fb0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006d4e:	2001      	movs	r0, #1
 8006d50:	f000 fb2a 	bl	80073a8 <HAL_Delay>
		T_CLK_ON;
 8006d54:	2201      	movs	r2, #1
 8006d56:	2108      	movs	r1, #8
 8006d58:	4806      	ldr	r0, [pc, #24]	; (8006d74 <TP_Write_Byte+0x68>)
 8006d5a:	f001 f929 	bl	8007fb0 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	3301      	adds	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b07      	cmp	r3, #7
 8006d68:	d9da      	bls.n	8006d20 <TP_Write_Byte+0x14>
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40020400 	.word	0x40020400

08006d78 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2108      	movs	r1, #8
 8006d8e:	482c      	ldr	r0, [pc, #176]	; (8006e40 <TP_Read_AD+0xc8>)
 8006d90:	f001 f90e 	bl	8007fb0 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8006d94:	2200      	movs	r2, #0
 8006d96:	2120      	movs	r1, #32
 8006d98:	4829      	ldr	r0, [pc, #164]	; (8006e40 <TP_Read_AD+0xc8>)
 8006d9a:	f001 f909 	bl	8007fb0 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2180      	movs	r1, #128	; 0x80
 8006da2:	4828      	ldr	r0, [pc, #160]	; (8006e44 <TP_Read_AD+0xcc>)
 8006da4:	f001 f904 	bl	8007fb0 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff ffae 	bl	8006d0c <TP_Write_Byte>
	HAL_Delay(1);
 8006db0:	2001      	movs	r0, #1
 8006db2:	f000 faf9 	bl	80073a8 <HAL_Delay>
	T_CLK_OFF;
 8006db6:	2200      	movs	r2, #0
 8006db8:	2108      	movs	r1, #8
 8006dba:	4821      	ldr	r0, [pc, #132]	; (8006e40 <TP_Read_AD+0xc8>)
 8006dbc:	f001 f8f8 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	f000 faf1 	bl	80073a8 <HAL_Delay>
	T_CLK_ON;
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	2108      	movs	r1, #8
 8006dca:	481d      	ldr	r0, [pc, #116]	; (8006e40 <TP_Read_AD+0xc8>)
 8006dcc:	f001 f8f0 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f000 fae9 	bl	80073a8 <HAL_Delay>
	T_CLK_OFF;
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2108      	movs	r1, #8
 8006dda:	4819      	ldr	r0, [pc, #100]	; (8006e40 <TP_Read_AD+0xc8>)
 8006ddc:	f001 f8e8 	bl	8007fb0 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]
 8006de4:	e01c      	b.n	8006e20 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8006de6:	89bb      	ldrh	r3, [r7, #12]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8006dec:	2200      	movs	r2, #0
 8006dee:	2108      	movs	r1, #8
 8006df0:	4813      	ldr	r0, [pc, #76]	; (8006e40 <TP_Read_AD+0xc8>)
 8006df2:	f001 f8dd 	bl	8007fb0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006df6:	2001      	movs	r0, #1
 8006df8:	f000 fad6 	bl	80073a8 <HAL_Delay>
		T_CLK_ON;
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2108      	movs	r1, #8
 8006e00:	480f      	ldr	r0, [pc, #60]	; (8006e40 <TP_Read_AD+0xc8>)
 8006e02:	f001 f8d5 	bl	8007fb0 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8006e06:	2110      	movs	r1, #16
 8006e08:	480d      	ldr	r0, [pc, #52]	; (8006e40 <TP_Read_AD+0xc8>)
 8006e0a:	f001 f8b9 	bl	8007f80 <HAL_GPIO_ReadPin>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <TP_Read_AD+0xa2>
 8006e14:	89bb      	ldrh	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	d9df      	bls.n	8006de6 <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	2180      	movs	r1, #128	; 0x80
 8006e30:	4804      	ldr	r0, [pc, #16]	; (8006e44 <TP_Read_AD+0xcc>)
 8006e32:	f001 f8bd 	bl	8007fb0 <HAL_GPIO_WritePin>
	return(Num);
 8006e36:	89bb      	ldrh	r3, [r7, #12]

}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40020400 	.word	0x40020400
 8006e44:	40020c00 	.word	0x40020c00

08006e48 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff ff8f 	bl	8006d78 <TP_Read_AD>
}
 8006e5a:	bf00      	nop
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <TP_Read_XY+0x3c>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff ffe8 	bl	8006e48 <TP_Read_XOY>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <TP_Read_XY+0x40>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff ffe1 	bl	8006e48 <TP_Read_XOY>
 8006e86:	4603      	mov	r3, r0
 8006e88:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	89fa      	ldrh	r2, [r7, #14]
 8006e8e:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	89ba      	ldrh	r2, [r7, #12]
 8006e94:	801a      	strh	r2, [r3, #0]
	return 1;
 8006e96:	2301      	movs	r3, #1
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000017c 	.word	0x2000017c
 8006ea4:	2000017d 	.word	0x2000017d

08006ea8 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006eb2:	f107 0212 	add.w	r2, r7, #18
 8006eb6:	f107 0314 	add.w	r3, r7, #20
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff ffd1 	bl	8006e64 <TP_Read_XY>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <TP_Read_XY2+0x28>
    	return(0);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e049      	b.n	8006f64 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8006ed0:	f107 020e 	add.w	r2, r7, #14
 8006ed4:	f107 0310 	add.w	r3, r7, #16
 8006ed8:	4611      	mov	r1, r2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff ffc2 	bl	8006e64 <TP_Read_XY>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <TP_Read_XY2+0x46>
    	return(0);
 8006eea:	2300      	movs	r3, #0
 8006eec:	e03a      	b.n	8006f64 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8006eee:	8a3a      	ldrh	r2, [r7, #16]
 8006ef0:	8abb      	ldrh	r3, [r7, #20]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d804      	bhi.n	8006f00 <TP_Read_XY2+0x58>
 8006ef6:	8a3b      	ldrh	r3, [r7, #16]
 8006ef8:	3331      	adds	r3, #49	; 0x31
 8006efa:	8aba      	ldrh	r2, [r7, #20]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	da08      	bge.n	8006f12 <TP_Read_XY2+0x6a>
 8006f00:	8aba      	ldrh	r2, [r7, #20]
 8006f02:	8a3b      	ldrh	r3, [r7, #16]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d82c      	bhi.n	8006f62 <TP_Read_XY2+0xba>
 8006f08:	8abb      	ldrh	r3, [r7, #20]
 8006f0a:	3331      	adds	r3, #49	; 0x31
 8006f0c:	8a3a      	ldrh	r2, [r7, #16]
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	db27      	blt.n	8006f62 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8006f12:	89fa      	ldrh	r2, [r7, #14]
 8006f14:	8a7b      	ldrh	r3, [r7, #18]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d804      	bhi.n	8006f24 <TP_Read_XY2+0x7c>
 8006f1a:	89fb      	ldrh	r3, [r7, #14]
 8006f1c:	3331      	adds	r3, #49	; 0x31
 8006f1e:	8a7a      	ldrh	r2, [r7, #18]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	da08      	bge.n	8006f36 <TP_Read_XY2+0x8e>
 8006f24:	8a7a      	ldrh	r2, [r7, #18]
 8006f26:	89fb      	ldrh	r3, [r7, #14]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d81a      	bhi.n	8006f62 <TP_Read_XY2+0xba>
 8006f2c:	8a7b      	ldrh	r3, [r7, #18]
 8006f2e:	3331      	adds	r3, #49	; 0x31
 8006f30:	89fa      	ldrh	r2, [r7, #14]
 8006f32:	4293      	cmp	r3, r2
 8006f34:	db15      	blt.n	8006f62 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006f36:	8abb      	ldrh	r3, [r7, #20]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	8a3b      	ldrh	r3, [r7, #16]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	0fda      	lsrs	r2, r3, #31
 8006f40:	4413      	add	r3, r2
 8006f42:	105b      	asrs	r3, r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8006f4a:	8a7b      	ldrh	r3, [r7, #18]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
 8006f50:	4413      	add	r3, r2
 8006f52:	0fda      	lsrs	r2, r3, #31
 8006f54:	4413      	add	r3, r2
 8006f56:	105b      	asrs	r3, r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	801a      	strh	r2, [r3, #0]
        return 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8006f76:	2140      	movs	r1, #64	; 0x40
 8006f78:	483f      	ldr	r0, [pc, #252]	; (8007078 <TP_Scan+0x10c>)
 8006f7a:	f001 f801 	bl	8007f80 <HAL_GPIO_ReadPin>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d155      	bne.n	8007030 <TP_Scan+0xc4>
	{
		if(tp)
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8006f8a:	493c      	ldr	r1, [pc, #240]	; (800707c <TP_Scan+0x110>)
 8006f8c:	483c      	ldr	r0, [pc, #240]	; (8007080 <TP_Scan+0x114>)
 8006f8e:	f7ff ff8b 	bl	8006ea8 <TP_Read_XY2>
 8006f92:	e03c      	b.n	800700e <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8006f94:	4939      	ldr	r1, [pc, #228]	; (800707c <TP_Scan+0x110>)
 8006f96:	483a      	ldr	r0, [pc, #232]	; (8007080 <TP_Scan+0x114>)
 8006f98:	f7ff ff86 	bl	8006ea8 <TP_Read_XY2>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d035      	beq.n	800700e <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8006fa2:	4b38      	ldr	r3, [pc, #224]	; (8007084 <TP_Scan+0x118>)
 8006fa4:	ed93 7a05 	vldr	s14, [r3, #20]
 8006fa8:	4b36      	ldr	r3, [pc, #216]	; (8007084 <TP_Scan+0x118>)
 8006faa:	899b      	ldrh	r3, [r3, #12]
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fb8:	4b32      	ldr	r3, [pc, #200]	; (8007084 <TP_Scan+0x118>)
 8006fba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fce:	ee17 3a90 	vmov	r3, s15
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <TP_Scan+0x118>)
 8006fd6:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <TP_Scan+0x118>)
 8006fda:	ed93 7a06 	vldr	s14, [r3, #24]
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <TP_Scan+0x118>)
 8006fe0:	89db      	ldrh	r3, [r3, #14]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fee:	4b25      	ldr	r3, [pc, #148]	; (8007084 <TP_Scan+0x118>)
 8006ff0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007004:	ee17 3a90 	vmov	r3, s15
 8007008:	b29a      	uxth	r2, r3
 800700a:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <TP_Scan+0x118>)
 800700c:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 800700e:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <TP_Scan+0x118>)
 8007010:	7c1b      	ldrb	r3, [r3, #16]
 8007012:	b25b      	sxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	db26      	blt.n	8007066 <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8007018:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <TP_Scan+0x118>)
 800701a:	22c0      	movs	r2, #192	; 0xc0
 800701c:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <TP_Scan+0x118>)
 8007020:	899a      	ldrh	r2, [r3, #12]
 8007022:	4b18      	ldr	r3, [pc, #96]	; (8007084 <TP_Scan+0x118>)
 8007024:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <TP_Scan+0x118>)
 8007028:	89da      	ldrh	r2, [r3, #14]
 800702a:	4b16      	ldr	r3, [pc, #88]	; (8007084 <TP_Scan+0x118>)
 800702c:	815a      	strh	r2, [r3, #10]
 800702e:	e01a      	b.n	8007066 <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8007030:	4b14      	ldr	r3, [pc, #80]	; (8007084 <TP_Scan+0x118>)
 8007032:	7c1b      	ldrb	r3, [r3, #16]
 8007034:	b25b      	sxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	da07      	bge.n	800704a <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <TP_Scan+0x118>)
 800703c:	7c1b      	ldrb	r3, [r3, #16]
 800703e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007042:	b2da      	uxtb	r2, r3
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <TP_Scan+0x118>)
 8007046:	741a      	strb	r2, [r3, #16]
 8007048:	e00d      	b.n	8007066 <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <TP_Scan+0x118>)
 800704c:	2200      	movs	r2, #0
 800704e:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <TP_Scan+0x118>)
 8007052:	2200      	movs	r2, #0
 8007054:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <TP_Scan+0x118>)
 8007058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800705c:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <TP_Scan+0x118>)
 8007060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007064:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <TP_Scan+0x118>)
 8007068:	7c1b      	ldrb	r3, [r3, #16]
 800706a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800706e:	b2db      	uxtb	r3, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40020c00 	.word	0x40020c00
 800707c:	20000166 	.word	0x20000166
 8007080:	20000164 	.word	0x20000164
 8007084:	20000158 	.word	0x20000158

08007088 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <MX_UART5_Init+0x4c>)
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <MX_UART5_Init+0x50>)
 8007090:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8007092:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <MX_UART5_Init+0x4c>)
 8007094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007098:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800709a:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <MX_UART5_Init+0x4c>)
 800709c:	2200      	movs	r2, #0
 800709e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <MX_UART5_Init+0x4c>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <MX_UART5_Init+0x4c>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <MX_UART5_Init+0x4c>)
 80070ae:	220c      	movs	r2, #12
 80070b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <MX_UART5_Init+0x4c>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <MX_UART5_Init+0x4c>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80070be:	4805      	ldr	r0, [pc, #20]	; (80070d4 <MX_UART5_Init+0x4c>)
 80070c0:	f005 fd6a 	bl	800cb98 <HAL_UART_Init>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80070ca:	f7fe fe85 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20007150 	.word	0x20007150
 80070d8:	40005000 	.word	0x40005000

080070dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80070e0:	4b11      	ldr	r3, [pc, #68]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 80070e2:	4a12      	ldr	r2, [pc, #72]	; (800712c <MX_USART3_UART_Init+0x50>)
 80070e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 80070e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80070ee:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 8007102:	220c      	movs	r2, #12
 8007104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 800710e:	2200      	movs	r2, #0
 8007110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007112:	4805      	ldr	r0, [pc, #20]	; (8007128 <MX_USART3_UART_Init+0x4c>)
 8007114:	f005 fd40 	bl	800cb98 <HAL_UART_Init>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800711e:	f7fe fe5b 	bl	8005dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20007194 	.word	0x20007194
 800712c:	40004800 	.word	0x40004800

08007130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007138:	f107 031c 	add.w	r3, r7, #28
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	609a      	str	r2, [r3, #8]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a42      	ldr	r2, [pc, #264]	; (8007258 <HAL_UART_MspInit+0x128>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d14b      	bne.n	80071ea <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007152:	2300      	movs	r3, #0
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	4b41      	ldr	r3, [pc, #260]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	4a40      	ldr	r2, [pc, #256]	; (800725c <HAL_UART_MspInit+0x12c>)
 800715c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007160:	6413      	str	r3, [r2, #64]	; 0x40
 8007162:	4b3e      	ldr	r3, [pc, #248]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	4b3a      	ldr	r3, [pc, #232]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	4a39      	ldr	r2, [pc, #228]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007178:	f043 0304 	orr.w	r3, r3, #4
 800717c:	6313      	str	r3, [r2, #48]	; 0x30
 800717e:	4b37      	ldr	r3, [pc, #220]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	4a32      	ldr	r2, [pc, #200]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007194:	f043 0308 	orr.w	r3, r3, #8
 8007198:	6313      	str	r3, [r2, #48]	; 0x30
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_UART_MspInit+0x12c>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80071a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ac:	2302      	movs	r3, #2
 80071ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b4:	2303      	movs	r3, #3
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80071b8:	2308      	movs	r3, #8
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071bc:	f107 031c 	add.w	r3, r7, #28
 80071c0:	4619      	mov	r1, r3
 80071c2:	4827      	ldr	r0, [pc, #156]	; (8007260 <HAL_UART_MspInit+0x130>)
 80071c4:	f000 fd40 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071c8:	2304      	movs	r3, #4
 80071ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071cc:	2302      	movs	r3, #2
 80071ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d4:	2303      	movs	r3, #3
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80071d8:	2308      	movs	r3, #8
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071dc:	f107 031c 	add.w	r3, r7, #28
 80071e0:	4619      	mov	r1, r3
 80071e2:	4820      	ldr	r0, [pc, #128]	; (8007264 <HAL_UART_MspInit+0x134>)
 80071e4:	f000 fd30 	bl	8007c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80071e8:	e031      	b.n	800724e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <HAL_UART_MspInit+0x138>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d12c      	bne.n	800724e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	4b18      	ldr	r3, [pc, #96]	; (800725c <HAL_UART_MspInit+0x12c>)
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <HAL_UART_MspInit+0x12c>)
 80071fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007202:	6413      	str	r3, [r2, #64]	; 0x40
 8007204:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007210:	2300      	movs	r3, #0
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	4a10      	ldr	r2, [pc, #64]	; (800725c <HAL_UART_MspInit+0x12c>)
 800721a:	f043 0302 	orr.w	r3, r3, #2
 800721e:	6313      	str	r3, [r2, #48]	; 0x30
 8007220:	4b0e      	ldr	r3, [pc, #56]	; (800725c <HAL_UART_MspInit+0x12c>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 800722c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	2302      	movs	r3, #2
 8007234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800723a:	2303      	movs	r3, #3
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800723e:	2307      	movs	r3, #7
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007242:	f107 031c 	add.w	r3, r7, #28
 8007246:	4619      	mov	r1, r3
 8007248:	4808      	ldr	r0, [pc, #32]	; (800726c <HAL_UART_MspInit+0x13c>)
 800724a:	f000 fcfd 	bl	8007c48 <HAL_GPIO_Init>
}
 800724e:	bf00      	nop
 8007250:	3730      	adds	r7, #48	; 0x30
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40005000 	.word	0x40005000
 800725c:	40023800 	.word	0x40023800
 8007260:	40020800 	.word	0x40020800
 8007264:	40020c00 	.word	0x40020c00
 8007268:	40004800 	.word	0x40004800
 800726c:	40020400 	.word	0x40020400

08007270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007274:	480d      	ldr	r0, [pc, #52]	; (80072ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007276:	490e      	ldr	r1, [pc, #56]	; (80072b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007278:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800727a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800727c:	e002      	b.n	8007284 <LoopCopyDataInit>

0800727e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800727e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007282:	3304      	adds	r3, #4

08007284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007288:	d3f9      	bcc.n	800727e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800728a:	4a0b      	ldr	r2, [pc, #44]	; (80072b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800728c:	4c0b      	ldr	r4, [pc, #44]	; (80072bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800728e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007290:	e001      	b.n	8007296 <LoopFillZerobss>

08007292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007294:	3204      	adds	r2, #4

08007296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007298:	d3fb      	bcc.n	8007292 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800729a:	f7ff fb87 	bl	80069ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800729e:	f006 f83d 	bl	800d31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072a2:	f7fe fcfd 	bl	8005ca0 <main>
  bx  lr    
 80072a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80072a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80072ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072b0:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80072b4:	08010a98 	.word	0x08010a98
  ldr r2, =_sbss
 80072b8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80072bc:	200071dc 	.word	0x200071dc

080072c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072c0:	e7fe      	b.n	80072c0 <ADC_IRQHandler>
	...

080072c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072c8:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <HAL_Init+0x40>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <HAL_Init+0x40>)
 80072ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_Init+0x40>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a0a      	ldr	r2, [pc, #40]	; (8007304 <HAL_Init+0x40>)
 80072da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072e0:	4b08      	ldr	r3, [pc, #32]	; (8007304 <HAL_Init+0x40>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a07      	ldr	r2, [pc, #28]	; (8007304 <HAL_Init+0x40>)
 80072e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072ec:	2003      	movs	r0, #3
 80072ee:	f000 f94f 	bl	8007590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072f2:	200f      	movs	r0, #15
 80072f4:	f000 f808 	bl	8007308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072f8:	f7ff fac0 	bl	800687c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40023c00 	.word	0x40023c00

08007308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <HAL_InitTick+0x54>)
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	4b12      	ldr	r3, [pc, #72]	; (8007360 <HAL_InitTick+0x58>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	4619      	mov	r1, r3
 800731a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800731e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007322:	fbb2 f3f3 	udiv	r3, r2, r3
 8007326:	4618      	mov	r0, r3
 8007328:	f000 f967 	bl	80075fa <HAL_SYSTICK_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e00e      	b.n	8007354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b0f      	cmp	r3, #15
 800733a:	d80a      	bhi.n	8007352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800733c:	2200      	movs	r2, #0
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007344:	f000 f92f 	bl	80075a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007348:	4a06      	ldr	r2, [pc, #24]	; (8007364 <HAL_InitTick+0x5c>)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e000      	b.n	8007354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000154 	.word	0x20000154
 8007360:	20000184 	.word	0x20000184
 8007364:	20000180 	.word	0x20000180

08007368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <HAL_IncTick+0x20>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_IncTick+0x24>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4413      	add	r3, r2
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <HAL_IncTick+0x24>)
 800737a:	6013      	str	r3, [r2, #0]
}
 800737c:	bf00      	nop
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000184 	.word	0x20000184
 800738c:	200071d8 	.word	0x200071d8

08007390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return uwTick;
 8007394:	4b03      	ldr	r3, [pc, #12]	; (80073a4 <HAL_GetTick+0x14>)
 8007396:	681b      	ldr	r3, [r3, #0]
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	200071d8 	.word	0x200071d8

080073a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073b0:	f7ff ffee 	bl	8007390 <HAL_GetTick>
 80073b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c0:	d005      	beq.n	80073ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <HAL_Delay+0x44>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073ce:	bf00      	nop
 80073d0:	f7ff ffde 	bl	8007390 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d8f7      	bhi.n	80073d0 <HAL_Delay+0x28>
  {
  }
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000184 	.word	0x20000184

080073f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <__NVIC_SetPriorityGrouping+0x44>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800740c:	4013      	ands	r3, r2
 800740e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800741c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007422:	4a04      	ldr	r2, [pc, #16]	; (8007434 <__NVIC_SetPriorityGrouping+0x44>)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	60d3      	str	r3, [r2, #12]
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	e000ed00 	.word	0xe000ed00

08007438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800743c:	4b04      	ldr	r3, [pc, #16]	; (8007450 <__NVIC_GetPriorityGrouping+0x18>)
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	f003 0307 	and.w	r3, r3, #7
}
 8007446:	4618      	mov	r0, r3
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	e000ed00 	.word	0xe000ed00

08007454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800745e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007462:	2b00      	cmp	r3, #0
 8007464:	db0b      	blt.n	800747e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	f003 021f 	and.w	r2, r3, #31
 800746c:	4907      	ldr	r1, [pc, #28]	; (800748c <__NVIC_EnableIRQ+0x38>)
 800746e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	2001      	movs	r0, #1
 8007476:	fa00 f202 	lsl.w	r2, r0, r2
 800747a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	e000e100 	.word	0xe000e100

08007490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	6039      	str	r1, [r7, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800749c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	db0a      	blt.n	80074ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	490c      	ldr	r1, [pc, #48]	; (80074dc <__NVIC_SetPriority+0x4c>)
 80074aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ae:	0112      	lsls	r2, r2, #4
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	440b      	add	r3, r1
 80074b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074b8:	e00a      	b.n	80074d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4908      	ldr	r1, [pc, #32]	; (80074e0 <__NVIC_SetPriority+0x50>)
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	3b04      	subs	r3, #4
 80074c8:	0112      	lsls	r2, r2, #4
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	440b      	add	r3, r1
 80074ce:	761a      	strb	r2, [r3, #24]
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	e000e100 	.word	0xe000e100
 80074e0:	e000ed00 	.word	0xe000ed00

080074e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b089      	sub	sp, #36	; 0x24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f1c3 0307 	rsb	r3, r3, #7
 80074fe:	2b04      	cmp	r3, #4
 8007500:	bf28      	it	cs
 8007502:	2304      	movcs	r3, #4
 8007504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	3304      	adds	r3, #4
 800750a:	2b06      	cmp	r3, #6
 800750c:	d902      	bls.n	8007514 <NVIC_EncodePriority+0x30>
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	3b03      	subs	r3, #3
 8007512:	e000      	b.n	8007516 <NVIC_EncodePriority+0x32>
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	43da      	mvns	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	401a      	ands	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800752c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	fa01 f303 	lsl.w	r3, r1, r3
 8007536:	43d9      	mvns	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800753c:	4313      	orrs	r3, r2
         );
}
 800753e:	4618      	mov	r0, r3
 8007540:	3724      	adds	r7, #36	; 0x24
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3b01      	subs	r3, #1
 8007558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800755c:	d301      	bcc.n	8007562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800755e:	2301      	movs	r3, #1
 8007560:	e00f      	b.n	8007582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007562:	4a0a      	ldr	r2, [pc, #40]	; (800758c <SysTick_Config+0x40>)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b01      	subs	r3, #1
 8007568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800756a:	210f      	movs	r1, #15
 800756c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007570:	f7ff ff8e 	bl	8007490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <SysTick_Config+0x40>)
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800757a:	4b04      	ldr	r3, [pc, #16]	; (800758c <SysTick_Config+0x40>)
 800757c:	2207      	movs	r2, #7
 800757e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	e000e010 	.word	0xe000e010

08007590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff ff29 	bl	80073f0 <__NVIC_SetPriorityGrouping>
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	4603      	mov	r3, r0
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075b8:	f7ff ff3e 	bl	8007438 <__NVIC_GetPriorityGrouping>
 80075bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	6978      	ldr	r0, [r7, #20]
 80075c4:	f7ff ff8e 	bl	80074e4 <NVIC_EncodePriority>
 80075c8:	4602      	mov	r2, r0
 80075ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ff5d 	bl	8007490 <__NVIC_SetPriority>
}
 80075d6:	bf00      	nop
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	4603      	mov	r3, r0
 80075e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff ff31 	bl	8007454 <__NVIC_EnableIRQ>
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff ffa2 	bl	800754c <SysTick_Config>
 8007608:	4603      	mov	r3, r0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007620:	f7ff feb6 	bl	8007390 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e099      	b.n	8007764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007650:	e00f      	b.n	8007672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007652:	f7ff fe9d 	bl	8007390 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b05      	cmp	r3, #5
 800765e:	d908      	bls.n	8007672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2203      	movs	r2, #3
 800766a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e078      	b.n	8007764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e8      	bne.n	8007652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4b38      	ldr	r3, [pc, #224]	; (800776c <HAL_DMA_Init+0x158>)
 800768c:	4013      	ands	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800769e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d107      	bne.n	80076dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	4313      	orrs	r3, r2
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f023 0307 	bic.w	r3, r3, #7
 80076f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b04      	cmp	r3, #4
 8007704:	d117      	bne.n	8007736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00e      	beq.n	8007736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fa19 	bl	8007b50 <DMA_CheckFifoParam>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007732:	2301      	movs	r3, #1
 8007734:	e016      	b.n	8007764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9d0 	bl	8007ae4 <DMA_CalcBaseAndBitshift>
 8007744:	4603      	mov	r3, r0
 8007746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	223f      	movs	r2, #63	; 0x3f
 800774e:	409a      	lsls	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	f010803f 	.word	0xf010803f

08007770 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d004      	beq.n	800778e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e00c      	b.n	80077a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2205      	movs	r2, #5
 8007792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80077c0:	4b8e      	ldr	r3, [pc, #568]	; (80079fc <HAL_DMA_IRQHandler+0x248>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a8e      	ldr	r2, [pc, #568]	; (8007a00 <HAL_DMA_IRQHandler+0x24c>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	0a9b      	lsrs	r3, r3, #10
 80077cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	2208      	movs	r2, #8
 80077e0:	409a      	lsls	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01a      	beq.n	8007820 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d013      	beq.n	8007820 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0204 	bic.w	r2, r2, #4
 8007806:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780c:	2208      	movs	r2, #8
 800780e:	409a      	lsls	r2, r3
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007818:	f043 0201 	orr.w	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d012      	beq.n	8007856 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	2201      	movs	r2, #1
 8007844:	409a      	lsls	r2, r3
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	f043 0202 	orr.w	r2, r3, #2
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785a:	2204      	movs	r2, #4
 800785c:	409a      	lsls	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d012      	beq.n	800788c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007878:	2204      	movs	r2, #4
 800787a:	409a      	lsls	r2, r3
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007884:	f043 0204 	orr.w	r2, r3, #4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007890:	2210      	movs	r2, #16
 8007892:	409a      	lsls	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4013      	ands	r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d043      	beq.n	8007924 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d03c      	beq.n	8007924 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ae:	2210      	movs	r2, #16
 80078b0:	409a      	lsls	r2, r3
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d018      	beq.n	80078f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d108      	bne.n	80078e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d024      	beq.n	8007924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	4798      	blx	r3
 80078e2:	e01f      	b.n	8007924 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01b      	beq.n	8007924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	4798      	blx	r3
 80078f4:	e016      	b.n	8007924 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d107      	bne.n	8007914 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0208 	bic.w	r2, r2, #8
 8007912:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007928:	2220      	movs	r2, #32
 800792a:	409a      	lsls	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4013      	ands	r3, r2
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 808f 	beq.w	8007a54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8087 	beq.w	8007a54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794a:	2220      	movs	r2, #32
 800794c:	409a      	lsls	r2, r3
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b05      	cmp	r3, #5
 800795c:	d136      	bne.n	80079cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0216 	bic.w	r2, r2, #22
 800796c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695a      	ldr	r2, [r3, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800797c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <HAL_DMA_IRQHandler+0x1da>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0208 	bic.w	r2, r2, #8
 800799c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a2:	223f      	movs	r2, #63	; 0x3f
 80079a4:	409a      	lsls	r2, r3
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d07e      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
        }
        return;
 80079ca:	e079      	b.n	8007ac0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01d      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d031      	beq.n	8007a54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
 80079f8:	e02c      	b.n	8007a54 <HAL_DMA_IRQHandler+0x2a0>
 80079fa:	bf00      	nop
 80079fc:	20000154 	.word	0x20000154
 8007a00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d023      	beq.n	8007a54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
 8007a14:	e01e      	b.n	8007a54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10f      	bne.n	8007a44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0210 	bic.w	r2, r2, #16
 8007a32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d032      	beq.n	8007ac2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d022      	beq.n	8007aae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d307      	bcc.n	8007a9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f2      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x2cc>
 8007a9a:	e000      	b.n	8007a9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007a9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
 8007abe:	e000      	b.n	8007ac2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007ac0:	bf00      	nop
    }
  }
}
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ad6:	b2db      	uxtb	r3, r3
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	3b10      	subs	r3, #16
 8007af4:	4a14      	ldr	r2, [pc, #80]	; (8007b48 <DMA_CalcBaseAndBitshift+0x64>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007afe:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <DMA_CalcBaseAndBitshift+0x68>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d909      	bls.n	8007b26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	659a      	str	r2, [r3, #88]	; 0x58
 8007b24:	e007      	b.n	8007b36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	aaaaaaab 	.word	0xaaaaaaab
 8007b4c:	08010a58 	.word	0x08010a58

08007b50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d11f      	bne.n	8007baa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d856      	bhi.n	8007c1e <DMA_CheckFifoParam+0xce>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <DMA_CheckFifoParam+0x28>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b9b 	.word	0x08007b9b
 8007b80:	08007b89 	.word	0x08007b89
 8007b84:	08007c1f 	.word	0x08007c1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d046      	beq.n	8007c22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b98:	e043      	b.n	8007c22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ba2:	d140      	bne.n	8007c26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ba8:	e03d      	b.n	8007c26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb2:	d121      	bne.n	8007bf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d837      	bhi.n	8007c2a <DMA_CheckFifoParam+0xda>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <DMA_CheckFifoParam+0x70>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007bd7 	.word	0x08007bd7
 8007bc8:	08007bd1 	.word	0x08007bd1
 8007bcc:	08007be9 	.word	0x08007be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd4:	e030      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d025      	beq.n	8007c2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007be6:	e022      	b.n	8007c2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bf0:	d11f      	bne.n	8007c32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007bf6:	e01c      	b.n	8007c32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d903      	bls.n	8007c06 <DMA_CheckFifoParam+0xb6>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d003      	beq.n	8007c0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c04:	e018      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0a:	e015      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1c:	e00b      	b.n	8007c36 <DMA_CheckFifoParam+0xe6>
      break;
 8007c1e:	bf00      	nop
 8007c20:	e00a      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      break;
 8007c22:	bf00      	nop
 8007c24:	e008      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      break;
 8007c26:	bf00      	nop
 8007c28:	e006      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e004      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e002      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      break;   
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <DMA_CheckFifoParam+0xe8>
      break;
 8007c36:	bf00      	nop
    }
  } 
  
  return status; 
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b089      	sub	sp, #36	; 0x24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	e16b      	b.n	8007f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c64:	2201      	movs	r2, #1
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4013      	ands	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f040 815a 	bne.w	8007f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d005      	beq.n	8007c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d130      	bne.n	8007cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43db      	mvns	r3, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	091b      	lsrs	r3, r3, #4
 8007ce6:	f003 0201 	and.w	r2, r3, #1
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d017      	beq.n	8007d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	2203      	movs	r2, #3
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d123      	bne.n	8007d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	08da      	lsrs	r2, r3, #3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3208      	adds	r2, #8
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	220f      	movs	r2, #15
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	43db      	mvns	r3, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4013      	ands	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	08da      	lsrs	r2, r3, #3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3208      	adds	r2, #8
 8007d86:	69b9      	ldr	r1, [r7, #24]
 8007d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	2203      	movs	r2, #3
 8007d98:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4013      	ands	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 0203 	and.w	r2, r3, #3
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80b4 	beq.w	8007f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	4b60      	ldr	r3, [pc, #384]	; (8007f54 <HAL_GPIO_Init+0x30c>)
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	4a5f      	ldr	r2, [pc, #380]	; (8007f54 <HAL_GPIO_Init+0x30c>)
 8007dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8007dde:	4b5d      	ldr	r3, [pc, #372]	; (8007f54 <HAL_GPIO_Init+0x30c>)
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dea:	4a5b      	ldr	r2, [pc, #364]	; (8007f58 <HAL_GPIO_Init+0x310>)
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	3302      	adds	r3, #2
 8007df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	220f      	movs	r2, #15
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43db      	mvns	r3, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a52      	ldr	r2, [pc, #328]	; (8007f5c <HAL_GPIO_Init+0x314>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02b      	beq.n	8007e6e <HAL_GPIO_Init+0x226>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a51      	ldr	r2, [pc, #324]	; (8007f60 <HAL_GPIO_Init+0x318>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d025      	beq.n	8007e6a <HAL_GPIO_Init+0x222>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a50      	ldr	r2, [pc, #320]	; (8007f64 <HAL_GPIO_Init+0x31c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d01f      	beq.n	8007e66 <HAL_GPIO_Init+0x21e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a4f      	ldr	r2, [pc, #316]	; (8007f68 <HAL_GPIO_Init+0x320>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d019      	beq.n	8007e62 <HAL_GPIO_Init+0x21a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a4e      	ldr	r2, [pc, #312]	; (8007f6c <HAL_GPIO_Init+0x324>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_GPIO_Init+0x216>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a4d      	ldr	r2, [pc, #308]	; (8007f70 <HAL_GPIO_Init+0x328>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00d      	beq.n	8007e5a <HAL_GPIO_Init+0x212>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a4c      	ldr	r2, [pc, #304]	; (8007f74 <HAL_GPIO_Init+0x32c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <HAL_GPIO_Init+0x20e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a4b      	ldr	r2, [pc, #300]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d101      	bne.n	8007e52 <HAL_GPIO_Init+0x20a>
 8007e4e:	2307      	movs	r3, #7
 8007e50:	e00e      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e52:	2308      	movs	r3, #8
 8007e54:	e00c      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e56:	2306      	movs	r3, #6
 8007e58:	e00a      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e5a:	2305      	movs	r3, #5
 8007e5c:	e008      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e5e:	2304      	movs	r3, #4
 8007e60:	e006      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e62:	2303      	movs	r3, #3
 8007e64:	e004      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e002      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	f002 0203 	and.w	r2, r2, #3
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	4093      	lsls	r3, r2
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e80:	4935      	ldr	r1, [pc, #212]	; (8007f58 <HAL_GPIO_Init+0x310>)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	089b      	lsrs	r3, r3, #2
 8007e86:	3302      	adds	r3, #2
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e8e:	4b3b      	ldr	r3, [pc, #236]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	43db      	mvns	r3, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007eb2:	4a32      	ldr	r2, [pc, #200]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007eb8:	4b30      	ldr	r3, [pc, #192]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007edc:	4a27      	ldr	r2, [pc, #156]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ee2:	4b26      	ldr	r3, [pc, #152]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f06:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f0c:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f30:	4a12      	ldr	r2, [pc, #72]	; (8007f7c <HAL_GPIO_Init+0x334>)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	f67f ae90 	bls.w	8007c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	3724      	adds	r7, #36	; 0x24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800
 8007f58:	40013800 	.word	0x40013800
 8007f5c:	40020000 	.word	0x40020000
 8007f60:	40020400 	.word	0x40020400
 8007f64:	40020800 	.word	0x40020800
 8007f68:	40020c00 	.word	0x40020c00
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	40021400 	.word	0x40021400
 8007f74:	40021800 	.word	0x40021800
 8007f78:	40021c00 	.word	0x40021c00
 8007f7c:	40013c00 	.word	0x40013c00

08007f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	887b      	ldrh	r3, [r7, #2]
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e001      	b.n	8007fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	807b      	strh	r3, [r7, #2]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fc0:	787b      	ldrb	r3, [r7, #1]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fc6:	887a      	ldrh	r2, [r7, #2]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fcc:	e003      	b.n	8007fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fce:	887b      	ldrh	r3, [r7, #2]
 8007fd0:	041a      	lsls	r2, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	619a      	str	r2, [r3, #24]
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e12b      	b.n	800824e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fd fd98 	bl	8005b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2224      	movs	r2, #36	; 0x24
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008048:	f003 f8d6 	bl	800b1f8 <HAL_RCC_GetPCLK1Freq>
 800804c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4a81      	ldr	r2, [pc, #516]	; (8008258 <HAL_I2C_Init+0x274>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d807      	bhi.n	8008068 <HAL_I2C_Init+0x84>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a80      	ldr	r2, [pc, #512]	; (800825c <HAL_I2C_Init+0x278>)
 800805c:	4293      	cmp	r3, r2
 800805e:	bf94      	ite	ls
 8008060:	2301      	movls	r3, #1
 8008062:	2300      	movhi	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	e006      	b.n	8008076 <HAL_I2C_Init+0x92>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a7d      	ldr	r2, [pc, #500]	; (8008260 <HAL_I2C_Init+0x27c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	bf94      	ite	ls
 8008070:	2301      	movls	r3, #1
 8008072:	2300      	movhi	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e0e7      	b.n	800824e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4a78      	ldr	r2, [pc, #480]	; (8008264 <HAL_I2C_Init+0x280>)
 8008082:	fba2 2303 	umull	r2, r3, r2, r3
 8008086:	0c9b      	lsrs	r3, r3, #18
 8008088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4a6a      	ldr	r2, [pc, #424]	; (8008258 <HAL_I2C_Init+0x274>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d802      	bhi.n	80080b8 <HAL_I2C_Init+0xd4>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	3301      	adds	r3, #1
 80080b6:	e009      	b.n	80080cc <HAL_I2C_Init+0xe8>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080be:	fb02 f303 	mul.w	r3, r2, r3
 80080c2:	4a69      	ldr	r2, [pc, #420]	; (8008268 <HAL_I2C_Init+0x284>)
 80080c4:	fba2 2303 	umull	r2, r3, r2, r3
 80080c8:	099b      	lsrs	r3, r3, #6
 80080ca:	3301      	adds	r3, #1
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	495c      	ldr	r1, [pc, #368]	; (8008258 <HAL_I2C_Init+0x274>)
 80080e8:	428b      	cmp	r3, r1
 80080ea:	d819      	bhi.n	8008120 <HAL_I2C_Init+0x13c>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	1e59      	subs	r1, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80080fa:	1c59      	adds	r1, r3, #1
 80080fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008100:	400b      	ands	r3, r1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <HAL_I2C_Init+0x138>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	1e59      	subs	r1, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	fbb1 f3f3 	udiv	r3, r1, r3
 8008114:	3301      	adds	r3, #1
 8008116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800811a:	e051      	b.n	80081c0 <HAL_I2C_Init+0x1dc>
 800811c:	2304      	movs	r3, #4
 800811e:	e04f      	b.n	80081c0 <HAL_I2C_Init+0x1dc>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d111      	bne.n	800814c <HAL_I2C_Init+0x168>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	1e58      	subs	r0, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6859      	ldr	r1, [r3, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	440b      	add	r3, r1
 8008136:	fbb0 f3f3 	udiv	r3, r0, r3
 800813a:	3301      	adds	r3, #1
 800813c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	e012      	b.n	8008172 <HAL_I2C_Init+0x18e>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	1e58      	subs	r0, r3, #1
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6859      	ldr	r1, [r3, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	0099      	lsls	r1, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008162:	3301      	adds	r3, #1
 8008164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf0c      	ite	eq
 800816c:	2301      	moveq	r3, #1
 800816e:	2300      	movne	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_I2C_Init+0x196>
 8008176:	2301      	movs	r3, #1
 8008178:	e022      	b.n	80081c0 <HAL_I2C_Init+0x1dc>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10e      	bne.n	80081a0 <HAL_I2C_Init+0x1bc>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1e58      	subs	r0, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6859      	ldr	r1, [r3, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	440b      	add	r3, r1
 8008190:	fbb0 f3f3 	udiv	r3, r0, r3
 8008194:	3301      	adds	r3, #1
 8008196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800819a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819e:	e00f      	b.n	80081c0 <HAL_I2C_Init+0x1dc>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	1e58      	subs	r0, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6859      	ldr	r1, [r3, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	0099      	lsls	r1, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80081b6:	3301      	adds	r3, #1
 80081b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	6809      	ldr	r1, [r1, #0]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69da      	ldr	r2, [r3, #28]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6911      	ldr	r1, [r2, #16]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	68d2      	ldr	r2, [r2, #12]
 80081fa:	4311      	orrs	r1, r2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	430b      	orrs	r3, r1
 8008202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	695a      	ldr	r2, [r3, #20]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	000186a0 	.word	0x000186a0
 800825c:	001e847f 	.word	0x001e847f
 8008260:	003d08ff 	.word	0x003d08ff
 8008264:	431bde83 	.word	0x431bde83
 8008268:	10624dd3 	.word	0x10624dd3

0800826c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	4608      	mov	r0, r1
 8008276:	4611      	mov	r1, r2
 8008278:	461a      	mov	r2, r3
 800827a:	4603      	mov	r3, r0
 800827c:	817b      	strh	r3, [r7, #10]
 800827e:	460b      	mov	r3, r1
 8008280:	813b      	strh	r3, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008286:	f7ff f883 	bl	8007390 <HAL_GetTick>
 800828a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b20      	cmp	r3, #32
 8008296:	f040 80d9 	bne.w	800844c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2319      	movs	r3, #25
 80082a0:	2201      	movs	r2, #1
 80082a2:	496d      	ldr	r1, [pc, #436]	; (8008458 <HAL_I2C_Mem_Write+0x1ec>)
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f002 f90d 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80082b0:	2302      	movs	r3, #2
 80082b2:	e0cc      	b.n	800844e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_I2C_Mem_Write+0x56>
 80082be:	2302      	movs	r3, #2
 80082c0:	e0c5      	b.n	800844e <HAL_I2C_Mem_Write+0x1e2>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d007      	beq.n	80082e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2221      	movs	r2, #33	; 0x21
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2240      	movs	r2, #64	; 0x40
 8008304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4a4d      	ldr	r2, [pc, #308]	; (800845c <HAL_I2C_Mem_Write+0x1f0>)
 8008328:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800832a:	88f8      	ldrh	r0, [r7, #6]
 800832c:	893a      	ldrh	r2, [r7, #8]
 800832e:	8979      	ldrh	r1, [r7, #10]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	4603      	mov	r3, r0
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f001 fe9c 	bl	800a078 <I2C_RequestMemoryWrite>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d052      	beq.n	80083ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e081      	b.n	800844e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f002 f98e 	bl	800a670 <I2C_WaitOnTXEFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00d      	beq.n	8008376 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	2b04      	cmp	r3, #4
 8008360:	d107      	bne.n	8008372 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e06b      	b.n	800844e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	781a      	ldrb	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008390:	3b01      	subs	r3, #1
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d11b      	bne.n	80083ec <HAL_I2C_Mem_Write+0x180>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d017      	beq.n	80083ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1aa      	bne.n	800834a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f002 f97a 	bl	800a6f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00d      	beq.n	8008420 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	2b04      	cmp	r3, #4
 800840a:	d107      	bne.n	800841c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800841a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e016      	b.n	800844e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800842e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	00100002 	.word	0x00100002
 800845c:	ffff0000 	.word	0xffff0000

08008460 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08c      	sub	sp, #48	; 0x30
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	4608      	mov	r0, r1
 800846a:	4611      	mov	r1, r2
 800846c:	461a      	mov	r2, r3
 800846e:	4603      	mov	r3, r0
 8008470:	817b      	strh	r3, [r7, #10]
 8008472:	460b      	mov	r3, r1
 8008474:	813b      	strh	r3, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800847a:	f7fe ff89 	bl	8007390 <HAL_GetTick>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b20      	cmp	r3, #32
 800848a:	f040 8208 	bne.w	800889e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2319      	movs	r3, #25
 8008494:	2201      	movs	r2, #1
 8008496:	497b      	ldr	r1, [pc, #492]	; (8008684 <HAL_I2C_Mem_Read+0x224>)
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f002 f813 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80084a4:	2302      	movs	r3, #2
 80084a6:	e1fb      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <HAL_I2C_Mem_Read+0x56>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e1f4      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d007      	beq.n	80084dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2222      	movs	r2, #34	; 0x22
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2240      	movs	r2, #64	; 0x40
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800850c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4a5b      	ldr	r2, [pc, #364]	; (8008688 <HAL_I2C_Mem_Read+0x228>)
 800851c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800851e:	88f8      	ldrh	r0, [r7, #6]
 8008520:	893a      	ldrh	r2, [r7, #8]
 8008522:	8979      	ldrh	r1, [r7, #10]
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4603      	mov	r3, r0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f001 fe38 	bl	800a1a4 <I2C_RequestMemoryRead>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e1b0      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d113      	bne.n	800856e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008546:	2300      	movs	r3, #0
 8008548:	623b      	str	r3, [r7, #32]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	623b      	str	r3, [r7, #32]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	623b      	str	r3, [r7, #32]
 800855a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e184      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008572:	2b01      	cmp	r3, #1
 8008574:	d11b      	bne.n	80085ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008586:	2300      	movs	r3, #0
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e164      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d11b      	bne.n	80085ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d6:	2300      	movs	r3, #0
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	e144      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008604:	e138      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800860a:	2b03      	cmp	r3, #3
 800860c:	f200 80f1 	bhi.w	80087f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008614:	2b01      	cmp	r3, #1
 8008616:	d123      	bne.n	8008660 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f002 f8db 	bl	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e139      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800865e:	e10b      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008664:	2b02      	cmp	r3, #2
 8008666:	d14e      	bne.n	8008706 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	2200      	movs	r2, #0
 8008670:	4906      	ldr	r1, [pc, #24]	; (800868c <HAL_I2C_Mem_Read+0x22c>)
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f001 ff26 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d008      	beq.n	8008690 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e10e      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
 8008682:	bf00      	nop
 8008684:	00100002 	.word	0x00100002
 8008688:	ffff0000 	.word	0xffff0000
 800868c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800869e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008704:	e0b8      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2200      	movs	r2, #0
 800870e:	4966      	ldr	r1, [pc, #408]	; (80088a8 <HAL_I2C_Mem_Read+0x448>)
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f001 fed7 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0bf      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800872e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	2200      	movs	r2, #0
 800876a:	494f      	ldr	r1, [pc, #316]	; (80088a8 <HAL_I2C_Mem_Read+0x448>)
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f001 fea9 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e091      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087f0:	e042      	b.n	8008878 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f001 ffee 	bl	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e04c      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b04      	cmp	r3, #4
 8008844:	d118      	bne.n	8008878 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f aec2 	bne.w	8008606 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2220      	movs	r2, #32
 8008886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	e000      	b.n	80088a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800889e:	2302      	movs	r3, #2
  }
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3728      	adds	r7, #40	; 0x28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	00010004 	.word	0x00010004

080088ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d003      	beq.n	80088e4 <HAL_I2C_EV_IRQHandler+0x38>
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	f040 80c1 	bne.w	8008a66 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10d      	bne.n	800891a <HAL_I2C_EV_IRQHandler+0x6e>
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008904:	d003      	beq.n	800890e <HAL_I2C_EV_IRQHandler+0x62>
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800890c:	d101      	bne.n	8008912 <HAL_I2C_EV_IRQHandler+0x66>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <HAL_I2C_EV_IRQHandler+0x68>
 8008912:	2300      	movs	r3, #0
 8008914:	2b01      	cmp	r3, #1
 8008916:	f000 8132 	beq.w	8008b7e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00c      	beq.n	800893e <HAL_I2C_EV_IRQHandler+0x92>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	0a5b      	lsrs	r3, r3, #9
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d006      	beq.n	800893e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 ffd6 	bl	800a8e2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fd83 	bl	8009442 <I2C_Master_SB>
 800893c:	e092      	b.n	8008a64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	08db      	lsrs	r3, r3, #3
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <HAL_I2C_EV_IRQHandler+0xb2>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	0a5b      	lsrs	r3, r3, #9
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fdf9 	bl	800954e <I2C_Master_ADD10>
 800895c:	e082      	b.n	8008a64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	085b      	lsrs	r3, r3, #1
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <HAL_I2C_EV_IRQHandler+0xd2>
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	0a5b      	lsrs	r3, r3, #9
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fe13 	bl	80095a2 <I2C_Master_ADDR>
 800897c:	e072      	b.n	8008a64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	089b      	lsrs	r3, r3, #2
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d03b      	beq.n	8008a02 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008998:	f000 80f3 	beq.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	09db      	lsrs	r3, r3, #7
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00f      	beq.n	80089c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	0a9b      	lsrs	r3, r3, #10
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	089b      	lsrs	r3, r3, #2
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f9f3 	bl	8008dac <I2C_MasterTransmit_TXE>
 80089c6:	e04d      	b.n	8008a64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	089b      	lsrs	r3, r3, #2
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 80d6 	beq.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	0a5b      	lsrs	r3, r3, #9
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80cf 	beq.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b21      	cmp	r3, #33	; 0x21
 80089e8:	d103      	bne.n	80089f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa7a 	bl	8008ee4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089f0:	e0c7      	b.n	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	f040 80c4 	bne.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fae8 	bl	8008fd0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a00:	e0bf      	b.n	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a10:	f000 80b7 	beq.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00f      	beq.n	8008a40 <HAL_I2C_EV_IRQHandler+0x194>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	0a9b      	lsrs	r3, r3, #10
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <HAL_I2C_EV_IRQHandler+0x194>
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	089b      	lsrs	r3, r3, #2
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d103      	bne.n	8008a40 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fb5d 	bl	80090f8 <I2C_MasterReceive_RXNE>
 8008a3e:	e011      	b.n	8008a64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	089b      	lsrs	r3, r3, #2
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 809a 	beq.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	0a5b      	lsrs	r3, r3, #9
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 8093 	beq.w	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc06 	bl	800926e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a62:	e08e      	b.n	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a64:	e08d      	b.n	8008b82 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	e007      	b.n	8008a88 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	085b      	lsrs	r3, r3, #1
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d012      	beq.n	8008aba <HAL_I2C_EV_IRQHandler+0x20e>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	0a5b      	lsrs	r3, r3, #9
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008ab0:	69b9      	ldr	r1, [r7, #24]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 ffc4 	bl	8009a40 <I2C_Slave_ADDR>
 8008ab8:	e066      	b.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <HAL_I2C_EV_IRQHandler+0x22e>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	0a5b      	lsrs	r3, r3, #9
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fffe 	bl	8009ad4 <I2C_Slave_STOPF>
 8008ad8:	e056      	b.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b21      	cmp	r3, #33	; 0x21
 8008ade:	d002      	beq.n	8008ae6 <HAL_I2C_EV_IRQHandler+0x23a>
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	2b29      	cmp	r3, #41	; 0x29
 8008ae4:	d125      	bne.n	8008b32 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	09db      	lsrs	r3, r3, #7
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00f      	beq.n	8008b12 <HAL_I2C_EV_IRQHandler+0x266>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	0a9b      	lsrs	r3, r3, #10
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <HAL_I2C_EV_IRQHandler+0x266>
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	089b      	lsrs	r3, r3, #2
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d103      	bne.n	8008b12 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 feda 	bl	80098c4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b10:	e039      	b.n	8008b86 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	089b      	lsrs	r3, r3, #2
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d033      	beq.n	8008b86 <HAL_I2C_EV_IRQHandler+0x2da>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	0a5b      	lsrs	r3, r3, #9
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d02d      	beq.n	8008b86 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 ff07 	bl	800993e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b30:	e029      	b.n	8008b86 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	099b      	lsrs	r3, r3, #6
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00f      	beq.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	0a9b      	lsrs	r3, r3, #10
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	089b      	lsrs	r3, r3, #2
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d103      	bne.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 ff12 	bl	8009980 <I2C_SlaveReceive_RXNE>
 8008b5c:	e014      	b.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00e      	beq.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	0a5b      	lsrs	r3, r3, #9
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 ff40 	bl	80099fc <I2C_SlaveReceive_BTF>
 8008b7c:	e004      	b.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008b7e:	bf00      	nop
 8008b80:	e002      	b.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b08a      	sub	sp, #40	; 0x28
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00e      	beq.n	8008bdc <HAL_I2C_ER_IRQHandler+0x4e>
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d008      	beq.n	8008bdc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	f043 0301 	orr.w	r3, r3, #1
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bda:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	0a5b      	lsrs	r3, r3, #9
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00e      	beq.n	8008c06 <HAL_I2C_ER_IRQHandler+0x78>
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f043 0302 	orr.w	r3, r3, #2
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008c04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	0a9b      	lsrs	r3, r3, #10
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d03f      	beq.n	8008c92 <HAL_I2C_ER_IRQHandler+0x104>
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	0a1b      	lsrs	r3, r3, #8
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d039      	beq.n	8008c92 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008c1e:	7efb      	ldrb	r3, [r7, #27]
 8008c20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008c38:	7ebb      	ldrb	r3, [r7, #26]
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d112      	bne.n	8008c64 <HAL_I2C_ER_IRQHandler+0xd6>
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10f      	bne.n	8008c64 <HAL_I2C_ER_IRQHandler+0xd6>
 8008c44:	7cfb      	ldrb	r3, [r7, #19]
 8008c46:	2b21      	cmp	r3, #33	; 0x21
 8008c48:	d008      	beq.n	8008c5c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008c4a:	7cfb      	ldrb	r3, [r7, #19]
 8008c4c:	2b29      	cmp	r3, #41	; 0x29
 8008c4e:	d005      	beq.n	8008c5c <HAL_I2C_ER_IRQHandler+0xce>
 8008c50:	7cfb      	ldrb	r3, [r7, #19]
 8008c52:	2b28      	cmp	r3, #40	; 0x28
 8008c54:	d106      	bne.n	8008c64 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b21      	cmp	r3, #33	; 0x21
 8008c5a:	d103      	bne.n	8008c64 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f869 	bl	8009d34 <I2C_Slave_AF>
 8008c62:	e016      	b.n	8008c92 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	f043 0304 	orr.w	r3, r3, #4
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008c76:	7efb      	ldrb	r3, [r7, #27]
 8008c78:	2b10      	cmp	r3, #16
 8008c7a:	d002      	beq.n	8008c82 <HAL_I2C_ER_IRQHandler+0xf4>
 8008c7c:	7efb      	ldrb	r3, [r7, #27]
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d107      	bne.n	8008c92 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	0adb      	lsrs	r3, r3, #11
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <HAL_I2C_ER_IRQHandler+0x12e>
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	0a1b      	lsrs	r3, r3, #8
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	f043 0308 	orr.w	r3, r3, #8
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008cba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 f8a0 	bl	8009e14 <I2C_ITError>
  }
}
 8008cd4:	bf00      	nop
 8008cd6:	3728      	adds	r7, #40	; 0x28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d150      	bne.n	8008e74 <I2C_MasterTransmit_TXE+0xc8>
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	2b21      	cmp	r3, #33	; 0x21
 8008dd6:	d14d      	bne.n	8008e74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d01d      	beq.n	8008e1a <I2C_MasterTransmit_TXE+0x6e>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b20      	cmp	r3, #32
 8008de2:	d01a      	beq.n	8008e1a <I2C_MasterTransmit_TXE+0x6e>
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dea:	d016      	beq.n	8008e1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2211      	movs	r2, #17
 8008e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7ff ff62 	bl	8008cdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e18:	e060      	b.n	8008edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b40      	cmp	r3, #64	; 0x40
 8008e52:	d107      	bne.n	8008e64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff7d 	bl	8008d5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e62:	e03b      	b.n	8008edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff35 	bl	8008cdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e72:	e033      	b.n	8008edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	2b21      	cmp	r3, #33	; 0x21
 8008e78:	d005      	beq.n	8008e86 <I2C_MasterTransmit_TXE+0xda>
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d12d      	bne.n	8008edc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	2b22      	cmp	r3, #34	; 0x22
 8008e84:	d12a      	bne.n	8008edc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d108      	bne.n	8008ea2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008ea0:	e01c      	b.n	8008edc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d103      	bne.n	8008eb6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f88e 	bl	8008fd0 <I2C_MemoryTransmit_TXE_BTF>
}
 8008eb4:	e012      	b.n	8008edc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008eda:	e7ff      	b.n	8008edc <I2C_MasterTransmit_TXE+0x130>
 8008edc:	bf00      	nop
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b21      	cmp	r3, #33	; 0x21
 8008efc:	d164      	bne.n	8008fc8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d012      	beq.n	8008f2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	781a      	ldrb	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008f2c:	e04c      	b.n	8008fc8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d01d      	beq.n	8008f70 <I2C_MasterTransmit_BTF+0x8c>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d01a      	beq.n	8008f70 <I2C_MasterTransmit_BTF+0x8c>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f40:	d016      	beq.n	8008f70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2211      	movs	r2, #17
 8008f56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff feb7 	bl	8008cdc <HAL_I2C_MasterTxCpltCallback>
}
 8008f6e:	e02b      	b.n	8008fc8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b40      	cmp	r3, #64	; 0x40
 8008fa8:	d107      	bne.n	8008fba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff fed2 	bl	8008d5c <HAL_I2C_MemTxCpltCallback>
}
 8008fb8:	e006      	b.n	8008fc8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fe8a 	bl	8008cdc <HAL_I2C_MasterTxCpltCallback>
}
 8008fc8:	bf00      	nop
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d11d      	bne.n	8009024 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d10b      	bne.n	8009008 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009000:	1c9a      	adds	r2, r3, #2
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009006:	e073      	b.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800900c:	b29b      	uxth	r3, r3
 800900e:	121b      	asrs	r3, r3, #8
 8009010:	b2da      	uxtb	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009022:	e065      	b.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009028:	2b01      	cmp	r3, #1
 800902a:	d10b      	bne.n	8009044 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009030:	b2da      	uxtb	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009042:	e055      	b.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009048:	2b02      	cmp	r3, #2
 800904a:	d151      	bne.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b22      	cmp	r3, #34	; 0x22
 8009050:	d10d      	bne.n	800906e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009060:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800906c:	e040      	b.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d015      	beq.n	80090a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	2b21      	cmp	r3, #33	; 0x21
 800907c:	d112      	bne.n	80090a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	781a      	ldrb	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009098:	b29b      	uxth	r3, r3
 800909a:	3b01      	subs	r3, #1
 800909c:	b29a      	uxth	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80090a2:	e025      	b.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d120      	bne.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b21      	cmp	r3, #33	; 0x21
 80090b2:	d11d      	bne.n	80090f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fe36 	bl	8008d5c <HAL_I2C_MemTxCpltCallback>
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b22      	cmp	r3, #34	; 0x22
 800910a:	f040 80ac 	bne.w	8009266 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009112:	b29b      	uxth	r3, r3
 8009114:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b03      	cmp	r3, #3
 800911a:	d921      	bls.n	8009160 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691a      	ldr	r2, [r3, #16]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b03      	cmp	r3, #3
 800914a:	f040 808c 	bne.w	8009266 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800915c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800915e:	e082      	b.n	8009266 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	2b02      	cmp	r3, #2
 8009166:	d075      	beq.n	8009254 <I2C_MasterReceive_RXNE+0x15c>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d002      	beq.n	8009174 <I2C_MasterReceive_RXNE+0x7c>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d16f      	bne.n	8009254 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fafd 	bl	800a774 <I2C_WaitOnSTOPRequestThroughIT>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d142      	bne.n	8009206 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800919e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	d10a      	bne.n	80091f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff fdc1 	bl	8008d70 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091ee:	e03a      	b.n	8009266 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2212      	movs	r2, #18
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fd76 	bl	8008cf0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009204:	e02f      	b.n	8009266 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009214:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	b2d2      	uxtb	r2, r2
 8009222:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009232:	b29b      	uxth	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff fd99 	bl	8008d84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009252:	e008      	b.n	8009266 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009262:	605a      	str	r2, [r3, #4]
}
 8009264:	e7ff      	b.n	8009266 <I2C_MasterReceive_RXNE+0x16e>
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b04      	cmp	r3, #4
 8009284:	d11b      	bne.n	80092be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009294:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80092bc:	e0bd      	b.n	800943a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d129      	bne.n	800931c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d00a      	beq.n	80092f4 <I2C_MasterReceive_BTF+0x86>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d007      	beq.n	80092f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800931a:	e08e      	b.n	800943a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d176      	bne.n	8009414 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d002      	beq.n	8009332 <I2C_MasterReceive_BTF+0xc4>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b10      	cmp	r3, #16
 8009330:	d108      	bne.n	8009344 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e019      	b.n	8009378 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b04      	cmp	r3, #4
 8009348:	d002      	beq.n	8009350 <I2C_MasterReceive_BTF+0xe2>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d108      	bne.n	8009362 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	e00a      	b.n	8009378 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b10      	cmp	r3, #16
 8009366:	d007      	beq.n	8009378 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009376:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691a      	ldr	r2, [r3, #16]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	b2d2      	uxtb	r2, r2
 80093aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80093d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b40      	cmp	r3, #64	; 0x40
 80093e6:	d10a      	bne.n	80093fe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fcba 	bl	8008d70 <HAL_I2C_MemRxCpltCallback>
}
 80093fc:	e01d      	b.n	800943a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2212      	movs	r2, #18
 800940a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff fc6f 	bl	8008cf0 <HAL_I2C_MasterRxCpltCallback>
}
 8009412:	e012      	b.n	800943a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691a      	ldr	r2, [r3, #16]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b40      	cmp	r3, #64	; 0x40
 8009454:	d117      	bne.n	8009486 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800946e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009470:	e067      	b.n	8009542 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f043 0301 	orr.w	r3, r3, #1
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	611a      	str	r2, [r3, #16]
}
 8009484:	e05d      	b.n	8009542 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800948e:	d133      	bne.n	80094f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b21      	cmp	r3, #33	; 0x21
 800949a:	d109      	bne.n	80094b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80094ac:	611a      	str	r2, [r3, #16]
 80094ae:	e008      	b.n	80094c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f043 0301 	orr.w	r3, r3, #1
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <I2C_Master_SB+0x92>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d108      	bne.n	80094e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d032      	beq.n	8009542 <I2C_Master_SB+0x100>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d02d      	beq.n	8009542 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094f4:	605a      	str	r2, [r3, #4]
}
 80094f6:	e024      	b.n	8009542 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10e      	bne.n	800951e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	b29b      	uxth	r3, r3
 8009506:	11db      	asrs	r3, r3, #7
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f063 030f 	orn	r3, r3, #15
 8009514:	b2da      	uxtb	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	611a      	str	r2, [r3, #16]
}
 800951c:	e011      	b.n	8009542 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009522:	2b01      	cmp	r3, #1
 8009524:	d10d      	bne.n	8009542 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	b29b      	uxth	r3, r3
 800952c:	11db      	asrs	r3, r3, #7
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 0306 	and.w	r3, r3, #6
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f063 030e 	orn	r3, r3, #14
 800953a:	b2da      	uxtb	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	611a      	str	r2, [r3, #16]
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	b2da      	uxtb	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <I2C_Master_ADD10+0x26>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d108      	bne.n	8009586 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00c      	beq.n	8009596 <I2C_Master_ADD10+0x48>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009594:	605a      	str	r2, [r3, #4]
  }
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b091      	sub	sp, #68	; 0x44
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b22      	cmp	r3, #34	; 0x22
 80095ca:	f040 8169 	bne.w	80098a0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10f      	bne.n	80095f6 <I2C_Master_ADDR+0x54>
 80095d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d10b      	bne.n	80095f6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095de:	2300      	movs	r3, #0
 80095e0:	633b      	str	r3, [r7, #48]	; 0x30
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	633b      	str	r3, [r7, #48]	; 0x30
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	e160      	b.n	80098b8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d11d      	bne.n	800963a <I2C_Master_ADDR+0x98>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009606:	d118      	bne.n	800963a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009608:	2300      	movs	r3, #0
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800962c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	651a      	str	r2, [r3, #80]	; 0x50
 8009638:	e13e      	b.n	80098b8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d113      	bne.n	800966c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009644:	2300      	movs	r3, #0
 8009646:	62bb      	str	r3, [r7, #40]	; 0x28
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	62bb      	str	r3, [r7, #40]	; 0x28
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	e115      	b.n	8009898 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009670:	b29b      	uxth	r3, r3
 8009672:	2b01      	cmp	r3, #1
 8009674:	f040 808a 	bne.w	800978c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800967e:	d137      	bne.n	80096f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800968e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800969a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800969e:	d113      	bne.n	80096c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b0:	2300      	movs	r3, #0
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	e0e7      	b.n	8009898 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096c8:	2300      	movs	r3, #0
 80096ca:	623b      	str	r3, [r7, #32]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	623b      	str	r3, [r7, #32]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	623b      	str	r3, [r7, #32]
 80096dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	e0d3      	b.n	8009898 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d02e      	beq.n	8009754 <I2C_Master_ADDR+0x1b2>
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	2b20      	cmp	r3, #32
 80096fa:	d02b      	beq.n	8009754 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80096fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fe:	2b12      	cmp	r3, #18
 8009700:	d102      	bne.n	8009708 <I2C_Master_ADDR+0x166>
 8009702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009704:	2b01      	cmp	r3, #1
 8009706:	d125      	bne.n	8009754 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	2b04      	cmp	r3, #4
 800970c:	d00e      	beq.n	800972c <I2C_Master_ADDR+0x18a>
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	2b02      	cmp	r3, #2
 8009712:	d00b      	beq.n	800972c <I2C_Master_ADDR+0x18a>
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	2b10      	cmp	r3, #16
 8009718:	d008      	beq.n	800972c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e007      	b.n	800973c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800973a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800973c:	2300      	movs	r3, #0
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	e0a1      	b.n	8009898 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009762:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009764:	2300      	movs	r3, #0
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	e085      	b.n	8009898 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d14d      	bne.n	8009832 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	2b04      	cmp	r3, #4
 800979a:	d016      	beq.n	80097ca <I2C_Master_ADDR+0x228>
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d013      	beq.n	80097ca <I2C_Master_ADDR+0x228>
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d010      	beq.n	80097ca <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	e007      	b.n	80097da <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097d8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e8:	d117      	bne.n	800981a <I2C_Master_ADDR+0x278>
 80097ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097f0:	d00b      	beq.n	800980a <I2C_Master_ADDR+0x268>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d008      	beq.n	800980a <I2C_Master_ADDR+0x268>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	2b08      	cmp	r3, #8
 80097fc:	d005      	beq.n	800980a <I2C_Master_ADDR+0x268>
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	2b10      	cmp	r3, #16
 8009802:	d002      	beq.n	800980a <I2C_Master_ADDR+0x268>
 8009804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009806:	2b20      	cmp	r3, #32
 8009808:	d107      	bne.n	800981a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009818:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	e032      	b.n	8009898 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009840:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009850:	d117      	bne.n	8009882 <I2C_Master_ADDR+0x2e0>
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009858:	d00b      	beq.n	8009872 <I2C_Master_ADDR+0x2d0>
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	2b01      	cmp	r3, #1
 800985e:	d008      	beq.n	8009872 <I2C_Master_ADDR+0x2d0>
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	2b08      	cmp	r3, #8
 8009864:	d005      	beq.n	8009872 <I2C_Master_ADDR+0x2d0>
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	2b10      	cmp	r3, #16
 800986a:	d002      	beq.n	8009872 <I2C_Master_ADDR+0x2d0>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	2b20      	cmp	r3, #32
 8009870:	d107      	bne.n	8009882 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009880:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009882:	2300      	movs	r3, #0
 8009884:	613b      	str	r3, [r7, #16]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	613b      	str	r3, [r7, #16]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	613b      	str	r3, [r7, #16]
 8009896:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800989e:	e00b      	b.n	80098b8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
}
 80098b6:	e7ff      	b.n	80098b8 <I2C_Master_ADDR+0x316>
 80098b8:	bf00      	nop
 80098ba:	3744      	adds	r7, #68	; 0x44
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d8:	b29b      	uxth	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d02b      	beq.n	8009936 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d114      	bne.n	8009936 <I2C_SlaveTransmit_TXE+0x72>
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b29      	cmp	r3, #41	; 0x29
 8009910:	d111      	bne.n	8009936 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009920:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2221      	movs	r2, #33	; 0x21
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2228      	movs	r2, #40	; 0x28
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f9e7 	bl	8008d04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994a:	b29b      	uxth	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d011      	beq.n	8009974 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	781a      	ldrb	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996a:	b29b      	uxth	r3, r3
 800996c:	3b01      	subs	r3, #1
 800996e:	b29a      	uxth	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d02c      	beq.n	80099f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691a      	ldr	r2, [r3, #16]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	b2d2      	uxtb	r2, r2
 80099a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d114      	bne.n	80099f4 <I2C_SlaveReceive_RXNE+0x74>
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b2a      	cmp	r3, #42	; 0x2a
 80099ce:	d111      	bne.n	80099f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2222      	movs	r2, #34	; 0x22
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2228      	movs	r2, #40	; 0x28
 80099ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff f992 	bl	8008d18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d012      	beq.n	8009a34 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a5a:	2b28      	cmp	r3, #40	; 0x28
 8009a5c:	d127      	bne.n	8009aae <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a6c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	089b      	lsrs	r3, r3, #2
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	09db      	lsrs	r3, r3, #7
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d103      	bne.n	8009a92 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	81bb      	strh	r3, [r7, #12]
 8009a90:	e002      	b.n	8009a98 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009aa0:	89ba      	ldrh	r2, [r7, #12]
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff f940 	bl	8008d2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009aac:	e00e      	b.n	8009acc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60bb      	str	r3, [r7, #8]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009af2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009af4:	2300      	movs	r3, #0
 8009af6:	60bb      	str	r3, [r7, #8]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0201 	orr.w	r2, r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b30:	d172      	bne.n	8009c18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	2b22      	cmp	r3, #34	; 0x22
 8009b36:	d002      	beq.n	8009b3e <I2C_Slave_STOPF+0x6a>
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d135      	bne.n	8009baa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	f043 0204 	orr.w	r2, r3, #4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fd ffa6 	bl	8007ac8 <HAL_DMA_GetState>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d049      	beq.n	8009c16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	4a69      	ldr	r2, [pc, #420]	; (8009d2c <I2C_Slave_STOPF+0x258>)
 8009b88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fd fdee 	bl	8007770 <HAL_DMA_Abort_IT>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d03d      	beq.n	8009c16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ba8:	e035      	b.n	8009c16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	f043 0204 	orr.w	r2, r3, #4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fd ff70 	bl	8007ac8 <HAL_DMA_GetState>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d014      	beq.n	8009c18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf2:	4a4e      	ldr	r2, [pc, #312]	; (8009d2c <I2C_Slave_STOPF+0x258>)
 8009bf4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fd fdb8 	bl	8007770 <HAL_DMA_Abort_IT>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d008      	beq.n	8009c18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
 8009c14:	e000      	b.n	8009c18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009c16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d03e      	beq.n	8009ca0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d112      	bne.n	8009c56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c60:	2b40      	cmp	r3, #64	; 0x40
 8009c62:	d112      	bne.n	8009c8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	691a      	ldr	r2, [r3, #16]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	b2d2      	uxtb	r2, r2
 8009c70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	f043 0204 	orr.w	r2, r3, #4
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f8b3 	bl	8009e14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009cae:	e039      	b.n	8009d24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb4:	d109      	bne.n	8009cca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2228      	movs	r2, #40	; 0x28
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff f827 	bl	8008d18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b28      	cmp	r3, #40	; 0x28
 8009cd4:	d111      	bne.n	8009cfa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a15      	ldr	r2, [pc, #84]	; (8009d30 <I2C_Slave_STOPF+0x25c>)
 8009cda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff f828 	bl	8008d48 <HAL_I2C_ListenCpltCallback>
}
 8009cf8:	e014      	b.n	8009d24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfe:	2b22      	cmp	r3, #34	; 0x22
 8009d00:	d002      	beq.n	8009d08 <I2C_Slave_STOPF+0x234>
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	2b22      	cmp	r3, #34	; 0x22
 8009d06:	d10d      	bne.n	8009d24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fe fffa 	bl	8008d18 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	0800a375 	.word	0x0800a375
 8009d30:	ffff0000 	.word	0xffff0000

08009d34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d002      	beq.n	8009d56 <I2C_Slave_AF+0x22>
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b20      	cmp	r3, #32
 8009d54:	d129      	bne.n	8009daa <I2C_Slave_AF+0x76>
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b28      	cmp	r3, #40	; 0x28
 8009d5a:	d126      	bne.n	8009daa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a2c      	ldr	r2, [pc, #176]	; (8009e10 <I2C_Slave_AF+0xdc>)
 8009d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7fe ffd0 	bl	8008d48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009da8:	e02e      	b.n	8009e08 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	2b21      	cmp	r3, #33	; 0x21
 8009dae:	d126      	bne.n	8009dfe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a17      	ldr	r2, [pc, #92]	; (8009e10 <I2C_Slave_AF+0xdc>)
 8009db4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2221      	movs	r2, #33	; 0x21
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009dda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009de4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7fe ff84 	bl	8008d04 <HAL_I2C_SlaveTxCpltCallback>
}
 8009dfc:	e004      	b.n	8009e08 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e06:	615a      	str	r2, [r3, #20]
}
 8009e08:	bf00      	nop
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	ffff0000 	.word	0xffff0000

08009e14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	2b10      	cmp	r3, #16
 8009e30:	d002      	beq.n	8009e38 <I2C_ITError+0x24>
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	2b40      	cmp	r3, #64	; 0x40
 8009e36:	d10a      	bne.n	8009e4e <I2C_ITError+0x3a>
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	2b22      	cmp	r3, #34	; 0x22
 8009e3c:	d107      	bne.n	8009e4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e54:	2b28      	cmp	r3, #40	; 0x28
 8009e56:	d107      	bne.n	8009e68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2228      	movs	r2, #40	; 0x28
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e66:	e015      	b.n	8009e94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e76:	d00a      	beq.n	8009e8e <I2C_ITError+0x7a>
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	2b60      	cmp	r3, #96	; 0x60
 8009e7c:	d007      	beq.n	8009e8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ea2:	d162      	bne.n	8009f6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eb2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d020      	beq.n	8009f04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	4a6a      	ldr	r2, [pc, #424]	; (800a070 <I2C_ITError+0x25c>)
 8009ec8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fd fc4e 	bl	8007770 <HAL_DMA_Abort_IT>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 8089 	beq.w	8009fee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0201 	bic.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009efe:	4610      	mov	r0, r2
 8009f00:	4798      	blx	r3
 8009f02:	e074      	b.n	8009fee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f08:	4a59      	ldr	r2, [pc, #356]	; (800a070 <I2C_ITError+0x25c>)
 8009f0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fd fc2d 	bl	8007770 <HAL_DMA_Abort_IT>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d068      	beq.n	8009fee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f26:	2b40      	cmp	r3, #64	; 0x40
 8009f28:	d10b      	bne.n	8009f42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0201 	bic.w	r2, r2, #1
 8009f50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2220      	movs	r2, #32
 8009f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
 8009f68:	e041      	b.n	8009fee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b60      	cmp	r3, #96	; 0x60
 8009f74:	d125      	bne.n	8009fc2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8e:	2b40      	cmp	r3, #64	; 0x40
 8009f90:	d10b      	bne.n	8009faa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0201 	bic.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fe feec 	bl	8008d98 <HAL_I2C_AbortCpltCallback>
 8009fc0:	e015      	b.n	8009fee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d10b      	bne.n	8009fe8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	691a      	ldr	r2, [r3, #16]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7fe fecb 	bl	8008d84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10e      	bne.n	800a01c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a004:	2b00      	cmp	r3, #0
 800a006:	d109      	bne.n	800a01c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d007      	beq.n	800a02c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a02a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a032:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d113      	bne.n	800a068 <I2C_ITError+0x254>
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	2b28      	cmp	r3, #40	; 0x28
 800a044:	d110      	bne.n	800a068 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a0a      	ldr	r2, [pc, #40]	; (800a074 <I2C_ITError+0x260>)
 800a04a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7fe fe70 	bl	8008d48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	0800a375 	.word	0x0800a375
 800a074:	ffff0000 	.word	0xffff0000

0800a078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	4608      	mov	r0, r1
 800a082:	4611      	mov	r1, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4603      	mov	r3, r0
 800a088:	817b      	strh	r3, [r7, #10]
 800a08a:	460b      	mov	r3, r1
 800a08c:	813b      	strh	r3, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 fa08 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00d      	beq.n	800a0d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c8:	d103      	bne.n	800a0d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e05f      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0d6:	897b      	ldrh	r3, [r7, #10]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	6a3a      	ldr	r2, [r7, #32]
 800a0ea:	492d      	ldr	r1, [pc, #180]	; (800a1a0 <I2C_RequestMemoryWrite+0x128>)
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fa40 	bl	800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e04c      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	6a39      	ldr	r1, [r7, #32]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 faaa 	bl	800a670 <I2C_WaitOnTXEFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	2b04      	cmp	r3, #4
 800a128:	d107      	bne.n	800a13a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e02b      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d105      	bne.n	800a150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a144:	893b      	ldrh	r3, [r7, #8]
 800a146:	b2da      	uxtb	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	611a      	str	r2, [r3, #16]
 800a14e:	e021      	b.n	800a194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a150:	893b      	ldrh	r3, [r7, #8]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	b29b      	uxth	r3, r3
 800a156:	b2da      	uxtb	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a160:	6a39      	ldr	r1, [r7, #32]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fa84 	bl	800a670 <I2C_WaitOnTXEFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00d      	beq.n	800a18a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	2b04      	cmp	r3, #4
 800a174:	d107      	bne.n	800a186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e005      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a18a:	893b      	ldrh	r3, [r7, #8]
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	00010002 	.word	0x00010002

0800a1a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	817b      	strh	r3, [r7, #10]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	813b      	strh	r3, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f96a 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00d      	beq.n	800a212 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a204:	d103      	bne.n	800a20e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a20c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e0aa      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	461a      	mov	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	6a3a      	ldr	r2, [r7, #32]
 800a226:	4952      	ldr	r1, [pc, #328]	; (800a370 <I2C_RequestMemoryRead+0x1cc>)
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 f9a2 	bl	800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e097      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	6a39      	ldr	r1, [r7, #32]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fa0c 	bl	800a670 <I2C_WaitOnTXEFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	2b04      	cmp	r3, #4
 800a264:	d107      	bne.n	800a276 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e076      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d105      	bne.n	800a28c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a280:	893b      	ldrh	r3, [r7, #8]
 800a282:	b2da      	uxtb	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	611a      	str	r2, [r3, #16]
 800a28a:	e021      	b.n	800a2d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a28c:	893b      	ldrh	r3, [r7, #8]
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	b29b      	uxth	r3, r3
 800a292:	b2da      	uxtb	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29c:	6a39      	ldr	r1, [r7, #32]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f9e6 	bl	800a670 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00d      	beq.n	800a2c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d107      	bne.n	800a2c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e050      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2c6:	893b      	ldrh	r3, [r7, #8]
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d2:	6a39      	ldr	r1, [r7, #32]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f9cb 	bl	800a670 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d107      	bne.n	800a2f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e035      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a30a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	2200      	movs	r2, #0
 800a314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f8d3 	bl	800a4c4 <I2C_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a332:	d103      	bne.n	800a33c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e013      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a340:	897b      	ldrh	r3, [r7, #10]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	6a3a      	ldr	r2, [r7, #32]
 800a354:	4906      	ldr	r1, [pc, #24]	; (800a370 <I2C_RequestMemoryRead+0x1cc>)
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 f90b 	bl	800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	00010002 	.word	0x00010002

0800a374 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a38c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a38e:	4b4b      	ldr	r3, [pc, #300]	; (800a4bc <I2C_DMAAbort+0x148>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	4a4a      	ldr	r2, [pc, #296]	; (800a4c0 <I2C_DMAAbort+0x14c>)
 800a396:	fba2 2303 	umull	r2, r3, r2, r3
 800a39a:	0a1a      	lsrs	r2, r3, #8
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	00da      	lsls	r2, r3, #3
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d106      	bne.n	800a3bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	f043 0220 	orr.w	r2, r3, #32
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a3ba:	e00a      	b.n	800a3d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d0:	d0ea      	beq.n	800a3a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	2200      	movs	r2, #0
 800a3e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a400:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2200      	movs	r2, #0
 800a406:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a414:	2200      	movs	r2, #0
 800a416:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	2200      	movs	r2, #0
 800a426:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f022 0201 	bic.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b60      	cmp	r3, #96	; 0x60
 800a442:	d10e      	bne.n	800a462 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a45a:	6978      	ldr	r0, [r7, #20]
 800a45c:	f7fe fc9c 	bl	8008d98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a460:	e027      	b.n	800a4b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a462:	7cfb      	ldrb	r3, [r7, #19]
 800a464:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a468:	2b28      	cmp	r3, #40	; 0x28
 800a46a:	d117      	bne.n	800a49c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a48a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2200      	movs	r2, #0
 800a490:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2228      	movs	r2, #40	; 0x28
 800a496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a49a:	e007      	b.n	800a4ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a4ac:	6978      	ldr	r0, [r7, #20]
 800a4ae:	f7fe fc69 	bl	8008d84 <HAL_I2C_ErrorCallback>
}
 800a4b2:	bf00      	nop
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000154 	.word	0x20000154
 800a4c0:	14f8b589 	.word	0x14f8b589

0800a4c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4d4:	e025      	b.n	800a522 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4dc:	d021      	beq.n	800a522 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4de:	f7fc ff57 	bl	8007390 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d302      	bcc.n	800a4f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d116      	bne.n	800a522 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	f043 0220 	orr.w	r2, r3, #32
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e023      	b.n	800a56a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	0c1b      	lsrs	r3, r3, #16
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d10d      	bne.n	800a548 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	43da      	mvns	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4013      	ands	r3, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bf0c      	ite	eq
 800a53e:	2301      	moveq	r3, #1
 800a540:	2300      	movne	r3, #0
 800a542:	b2db      	uxtb	r3, r3
 800a544:	461a      	mov	r2, r3
 800a546:	e00c      	b.n	800a562 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	43da      	mvns	r2, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4013      	ands	r3, r2
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	bf0c      	ite	eq
 800a55a:	2301      	moveq	r3, #1
 800a55c:	2300      	movne	r3, #0
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	429a      	cmp	r2, r3
 800a566:	d0b6      	beq.n	800a4d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a580:	e051      	b.n	800a626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a58c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a590:	d123      	bne.n	800a5da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	f043 0204 	orr.w	r2, r3, #4
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e046      	b.n	800a668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e0:	d021      	beq.n	800a626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e2:	f7fc fed5 	bl	8007390 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d302      	bcc.n	800a5f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d116      	bne.n	800a626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2220      	movs	r2, #32
 800a602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	f043 0220 	orr.w	r2, r3, #32
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e020      	b.n	800a668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d10c      	bne.n	800a64a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	43da      	mvns	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	4013      	ands	r3, r2
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bf14      	ite	ne
 800a642:	2301      	movne	r3, #1
 800a644:	2300      	moveq	r3, #0
 800a646:	b2db      	uxtb	r3, r3
 800a648:	e00b      	b.n	800a662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	43da      	mvns	r2, r3
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	4013      	ands	r3, r2
 800a656:	b29b      	uxth	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bf14      	ite	ne
 800a65c:	2301      	movne	r3, #1
 800a65e:	2300      	moveq	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d18d      	bne.n	800a582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a67c:	e02d      	b.n	800a6da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f900 	bl	800a884 <I2C_IsAcknowledgeFailed>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e02d      	b.n	800a6ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a694:	d021      	beq.n	800a6da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a696:	f7fc fe7b 	bl	8007390 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d302      	bcc.n	800a6ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d116      	bne.n	800a6da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	f043 0220 	orr.w	r2, r3, #32
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e007      	b.n	800a6ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	695b      	ldr	r3, [r3, #20]
 800a6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e4:	2b80      	cmp	r3, #128	; 0x80
 800a6e6:	d1ca      	bne.n	800a67e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6fe:	e02d      	b.n	800a75c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f8bf 	bl	800a884 <I2C_IsAcknowledgeFailed>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e02d      	b.n	800a76c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a716:	d021      	beq.n	800a75c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a718:	f7fc fe3a 	bl	8007390 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d302      	bcc.n	800a72e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	f043 0220 	orr.w	r2, r3, #32
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e007      	b.n	800a76c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b04      	cmp	r3, #4
 800a768:	d1ca      	bne.n	800a700 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a780:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	08db      	lsrs	r3, r3, #3
 800a786:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a788:	fba2 2303 	umull	r2, r3, r2, r3
 800a78c:	0a1a      	lsrs	r2, r3, #8
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3b01      	subs	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d107      	bne.n	800a7b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	f043 0220 	orr.w	r2, r3, #32
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e008      	b.n	800a7c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c0:	d0e9      	beq.n	800a796 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	20000154 	.word	0x20000154
 800a7d4:	14f8b589 	.word	0x14f8b589

0800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7e4:	e042      	b.n	800a86c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d119      	bne.n	800a828 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0210 	mvn.w	r2, #16
 800a7fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2220      	movs	r2, #32
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e029      	b.n	800a87c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a828:	f7fc fdb2 	bl	8007390 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d302      	bcc.n	800a83e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d116      	bne.n	800a86c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2220      	movs	r2, #32
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a858:	f043 0220 	orr.w	r2, r3, #32
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e007      	b.n	800a87c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d1b5      	bne.n	800a7e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a89a:	d11b      	bne.n	800a8d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c0:	f043 0204 	orr.w	r2, r3, #4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a8f2:	d103      	bne.n	800a8fc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a8fa:	e007      	b.n	800a90c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a904:	d102      	bne.n	800a90c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2208      	movs	r2, #8
 800a90a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e267      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d075      	beq.n	800aa22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a936:	4b88      	ldr	r3, [pc, #544]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f003 030c 	and.w	r3, r3, #12
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d00c      	beq.n	800a95c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a942:	4b85      	ldr	r3, [pc, #532]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d112      	bne.n	800a974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a94e:	4b82      	ldr	r3, [pc, #520]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a95a:	d10b      	bne.n	800a974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a95c:	4b7e      	ldr	r3, [pc, #504]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d05b      	beq.n	800aa20 <HAL_RCC_OscConfig+0x108>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d157      	bne.n	800aa20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e242      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a97c:	d106      	bne.n	800a98c <HAL_RCC_OscConfig+0x74>
 800a97e:	4b76      	ldr	r3, [pc, #472]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a75      	ldr	r2, [pc, #468]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	e01d      	b.n	800a9c8 <HAL_RCC_OscConfig+0xb0>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a994:	d10c      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x98>
 800a996:	4b70      	ldr	r3, [pc, #448]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a6f      	ldr	r2, [pc, #444]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a99c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	4b6d      	ldr	r3, [pc, #436]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a6c      	ldr	r2, [pc, #432]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	e00b      	b.n	800a9c8 <HAL_RCC_OscConfig+0xb0>
 800a9b0:	4b69      	ldr	r3, [pc, #420]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a68      	ldr	r2, [pc, #416]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	4b66      	ldr	r3, [pc, #408]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a65      	ldr	r2, [pc, #404]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d013      	beq.n	800a9f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9d0:	f7fc fcde 	bl	8007390 <HAL_GetTick>
 800a9d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9d8:	f7fc fcda 	bl	8007390 <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b64      	cmp	r3, #100	; 0x64
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e207      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9ea:	4b5b      	ldr	r3, [pc, #364]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0f0      	beq.n	800a9d8 <HAL_RCC_OscConfig+0xc0>
 800a9f6:	e014      	b.n	800aa22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9f8:	f7fc fcca 	bl	8007390 <HAL_GetTick>
 800a9fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9fe:	e008      	b.n	800aa12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa00:	f7fc fcc6 	bl	8007390 <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b64      	cmp	r3, #100	; 0x64
 800aa0c:	d901      	bls.n	800aa12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e1f3      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa12:	4b51      	ldr	r3, [pc, #324]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1f0      	bne.n	800aa00 <HAL_RCC_OscConfig+0xe8>
 800aa1e:	e000      	b.n	800aa22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d063      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa2e:	4b4a      	ldr	r3, [pc, #296]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f003 030c 	and.w	r3, r3, #12
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00b      	beq.n	800aa52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa3a:	4b47      	ldr	r3, [pc, #284]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa42:	2b08      	cmp	r3, #8
 800aa44:	d11c      	bne.n	800aa80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa46:	4b44      	ldr	r3, [pc, #272]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d116      	bne.n	800aa80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa52:	4b41      	ldr	r3, [pc, #260]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d005      	beq.n	800aa6a <HAL_RCC_OscConfig+0x152>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d001      	beq.n	800aa6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e1c7      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa6a:	4b3b      	ldr	r3, [pc, #236]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	4937      	ldr	r1, [pc, #220]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa7e:	e03a      	b.n	800aaf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d020      	beq.n	800aaca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa88:	4b34      	ldr	r3, [pc, #208]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa8e:	f7fc fc7f 	bl	8007390 <HAL_GetTick>
 800aa92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa94:	e008      	b.n	800aaa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa96:	f7fc fc7b 	bl	8007390 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e1a8      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaa8:	4b2b      	ldr	r3, [pc, #172]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0f0      	beq.n	800aa96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aab4:	4b28      	ldr	r3, [pc, #160]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	4925      	ldr	r1, [pc, #148]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	600b      	str	r3, [r1, #0]
 800aac8:	e015      	b.n	800aaf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaca:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad0:	f7fc fc5e 	bl	8007390 <HAL_GetTick>
 800aad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aad8:	f7fc fc5a 	bl	8007390 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e187      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaea:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f0      	bne.n	800aad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d036      	beq.n	800ab70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d016      	beq.n	800ab38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab0a:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <HAL_RCC_OscConfig+0x248>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab10:	f7fc fc3e 	bl	8007390 <HAL_GetTick>
 800ab14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab16:	e008      	b.n	800ab2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab18:	f7fc fc3a 	bl	8007390 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d901      	bls.n	800ab2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e167      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab2a:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <HAL_RCC_OscConfig+0x240>)
 800ab2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab2e:	f003 0302 	and.w	r3, r3, #2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0f0      	beq.n	800ab18 <HAL_RCC_OscConfig+0x200>
 800ab36:	e01b      	b.n	800ab70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab38:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <HAL_RCC_OscConfig+0x248>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab3e:	f7fc fc27 	bl	8007390 <HAL_GetTick>
 800ab42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab44:	e00e      	b.n	800ab64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab46:	f7fc fc23 	bl	8007390 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d907      	bls.n	800ab64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e150      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
 800ab58:	40023800 	.word	0x40023800
 800ab5c:	42470000 	.word	0x42470000
 800ab60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab64:	4b88      	ldr	r3, [pc, #544]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ab66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1ea      	bne.n	800ab46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0304 	and.w	r3, r3, #4
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 8097 	beq.w	800acac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab82:	4b81      	ldr	r3, [pc, #516]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ab84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10f      	bne.n	800abae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60bb      	str	r3, [r7, #8]
 800ab92:	4b7d      	ldr	r3, [pc, #500]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	4a7c      	ldr	r2, [pc, #496]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ab98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab9e:	4b7a      	ldr	r3, [pc, #488]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800aba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba6:	60bb      	str	r3, [r7, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abaa:	2301      	movs	r3, #1
 800abac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abae:	4b77      	ldr	r3, [pc, #476]	; (800ad8c <HAL_RCC_OscConfig+0x474>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d118      	bne.n	800abec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abba:	4b74      	ldr	r3, [pc, #464]	; (800ad8c <HAL_RCC_OscConfig+0x474>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a73      	ldr	r2, [pc, #460]	; (800ad8c <HAL_RCC_OscConfig+0x474>)
 800abc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abc6:	f7fc fbe3 	bl	8007390 <HAL_GetTick>
 800abca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abcc:	e008      	b.n	800abe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abce:	f7fc fbdf 	bl	8007390 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d901      	bls.n	800abe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e10c      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abe0:	4b6a      	ldr	r3, [pc, #424]	; (800ad8c <HAL_RCC_OscConfig+0x474>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0f0      	beq.n	800abce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d106      	bne.n	800ac02 <HAL_RCC_OscConfig+0x2ea>
 800abf4:	4b64      	ldr	r3, [pc, #400]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800abf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf8:	4a63      	ldr	r2, [pc, #396]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800abfa:	f043 0301 	orr.w	r3, r3, #1
 800abfe:	6713      	str	r3, [r2, #112]	; 0x70
 800ac00:	e01c      	b.n	800ac3c <HAL_RCC_OscConfig+0x324>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	d10c      	bne.n	800ac24 <HAL_RCC_OscConfig+0x30c>
 800ac0a:	4b5f      	ldr	r3, [pc, #380]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0e:	4a5e      	ldr	r2, [pc, #376]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac10:	f043 0304 	orr.w	r3, r3, #4
 800ac14:	6713      	str	r3, [r2, #112]	; 0x70
 800ac16:	4b5c      	ldr	r3, [pc, #368]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1a:	4a5b      	ldr	r2, [pc, #364]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac1c:	f043 0301 	orr.w	r3, r3, #1
 800ac20:	6713      	str	r3, [r2, #112]	; 0x70
 800ac22:	e00b      	b.n	800ac3c <HAL_RCC_OscConfig+0x324>
 800ac24:	4b58      	ldr	r3, [pc, #352]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac28:	4a57      	ldr	r2, [pc, #348]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac2a:	f023 0301 	bic.w	r3, r3, #1
 800ac2e:	6713      	str	r3, [r2, #112]	; 0x70
 800ac30:	4b55      	ldr	r3, [pc, #340]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac34:	4a54      	ldr	r2, [pc, #336]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac36:	f023 0304 	bic.w	r3, r3, #4
 800ac3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d015      	beq.n	800ac70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac44:	f7fc fba4 	bl	8007390 <HAL_GetTick>
 800ac48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac4a:	e00a      	b.n	800ac62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac4c:	f7fc fba0 	bl	8007390 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e0cb      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac62:	4b49      	ldr	r3, [pc, #292]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0ee      	beq.n	800ac4c <HAL_RCC_OscConfig+0x334>
 800ac6e:	e014      	b.n	800ac9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac70:	f7fc fb8e 	bl	8007390 <HAL_GetTick>
 800ac74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac76:	e00a      	b.n	800ac8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac78:	f7fc fb8a 	bl	8007390 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d901      	bls.n	800ac8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e0b5      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac8e:	4b3e      	ldr	r3, [pc, #248]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ac90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1ee      	bne.n	800ac78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d105      	bne.n	800acac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aca0:	4b39      	ldr	r3, [pc, #228]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	4a38      	ldr	r2, [pc, #224]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800aca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 80a1 	beq.w	800adf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800acb6:	4b34      	ldr	r3, [pc, #208]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 030c 	and.w	r3, r3, #12
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d05c      	beq.n	800ad7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d141      	bne.n	800ad4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acca:	4b31      	ldr	r3, [pc, #196]	; (800ad90 <HAL_RCC_OscConfig+0x478>)
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acd0:	f7fc fb5e 	bl	8007390 <HAL_GetTick>
 800acd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acd8:	f7fc fb5a 	bl	8007390 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e087      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acea:	4b27      	ldr	r3, [pc, #156]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f0      	bne.n	800acd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	69da      	ldr	r2, [r3, #28]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	431a      	orrs	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	019b      	lsls	r3, r3, #6
 800ad06:	431a      	orrs	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0c:	085b      	lsrs	r3, r3, #1
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	041b      	lsls	r3, r3, #16
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	061b      	lsls	r3, r3, #24
 800ad1a:	491b      	ldr	r1, [pc, #108]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad20:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <HAL_RCC_OscConfig+0x478>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad26:	f7fc fb33 	bl	8007390 <HAL_GetTick>
 800ad2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad2c:	e008      	b.n	800ad40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad2e:	f7fc fb2f 	bl	8007390 <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e05c      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad40:	4b11      	ldr	r3, [pc, #68]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0f0      	beq.n	800ad2e <HAL_RCC_OscConfig+0x416>
 800ad4c:	e054      	b.n	800adf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad4e:	4b10      	ldr	r3, [pc, #64]	; (800ad90 <HAL_RCC_OscConfig+0x478>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad54:	f7fc fb1c 	bl	8007390 <HAL_GetTick>
 800ad58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad5a:	e008      	b.n	800ad6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad5c:	f7fc fb18 	bl	8007390 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d901      	bls.n	800ad6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e045      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <HAL_RCC_OscConfig+0x470>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1f0      	bne.n	800ad5c <HAL_RCC_OscConfig+0x444>
 800ad7a:	e03d      	b.n	800adf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d107      	bne.n	800ad94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e038      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
 800ad88:	40023800 	.word	0x40023800
 800ad8c:	40007000 	.word	0x40007000
 800ad90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ad94:	4b1b      	ldr	r3, [pc, #108]	; (800ae04 <HAL_RCC_OscConfig+0x4ec>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d028      	beq.n	800adf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adac:	429a      	cmp	r2, r3
 800adae:	d121      	bne.n	800adf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adba:	429a      	cmp	r2, r3
 800adbc:	d11a      	bne.n	800adf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800adc4:	4013      	ands	r3, r2
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800adca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800adcc:	4293      	cmp	r3, r2
 800adce:	d111      	bne.n	800adf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adda:	085b      	lsrs	r3, r3, #1
 800addc:	3b01      	subs	r3, #1
 800adde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d107      	bne.n	800adf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d001      	beq.n	800adf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e000      	b.n	800adfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	40023800 	.word	0x40023800

0800ae08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e0cc      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae1c:	4b68      	ldr	r3, [pc, #416]	; (800afc0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d90c      	bls.n	800ae44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae2a:	4b65      	ldr	r3, [pc, #404]	; (800afc0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	b2d2      	uxtb	r2, r2
 800ae30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae32:	4b63      	ldr	r3, [pc, #396]	; (800afc0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d001      	beq.n	800ae44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e0b8      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0302 	and.w	r3, r3, #2
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d020      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae5c:	4b59      	ldr	r3, [pc, #356]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	4a58      	ldr	r2, [pc, #352]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0308 	and.w	r3, r3, #8
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d005      	beq.n	800ae80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae74:	4b53      	ldr	r3, [pc, #332]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	4a52      	ldr	r2, [pc, #328]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae80:	4b50      	ldr	r3, [pc, #320]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	494d      	ldr	r1, [pc, #308]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d044      	beq.n	800af28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d107      	bne.n	800aeb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aea6:	4b47      	ldr	r3, [pc, #284]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d119      	bne.n	800aee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e07f      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d003      	beq.n	800aec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d107      	bne.n	800aed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aec6:	4b3f      	ldr	r3, [pc, #252]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d109      	bne.n	800aee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e06f      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aed6:	4b3b      	ldr	r3, [pc, #236]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 0302 	and.w	r3, r3, #2
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e067      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aee6:	4b37      	ldr	r3, [pc, #220]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f023 0203 	bic.w	r2, r3, #3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	4934      	ldr	r1, [pc, #208]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aef8:	f7fc fa4a 	bl	8007390 <HAL_GetTick>
 800aefc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aefe:	e00a      	b.n	800af16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af00:	f7fc fa46 	bl	8007390 <HAL_GetTick>
 800af04:	4602      	mov	r2, r0
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0e:	4293      	cmp	r3, r2
 800af10:	d901      	bls.n	800af16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e04f      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af16:	4b2b      	ldr	r3, [pc, #172]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f003 020c 	and.w	r2, r3, #12
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	429a      	cmp	r2, r3
 800af26:	d1eb      	bne.n	800af00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af28:	4b25      	ldr	r3, [pc, #148]	; (800afc0 <HAL_RCC_ClockConfig+0x1b8>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0307 	and.w	r3, r3, #7
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d20c      	bcs.n	800af50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af36:	4b22      	ldr	r3, [pc, #136]	; (800afc0 <HAL_RCC_ClockConfig+0x1b8>)
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af3e:	4b20      	ldr	r3, [pc, #128]	; (800afc0 <HAL_RCC_ClockConfig+0x1b8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d001      	beq.n	800af50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e032      	b.n	800afb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d008      	beq.n	800af6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af5c:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	4916      	ldr	r1, [pc, #88]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0308 	and.w	r3, r3, #8
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af7a:	4b12      	ldr	r3, [pc, #72]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	490e      	ldr	r1, [pc, #56]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af8e:	f000 f821 	bl	800afd4 <HAL_RCC_GetSysClockFreq>
 800af92:	4602      	mov	r2, r0
 800af94:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <HAL_RCC_ClockConfig+0x1bc>)
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	091b      	lsrs	r3, r3, #4
 800af9a:	f003 030f 	and.w	r3, r3, #15
 800af9e:	490a      	ldr	r1, [pc, #40]	; (800afc8 <HAL_RCC_ClockConfig+0x1c0>)
 800afa0:	5ccb      	ldrb	r3, [r1, r3]
 800afa2:	fa22 f303 	lsr.w	r3, r2, r3
 800afa6:	4a09      	ldr	r2, [pc, #36]	; (800afcc <HAL_RCC_ClockConfig+0x1c4>)
 800afa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800afaa:	4b09      	ldr	r3, [pc, #36]	; (800afd0 <HAL_RCC_ClockConfig+0x1c8>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fc f9aa 	bl	8007308 <HAL_InitTick>

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	40023c00 	.word	0x40023c00
 800afc4:	40023800 	.word	0x40023800
 800afc8:	08010a40 	.word	0x08010a40
 800afcc:	20000154 	.word	0x20000154
 800afd0:	20000180 	.word	0x20000180

0800afd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afd8:	b094      	sub	sp, #80	; 0x50
 800afda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	647b      	str	r3, [r7, #68]	; 0x44
 800afe0:	2300      	movs	r3, #0
 800afe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afe4:	2300      	movs	r3, #0
 800afe6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afec:	4b79      	ldr	r3, [pc, #484]	; (800b1d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f003 030c 	and.w	r3, r3, #12
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d00d      	beq.n	800b014 <HAL_RCC_GetSysClockFreq+0x40>
 800aff8:	2b08      	cmp	r3, #8
 800affa:	f200 80e1 	bhi.w	800b1c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d002      	beq.n	800b008 <HAL_RCC_GetSysClockFreq+0x34>
 800b002:	2b04      	cmp	r3, #4
 800b004:	d003      	beq.n	800b00e <HAL_RCC_GetSysClockFreq+0x3a>
 800b006:	e0db      	b.n	800b1c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b008:	4b73      	ldr	r3, [pc, #460]	; (800b1d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b00a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b00c:	e0db      	b.n	800b1c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b00e:	4b73      	ldr	r3, [pc, #460]	; (800b1dc <HAL_RCC_GetSysClockFreq+0x208>)
 800b010:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b012:	e0d8      	b.n	800b1c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b014:	4b6f      	ldr	r3, [pc, #444]	; (800b1d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b01c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b01e:	4b6d      	ldr	r3, [pc, #436]	; (800b1d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d063      	beq.n	800b0f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b02a:	4b6a      	ldr	r3, [pc, #424]	; (800b1d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	099b      	lsrs	r3, r3, #6
 800b030:	2200      	movs	r2, #0
 800b032:	63bb      	str	r3, [r7, #56]	; 0x38
 800b034:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03c:	633b      	str	r3, [r7, #48]	; 0x30
 800b03e:	2300      	movs	r3, #0
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
 800b042:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b046:	4622      	mov	r2, r4
 800b048:	462b      	mov	r3, r5
 800b04a:	f04f 0000 	mov.w	r0, #0
 800b04e:	f04f 0100 	mov.w	r1, #0
 800b052:	0159      	lsls	r1, r3, #5
 800b054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b058:	0150      	lsls	r0, r2, #5
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4621      	mov	r1, r4
 800b060:	1a51      	subs	r1, r2, r1
 800b062:	6139      	str	r1, [r7, #16]
 800b064:	4629      	mov	r1, r5
 800b066:	eb63 0301 	sbc.w	r3, r3, r1
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	f04f 0300 	mov.w	r3, #0
 800b074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b078:	4659      	mov	r1, fp
 800b07a:	018b      	lsls	r3, r1, #6
 800b07c:	4651      	mov	r1, sl
 800b07e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b082:	4651      	mov	r1, sl
 800b084:	018a      	lsls	r2, r1, #6
 800b086:	4651      	mov	r1, sl
 800b088:	ebb2 0801 	subs.w	r8, r2, r1
 800b08c:	4659      	mov	r1, fp
 800b08e:	eb63 0901 	sbc.w	r9, r3, r1
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b09e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b0a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b0a6:	4690      	mov	r8, r2
 800b0a8:	4699      	mov	r9, r3
 800b0aa:	4623      	mov	r3, r4
 800b0ac:	eb18 0303 	adds.w	r3, r8, r3
 800b0b0:	60bb      	str	r3, [r7, #8]
 800b0b2:	462b      	mov	r3, r5
 800b0b4:	eb49 0303 	adc.w	r3, r9, r3
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	f04f 0200 	mov.w	r2, #0
 800b0be:	f04f 0300 	mov.w	r3, #0
 800b0c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	024b      	lsls	r3, r1, #9
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	024a      	lsls	r2, r1, #9
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0da:	2200      	movs	r2, #0
 800b0dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0e4:	f7f5 f882 	bl	80001ec <__aeabi_uldivmod>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0f0:	e058      	b.n	800b1a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0f2:	4b38      	ldr	r3, [pc, #224]	; (800b1d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	099b      	lsrs	r3, r3, #6
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b102:	623b      	str	r3, [r7, #32]
 800b104:	2300      	movs	r3, #0
 800b106:	627b      	str	r3, [r7, #36]	; 0x24
 800b108:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b10c:	4642      	mov	r2, r8
 800b10e:	464b      	mov	r3, r9
 800b110:	f04f 0000 	mov.w	r0, #0
 800b114:	f04f 0100 	mov.w	r1, #0
 800b118:	0159      	lsls	r1, r3, #5
 800b11a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b11e:	0150      	lsls	r0, r2, #5
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4641      	mov	r1, r8
 800b126:	ebb2 0a01 	subs.w	sl, r2, r1
 800b12a:	4649      	mov	r1, r9
 800b12c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b130:	f04f 0200 	mov.w	r2, #0
 800b134:	f04f 0300 	mov.w	r3, #0
 800b138:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b13c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b140:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b144:	ebb2 040a 	subs.w	r4, r2, sl
 800b148:	eb63 050b 	sbc.w	r5, r3, fp
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	f04f 0300 	mov.w	r3, #0
 800b154:	00eb      	lsls	r3, r5, #3
 800b156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b15a:	00e2      	lsls	r2, r4, #3
 800b15c:	4614      	mov	r4, r2
 800b15e:	461d      	mov	r5, r3
 800b160:	4643      	mov	r3, r8
 800b162:	18e3      	adds	r3, r4, r3
 800b164:	603b      	str	r3, [r7, #0]
 800b166:	464b      	mov	r3, r9
 800b168:	eb45 0303 	adc.w	r3, r5, r3
 800b16c:	607b      	str	r3, [r7, #4]
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	f04f 0300 	mov.w	r3, #0
 800b176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b17a:	4629      	mov	r1, r5
 800b17c:	028b      	lsls	r3, r1, #10
 800b17e:	4621      	mov	r1, r4
 800b180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b184:	4621      	mov	r1, r4
 800b186:	028a      	lsls	r2, r1, #10
 800b188:	4610      	mov	r0, r2
 800b18a:	4619      	mov	r1, r3
 800b18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b18e:	2200      	movs	r2, #0
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	61fa      	str	r2, [r7, #28]
 800b194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b198:	f7f5 f828 	bl	80001ec <__aeabi_uldivmod>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b1a4:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	0c1b      	lsrs	r3, r3, #16
 800b1aa:	f003 0303 	and.w	r3, r3, #3
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b1b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1be:	e002      	b.n	800b1c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b1c0:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3750      	adds	r7, #80	; 0x50
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40023800 	.word	0x40023800
 800b1d8:	00f42400 	.word	0x00f42400
 800b1dc:	007a1200 	.word	0x007a1200

0800b1e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1e4:	4b03      	ldr	r3, [pc, #12]	; (800b1f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20000154 	.word	0x20000154

0800b1f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b1fc:	f7ff fff0 	bl	800b1e0 <HAL_RCC_GetHCLKFreq>
 800b200:	4602      	mov	r2, r0
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	0a9b      	lsrs	r3, r3, #10
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	4903      	ldr	r1, [pc, #12]	; (800b21c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b20e:	5ccb      	ldrb	r3, [r1, r3]
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b214:	4618      	mov	r0, r3
 800b216:	bd80      	pop	{r7, pc}
 800b218:	40023800 	.word	0x40023800
 800b21c:	08010a50 	.word	0x08010a50

0800b220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b224:	f7ff ffdc 	bl	800b1e0 <HAL_RCC_GetHCLKFreq>
 800b228:	4602      	mov	r2, r0
 800b22a:	4b05      	ldr	r3, [pc, #20]	; (800b240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	0b5b      	lsrs	r3, r3, #13
 800b230:	f003 0307 	and.w	r3, r3, #7
 800b234:	4903      	ldr	r1, [pc, #12]	; (800b244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b236:	5ccb      	ldrb	r3, [r1, r3]
 800b238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	40023800 	.word	0x40023800
 800b244:	08010a50 	.word	0x08010a50

0800b248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e07b      	b.n	800b352 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d108      	bne.n	800b274 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b26a:	d009      	beq.n	800b280 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	61da      	str	r2, [r3, #28]
 800b272:	e005      	b.n	800b280 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7fa fe0e 	bl	8005ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	69db      	ldr	r3, [r3, #28]
 800b2f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	ea42 0103 	orr.w	r1, r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	430a      	orrs	r2, r1
 800b316:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	0c1b      	lsrs	r3, r3, #16
 800b31e:	f003 0104 	and.w	r1, r3, #4
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	f003 0210 	and.w	r2, r3, #16
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69da      	ldr	r2, [r3, #28]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b088      	sub	sp, #32
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	603b      	str	r3, [r7, #0]
 800b366:	4613      	mov	r3, r2
 800b368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_SPI_Transmit+0x22>
 800b378:	2302      	movs	r3, #2
 800b37a:	e126      	b.n	800b5ca <HAL_SPI_Transmit+0x270>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b384:	f7fc f804 	bl	8007390 <HAL_GetTick>
 800b388:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b01      	cmp	r3, #1
 800b398:	d002      	beq.n	800b3a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b39a:	2302      	movs	r3, #2
 800b39c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b39e:	e10b      	b.n	800b5b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <HAL_SPI_Transmit+0x52>
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3b0:	e102      	b.n	800b5b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2203      	movs	r2, #3
 800b3b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	88fa      	ldrh	r2, [r7, #6]
 800b3ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	88fa      	ldrh	r2, [r7, #6]
 800b3d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3f8:	d10f      	bne.n	800b41a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d007      	beq.n	800b438 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b440:	d14b      	bne.n	800b4da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <HAL_SPI_Transmit+0xf6>
 800b44a:	8afb      	ldrh	r3, [r7, #22]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d13e      	bne.n	800b4ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	881a      	ldrh	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	1c9a      	adds	r2, r3, #2
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b474:	e02b      	b.n	800b4ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f003 0302 	and.w	r3, r3, #2
 800b480:	2b02      	cmp	r3, #2
 800b482:	d112      	bne.n	800b4aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	881a      	ldrh	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	1c9a      	adds	r2, r3, #2
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	86da      	strh	r2, [r3, #54]	; 0x36
 800b4a8:	e011      	b.n	800b4ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4aa:	f7fb ff71 	bl	8007390 <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d803      	bhi.n	800b4c2 <HAL_SPI_Transmit+0x168>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4c0:	d102      	bne.n	800b4c8 <HAL_SPI_Transmit+0x16e>
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b4cc:	e074      	b.n	800b5b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1ce      	bne.n	800b476 <HAL_SPI_Transmit+0x11c>
 800b4d8:	e04c      	b.n	800b574 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_SPI_Transmit+0x18e>
 800b4e2:	8afb      	ldrh	r3, [r7, #22]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d140      	bne.n	800b56a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	7812      	ldrb	r2, [r2, #0]
 800b4f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b50e:	e02c      	b.n	800b56a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d113      	bne.n	800b546 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	7812      	ldrb	r2, [r2, #0]
 800b52a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	3b01      	subs	r3, #1
 800b53e:	b29a      	uxth	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	86da      	strh	r2, [r3, #54]	; 0x36
 800b544:	e011      	b.n	800b56a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b546:	f7fb ff23 	bl	8007390 <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d803      	bhi.n	800b55e <HAL_SPI_Transmit+0x204>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b55c:	d102      	bne.n	800b564 <HAL_SPI_Transmit+0x20a>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b568:	e026      	b.n	800b5b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b56e:	b29b      	uxth	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1cd      	bne.n	800b510 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fce9 	bl	800bf50 <SPI_EndRxTxTransaction>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2220      	movs	r2, #32
 800b588:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b592:	2300      	movs	r3, #0
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	77fb      	strb	r3, [r7, #31]
 800b5b4:	e000      	b.n	800b5b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b5b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b5c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b088      	sub	sp, #32
 800b5d6:	af02      	add	r7, sp, #8
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	603b      	str	r3, [r7, #0]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5ee:	d112      	bne.n	800b616 <HAL_SPI_Receive+0x44>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10e      	bne.n	800b616 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	4613      	mov	r3, r2
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	68b9      	ldr	r1, [r7, #8]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 f8f1 	bl	800b7f4 <HAL_SPI_TransmitReceive>
 800b612:	4603      	mov	r3, r0
 800b614:	e0ea      	b.n	800b7ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d101      	bne.n	800b624 <HAL_SPI_Receive+0x52>
 800b620:	2302      	movs	r3, #2
 800b622:	e0e3      	b.n	800b7ec <HAL_SPI_Receive+0x21a>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b62c:	f7fb feb0 	bl	8007390 <HAL_GetTick>
 800b630:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d002      	beq.n	800b644 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b63e:	2302      	movs	r3, #2
 800b640:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b642:	e0ca      	b.n	800b7da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <HAL_SPI_Receive+0x7e>
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b654:	e0c1      	b.n	800b7da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2204      	movs	r2, #4
 800b65a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	88fa      	ldrh	r2, [r7, #6]
 800b66e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	88fa      	ldrh	r2, [r7, #6]
 800b674:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b69c:	d10f      	bne.n	800b6be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d007      	beq.n	800b6dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d162      	bne.n	800b7aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b6e4:	e02e      	b.n	800b744 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d115      	bne.n	800b720 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f103 020c 	add.w	r2, r3, #12
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b700:	7812      	ldrb	r2, [r2, #0]
 800b702:	b2d2      	uxtb	r2, r2
 800b704:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b714:	b29b      	uxth	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b71e:	e011      	b.n	800b744 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b720:	f7fb fe36 	bl	8007390 <HAL_GetTick>
 800b724:	4602      	mov	r2, r0
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d803      	bhi.n	800b738 <HAL_SPI_Receive+0x166>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b736:	d102      	bne.n	800b73e <HAL_SPI_Receive+0x16c>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b742:	e04a      	b.n	800b7da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1cb      	bne.n	800b6e6 <HAL_SPI_Receive+0x114>
 800b74e:	e031      	b.n	800b7b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d113      	bne.n	800b786 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68da      	ldr	r2, [r3, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b768:	b292      	uxth	r2, r2
 800b76a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b770:	1c9a      	adds	r2, r3, #2
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b784:	e011      	b.n	800b7aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b786:	f7fb fe03 	bl	8007390 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	429a      	cmp	r2, r3
 800b794:	d803      	bhi.n	800b79e <HAL_SPI_Receive+0x1cc>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b79c:	d102      	bne.n	800b7a4 <HAL_SPI_Receive+0x1d2>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7a8:	e017      	b.n	800b7da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1cd      	bne.n	800b750 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f000 fb63 	bl	800be84 <SPI_EndRxTransaction>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	75fb      	strb	r3, [r7, #23]
 800b7d6:	e000      	b.n	800b7da <HAL_SPI_Receive+0x208>
  }

error :
 800b7d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08c      	sub	sp, #48	; 0x30
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b802:	2301      	movs	r3, #1
 800b804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b812:	2b01      	cmp	r3, #1
 800b814:	d101      	bne.n	800b81a <HAL_SPI_TransmitReceive+0x26>
 800b816:	2302      	movs	r3, #2
 800b818:	e18a      	b.n	800bb30 <HAL_SPI_TransmitReceive+0x33c>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b822:	f7fb fdb5 	bl	8007390 <HAL_GetTick>
 800b826:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b82e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b838:	887b      	ldrh	r3, [r7, #2]
 800b83a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b83c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b840:	2b01      	cmp	r3, #1
 800b842:	d00f      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x70>
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b84a:	d107      	bne.n	800b85c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <HAL_SPI_TransmitReceive+0x68>
 800b854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d003      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b85c:	2302      	movs	r3, #2
 800b85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b862:	e15b      	b.n	800bb1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <HAL_SPI_TransmitReceive+0x82>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <HAL_SPI_TransmitReceive+0x82>
 800b870:	887b      	ldrh	r3, [r7, #2]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b87c:	e14e      	b.n	800bb1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b04      	cmp	r3, #4
 800b888:	d003      	beq.n	800b892 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2205      	movs	r2, #5
 800b88e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	887a      	ldrh	r2, [r7, #2]
 800b8a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	887a      	ldrh	r2, [r7, #2]
 800b8a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	887a      	ldrh	r2, [r7, #2]
 800b8b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	887a      	ldrh	r2, [r7, #2]
 800b8ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d2:	2b40      	cmp	r3, #64	; 0x40
 800b8d4:	d007      	beq.n	800b8e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ee:	d178      	bne.n	800b9e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <HAL_SPI_TransmitReceive+0x10a>
 800b8f8:	8b7b      	ldrh	r3, [r7, #26]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d166      	bne.n	800b9cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b902:	881a      	ldrh	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90e:	1c9a      	adds	r2, r3, #2
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b922:	e053      	b.n	800b9cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f003 0302 	and.w	r3, r3, #2
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d11b      	bne.n	800b96a <HAL_SPI_TransmitReceive+0x176>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b936:	b29b      	uxth	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d016      	beq.n	800b96a <HAL_SPI_TransmitReceive+0x176>
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d113      	bne.n	800b96a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b946:	881a      	ldrh	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b952:	1c9a      	adds	r2, r3, #2
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29a      	uxth	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b01      	cmp	r3, #1
 800b976:	d119      	bne.n	800b9ac <HAL_SPI_TransmitReceive+0x1b8>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d014      	beq.n	800b9ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68da      	ldr	r2, [r3, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98c:	b292      	uxth	r2, r2
 800b98e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	1c9a      	adds	r2, r3, #2
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b9ac:	f7fb fcf0 	bl	8007390 <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d807      	bhi.n	800b9cc <HAL_SPI_TransmitReceive+0x1d8>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9c2:	d003      	beq.n	800b9cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9ca:	e0a7      	b.n	800bb1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1a6      	bne.n	800b924 <HAL_SPI_TransmitReceive+0x130>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1a1      	bne.n	800b924 <HAL_SPI_TransmitReceive+0x130>
 800b9e0:	e07c      	b.n	800badc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <HAL_SPI_TransmitReceive+0x1fc>
 800b9ea:	8b7b      	ldrh	r3, [r7, #26]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d16b      	bne.n	800bac8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	330c      	adds	r3, #12
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba16:	e057      	b.n	800bac8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d11c      	bne.n	800ba60 <HAL_SPI_TransmitReceive+0x26c>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d017      	beq.n	800ba60 <HAL_SPI_TransmitReceive+0x26c>
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d114      	bne.n	800ba60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	330c      	adds	r3, #12
 800ba40:	7812      	ldrb	r2, [r2, #0]
 800ba42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	1c5a      	adds	r2, r3, #1
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	3b01      	subs	r3, #1
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d119      	bne.n	800baa2 <HAL_SPI_TransmitReceive+0x2ae>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d014      	beq.n	800baa2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68da      	ldr	r2, [r3, #12]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	3b01      	subs	r3, #1
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800baa2:	f7fb fc75 	bl	8007390 <HAL_GetTick>
 800baa6:	4602      	mov	r2, r0
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baae:	429a      	cmp	r2, r3
 800bab0:	d803      	bhi.n	800baba <HAL_SPI_TransmitReceive+0x2c6>
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bab8:	d102      	bne.n	800bac0 <HAL_SPI_TransmitReceive+0x2cc>
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	2b00      	cmp	r3, #0
 800babe:	d103      	bne.n	800bac8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bac6:	e029      	b.n	800bb1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bacc:	b29b      	uxth	r3, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1a2      	bne.n	800ba18 <HAL_SPI_TransmitReceive+0x224>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d19d      	bne.n	800ba18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800badc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f000 fa35 	bl	800bf50 <SPI_EndRxTxTransaction>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d006      	beq.n	800bafa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2220      	movs	r2, #32
 800baf6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800baf8:	e010      	b.n	800bb1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10b      	bne.n	800bb1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	e000      	b.n	800bb1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3730      	adds	r7, #48	; 0x30
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	099b      	lsrs	r3, r3, #6
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10f      	bne.n	800bb7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	099b      	lsrs	r3, r3, #6
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
    return;
 800bb7a:	e0d7      	b.n	800bd2c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	085b      	lsrs	r3, r3, #1
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00a      	beq.n	800bb9e <HAL_SPI_IRQHandler+0x66>
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	09db      	lsrs	r3, r3, #7
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d004      	beq.n	800bb9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	4798      	blx	r3
    return;
 800bb9c:	e0c6      	b.n	800bd2c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	095b      	lsrs	r3, r3, #5
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10c      	bne.n	800bbc4 <HAL_SPI_IRQHandler+0x8c>
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	099b      	lsrs	r3, r3, #6
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	0a1b      	lsrs	r3, r3, #8
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 80b4 	beq.w	800bd2c <HAL_SPI_IRQHandler+0x1f4>
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	095b      	lsrs	r3, r3, #5
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 80ad 	beq.w	800bd2c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	099b      	lsrs	r3, r3, #6
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d023      	beq.n	800bc26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d011      	beq.n	800bc0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbee:	f043 0204 	orr.w	r2, r3, #4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	617b      	str	r3, [r7, #20]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	e00b      	b.n	800bc26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc0e:	2300      	movs	r3, #0
 800bc10:	613b      	str	r3, [r7, #16]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	613b      	str	r3, [r7, #16]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	613b      	str	r3, [r7, #16]
 800bc22:	693b      	ldr	r3, [r7, #16]
        return;
 800bc24:	e082      	b.n	800bd2c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	095b      	lsrs	r3, r3, #5
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d014      	beq.n	800bc5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc36:	f043 0201 	orr.w	r2, r3, #1
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	0a1b      	lsrs	r3, r3, #8
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00c      	beq.n	800bc82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6c:	f043 0208 	orr.w	r2, r3, #8
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc74:	2300      	movs	r3, #0
 800bc76:	60bb      	str	r3, [r7, #8]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	60bb      	str	r3, [r7, #8]
 800bc80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d04f      	beq.n	800bd2a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d104      	bne.n	800bcb6 <HAL_SPI_IRQHandler+0x17e>
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d034      	beq.n	800bd20 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 0203 	bic.w	r2, r2, #3
 800bcc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d011      	beq.n	800bcf2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd2:	4a18      	ldr	r2, [pc, #96]	; (800bd34 <HAL_SPI_IRQHandler+0x1fc>)
 800bcd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fb fd48 	bl	8007770 <HAL_DMA_Abort_IT>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d005      	beq.n	800bcf2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d016      	beq.n	800bd28 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcfe:	4a0d      	ldr	r2, [pc, #52]	; (800bd34 <HAL_SPI_IRQHandler+0x1fc>)
 800bd00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fb fd32 	bl	8007770 <HAL_DMA_Abort_IT>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00a      	beq.n	800bd28 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bd1e:	e003      	b.n	800bd28 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f809 	bl	800bd38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bd26:	e000      	b.n	800bd2a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bd28:	bf00      	nop
    return;
 800bd2a:	bf00      	nop
  }
}
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	0800bd4d 	.word	0x0800bd4d

0800bd38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7ff ffe6 	bl	800bd38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd6c:	bf00      	nop
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	4613      	mov	r3, r2
 800bd82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd84:	f7fb fb04 	bl	8007390 <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4413      	add	r3, r2
 800bd92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd94:	f7fb fafc 	bl	8007390 <HAL_GetTick>
 800bd98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd9a:	4b39      	ldr	r3, [pc, #228]	; (800be80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	015b      	lsls	r3, r3, #5
 800bda0:	0d1b      	lsrs	r3, r3, #20
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	fb02 f303 	mul.w	r3, r2, r3
 800bda8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdaa:	e054      	b.n	800be56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdb2:	d050      	beq.n	800be56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bdb4:	f7fb faec 	bl	8007390 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	69fa      	ldr	r2, [r7, #28]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d902      	bls.n	800bdca <SPI_WaitFlagStateUntilTimeout+0x56>
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d13d      	bne.n	800be46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bdd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bde2:	d111      	bne.n	800be08 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdec:	d004      	beq.n	800bdf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdf6:	d107      	bne.n	800be08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be10:	d10f      	bne.n	800be32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e017      	b.n	800be76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be4c:	2300      	movs	r3, #0
 800be4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	3b01      	subs	r3, #1
 800be54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	689a      	ldr	r2, [r3, #8]
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4013      	ands	r3, r2
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	429a      	cmp	r2, r3
 800be64:	bf0c      	ite	eq
 800be66:	2301      	moveq	r3, #1
 800be68:	2300      	movne	r3, #0
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	461a      	mov	r2, r3
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	429a      	cmp	r2, r3
 800be72:	d19b      	bne.n	800bdac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3720      	adds	r7, #32
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20000154 	.word	0x20000154

0800be84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af02      	add	r7, sp, #8
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be98:	d111      	bne.n	800bebe <SPI_EndRxTransaction+0x3a>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bea2:	d004      	beq.n	800beae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beac:	d107      	bne.n	800bebe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bebc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bec6:	d12a      	bne.n	800bf1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bed0:	d012      	beq.n	800bef8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2200      	movs	r2, #0
 800beda:	2180      	movs	r1, #128	; 0x80
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f7ff ff49 	bl	800bd74 <SPI_WaitFlagStateUntilTimeout>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d02d      	beq.n	800bf44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beec:	f043 0220 	orr.w	r2, r3, #32
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bef4:	2303      	movs	r3, #3
 800bef6:	e026      	b.n	800bf46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2200      	movs	r2, #0
 800bf00:	2101      	movs	r1, #1
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff ff36 	bl	800bd74 <SPI_WaitFlagStateUntilTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d01a      	beq.n	800bf44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf12:	f043 0220 	orr.w	r2, r3, #32
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e013      	b.n	800bf46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2200      	movs	r2, #0
 800bf26:	2101      	movs	r1, #1
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f7ff ff23 	bl	800bd74 <SPI_WaitFlagStateUntilTimeout>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d007      	beq.n	800bf44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf38:	f043 0220 	orr.w	r2, r3, #32
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf40:	2303      	movs	r3, #3
 800bf42:	e000      	b.n	800bf46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
	...

0800bf50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bf5c:	4b1b      	ldr	r3, [pc, #108]	; (800bfcc <SPI_EndRxTxTransaction+0x7c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <SPI_EndRxTxTransaction+0x80>)
 800bf62:	fba2 2303 	umull	r2, r3, r2, r3
 800bf66:	0d5b      	lsrs	r3, r3, #21
 800bf68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf6c:	fb02 f303 	mul.w	r3, r2, r3
 800bf70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf7a:	d112      	bne.n	800bfa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2200      	movs	r2, #0
 800bf84:	2180      	movs	r1, #128	; 0x80
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff fef4 	bl	800bd74 <SPI_WaitFlagStateUntilTimeout>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d016      	beq.n	800bfc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf96:	f043 0220 	orr.w	r2, r3, #32
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e00f      	b.n	800bfc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00a      	beq.n	800bfbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb8:	2b80      	cmp	r3, #128	; 0x80
 800bfba:	d0f2      	beq.n	800bfa2 <SPI_EndRxTxTransaction+0x52>
 800bfbc:	e000      	b.n	800bfc0 <SPI_EndRxTxTransaction+0x70>
        break;
 800bfbe:	bf00      	nop
  }

  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3718      	adds	r7, #24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20000154 	.word	0x20000154
 800bfd0:	165e9f81 	.word	0x165e9f81

0800bfd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d101      	bne.n	800bfe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e041      	b.n	800c06a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7fa fdac 	bl	8006b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2202      	movs	r2, #2
 800c004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3304      	adds	r3, #4
 800c010:	4619      	mov	r1, r3
 800c012:	4610      	mov	r0, r2
 800c014:	f000 fae0 	bl	800c5d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b01      	cmp	r3, #1
 800c086:	d001      	beq.n	800c08c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e04e      	b.n	800c12a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68da      	ldr	r2, [r3, #12]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a23      	ldr	r2, [pc, #140]	; (800c138 <HAL_TIM_Base_Start_IT+0xc4>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d022      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0b6:	d01d      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a1f      	ldr	r2, [pc, #124]	; (800c13c <HAL_TIM_Base_Start_IT+0xc8>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d018      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a1e      	ldr	r2, [pc, #120]	; (800c140 <HAL_TIM_Base_Start_IT+0xcc>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d013      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a1c      	ldr	r2, [pc, #112]	; (800c144 <HAL_TIM_Base_Start_IT+0xd0>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d00e      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a1b      	ldr	r2, [pc, #108]	; (800c148 <HAL_TIM_Base_Start_IT+0xd4>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d009      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a19      	ldr	r2, [pc, #100]	; (800c14c <HAL_TIM_Base_Start_IT+0xd8>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d004      	beq.n	800c0f4 <HAL_TIM_Base_Start_IT+0x80>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a18      	ldr	r2, [pc, #96]	; (800c150 <HAL_TIM_Base_Start_IT+0xdc>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d111      	bne.n	800c118 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f003 0307 	and.w	r3, r3, #7
 800c0fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b06      	cmp	r3, #6
 800c104:	d010      	beq.n	800c128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f042 0201 	orr.w	r2, r2, #1
 800c114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c116:	e007      	b.n	800c128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f042 0201 	orr.w	r2, r2, #1
 800c126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	40010000 	.word	0x40010000
 800c13c:	40000400 	.word	0x40000400
 800c140:	40000800 	.word	0x40000800
 800c144:	40000c00 	.word	0x40000c00
 800c148:	40010400 	.word	0x40010400
 800c14c:	40014000 	.word	0x40014000
 800c150:	40001800 	.word	0x40001800

0800c154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e041      	b.n	800c1ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7fa fcca 	bl	8006b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3304      	adds	r3, #4
 800c190:	4619      	mov	r1, r3
 800c192:	4610      	mov	r0, r2
 800c194:	f000 fa20 	bl	800c5d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	f003 0302 	and.w	r3, r3, #2
 800c204:	2b02      	cmp	r3, #2
 800c206:	d122      	bne.n	800c24e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	f003 0302 	and.w	r3, r3, #2
 800c212:	2b02      	cmp	r3, #2
 800c214:	d11b      	bne.n	800c24e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f06f 0202 	mvn.w	r2, #2
 800c21e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d003      	beq.n	800c23c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f9b1 	bl	800c59c <HAL_TIM_IC_CaptureCallback>
 800c23a:	e005      	b.n	800c248 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f9a3 	bl	800c588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f9b4 	bl	800c5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d122      	bne.n	800c2a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	f003 0304 	and.w	r3, r3, #4
 800c266:	2b04      	cmp	r3, #4
 800c268:	d11b      	bne.n	800c2a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f06f 0204 	mvn.w	r2, #4
 800c272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f987 	bl	800c59c <HAL_TIM_IC_CaptureCallback>
 800c28e:	e005      	b.n	800c29c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f979 	bl	800c588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f98a 	bl	800c5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	f003 0308 	and.w	r3, r3, #8
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d122      	bne.n	800c2f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	f003 0308 	and.w	r3, r3, #8
 800c2ba:	2b08      	cmp	r3, #8
 800c2bc:	d11b      	bne.n	800c2f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f06f 0208 	mvn.w	r2, #8
 800c2c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2204      	movs	r2, #4
 800c2cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69db      	ldr	r3, [r3, #28]
 800c2d4:	f003 0303 	and.w	r3, r3, #3
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f95d 	bl	800c59c <HAL_TIM_IC_CaptureCallback>
 800c2e2:	e005      	b.n	800c2f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f94f 	bl	800c588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f960 	bl	800c5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	f003 0310 	and.w	r3, r3, #16
 800c300:	2b10      	cmp	r3, #16
 800c302:	d122      	bne.n	800c34a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	f003 0310 	and.w	r3, r3, #16
 800c30e:	2b10      	cmp	r3, #16
 800c310:	d11b      	bne.n	800c34a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f06f 0210 	mvn.w	r2, #16
 800c31a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2208      	movs	r2, #8
 800c320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	69db      	ldr	r3, [r3, #28]
 800c328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d003      	beq.n	800c338 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f933 	bl	800c59c <HAL_TIM_IC_CaptureCallback>
 800c336:	e005      	b.n	800c344 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f925 	bl	800c588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f936 	bl	800c5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b01      	cmp	r3, #1
 800c356:	d10e      	bne.n	800c376 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b01      	cmp	r3, #1
 800c364:	d107      	bne.n	800c376 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f06f 0201 	mvn.w	r2, #1
 800c36e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7fa fb11 	bl	8006998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c380:	2b80      	cmp	r3, #128	; 0x80
 800c382:	d10e      	bne.n	800c3a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38e:	2b80      	cmp	r3, #128	; 0x80
 800c390:	d107      	bne.n	800c3a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c39a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fbf1 	bl	800cb84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ac:	2b40      	cmp	r3, #64	; 0x40
 800c3ae:	d10e      	bne.n	800c3ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ba:	2b40      	cmp	r3, #64	; 0x40
 800c3bc:	d107      	bne.n	800c3ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f8fb 	bl	800c5c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	f003 0320 	and.w	r3, r3, #32
 800c3d8:	2b20      	cmp	r3, #32
 800c3da:	d10e      	bne.n	800c3fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b20      	cmp	r3, #32
 800c3e8:	d107      	bne.n	800c3fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f06f 0220 	mvn.w	r2, #32
 800c3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fbbb 	bl	800cb70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d101      	bne.n	800c422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c41e:	2302      	movs	r3, #2
 800c420:	e0ae      	b.n	800c580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b0c      	cmp	r3, #12
 800c42e:	f200 809f 	bhi.w	800c570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c432:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c46d 	.word	0x0800c46d
 800c43c:	0800c571 	.word	0x0800c571
 800c440:	0800c571 	.word	0x0800c571
 800c444:	0800c571 	.word	0x0800c571
 800c448:	0800c4ad 	.word	0x0800c4ad
 800c44c:	0800c571 	.word	0x0800c571
 800c450:	0800c571 	.word	0x0800c571
 800c454:	0800c571 	.word	0x0800c571
 800c458:	0800c4ef 	.word	0x0800c4ef
 800c45c:	0800c571 	.word	0x0800c571
 800c460:	0800c571 	.word	0x0800c571
 800c464:	0800c571 	.word	0x0800c571
 800c468:	0800c52f 	.word	0x0800c52f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	4618      	mov	r0, r3
 800c474:	f000 f950 	bl	800c718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	699a      	ldr	r2, [r3, #24]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0208 	orr.w	r2, r2, #8
 800c486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f022 0204 	bic.w	r2, r2, #4
 800c496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6999      	ldr	r1, [r3, #24]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	619a      	str	r2, [r3, #24]
      break;
 800c4aa:	e064      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68b9      	ldr	r1, [r7, #8]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 f9a0 	bl	800c7f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699a      	ldr	r2, [r3, #24]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	699a      	ldr	r2, [r3, #24]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6999      	ldr	r1, [r3, #24]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	021a      	lsls	r2, r3, #8
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	619a      	str	r2, [r3, #24]
      break;
 800c4ec:	e043      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 f9f5 	bl	800c8e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69da      	ldr	r2, [r3, #28]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0208 	orr.w	r2, r2, #8
 800c508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	69da      	ldr	r2, [r3, #28]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0204 	bic.w	r2, r2, #4
 800c518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69d9      	ldr	r1, [r3, #28]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	61da      	str	r2, [r3, #28]
      break;
 800c52c:	e023      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 fa49 	bl	800c9cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69da      	ldr	r2, [r3, #28]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69d9      	ldr	r1, [r3, #28]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	021a      	lsls	r2, r3, #8
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	61da      	str	r2, [r3, #28]
      break;
 800c56e:	e002      	b.n	800c576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c570:	2301      	movs	r3, #1
 800c572:	75fb      	strb	r3, [r7, #23]
      break;
 800c574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a40      	ldr	r2, [pc, #256]	; (800c6ec <TIM_Base_SetConfig+0x114>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d013      	beq.n	800c618 <TIM_Base_SetConfig+0x40>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5f6:	d00f      	beq.n	800c618 <TIM_Base_SetConfig+0x40>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a3d      	ldr	r2, [pc, #244]	; (800c6f0 <TIM_Base_SetConfig+0x118>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d00b      	beq.n	800c618 <TIM_Base_SetConfig+0x40>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a3c      	ldr	r2, [pc, #240]	; (800c6f4 <TIM_Base_SetConfig+0x11c>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d007      	beq.n	800c618 <TIM_Base_SetConfig+0x40>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a3b      	ldr	r2, [pc, #236]	; (800c6f8 <TIM_Base_SetConfig+0x120>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d003      	beq.n	800c618 <TIM_Base_SetConfig+0x40>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a3a      	ldr	r2, [pc, #232]	; (800c6fc <TIM_Base_SetConfig+0x124>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d108      	bne.n	800c62a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a2f      	ldr	r2, [pc, #188]	; (800c6ec <TIM_Base_SetConfig+0x114>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d02b      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c638:	d027      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a2c      	ldr	r2, [pc, #176]	; (800c6f0 <TIM_Base_SetConfig+0x118>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d023      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a2b      	ldr	r2, [pc, #172]	; (800c6f4 <TIM_Base_SetConfig+0x11c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d01f      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a2a      	ldr	r2, [pc, #168]	; (800c6f8 <TIM_Base_SetConfig+0x120>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d01b      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a29      	ldr	r2, [pc, #164]	; (800c6fc <TIM_Base_SetConfig+0x124>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d017      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a28      	ldr	r2, [pc, #160]	; (800c700 <TIM_Base_SetConfig+0x128>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d013      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a27      	ldr	r2, [pc, #156]	; (800c704 <TIM_Base_SetConfig+0x12c>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d00f      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a26      	ldr	r2, [pc, #152]	; (800c708 <TIM_Base_SetConfig+0x130>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d00b      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a25      	ldr	r2, [pc, #148]	; (800c70c <TIM_Base_SetConfig+0x134>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d007      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a24      	ldr	r2, [pc, #144]	; (800c710 <TIM_Base_SetConfig+0x138>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d003      	beq.n	800c68a <TIM_Base_SetConfig+0xb2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a23      	ldr	r2, [pc, #140]	; (800c714 <TIM_Base_SetConfig+0x13c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d108      	bne.n	800c69c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	689a      	ldr	r2, [r3, #8]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a0a      	ldr	r2, [pc, #40]	; (800c6ec <TIM_Base_SetConfig+0x114>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d003      	beq.n	800c6d0 <TIM_Base_SetConfig+0xf8>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a0c      	ldr	r2, [pc, #48]	; (800c6fc <TIM_Base_SetConfig+0x124>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d103      	bne.n	800c6d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	615a      	str	r2, [r3, #20]
}
 800c6de:	bf00      	nop
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	40010000 	.word	0x40010000
 800c6f0:	40000400 	.word	0x40000400
 800c6f4:	40000800 	.word	0x40000800
 800c6f8:	40000c00 	.word	0x40000c00
 800c6fc:	40010400 	.word	0x40010400
 800c700:	40014000 	.word	0x40014000
 800c704:	40014400 	.word	0x40014400
 800c708:	40014800 	.word	0x40014800
 800c70c:	40001800 	.word	0x40001800
 800c710:	40001c00 	.word	0x40001c00
 800c714:	40002000 	.word	0x40002000

0800c718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	f023 0201 	bic.w	r2, r3, #1
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f023 0303 	bic.w	r3, r3, #3
 800c74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	4313      	orrs	r3, r2
 800c758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f023 0302 	bic.w	r3, r3, #2
 800c760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a20      	ldr	r2, [pc, #128]	; (800c7f0 <TIM_OC1_SetConfig+0xd8>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d003      	beq.n	800c77c <TIM_OC1_SetConfig+0x64>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a1f      	ldr	r2, [pc, #124]	; (800c7f4 <TIM_OC1_SetConfig+0xdc>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d10c      	bne.n	800c796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f023 0308 	bic.w	r3, r3, #8
 800c782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f023 0304 	bic.w	r3, r3, #4
 800c794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a15      	ldr	r2, [pc, #84]	; (800c7f0 <TIM_OC1_SetConfig+0xd8>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d003      	beq.n	800c7a6 <TIM_OC1_SetConfig+0x8e>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a14      	ldr	r2, [pc, #80]	; (800c7f4 <TIM_OC1_SetConfig+0xdc>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d111      	bne.n	800c7ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	693a      	ldr	r2, [r7, #16]
 800c7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	685a      	ldr	r2, [r3, #4]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	621a      	str	r2, [r3, #32]
}
 800c7e4:	bf00      	nop
 800c7e6:	371c      	adds	r7, #28
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	40010000 	.word	0x40010000
 800c7f4:	40010400 	.word	0x40010400

0800c7f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	f023 0210 	bic.w	r2, r3, #16
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	021b      	lsls	r3, r3, #8
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4313      	orrs	r3, r2
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f023 0320 	bic.w	r3, r3, #32
 800c842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	011b      	lsls	r3, r3, #4
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a22      	ldr	r2, [pc, #136]	; (800c8dc <TIM_OC2_SetConfig+0xe4>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d003      	beq.n	800c860 <TIM_OC2_SetConfig+0x68>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a21      	ldr	r2, [pc, #132]	; (800c8e0 <TIM_OC2_SetConfig+0xe8>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d10d      	bne.n	800c87c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	4313      	orrs	r3, r2
 800c872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c87a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a17      	ldr	r2, [pc, #92]	; (800c8dc <TIM_OC2_SetConfig+0xe4>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d003      	beq.n	800c88c <TIM_OC2_SetConfig+0x94>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a16      	ldr	r2, [pc, #88]	; (800c8e0 <TIM_OC2_SetConfig+0xe8>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d113      	bne.n	800c8b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c89a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	693a      	ldr	r2, [r7, #16]
 800c8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	621a      	str	r2, [r3, #32]
}
 800c8ce:	bf00      	nop
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	40010000 	.word	0x40010000
 800c8e0:	40010400 	.word	0x40010400

0800c8e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	021b      	lsls	r3, r3, #8
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	4313      	orrs	r3, r2
 800c938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a21      	ldr	r2, [pc, #132]	; (800c9c4 <TIM_OC3_SetConfig+0xe0>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d003      	beq.n	800c94a <TIM_OC3_SetConfig+0x66>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a20      	ldr	r2, [pc, #128]	; (800c9c8 <TIM_OC3_SetConfig+0xe4>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d10d      	bne.n	800c966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	021b      	lsls	r3, r3, #8
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a16      	ldr	r2, [pc, #88]	; (800c9c4 <TIM_OC3_SetConfig+0xe0>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d003      	beq.n	800c976 <TIM_OC3_SetConfig+0x92>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a15      	ldr	r2, [pc, #84]	; (800c9c8 <TIM_OC3_SetConfig+0xe4>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d113      	bne.n	800c99e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c97c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	011b      	lsls	r3, r3, #4
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	4313      	orrs	r3, r2
 800c990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	011b      	lsls	r3, r3, #4
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	621a      	str	r2, [r3, #32]
}
 800c9b8:	bf00      	nop
 800c9ba:	371c      	adds	r7, #28
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	40010000 	.word	0x40010000
 800c9c8:	40010400 	.word	0x40010400

0800c9cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	021b      	lsls	r3, r3, #8
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	031b      	lsls	r3, r3, #12
 800ca1e:	693a      	ldr	r2, [r7, #16]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a12      	ldr	r2, [pc, #72]	; (800ca70 <TIM_OC4_SetConfig+0xa4>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d003      	beq.n	800ca34 <TIM_OC4_SetConfig+0x68>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a11      	ldr	r2, [pc, #68]	; (800ca74 <TIM_OC4_SetConfig+0xa8>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d109      	bne.n	800ca48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	019b      	lsls	r3, r3, #6
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	621a      	str	r2, [r3, #32]
}
 800ca62:	bf00      	nop
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40010400 	.word	0x40010400

0800ca78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d101      	bne.n	800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	e05a      	b.n	800cb46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a21      	ldr	r2, [pc, #132]	; (800cb54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d022      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cadc:	d01d      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a1d      	ldr	r2, [pc, #116]	; (800cb58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d018      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a1b      	ldr	r2, [pc, #108]	; (800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d013      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a1a      	ldr	r2, [pc, #104]	; (800cb60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d00e      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a18      	ldr	r2, [pc, #96]	; (800cb64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d009      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d004      	beq.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a15      	ldr	r2, [pc, #84]	; (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d10c      	bne.n	800cb34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3714      	adds	r7, #20
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	40010000 	.word	0x40010000
 800cb58:	40000400 	.word	0x40000400
 800cb5c:	40000800 	.word	0x40000800
 800cb60:	40000c00 	.word	0x40000c00
 800cb64:	40010400 	.word	0x40010400
 800cb68:	40014000 	.word	0x40014000
 800cb6c:	40001800 	.word	0x40001800

0800cb70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e03f      	b.n	800cc2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d106      	bne.n	800cbc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7fa fab6 	bl	8007130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2224      	movs	r2, #36	; 0x24
 800cbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68da      	ldr	r2, [r3, #12]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f929 	bl	800ce34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	691a      	ldr	r2, [r3, #16]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	695a      	ldr	r2, [r3, #20]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68da      	ldr	r2, [r3, #12]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2220      	movs	r2, #32
 800cc24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b08a      	sub	sp, #40	; 0x28
 800cc36:	af02      	add	r7, sp, #8
 800cc38:	60f8      	str	r0, [r7, #12]
 800cc3a:	60b9      	str	r1, [r7, #8]
 800cc3c:	603b      	str	r3, [r7, #0]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc42:	2300      	movs	r3, #0
 800cc44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	2b20      	cmp	r3, #32
 800cc50:	d17c      	bne.n	800cd4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <HAL_UART_Transmit+0x2c>
 800cc58:	88fb      	ldrh	r3, [r7, #6]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e075      	b.n	800cd4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d101      	bne.n	800cc70 <HAL_UART_Transmit+0x3e>
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	e06e      	b.n	800cd4e <HAL_UART_Transmit+0x11c>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2201      	movs	r2, #1
 800cc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2221      	movs	r2, #33	; 0x21
 800cc82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc86:	f7fa fb83 	bl	8007390 <HAL_GetTick>
 800cc8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	88fa      	ldrh	r2, [r7, #6]
 800cc90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	88fa      	ldrh	r2, [r7, #6]
 800cc96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cca0:	d108      	bne.n	800ccb4 <HAL_UART_Transmit+0x82>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d104      	bne.n	800ccb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	61bb      	str	r3, [r7, #24]
 800ccb2:	e003      	b.n	800ccbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ccc4:	e02a      	b.n	800cd1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2200      	movs	r2, #0
 800ccce:	2180      	movs	r1, #128	; 0x80
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f000 f840 	bl	800cd56 <UART_WaitOnFlagUntilTimeout>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e036      	b.n	800cd4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10b      	bne.n	800ccfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	881b      	ldrh	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	3302      	adds	r3, #2
 800ccfa:	61bb      	str	r3, [r7, #24]
 800ccfc:	e007      	b.n	800cd0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	781a      	ldrb	r2, [r3, #0]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	3b01      	subs	r3, #1
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1cf      	bne.n	800ccc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2140      	movs	r1, #64	; 0x40
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 f810 	bl	800cd56 <UART_WaitOnFlagUntilTimeout>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e006      	b.n	800cd4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2220      	movs	r2, #32
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e000      	b.n	800cd4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cd4c:	2302      	movs	r3, #2
  }
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3720      	adds	r7, #32
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b090      	sub	sp, #64	; 0x40
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	603b      	str	r3, [r7, #0]
 800cd62:	4613      	mov	r3, r2
 800cd64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd66:	e050      	b.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd6e:	d04c      	beq.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d007      	beq.n	800cd86 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd76:	f7fa fb0b 	bl	8007390 <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d241      	bcs.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	330c      	adds	r3, #12
 800cd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	330c      	adds	r3, #12
 800cda4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cda6:	637a      	str	r2, [r7, #52]	; 0x34
 800cda8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e5      	bne.n	800cd86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3314      	adds	r3, #20
 800cdc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	e853 3f00 	ldrex	r3, [r3]
 800cdc8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	f023 0301 	bic.w	r3, r3, #1
 800cdd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3314      	adds	r3, #20
 800cdd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdda:	623a      	str	r2, [r7, #32]
 800cddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdde:	69f9      	ldr	r1, [r7, #28]
 800cde0:	6a3a      	ldr	r2, [r7, #32]
 800cde2:	e841 2300 	strex	r3, r2, [r1]
 800cde6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1e5      	bne.n	800cdba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2220      	movs	r2, #32
 800cdf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e00f      	b.n	800ce2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	4013      	ands	r3, r2
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	bf0c      	ite	eq
 800ce1a:	2301      	moveq	r3, #1
 800ce1c:	2300      	movne	r3, #0
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	461a      	mov	r2, r3
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d09f      	beq.n	800cd68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3740      	adds	r7, #64	; 0x40
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce38:	b0c0      	sub	sp, #256	; 0x100
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce50:	68d9      	ldr	r1, [r3, #12]
 800ce52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	ea40 0301 	orr.w	r3, r0, r1
 800ce5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce62:	689a      	ldr	r2, [r3, #8]
 800ce64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	431a      	orrs	r2, r3
 800ce74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce8c:	f021 010c 	bic.w	r1, r1, #12
 800ce90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce9a:	430b      	orrs	r3, r1
 800ce9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	695b      	ldr	r3, [r3, #20]
 800cea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ceaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceae:	6999      	ldr	r1, [r3, #24]
 800ceb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	ea40 0301 	orr.w	r3, r0, r1
 800ceba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	4b8f      	ldr	r3, [pc, #572]	; (800d100 <UART_SetConfig+0x2cc>)
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d005      	beq.n	800ced4 <UART_SetConfig+0xa0>
 800cec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	4b8d      	ldr	r3, [pc, #564]	; (800d104 <UART_SetConfig+0x2d0>)
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d104      	bne.n	800cede <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ced4:	f7fe f9a4 	bl	800b220 <HAL_RCC_GetPCLK2Freq>
 800ced8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cedc:	e003      	b.n	800cee6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cede:	f7fe f98b 	bl	800b1f8 <HAL_RCC_GetPCLK1Freq>
 800cee2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cef0:	f040 810c 	bne.w	800d10c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cef8:	2200      	movs	r2, #0
 800cefa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cefe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cf02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cf06:	4622      	mov	r2, r4
 800cf08:	462b      	mov	r3, r5
 800cf0a:	1891      	adds	r1, r2, r2
 800cf0c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cf0e:	415b      	adcs	r3, r3
 800cf10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cf16:	4621      	mov	r1, r4
 800cf18:	eb12 0801 	adds.w	r8, r2, r1
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	eb43 0901 	adc.w	r9, r3, r1
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	f04f 0300 	mov.w	r3, #0
 800cf2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf36:	4690      	mov	r8, r2
 800cf38:	4699      	mov	r9, r3
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	eb18 0303 	adds.w	r3, r8, r3
 800cf40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf44:	462b      	mov	r3, r5
 800cf46:	eb49 0303 	adc.w	r3, r9, r3
 800cf4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf62:	460b      	mov	r3, r1
 800cf64:	18db      	adds	r3, r3, r3
 800cf66:	653b      	str	r3, [r7, #80]	; 0x50
 800cf68:	4613      	mov	r3, r2
 800cf6a:	eb42 0303 	adc.w	r3, r2, r3
 800cf6e:	657b      	str	r3, [r7, #84]	; 0x54
 800cf70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf78:	f7f3 f938 	bl	80001ec <__aeabi_uldivmod>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4b61      	ldr	r3, [pc, #388]	; (800d108 <UART_SetConfig+0x2d4>)
 800cf82:	fba3 2302 	umull	r2, r3, r3, r2
 800cf86:	095b      	lsrs	r3, r3, #5
 800cf88:	011c      	lsls	r4, r3, #4
 800cf8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf9c:	4642      	mov	r2, r8
 800cf9e:	464b      	mov	r3, r9
 800cfa0:	1891      	adds	r1, r2, r2
 800cfa2:	64b9      	str	r1, [r7, #72]	; 0x48
 800cfa4:	415b      	adcs	r3, r3
 800cfa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cfac:	4641      	mov	r1, r8
 800cfae:	eb12 0a01 	adds.w	sl, r2, r1
 800cfb2:	4649      	mov	r1, r9
 800cfb4:	eb43 0b01 	adc.w	fp, r3, r1
 800cfb8:	f04f 0200 	mov.w	r2, #0
 800cfbc:	f04f 0300 	mov.w	r3, #0
 800cfc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfcc:	4692      	mov	sl, r2
 800cfce:	469b      	mov	fp, r3
 800cfd0:	4643      	mov	r3, r8
 800cfd2:	eb1a 0303 	adds.w	r3, sl, r3
 800cfd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	eb4b 0303 	adc.w	r3, fp, r3
 800cfe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cff0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cff4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cff8:	460b      	mov	r3, r1
 800cffa:	18db      	adds	r3, r3, r3
 800cffc:	643b      	str	r3, [r7, #64]	; 0x40
 800cffe:	4613      	mov	r3, r2
 800d000:	eb42 0303 	adc.w	r3, r2, r3
 800d004:	647b      	str	r3, [r7, #68]	; 0x44
 800d006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d00a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d00e:	f7f3 f8ed 	bl	80001ec <__aeabi_uldivmod>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	4611      	mov	r1, r2
 800d018:	4b3b      	ldr	r3, [pc, #236]	; (800d108 <UART_SetConfig+0x2d4>)
 800d01a:	fba3 2301 	umull	r2, r3, r3, r1
 800d01e:	095b      	lsrs	r3, r3, #5
 800d020:	2264      	movs	r2, #100	; 0x64
 800d022:	fb02 f303 	mul.w	r3, r2, r3
 800d026:	1acb      	subs	r3, r1, r3
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d02e:	4b36      	ldr	r3, [pc, #216]	; (800d108 <UART_SetConfig+0x2d4>)
 800d030:	fba3 2302 	umull	r2, r3, r3, r2
 800d034:	095b      	lsrs	r3, r3, #5
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d03c:	441c      	add	r4, r3
 800d03e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d042:	2200      	movs	r2, #0
 800d044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d048:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d04c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d050:	4642      	mov	r2, r8
 800d052:	464b      	mov	r3, r9
 800d054:	1891      	adds	r1, r2, r2
 800d056:	63b9      	str	r1, [r7, #56]	; 0x38
 800d058:	415b      	adcs	r3, r3
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d05c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d060:	4641      	mov	r1, r8
 800d062:	1851      	adds	r1, r2, r1
 800d064:	6339      	str	r1, [r7, #48]	; 0x30
 800d066:	4649      	mov	r1, r9
 800d068:	414b      	adcs	r3, r1
 800d06a:	637b      	str	r3, [r7, #52]	; 0x34
 800d06c:	f04f 0200 	mov.w	r2, #0
 800d070:	f04f 0300 	mov.w	r3, #0
 800d074:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d078:	4659      	mov	r1, fp
 800d07a:	00cb      	lsls	r3, r1, #3
 800d07c:	4651      	mov	r1, sl
 800d07e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d082:	4651      	mov	r1, sl
 800d084:	00ca      	lsls	r2, r1, #3
 800d086:	4610      	mov	r0, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	4603      	mov	r3, r0
 800d08c:	4642      	mov	r2, r8
 800d08e:	189b      	adds	r3, r3, r2
 800d090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d094:	464b      	mov	r3, r9
 800d096:	460a      	mov	r2, r1
 800d098:	eb42 0303 	adc.w	r3, r2, r3
 800d09c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d0ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d0b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	18db      	adds	r3, r3, r3
 800d0b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	eb42 0303 	adc.w	r3, r2, r3
 800d0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d0ca:	f7f3 f88f 	bl	80001ec <__aeabi_uldivmod>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4b0d      	ldr	r3, [pc, #52]	; (800d108 <UART_SetConfig+0x2d4>)
 800d0d4:	fba3 1302 	umull	r1, r3, r3, r2
 800d0d8:	095b      	lsrs	r3, r3, #5
 800d0da:	2164      	movs	r1, #100	; 0x64
 800d0dc:	fb01 f303 	mul.w	r3, r1, r3
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	3332      	adds	r3, #50	; 0x32
 800d0e6:	4a08      	ldr	r2, [pc, #32]	; (800d108 <UART_SetConfig+0x2d4>)
 800d0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ec:	095b      	lsrs	r3, r3, #5
 800d0ee:	f003 0207 	and.w	r2, r3, #7
 800d0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4422      	add	r2, r4
 800d0fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0fc:	e105      	b.n	800d30a <UART_SetConfig+0x4d6>
 800d0fe:	bf00      	nop
 800d100:	40011000 	.word	0x40011000
 800d104:	40011400 	.word	0x40011400
 800d108:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d10c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d110:	2200      	movs	r2, #0
 800d112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d116:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d11a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d11e:	4642      	mov	r2, r8
 800d120:	464b      	mov	r3, r9
 800d122:	1891      	adds	r1, r2, r2
 800d124:	6239      	str	r1, [r7, #32]
 800d126:	415b      	adcs	r3, r3
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
 800d12a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d12e:	4641      	mov	r1, r8
 800d130:	1854      	adds	r4, r2, r1
 800d132:	4649      	mov	r1, r9
 800d134:	eb43 0501 	adc.w	r5, r3, r1
 800d138:	f04f 0200 	mov.w	r2, #0
 800d13c:	f04f 0300 	mov.w	r3, #0
 800d140:	00eb      	lsls	r3, r5, #3
 800d142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d146:	00e2      	lsls	r2, r4, #3
 800d148:	4614      	mov	r4, r2
 800d14a:	461d      	mov	r5, r3
 800d14c:	4643      	mov	r3, r8
 800d14e:	18e3      	adds	r3, r4, r3
 800d150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d154:	464b      	mov	r3, r9
 800d156:	eb45 0303 	adc.w	r3, r5, r3
 800d15a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d16a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d16e:	f04f 0200 	mov.w	r2, #0
 800d172:	f04f 0300 	mov.w	r3, #0
 800d176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d17a:	4629      	mov	r1, r5
 800d17c:	008b      	lsls	r3, r1, #2
 800d17e:	4621      	mov	r1, r4
 800d180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d184:	4621      	mov	r1, r4
 800d186:	008a      	lsls	r2, r1, #2
 800d188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d18c:	f7f3 f82e 	bl	80001ec <__aeabi_uldivmod>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	4b60      	ldr	r3, [pc, #384]	; (800d318 <UART_SetConfig+0x4e4>)
 800d196:	fba3 2302 	umull	r2, r3, r3, r2
 800d19a:	095b      	lsrs	r3, r3, #5
 800d19c:	011c      	lsls	r4, r3, #4
 800d19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d1a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d1ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	464b      	mov	r3, r9
 800d1b4:	1891      	adds	r1, r2, r2
 800d1b6:	61b9      	str	r1, [r7, #24]
 800d1b8:	415b      	adcs	r3, r3
 800d1ba:	61fb      	str	r3, [r7, #28]
 800d1bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1c0:	4641      	mov	r1, r8
 800d1c2:	1851      	adds	r1, r2, r1
 800d1c4:	6139      	str	r1, [r7, #16]
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	414b      	adcs	r3, r1
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	f04f 0200 	mov.w	r2, #0
 800d1d0:	f04f 0300 	mov.w	r3, #0
 800d1d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1d8:	4659      	mov	r1, fp
 800d1da:	00cb      	lsls	r3, r1, #3
 800d1dc:	4651      	mov	r1, sl
 800d1de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1e2:	4651      	mov	r1, sl
 800d1e4:	00ca      	lsls	r2, r1, #3
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	4642      	mov	r2, r8
 800d1ee:	189b      	adds	r3, r3, r2
 800d1f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1f4:	464b      	mov	r3, r9
 800d1f6:	460a      	mov	r2, r1
 800d1f8:	eb42 0303 	adc.w	r3, r2, r3
 800d1fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	67bb      	str	r3, [r7, #120]	; 0x78
 800d20a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d20c:	f04f 0200 	mov.w	r2, #0
 800d210:	f04f 0300 	mov.w	r3, #0
 800d214:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d218:	4649      	mov	r1, r9
 800d21a:	008b      	lsls	r3, r1, #2
 800d21c:	4641      	mov	r1, r8
 800d21e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d222:	4641      	mov	r1, r8
 800d224:	008a      	lsls	r2, r1, #2
 800d226:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d22a:	f7f2 ffdf 	bl	80001ec <__aeabi_uldivmod>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4b39      	ldr	r3, [pc, #228]	; (800d318 <UART_SetConfig+0x4e4>)
 800d234:	fba3 1302 	umull	r1, r3, r3, r2
 800d238:	095b      	lsrs	r3, r3, #5
 800d23a:	2164      	movs	r1, #100	; 0x64
 800d23c:	fb01 f303 	mul.w	r3, r1, r3
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	011b      	lsls	r3, r3, #4
 800d244:	3332      	adds	r3, #50	; 0x32
 800d246:	4a34      	ldr	r2, [pc, #208]	; (800d318 <UART_SetConfig+0x4e4>)
 800d248:	fba2 2303 	umull	r2, r3, r2, r3
 800d24c:	095b      	lsrs	r3, r3, #5
 800d24e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d252:	441c      	add	r4, r3
 800d254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d258:	2200      	movs	r2, #0
 800d25a:	673b      	str	r3, [r7, #112]	; 0x70
 800d25c:	677a      	str	r2, [r7, #116]	; 0x74
 800d25e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d262:	4642      	mov	r2, r8
 800d264:	464b      	mov	r3, r9
 800d266:	1891      	adds	r1, r2, r2
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	415b      	adcs	r3, r3
 800d26c:	60fb      	str	r3, [r7, #12]
 800d26e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d272:	4641      	mov	r1, r8
 800d274:	1851      	adds	r1, r2, r1
 800d276:	6039      	str	r1, [r7, #0]
 800d278:	4649      	mov	r1, r9
 800d27a:	414b      	adcs	r3, r1
 800d27c:	607b      	str	r3, [r7, #4]
 800d27e:	f04f 0200 	mov.w	r2, #0
 800d282:	f04f 0300 	mov.w	r3, #0
 800d286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d28a:	4659      	mov	r1, fp
 800d28c:	00cb      	lsls	r3, r1, #3
 800d28e:	4651      	mov	r1, sl
 800d290:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d294:	4651      	mov	r1, sl
 800d296:	00ca      	lsls	r2, r1, #3
 800d298:	4610      	mov	r0, r2
 800d29a:	4619      	mov	r1, r3
 800d29c:	4603      	mov	r3, r0
 800d29e:	4642      	mov	r2, r8
 800d2a0:	189b      	adds	r3, r3, r2
 800d2a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2a4:	464b      	mov	r3, r9
 800d2a6:	460a      	mov	r2, r1
 800d2a8:	eb42 0303 	adc.w	r3, r2, r3
 800d2ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	663b      	str	r3, [r7, #96]	; 0x60
 800d2b8:	667a      	str	r2, [r7, #100]	; 0x64
 800d2ba:	f04f 0200 	mov.w	r2, #0
 800d2be:	f04f 0300 	mov.w	r3, #0
 800d2c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	008b      	lsls	r3, r1, #2
 800d2ca:	4641      	mov	r1, r8
 800d2cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2d0:	4641      	mov	r1, r8
 800d2d2:	008a      	lsls	r2, r1, #2
 800d2d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2d8:	f7f2 ff88 	bl	80001ec <__aeabi_uldivmod>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4b0d      	ldr	r3, [pc, #52]	; (800d318 <UART_SetConfig+0x4e4>)
 800d2e2:	fba3 1302 	umull	r1, r3, r3, r2
 800d2e6:	095b      	lsrs	r3, r3, #5
 800d2e8:	2164      	movs	r1, #100	; 0x64
 800d2ea:	fb01 f303 	mul.w	r3, r1, r3
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	011b      	lsls	r3, r3, #4
 800d2f2:	3332      	adds	r3, #50	; 0x32
 800d2f4:	4a08      	ldr	r2, [pc, #32]	; (800d318 <UART_SetConfig+0x4e4>)
 800d2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2fa:	095b      	lsrs	r3, r3, #5
 800d2fc:	f003 020f 	and.w	r2, r3, #15
 800d300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4422      	add	r2, r4
 800d308:	609a      	str	r2, [r3, #8]
}
 800d30a:	bf00      	nop
 800d30c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d310:	46bd      	mov	sp, r7
 800d312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d316:	bf00      	nop
 800d318:	51eb851f 	.word	0x51eb851f

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4d0d      	ldr	r5, [pc, #52]	; (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	; (800d358 <__libc_init_array+0x3c>)
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2600      	movs	r6, #0
 800d328:	42a6      	cmp	r6, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4d0b      	ldr	r5, [pc, #44]	; (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	; (800d360 <__libc_init_array+0x44>)
 800d330:	f000 f87c 	bl	800d42c <_init>
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2600      	movs	r6, #0
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f855 3b04 	ldr.w	r3, [r5], #4
 800d344:	4798      	blx	r3
 800d346:	3601      	adds	r6, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34e:	4798      	blx	r3
 800d350:	3601      	adds	r6, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	08010a90 	.word	0x08010a90
 800d358:	08010a90 	.word	0x08010a90
 800d35c:	08010a90 	.word	0x08010a90
 800d360:	08010a94 	.word	0x08010a94

0800d364 <__itoa>:
 800d364:	1e93      	subs	r3, r2, #2
 800d366:	2b22      	cmp	r3, #34	; 0x22
 800d368:	b510      	push	{r4, lr}
 800d36a:	460c      	mov	r4, r1
 800d36c:	d904      	bls.n	800d378 <__itoa+0x14>
 800d36e:	2300      	movs	r3, #0
 800d370:	700b      	strb	r3, [r1, #0]
 800d372:	461c      	mov	r4, r3
 800d374:	4620      	mov	r0, r4
 800d376:	bd10      	pop	{r4, pc}
 800d378:	2a0a      	cmp	r2, #10
 800d37a:	d109      	bne.n	800d390 <__itoa+0x2c>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	da07      	bge.n	800d390 <__itoa+0x2c>
 800d380:	232d      	movs	r3, #45	; 0x2d
 800d382:	700b      	strb	r3, [r1, #0]
 800d384:	4240      	negs	r0, r0
 800d386:	2101      	movs	r1, #1
 800d388:	4421      	add	r1, r4
 800d38a:	f000 f80d 	bl	800d3a8 <__utoa>
 800d38e:	e7f1      	b.n	800d374 <__itoa+0x10>
 800d390:	2100      	movs	r1, #0
 800d392:	e7f9      	b.n	800d388 <__itoa+0x24>

0800d394 <itoa>:
 800d394:	f7ff bfe6 	b.w	800d364 <__itoa>

0800d398 <memset>:
 800d398:	4402      	add	r2, r0
 800d39a:	4603      	mov	r3, r0
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d100      	bne.n	800d3a2 <memset+0xa>
 800d3a0:	4770      	bx	lr
 800d3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3a6:	e7f9      	b.n	800d39c <memset+0x4>

0800d3a8 <__utoa>:
 800d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3aa:	4c1f      	ldr	r4, [pc, #124]	; (800d428 <__utoa+0x80>)
 800d3ac:	b08b      	sub	sp, #44	; 0x2c
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	466e      	mov	r6, sp
 800d3b4:	f104 0c20 	add.w	ip, r4, #32
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	6861      	ldr	r1, [r4, #4]
 800d3bc:	4637      	mov	r7, r6
 800d3be:	c703      	stmia	r7!, {r0, r1}
 800d3c0:	3408      	adds	r4, #8
 800d3c2:	4564      	cmp	r4, ip
 800d3c4:	463e      	mov	r6, r7
 800d3c6:	d1f7      	bne.n	800d3b8 <__utoa+0x10>
 800d3c8:	7921      	ldrb	r1, [r4, #4]
 800d3ca:	7139      	strb	r1, [r7, #4]
 800d3cc:	1e91      	subs	r1, r2, #2
 800d3ce:	6820      	ldr	r0, [r4, #0]
 800d3d0:	6038      	str	r0, [r7, #0]
 800d3d2:	2922      	cmp	r1, #34	; 0x22
 800d3d4:	f04f 0100 	mov.w	r1, #0
 800d3d8:	d904      	bls.n	800d3e4 <__utoa+0x3c>
 800d3da:	7019      	strb	r1, [r3, #0]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4618      	mov	r0, r3
 800d3e0:	b00b      	add	sp, #44	; 0x2c
 800d3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e4:	1e58      	subs	r0, r3, #1
 800d3e6:	4684      	mov	ip, r0
 800d3e8:	fbb5 f7f2 	udiv	r7, r5, r2
 800d3ec:	fb02 5617 	mls	r6, r2, r7, r5
 800d3f0:	3628      	adds	r6, #40	; 0x28
 800d3f2:	446e      	add	r6, sp
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d3fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d3fe:	462e      	mov	r6, r5
 800d400:	42b2      	cmp	r2, r6
 800d402:	f101 0101 	add.w	r1, r1, #1
 800d406:	463d      	mov	r5, r7
 800d408:	d9ee      	bls.n	800d3e8 <__utoa+0x40>
 800d40a:	2200      	movs	r2, #0
 800d40c:	545a      	strb	r2, [r3, r1]
 800d40e:	1919      	adds	r1, r3, r4
 800d410:	1aa5      	subs	r5, r4, r2
 800d412:	42aa      	cmp	r2, r5
 800d414:	dae3      	bge.n	800d3de <__utoa+0x36>
 800d416:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d41a:	780e      	ldrb	r6, [r1, #0]
 800d41c:	7006      	strb	r6, [r0, #0]
 800d41e:	3201      	adds	r2, #1
 800d420:	f801 5901 	strb.w	r5, [r1], #-1
 800d424:	e7f4      	b.n	800d410 <__utoa+0x68>
 800d426:	bf00      	nop
 800d428:	08010a60 	.word	0x08010a60

0800d42c <_init>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	bf00      	nop
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr

0800d438 <_fini>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	bf00      	nop
 800d43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43e:	bc08      	pop	{r3}
 800d440:	469e      	mov	lr, r3
 800d442:	4770      	bx	lr
