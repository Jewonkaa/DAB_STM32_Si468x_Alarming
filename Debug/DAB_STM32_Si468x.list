
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c58c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003304  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa18  0800fa18  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa18  0800fa18  0001fa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa20  0800fa20  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa20  0800fa20  0001fa20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa24  0800fa24  0001fa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800fa28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          000032a8  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000342c  2000342c  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018efe  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003984  00000000  00000000  000390b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003ca38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d0  00000000  00000000  0003df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024541  00000000  00000000  0003f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c937  00000000  00000000  00063871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2959  00000000  00000000  000801a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152b01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005804  00000000  00000000  00152b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c6fc 	.word	0x0800c6fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	0800c6fc 	.word	0x0800c6fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f009 ff96 	bl	800a62a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200031c4 	.word	0x200031c4

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f006 fdb2 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f005 ffab 	bl	8006678 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f006 fda9 	bl	8007280 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f006 fda3 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f005 ff9c 	bl	8006678 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f006 fd97 	bl	8007280 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f006 fd3c 	bl	8007280 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f006 fd36 	bl	8007280 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f006 fd2c 	bl	8007280 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f006 fc9e 	bl	8007280 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f006 fc95 	bl	8007280 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200001a0 	.word	0x200001a0

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f006 fb04 	bl	8007280 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f006 fafe 	bl	8007280 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f006 faf5 	bl	8007280 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f006 fa5b 	bl	8007280 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f006 fa31 	bl	8007280 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f006 fa28 	bl	8007280 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f006 f9dc 	bl	8007280 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f006 f9d3 	bl	8007280 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f006 f987 	bl	8007280 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f006 f97e 	bl	8007280 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800da64 	.word	0x0800da64
 8001010:	0800dd3c 	.word	0x0800dd3c

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f006 f92e 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f006 f928 	bl	8007280 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f006 f91c 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f006 f916 	bl	8007280 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_dab_init>:

static dab_management_t dab_management;					//struct that contains some DAB management data


void Si468x_dab_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <Si468x_dab_init+0xc0>)
 8001064:	f002 fa90 	bl	8003588 <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f85a 	bl	8001120 <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f874 	bl	8001158 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f8f6 	bl	8001260 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f966 	bl	8001348 <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa04 	bl	8001488 <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbbc 	bl	80017fc <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb34 	bl	80016f0 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc25 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc1f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc19 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc14 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc0f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc09 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc03 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fbfe 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fbf9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fbf4 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fbef 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbe9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbe4 	bl	80018dc <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001114:	f000 faec 	bl	80016f0 <Si468x_get_sys_state>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800c7c4 	.word	0x0800c7c4

08001120 <Si468x_reset>:

void Si468x_reset()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001124:	2101      	movs	r1, #1
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <Si468x_reset+0x30>)
 8001128:	f002 fa2e 	bl	8003588 <send_debug_msg>
	RESET_PIN_LOW;
 800112c:	2200      	movs	r2, #0
 800112e:	2120      	movs	r1, #32
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <Si468x_reset+0x34>)
 8001132:	f006 f8a5 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f005 fa9e 	bl	8006678 <HAL_Delay>
	RESET_PIN_HIGH;
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <Si468x_reset+0x34>)
 8001142:	f006 f89d 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001146:	20c8      	movs	r0, #200	; 0xc8
 8001148:	f005 fa96 	bl	8006678 <HAL_Delay>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800c814 	.word	0x0800c814
 8001154:	40020800 	.word	0x40020800

08001158 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 800115c:	2101      	movs	r1, #1
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <Si468x_power_up+0xa0>)
 8001160:	f002 fa12 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <Si468x_power_up+0xa4>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <Si468x_power_up+0xa4>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Si468x_power_up+0xa4>)
 8001172:	2217      	movs	r2, #23
 8001174:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <Si468x_power_up+0xa4>)
 8001178:	2250      	movs	r2, #80	; 0x50
 800117a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <Si468x_power_up+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <Si468x_power_up+0xa4>)
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <Si468x_power_up+0xa4>)
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <Si468x_power_up+0xa4>)
 8001190:	2201      	movs	r2, #1
 8001192:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <Si468x_power_up+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Si468x_power_up+0xa4>)
 800119c:	2210      	movs	r2, #16
 800119e:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <Si468x_power_up+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Si468x_power_up+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Si468x_power_up+0xa4>)
 80011b4:	2228      	movs	r2, #40	; 0x28
 80011b6:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Si468x_power_up+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <Si468x_power_up+0xa4>)
 80011c6:	2010      	movs	r0, #16
 80011c8:	f000 fa58 	bl	800167c <Si468x_write_command>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <Si468x_power_up+0xa8>)
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f005 fa4f 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <Si468x_power_up+0xac>)
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fa6f 	bl	80016c0 <Si468x_read_reply>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <Si468x_power_up+0xa8>)
 80011e8:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011ea:	2101      	movs	r1, #1
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <Si468x_power_up+0xb0>)
 80011ee:	f002 f9cb 	bl	8003588 <send_debug_msg>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800c828 	.word	0x0800c828
 80011fc:	200001a4 	.word	0x200001a4
 8001200:	200019e4 	.word	0x200019e4
 8001204:	200011a4 	.word	0x200011a4
 8001208:	0800c864 	.word	0x0800c864

0800120c <Si468x_load_init>:

void Si468x_load_init()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <Si468x_load_init+0x44>)
 8001214:	f002 f9b8 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <Si468x_load_init+0x48>)
 800121a:	2206      	movs	r2, #6
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <Si468x_load_init+0x48>)
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001224:	490b      	ldr	r1, [pc, #44]	; (8001254 <Si468x_load_init+0x48>)
 8001226:	2002      	movs	r0, #2
 8001228:	f000 fa28 	bl	800167c <Si468x_write_command>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <Si468x_load_init+0x4c>)
 8001232:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f005 fa1f 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <Si468x_load_init+0x50>)
 800123c:	2005      	movs	r0, #5
 800123e:	f000 fa3f 	bl	80016c0 <Si468x_read_reply>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <Si468x_load_init+0x4c>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800c884 	.word	0x0800c884
 8001254:	200001a4 	.word	0x200001a4
 8001258:	200019e4 	.word	0x200019e4
 800125c:	200011a4 	.word	0x200011a4

08001260 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 8001266:	2101      	movs	r1, #1
 8001268:	4830      	ldr	r0, [pc, #192]	; (800132c <Si468x_bootloader_load_host+0xcc>)
 800126a:	f002 f98d 	bl	8003588 <send_debug_msg>
	Si468x_load_init();
 800126e:	f7ff ffcd 	bl	800120c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001272:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001276:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	e03e      	b.n	8001314 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001296:	2300      	movs	r3, #0
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	e014      	b.n	80012c6 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800129c:	88ba      	ldrh	r2, [r7, #4]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4924      	ldr	r1, [pc, #144]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012a2:	fba1 1303 	umull	r1, r3, r1, r3
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	441a      	add	r2, r3
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	491f      	ldr	r1, [pc, #124]	; (8001338 <Si468x_bootloader_load_host+0xd8>)
 80012ba:	5c89      	ldrb	r1, [r1, r2]
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012be:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	88ba      	ldrh	r2, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3e1      	bcc.n	800129c <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3304      	adds	r3, #4
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9c6 	bl	800167c <Si468x_write_command>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 80012f6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f005 f9bd 	bl	8006678 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <Si468x_bootloader_load_host+0xe0>)
 8001300:	2005      	movs	r0, #5
 8001302:	f000 f9dd 	bl	80016c0 <Si468x_read_reply>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 800130c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	3301      	adds	r3, #1
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d9bd      	bls.n	8001296 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <Si468x_bootloader_load_host+0xe4>)
 800131e:	f002 f933 	bl	8003588 <send_debug_msg>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	0800c89c 	.word	0x0800c89c
 8001330:	200001a4 	.word	0x200001a4
 8001334:	aaaaaaab 	.word	0xaaaaaaab
 8001338:	0800e32c 	.word	0x0800e32c
 800133c:	200019e4 	.word	0x200019e4
 8001340:	200011a4 	.word	0x200011a4
 8001344:	0800c8d8 	.word	0x0800c8d8

08001348 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001350:	2101      	movs	r1, #1
 8001352:	4845      	ldr	r0, [pc, #276]	; (8001468 <Si468x_firmware_load_flash+0x120>)
 8001354:	f002 f918 	bl	8003588 <send_debug_msg>
	Si468x_load_init();
 8001358:	f7ff ff58 	bl	800120c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800135e:	2205      	movs	r2, #5
 8001360:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800137a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001384:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800138e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001398:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800139a:	2100      	movs	r1, #0
 800139c:	4834      	ldr	r0, [pc, #208]	; (8001470 <Si468x_firmware_load_flash+0x128>)
 800139e:	f002 f8f3 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013a2:	4b32      	ldr	r3, [pc, #200]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	2210      	movs	r2, #16
 80013a8:	4932      	ldr	r1, [pc, #200]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00b f95a 	bl	800c664 <itoa>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f8e7 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	2210      	movs	r2, #16
 80013c0:	492c      	ldr	r1, [pc, #176]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b f94e 	bl	800c664 <itoa>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f8db 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013d4:	799b      	ldrb	r3, [r3, #6]
 80013d6:	2210      	movs	r2, #16
 80013d8:	4926      	ldr	r1, [pc, #152]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b f942 	bl	800c664 <itoa>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 f8cf 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	2210      	movs	r2, #16
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00b f936 	bl	800c664 <itoa>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2101      	movs	r1, #1
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f8c3 	bl	8003588 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800140a:	2200      	movs	r2, #0
 800140c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001410:	2200      	movs	r2, #0
 8001412:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800141c:	200c      	movs	r0, #12
 800141e:	f000 f92d 	bl	800167c <Si468x_write_command>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 8001428:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f005 f924 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001430:	4912      	ldr	r1, [pc, #72]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001432:	2005      	movs	r0, #5
 8001434:	f000 f944 	bl	80016c0 <Si468x_read_reply>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 800143e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800144c:	2101      	movs	r1, #1
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <Si468x_firmware_load_flash+0x138>)
 8001450:	f002 f89a 	bl	8003588 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001454:	e003      	b.n	800145e <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001456:	2101      	movs	r1, #1
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <Si468x_firmware_load_flash+0x13c>)
 800145a:	f002 f895 	bl	8003588 <send_debug_msg>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800c8f8 	.word	0x0800c8f8
 800146c:	200001a4 	.word	0x200001a4
 8001470:	0800c934 	.word	0x0800c934
 8001474:	200019a4 	.word	0x200019a4
 8001478:	200019e4 	.word	0x200019e4
 800147c:	200011a4 	.word	0x200011a4
 8001480:	0800c948 	.word	0x0800c948
 8001484:	0800c958 	.word	0x0800c958

08001488 <Si468x_boot>:

void Si468x_boot()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 800148c:	2101      	movs	r1, #1
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <Si468x_boot+0x60>)
 8001490:	f002 f87a 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <Si468x_boot+0x64>)
 8001496:	2207      	movs	r2, #7
 8001498:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <Si468x_boot+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <Si468x_boot+0x64>)
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f8ea 	bl	800167c <Si468x_write_command>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <Si468x_boot+0x68>)
 80014ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f005 f8e1 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014b6:	490f      	ldr	r1, [pc, #60]	; (80014f4 <Si468x_boot+0x6c>)
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 f901 	bl	80016c0 <Si468x_read_reply>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Si468x_boot+0x68>)
 80014c4:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <Si468x_boot+0x6c>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ce:	2bc0      	cmp	r3, #192	; 0xc0
 80014d0:	d104      	bne.n	80014dc <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <Si468x_boot+0x70>)
 80014d6:	f002 f857 	bl	8003588 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014da:	e003      	b.n	80014e4 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014dc:	2101      	movs	r1, #1
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <Si468x_boot+0x74>)
 80014e0:	f002 f852 	bl	8003588 <send_debug_msg>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800c974 	.word	0x0800c974
 80014ec:	200001a4 	.word	0x200001a4
 80014f0:	200019e4 	.word	0x200019e4
 80014f4:	200011a4 	.word	0x200011a4
 80014f8:	0800c9b0 	.word	0x0800c9b0
 80014fc:	0800c9cc 	.word	0x0800c9cc

08001500 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800150a:	1df9      	adds	r1, r7, #7
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <Si468x_write_single_byte+0x20>)
 8001512:	f009 f88a 	bl	800a62a <HAL_SPI_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000316c 	.word	0x2000316c

08001524 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <Si468x_read_single_byte+0x20>)
 8001536:	f009 f9b4 	bl	800a8a2 <HAL_SPI_Receive>
	return data_buffer;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000316c 	.word	0x2000316c

08001548 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	e01f      	b.n	8001598 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <Si468x_wait_for_CTS+0x6c>)
 800155a:	2001      	movs	r0, #1
 800155c:	f000 f8b0 	bl	80016c0 <Si468x_read_reply>
		if(rd_reply.cts)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00e      	beq.n	800158c <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 800157c:	2101      	movs	r1, #1
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <Si468x_wait_for_CTS+0x74>)
 8001580:	f002 f802 	bl	8003588 <send_debug_msg>
				return COMMAND_ERROR;
 8001584:	2320      	movs	r3, #32
 8001586:	e010      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 8001588:	2300      	movs	r3, #0
 800158a:	e00e      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f005 f873 	bl	8006678 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	81fb      	strh	r3, [r7, #14]
 8001598:	89fa      	ldrh	r2, [r7, #14]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3db      	bcc.n	8001558 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015a0:	2101      	movs	r1, #1
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <Si468x_wait_for_CTS+0x78>)
 80015a4:	f001 fff0 	bl	8003588 <send_debug_msg>
	return TIMEOUT;
 80015a8:	2308      	movs	r3, #8
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200011a4 	.word	0x200011a4
 80015b8:	20001ad0 	.word	0x20001ad0
 80015bc:	0800c9e0 	.word	0x0800c9e0
 80015c0:	0800ca08 	.word	0x0800ca08

080015c4 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <Si468x_write_multiple+0x4c>)
 80015da:	f005 fe51 	bl	8007280 <HAL_GPIO_WritePin>
	while(len--)
 80015de:	e009      	b.n	80015f4 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	81fa      	strh	r2, [r7, #14]
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff86 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	80fa      	strh	r2, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80015fe:	2201      	movs	r2, #1
 8001600:	2110      	movs	r1, #16
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <Si468x_write_multiple+0x4c>)
 8001604:	f005 fe3c 	bl	8007280 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020800 	.word	0x40020800

08001614 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <Si468x_read_multiple+0x64>)
 800162a:	f005 fe29 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800162e:	2003      	movs	r0, #3
 8001630:	f005 f822 	bl	8006678 <HAL_Delay>
	CS_PIN_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <Si468x_read_multiple+0x64>)
 800163a:	f005 fe21 	bl	8007280 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff ff5e 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 8001644:	e009      	b.n	800165a <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	81fa      	strh	r2, [r7, #14]
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	189c      	adds	r4, r3, r2
 8001652:	f7ff ff67 	bl	8001524 <Si468x_read_single_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
	while(len--)
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	80fa      	strh	r2, [r7, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <Si468x_read_multiple+0x64>)
 800166a:	f005 fe09 	bl	8007280 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	40020800 	.word	0x40020800

0800167c <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f7ff ff5c 	bl	8001548 <Si468x_wait_for_CTS>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <Si468x_write_command+0x24>
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b20      	cmp	r3, #32
 800169e:	d10a      	bne.n	80016b6 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff8d 	bl	80015c4 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ae:	f7ff ff4b 	bl	8001548 <Si468x_wait_for_CTS>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff9f 	bl	8001614 <Si468x_read_multiple>
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <Si468x_read_reply+0x28>)
 80016d8:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <Si468x_read_reply+0x2c>)
 80016dc:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200011a4 	.word	0x200011a4
 80016ec:	20001ad0 	.word	0x20001ad0

080016f0 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4833      	ldr	r0, [pc, #204]	; (80017c4 <Si468x_get_sys_state+0xd4>)
 80016f8:	f001 ff46 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 80016fe:	2209      	movs	r2, #9
 8001700:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001708:	492f      	ldr	r1, [pc, #188]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 800170a:	2002      	movs	r0, #2
 800170c:	f7ff ffb6 	bl	800167c <Si468x_write_command>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <Si468x_get_sys_state+0xdc>)
 8001716:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f004 ffad 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001720:	2005      	movs	r0, #5
 8001722:	f7ff ffcd 	bl	80016c0 <Si468x_read_reply>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <Si468x_get_sys_state+0xdc>)
 800172c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800172e:	2100      	movs	r1, #0
 8001730:	4828      	ldr	r0, [pc, #160]	; (80017d4 <Si468x_get_sys_state+0xe4>)
 8001732:	f001 ff29 	bl	8003588 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	2b07      	cmp	r3, #7
 800173c:	d83a      	bhi.n	80017b4 <Si468x_get_sys_state+0xc4>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <Si468x_get_sys_state+0x54>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001765 	.word	0x08001765
 8001748:	0800176f 	.word	0x0800176f
 800174c:	08001779 	.word	0x08001779
 8001750:	08001783 	.word	0x08001783
 8001754:	0800178d 	.word	0x0800178d
 8001758:	08001797 	.word	0x08001797
 800175c:	080017a1 	.word	0x080017a1
 8001760:	080017ab 	.word	0x080017ab
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001764:	2101      	movs	r1, #1
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <Si468x_get_sys_state+0xe8>)
 8001768:	f001 ff0e 	bl	8003588 <send_debug_msg>
			break;
 800176c:	e027      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800176e:	2101      	movs	r1, #1
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <Si468x_get_sys_state+0xec>)
 8001772:	f001 ff09 	bl	8003588 <send_debug_msg>
			break;
 8001776:	e022      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001778:	2101      	movs	r1, #1
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <Si468x_get_sys_state+0xf0>)
 800177c:	f001 ff04 	bl	8003588 <send_debug_msg>
			break;
 8001780:	e01d      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001782:	2101      	movs	r1, #1
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <Si468x_get_sys_state+0xf4>)
 8001786:	f001 feff 	bl	8003588 <send_debug_msg>
			break;
 800178a:	e018      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <Si468x_get_sys_state+0xf8>)
 8001790:	f001 fefa 	bl	8003588 <send_debug_msg>
			break;
 8001794:	e013      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 8001796:	2101      	movs	r1, #1
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <Si468x_get_sys_state+0xfc>)
 800179a:	f001 fef5 	bl	8003588 <send_debug_msg>
			break;
 800179e:	e00e      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <Si468x_get_sys_state+0x100>)
 80017a4:	f001 fef0 	bl	8003588 <send_debug_msg>
			break;
 80017a8:	e009      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <Si468x_get_sys_state+0x104>)
 80017ae:	f001 feeb 	bl	8003588 <send_debug_msg>
			break;
 80017b2:	e004      	b.n	80017be <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <Si468x_get_sys_state+0x108>)
 80017b8:	f001 fee6 	bl	8003588 <send_debug_msg>
			break;
 80017bc:	bf00      	nop
	}
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800ca18 	.word	0x0800ca18
 80017c8:	200001a4 	.word	0x200001a4
 80017cc:	200019e4 	.word	0x200019e4
 80017d0:	200011a4 	.word	0x200011a4
 80017d4:	0800ca54 	.word	0x0800ca54
 80017d8:	0800ca60 	.word	0x0800ca60
 80017dc:	0800ca78 	.word	0x0800ca78
 80017e0:	0800ca90 	.word	0x0800ca90
 80017e4:	0800caa8 	.word	0x0800caa8
 80017e8:	0800cad0 	.word	0x0800cad0
 80017ec:	0800caec 	.word	0x0800caec
 80017f0:	0800cb04 	.word	0x0800cb04
 80017f4:	0800cb20 	.word	0x0800cb20
 80017f8:	0800cb38 	.word	0x0800cb38

080017fc <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001802:	2101      	movs	r1, #1
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <Si468x_get_part_info+0xc0>)
 8001806:	f001 febf 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <Si468x_get_part_info+0xc4>)
 800180c:	2208      	movs	r2, #8
 800180e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001816:	492a      	ldr	r1, [pc, #168]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff ff2f 	bl	800167c <Si468x_write_command>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001824:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f004 ff26 	bl	8006678 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fe67 	bl	8001500 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ff43 	bl	80016c0 <Si468x_read_reply>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001840:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001842:	2100      	movs	r1, #0
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <Si468x_get_part_info+0xd0>)
 8001846:	f001 fe9f 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	220a      	movs	r2, #10
 8001850:	491f      	ldr	r1, [pc, #124]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00a ff06 	bl	800c664 <itoa>
 8001858:	4603      	mov	r3, r0
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fe93 	bl	8003588 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001862:	2100      	movs	r1, #0
 8001864:	481b      	ldr	r0, [pc, #108]	; (80018d4 <Si468x_get_part_info+0xd8>)
 8001866:	f001 fe8f 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800186c:	795b      	ldrb	r3, [r3, #5]
 800186e:	220a      	movs	r2, #10
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001872:	4618      	mov	r0, r3
 8001874:	f00a fef6 	bl	800c664 <itoa>
 8001878:	4603      	mov	r3, r0
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f001 fe83 	bl	8003588 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001882:	2100      	movs	r1, #0
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <Si468x_get_part_info+0xdc>)
 8001886:	f001 fe7f 	bl	8003588 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	b29b      	uxth	r3, r3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001896:	7a1b      	ldrb	r3, [r3, #8]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4413      	add	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	220a      	movs	r2, #10
 80018a2:	490b      	ldr	r1, [pc, #44]	; (80018d0 <Si468x_get_part_info+0xd4>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00a fedd 	bl	800c664 <itoa>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fe6a 	bl	8003588 <send_debug_msg>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800cb4c 	.word	0x0800cb4c
 80018c0:	200001a4 	.word	0x200001a4
 80018c4:	200019e4 	.word	0x200019e4
 80018c8:	200011a4 	.word	0x200011a4
 80018cc:	0800cb88 	.word	0x0800cb88
 80018d0:	200019a4 	.word	0x200019a4
 80018d4:	0800cb98 	.word	0x0800cb98
 80018d8:	0800cba4 	.word	0x0800cba4

080018dc <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 80018ec:	2101      	movs	r1, #1
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <Si468x_set_property+0xdc>)
 80018f0:	f001 fe4a 	bl	8003588 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80018f4:	2100      	movs	r1, #0
 80018f6:	4831      	ldr	r0, [pc, #196]	; (80019bc <Si468x_set_property+0xe0>)
 80018f8:	f001 fe46 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	2210      	movs	r2, #16
 8001900:	492f      	ldr	r1, [pc, #188]	; (80019c0 <Si468x_set_property+0xe4>)
 8001902:	4618      	mov	r0, r3
 8001904:	f00a feae 	bl	800c664 <itoa>
 8001908:	4603      	mov	r3, r0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fe3b 	bl	8003588 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001912:	2100      	movs	r1, #0
 8001914:	482b      	ldr	r0, [pc, #172]	; (80019c4 <Si468x_set_property+0xe8>)
 8001916:	f001 fe37 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	2210      	movs	r2, #16
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <Si468x_set_property+0xe4>)
 8001920:	4618      	mov	r0, r3
 8001922:	f00a fe9f 	bl	800c664 <itoa>
 8001926:	4603      	mov	r3, r0
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fe2c 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <Si468x_set_property+0xec>)
 8001932:	2213      	movs	r2, #19
 8001934:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <Si468x_set_property+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <Si468x_set_property+0xec>)
 8001942:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <Si468x_set_property+0xec>)
 800194e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <Si468x_set_property+0xec>)
 8001956:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Si468x_set_property+0xec>)
 8001962:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <Si468x_set_property+0xec>)
 8001966:	2006      	movs	r0, #6
 8001968:	f7ff fe88 	bl	800167c <Si468x_write_command>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <Si468x_set_property+0xf0>)
 8001972:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f004 fe7f 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800197a:	4915      	ldr	r1, [pc, #84]	; (80019d0 <Si468x_set_property+0xf4>)
 800197c:	2005      	movs	r0, #5
 800197e:	f7ff fe9f 	bl	80016c0 <Si468x_read_reply>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <Si468x_set_property+0xf0>)
 8001988:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f825 	bl	80019dc <Si468x_get_property>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001996:	89fa      	ldrh	r2, [r7, #14]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d104      	bne.n	80019a8 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 800199e:	2101      	movs	r1, #1
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <Si468x_set_property+0xf8>)
 80019a2:	f001 fdf1 	bl	8003588 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019a6:	e003      	b.n	80019b0 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019a8:	2101      	movs	r1, #1
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <Si468x_set_property+0xfc>)
 80019ac:	f001 fdec 	bl	8003588 <send_debug_msg>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800cbb4 	.word	0x0800cbb4
 80019bc:	0800cbf4 	.word	0x0800cbf4
 80019c0:	200019a4 	.word	0x200019a4
 80019c4:	0800cc04 	.word	0x0800cc04
 80019c8:	200001a4 	.word	0x200001a4
 80019cc:	200019e4 	.word	0x200019e4
 80019d0:	200011a4 	.word	0x200011a4
 80019d4:	0800cc20 	.word	0x0800cc20
 80019d8:	0800cc3c 	.word	0x0800cc3c

080019dc <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019e6:	2101      	movs	r1, #1
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <Si468x_get_property+0xbc>)
 80019ea:	f001 fdcd 	bl	8003588 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019ee:	2100      	movs	r1, #0
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <Si468x_get_property+0xc0>)
 80019f2:	f001 fdc9 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2210      	movs	r2, #16
 80019fa:	4929      	ldr	r1, [pc, #164]	; (8001aa0 <Si468x_get_property+0xc4>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00a fe31 	bl	800c664 <itoa>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fdbe 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a0e:	2214      	movs	r2, #20
 8001a10:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a1e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2a:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7ff fe24 	bl	800167c <Si468x_write_command>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f004 fe1b 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a42:	491a      	ldr	r1, [pc, #104]	; (8001aac <Si468x_get_property+0xd0>)
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff fe3b 	bl	80016c0 <Si468x_read_reply>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a50:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <Si468x_get_property+0xd4>)
 8001a56:	f001 fd97 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <Si468x_get_property+0xd0>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <Si468x_get_property+0xd0>)
 8001a62:	7912      	ldrb	r2, [r2, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	2210      	movs	r2, #16
 8001a68:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <Si468x_get_property+0xc4>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00a fdfa 	bl	800c664 <itoa>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fd87 	bl	8003588 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <Si468x_get_property+0xd0>)
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <Si468x_get_property+0xd0>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800cc54 	.word	0x0800cc54
 8001a9c:	0800cbf4 	.word	0x0800cbf4
 8001aa0:	200019a4 	.word	0x200019a4
 8001aa4:	200001a4 	.word	0x200001a4
 8001aa8:	200019e4 	.word	0x200019e4
 8001aac:	200011a4 	.word	0x200011a4
 8001ab0:	0800cc90 	.word	0x0800cc90

08001ab4 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4849      	ldr	r0, [pc, #292]	; (8001bec <Si468x_dab_tune_freq+0x138>)
 8001ac8:	f001 fd5e 	bl	8003588 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4848      	ldr	r0, [pc, #288]	; (8001bf0 <Si468x_dab_tune_freq+0x13c>)
 8001ad0:	f001 fd5a 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	220a      	movs	r2, #10
 8001ade:	4946      	ldr	r1, [pc, #280]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00a fdbf 	bl	800c664 <itoa>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fd4c 	bl	8003588 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001af0:	2101      	movs	r1, #1
 8001af2:	4842      	ldr	r0, [pc, #264]	; (8001bfc <Si468x_dab_tune_freq+0x148>)
 8001af4:	f001 fd48 	bl	8003588 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001afa:	22b0      	movs	r2, #176	; 0xb0
 8001afc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b04:	4a3e      	ldr	r2, [pc, #248]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b16:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b22:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b24:	4936      	ldr	r1, [pc, #216]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b26:	2006      	movs	r0, #6
 8001b28:	f7ff fda8 	bl	800167c <Si468x_write_command>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b32:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b34:	4934      	ldr	r1, [pc, #208]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fdc2 	bl	80016c0 <Si468x_read_reply>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b42:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b52:	2101      	movs	r1, #1
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <Si468x_dab_tune_freq+0x15c>)
 8001b56:	f001 fd17 	bl	8003588 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e03a      	b.n	8001bd6 <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b60:	4929      	ldr	r1, [pc, #164]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff fdac 	bl	80016c0 <Si468x_read_reply>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b6e:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4824      	ldr	r0, [pc, #144]	; (8001c14 <Si468x_dab_tune_freq+0x160>)
 8001b82:	f001 fd01 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00a fd69 	bl	800c664 <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fcf6 	bl	8003588 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	481e      	ldr	r0, [pc, #120]	; (8001c18 <Si468x_dab_tune_freq+0x164>)
 8001ba0:	f001 fcf2 	bl	8003588 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <Si468x_dab_tune_freq+0x168>)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <Si468x_dab_tune_freq+0x168>)
 8001bb4:	6093      	str	r3, [r2, #8]
			break;
 8001bb6:	e014      	b.n	8001be2 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4816      	ldr	r0, [pc, #88]	; (8001c20 <Si468x_dab_tune_freq+0x16c>)
 8001bc6:	f001 fcdf 	bl	8003588 <send_debug_msg>
		}
		HAL_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f004 fd54 	bl	8006678 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d9bf      	bls.n	8001b60 <Si468x_dab_tune_freq+0xac>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800cd48 	.word	0x0800cd48
 8001bf0:	0800cd84 	.word	0x0800cd84
 8001bf4:	200019e8 	.word	0x200019e8
 8001bf8:	200019a4 	.word	0x200019a4
 8001bfc:	0800cd04 	.word	0x0800cd04
 8001c00:	200001a4 	.word	0x200001a4
 8001c04:	200019e4 	.word	0x200019e4
 8001c08:	200011a4 	.word	0x200011a4
 8001c0c:	20001ad0 	.word	0x20001ad0
 8001c10:	0800c948 	.word	0x0800c948
 8001c14:	0800cd90 	.word	0x0800cd90
 8001c18:	0800cdac 	.word	0x0800cdac
 8001c1c:	2000306c 	.word	0x2000306c
 8001c20:	0800cdb4 	.word	0x0800cdb4

08001c24 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <Si468x_dab_digrad_status+0x9c>)
 8001c2e:	22b2      	movs	r2, #178	; 0xb2
 8001c30:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <Si468x_dab_digrad_status+0x9c>)
 8001c34:	221a      	movs	r2, #26
 8001c36:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c38:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <Si468x_dab_digrad_status+0x9c>)
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7ff fd1e 	bl	800167c <Si468x_write_command>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <Si468x_dab_digrad_status+0xa0>)
 8001c46:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f004 fd15 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c4e:	491e      	ldr	r1, [pc, #120]	; (8001cc8 <Si468x_dab_digrad_status+0xa4>)
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f7ff fd35 	bl	80016c0 <Si468x_read_reply>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <Si468x_dab_digrad_status+0xa0>)
 8001c5c:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <Si468x_dab_digrad_status+0xa8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d019      	beq.n	8001ca0 <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <Si468x_dab_digrad_status+0xa4>)
 8001c70:	4615      	mov	r5, r2
 8001c72:	1d1c      	adds	r4, r3, #4
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c80:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c86:	78db      	ldrb	r3, [r3, #3]
 8001c88:	2b14      	cmp	r3, #20
 8001c8a:	d902      	bls.n	8001c92 <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	2b36      	cmp	r3, #54	; 0x36
 8001c98:	d902      	bls.n	8001ca0 <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	4615      	mov	r5, r2
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cb4:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	200001a4 	.word	0x200001a4
 8001cc4:	200019e4 	.word	0x200019e4
 8001cc8:	200011a4 	.word	0x200011a4
 8001ccc:	20001ad0 	.word	0x20001ad0
 8001cd0:	20001aa8 	.word	0x20001aa8

08001cd4 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001cda:	2300      	movs	r3, #0
 8001cdc:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001cde:	2300      	movs	r3, #0
 8001ce0:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001cea:	4ba2      	ldr	r3, [pc, #648]	; (8001f74 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001cf0:	4ba0      	ldr	r3, [pc, #640]	; (8001f74 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001cf6:	499f      	ldr	r1, [pc, #636]	; (8001f74 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7ff fcbf 	bl	800167c <Si468x_write_command>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d04:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f004 fcb6 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d0c:	499b      	ldr	r1, [pc, #620]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d12:	f7ff fcd5 	bl	80016c0 <Si468x_read_reply>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d1c:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4897      	ldr	r0, [pc, #604]	; (8001f80 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d22:	f001 fc31 	bl	8003588 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d34:	2101      	movs	r1, #1
 8001d36:	4894      	ldr	r0, [pc, #592]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d38:	f001 fc26 	bl	8003588 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d3e:	791b      	ldrb	r3, [r3, #4]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b8e      	ldr	r3, [pc, #568]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d50:	4b8a      	ldr	r3, [pc, #552]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d52:	7a1b      	ldrb	r3, [r3, #8]
 8001d54:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	773b      	strb	r3, [r7, #28]
 8001d5a:	e250      	b.n	80021fe <Si468x_dab_get_digital_service_list+0x52a>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001d5c:	7f3b      	ldrb	r3, [r7, #28]
 8001d5e:	4a8b      	ldr	r2, [pc, #556]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d60:	7892      	ldrb	r2, [r2, #2]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a89      	ldr	r2, [pc, #548]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d66:	6892      	ldr	r2, [r2, #8]
 8001d68:	4989      	ldr	r1, [pc, #548]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d6a:	2034      	movs	r0, #52	; 0x34
 8001d6c:	fb00 f303 	mul.w	r3, r0, r3
 8001d70:	440b      	add	r3, r1
 8001d72:	3324      	adds	r3, #36	; 0x24
 8001d74:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001d76:	7f3b      	ldrb	r3, [r7, #28]
 8001d78:	4a84      	ldr	r2, [pc, #528]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d7a:	7892      	ldrb	r2, [r2, #2]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a83      	ldr	r2, [pc, #524]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d80:	7b10      	ldrb	r0, [r2, #12]
 8001d82:	4a83      	ldr	r2, [pc, #524]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d84:	2134      	movs	r1, #52	; 0x34
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	4602      	mov	r2, r0
 8001d90:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001d92:	7fba      	ldrb	r2, [r7, #30]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	f103 0210 	add.w	r2, r3, #16
 8001da0:	7f7b      	ldrb	r3, [r7, #29]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001da8:	5cd2      	ldrb	r2, [r2, r3]
 8001daa:	7f3b      	ldrb	r3, [r7, #28]
 8001dac:	4977      	ldr	r1, [pc, #476]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dae:	7889      	ldrb	r1, [r1, #2]
 8001db0:	440b      	add	r3, r1
 8001db2:	f002 0201 	and.w	r2, r2, #1
 8001db6:	b2d0      	uxtb	r0, r2
 8001db8:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dba:	2134      	movs	r1, #52	; 0x34
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001dc8:	7fba      	ldrb	r2, [r7, #30]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	f103 0211 	add.w	r2, r3, #17
 8001dd6:	7f7b      	ldrb	r3, [r7, #29]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001dde:	5cd2      	ldrb	r2, [r2, r3]
 8001de0:	7f3b      	ldrb	r3, [r7, #28]
 8001de2:	496a      	ldr	r1, [pc, #424]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001de4:	7889      	ldrb	r1, [r1, #2]
 8001de6:	440b      	add	r3, r1
 8001de8:	f002 020f 	and.w	r2, r2, #15
 8001dec:	b2d0      	uxtb	r0, r2
 8001dee:	4a68      	ldr	r2, [pc, #416]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001df0:	2134      	movs	r1, #52	; 0x34
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3329      	adds	r3, #41	; 0x29
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001dfe:	7f3b      	ldrb	r3, [r7, #28]
 8001e00:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e02:	7892      	ldrb	r2, [r2, #2]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e08:	2134      	movs	r1, #52	; 0x34
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3314      	adds	r3, #20
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d017      	beq.n	8001e48 <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e18:	7fbb      	ldrb	r3, [r7, #30]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e1e:	7f3b      	ldrb	r3, [r7, #28]
 8001e20:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e22:	7892      	ldrb	r2, [r2, #2]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e28:	2134      	movs	r1, #52	; 0x34
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	3329      	adds	r3, #41	; 0x29
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	7f7b      	ldrb	r3, [r7, #29]
 8001e36:	4413      	add	r3, r2
 8001e38:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e3a:	7f3b      	ldrb	r3, [r7, #28]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	77fb      	strb	r3, [r7, #31]
			continue;
 8001e46:	e1d7      	b.n	80021f8 <Si468x_dab_get_digital_service_list+0x524>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e48:	7fba      	ldrb	r2, [r7, #30]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	f103 0210 	add.w	r2, r3, #16
 8001e56:	7f7b      	ldrb	r3, [r7, #29]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	105b      	asrs	r3, r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	7f3b      	ldrb	r3, [r7, #28]
 8001e66:	4949      	ldr	r1, [pc, #292]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e68:	7889      	ldrb	r1, [r1, #2]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	b2d0      	uxtb	r0, r2
 8001e72:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e74:	2134      	movs	r1, #52	; 0x34
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3315      	adds	r3, #21
 8001e7e:	4602      	mov	r2, r0
 8001e80:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e82:	7f3b      	ldrb	r3, [r7, #28]
 8001e84:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e86:	7892      	ldrb	r2, [r2, #2]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e8c:	2134      	movs	r1, #52	; 0x34
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3314      	adds	r3, #20
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <Si468x_dab_get_digital_service_list+0x1ce>
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d079      	beq.n	8001f94 <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001ea0:	e0ee      	b.n	8002080 <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001ea2:	7fba      	ldrb	r2, [r7, #30]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	f103 020c 	add.w	r2, r3, #12
 8001eb0:	7f7b      	ldrb	r3, [r7, #29]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	7fba      	ldrb	r2, [r7, #30]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	f103 020d 	add.w	r2, r3, #13
 8001eca:	7f7b      	ldrb	r3, [r7, #29]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001eda:	4419      	add	r1, r3
 8001edc:	7f3b      	ldrb	r3, [r7, #28]
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ee0:	7892      	ldrb	r2, [r2, #2]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ee8:	2134      	movs	r1, #52	; 0x34
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001ef4:	7fba      	ldrb	r2, [r7, #30]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	f103 020d 	add.w	r2, r3, #13
 8001f02:	7f7b      	ldrb	r3, [r7, #29]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f0a:	5cd2      	ldrb	r2, [r2, r3]
 8001f0c:	7f3b      	ldrb	r3, [r7, #28]
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f10:	7889      	ldrb	r1, [r1, #2]
 8001f12:	440b      	add	r3, r1
 8001f14:	0912      	lsrs	r2, r2, #4
 8001f16:	b2d0      	uxtb	r0, r2
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f1a:	2134      	movs	r1, #52	; 0x34
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	331c      	adds	r3, #28
 8001f24:	4602      	mov	r2, r0
 8001f26:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f28:	7f3b      	ldrb	r3, [r7, #28]
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f2c:	7892      	ldrb	r2, [r2, #2]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f32:	2134      	movs	r1, #52	; 0x34
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	331c      	adds	r3, #28
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	4618      	mov	r0, r3
 8001f42:	7f3b      	ldrb	r3, [r7, #28]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f46:	7892      	ldrb	r2, [r2, #2]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f4c:	2134      	movs	r1, #52	; 0x34
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3318      	adds	r3, #24
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	7f3b      	ldrb	r3, [r7, #28]
 8001f5a:	490c      	ldr	r1, [pc, #48]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5c:	7889      	ldrb	r1, [r1, #2]
 8001f5e:	440b      	add	r3, r1
 8001f60:	4402      	add	r2, r0
 8001f62:	490b      	ldr	r1, [pc, #44]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f64:	2034      	movs	r0, #52	; 0x34
 8001f66:	fb00 f303 	mul.w	r3, r0, r3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3320      	adds	r3, #32
 8001f6e:	601a      	str	r2, [r3, #0]
				break;
 8001f70:	e086      	b.n	8002080 <Si468x_dab_get_digital_service_list+0x3ac>
 8001f72:	bf00      	nop
 8001f74:	200001a4 	.word	0x200001a4
 8001f78:	200019e4 	.word	0x200019e4
 8001f7c:	200011a4 	.word	0x200011a4
 8001f80:	0800ce14 	.word	0x0800ce14
 8001f84:	20001ad0 	.word	0x20001ad0
 8001f88:	0800c948 	.word	0x0800c948
 8001f8c:	2000306c 	.word	0x2000306c
 8001f90:	20001c1c 	.word	0x20001c1c
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001f94:	7fba      	ldrb	r2, [r7, #30]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	f103 020c 	add.w	r2, r3, #12
 8001fa2:	7f7b      	ldrb	r3, [r7, #29]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4aa0      	ldr	r2, [pc, #640]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	4619      	mov	r1, r3
 8001fae:	7fba      	ldrb	r2, [r7, #30]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f103 020d 	add.w	r2, r3, #13
 8001fbc:	7f7b      	ldrb	r3, [r7, #29]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a9a      	ldr	r2, [pc, #616]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	4419      	add	r1, r3
 8001fca:	7fba      	ldrb	r2, [r7, #30]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	f103 020e 	add.w	r2, r3, #14
 8001fd8:	7f7b      	ldrb	r3, [r7, #29]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a93      	ldr	r2, [pc, #588]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fe8:	4419      	add	r1, r3
 8001fea:	7f3b      	ldrb	r3, [r7, #28]
 8001fec:	4a90      	ldr	r2, [pc, #576]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8001fee:	7892      	ldrb	r2, [r2, #2]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4a8f      	ldr	r2, [pc, #572]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8001ff6:	2134      	movs	r1, #52	; 0x34
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3318      	adds	r3, #24
 8002000:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002002:	7fba      	ldrb	r2, [r7, #30]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	f103 020e 	add.w	r2, r3, #14
 8002010:	7f7b      	ldrb	r3, [r7, #29]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	4a85      	ldr	r2, [pc, #532]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8002018:	5cd2      	ldrb	r2, [r2, r3]
 800201a:	7f3b      	ldrb	r3, [r7, #28]
 800201c:	4984      	ldr	r1, [pc, #528]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800201e:	7889      	ldrb	r1, [r1, #2]
 8002020:	440b      	add	r3, r1
 8002022:	0912      	lsrs	r2, r2, #4
 8002024:	b2d0      	uxtb	r0, r2
 8002026:	4a83      	ldr	r2, [pc, #524]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002028:	2134      	movs	r1, #52	; 0x34
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	331c      	adds	r3, #28
 8002032:	4602      	mov	r2, r0
 8002034:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 8002036:	7f3b      	ldrb	r3, [r7, #28]
 8002038:	4a7d      	ldr	r2, [pc, #500]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800203a:	7892      	ldrb	r2, [r2, #2]
 800203c:	4413      	add	r3, r2
 800203e:	4a7d      	ldr	r2, [pc, #500]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002040:	2134      	movs	r1, #52	; 0x34
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	331c      	adds	r3, #28
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	4618      	mov	r0, r3
 8002050:	7f3b      	ldrb	r3, [r7, #28]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002054:	7892      	ldrb	r2, [r2, #2]
 8002056:	4413      	add	r3, r2
 8002058:	4a76      	ldr	r2, [pc, #472]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 800205a:	2134      	movs	r1, #52	; 0x34
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3318      	adds	r3, #24
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	7f3b      	ldrb	r3, [r7, #28]
 8002068:	4971      	ldr	r1, [pc, #452]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800206a:	7889      	ldrb	r1, [r1, #2]
 800206c:	440b      	add	r3, r1
 800206e:	4402      	add	r2, r0
 8002070:	4970      	ldr	r1, [pc, #448]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002072:	2034      	movs	r0, #52	; 0x34
 8002074:	fb00 f303 	mul.w	r3, r0, r3
 8002078:	440b      	add	r3, r1
 800207a:	3320      	adds	r3, #32
 800207c:	601a      	str	r2, [r3, #0]
				break;
 800207e:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002080:	7fba      	ldrb	r2, [r7, #30]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	f103 0214 	add.w	r2, r3, #20
 800208e:	7f7b      	ldrb	r3, [r7, #29]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d03f      	beq.n	800211c <Si468x_dab_get_digital_service_list+0x448>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800209c:	2300      	movs	r3, #0
 800209e:	76fb      	strb	r3, [r7, #27]
 80020a0:	e038      	b.n	8002114 <Si468x_dab_get_digital_service_list+0x440>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020a2:	7efb      	ldrb	r3, [r7, #27]
 80020a4:	f103 0114 	add.w	r1, r3, #20
 80020a8:	7fba      	ldrb	r2, [r7, #30]
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	18ca      	adds	r2, r1, r3
 80020b4:	7f7b      	ldrb	r3, [r7, #29]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	18d1      	adds	r1, r2, r3
 80020ba:	7f3b      	ldrb	r3, [r7, #28]
 80020bc:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80020be:	7892      	ldrb	r2, [r2, #2]
 80020c0:	441a      	add	r2, r3
 80020c2:	7efb      	ldrb	r3, [r7, #27]
 80020c4:	4859      	ldr	r0, [pc, #356]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 80020c6:	5c44      	ldrb	r4, [r0, r1]
 80020c8:	495a      	ldr	r1, [pc, #360]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80020ca:	2034      	movs	r0, #52	; 0x34
 80020cc:	fb00 f202 	mul.w	r2, r0, r2
 80020d0:	440a      	add	r2, r1
 80020d2:	4413      	add	r3, r2
 80020d4:	4622      	mov	r2, r4
 80020d6:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80020d8:	7f3b      	ldrb	r3, [r7, #28]
 80020da:	4a55      	ldr	r2, [pc, #340]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80020dc:	7892      	ldrb	r2, [r2, #2]
 80020de:	441a      	add	r2, r3
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	4954      	ldr	r1, [pc, #336]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80020e4:	2034      	movs	r0, #52	; 0x34
 80020e6:	fb00 f202 	mul.w	r2, r0, r2
 80020ea:	440a      	add	r2, r1
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b86      	cmp	r3, #134	; 0x86
 80020f2:	d10c      	bne.n	800210e <Si468x_dab_get_digital_service_list+0x43a>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 80020f4:	7f3b      	ldrb	r3, [r7, #28]
 80020f6:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80020f8:	7892      	ldrb	r2, [r2, #2]
 80020fa:	441a      	add	r2, r3
 80020fc:	7efb      	ldrb	r3, [r7, #27]
 80020fe:	494d      	ldr	r1, [pc, #308]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002100:	2034      	movs	r0, #52	; 0x34
 8002102:	fb00 f202 	mul.w	r2, r0, r2
 8002106:	440a      	add	r2, r1
 8002108:	4413      	add	r3, r2
 800210a:	226f      	movs	r2, #111	; 0x6f
 800210c:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800210e:	7efb      	ldrb	r3, [r7, #27]
 8002110:	3301      	adds	r3, #1
 8002112:	76fb      	strb	r3, [r7, #27]
 8002114:	7efb      	ldrb	r3, [r7, #27]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d9c3      	bls.n	80020a2 <Si468x_dab_get_digital_service_list+0x3ce>
 800211a:	e026      	b.n	800216a <Si468x_dab_get_digital_service_list+0x496>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <Si468x_dab_get_digital_service_list+0x564>)
 800211e:	463c      	mov	r4, r7
 8002120:	461d      	mov	r5, r3
 8002122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	7023      	strb	r3, [r4, #0]
 800212a:	f107 0311 	add.w	r3, r7, #17
 800212e:	2200      	movs	r2, #0
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002134:	2300      	movs	r3, #0
 8002136:	76bb      	strb	r3, [r7, #26]
 8002138:	e014      	b.n	8002164 <Si468x_dab_get_digital_service_list+0x490>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 800213a:	7eb9      	ldrb	r1, [r7, #26]
 800213c:	7f3b      	ldrb	r3, [r7, #28]
 800213e:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002140:	7892      	ldrb	r2, [r2, #2]
 8002142:	441a      	add	r2, r3
 8002144:	7ebb      	ldrb	r3, [r7, #26]
 8002146:	3120      	adds	r1, #32
 8002148:	4439      	add	r1, r7
 800214a:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800214e:	4939      	ldr	r1, [pc, #228]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002150:	2034      	movs	r0, #52	; 0x34
 8002152:	fb00 f202 	mul.w	r2, r0, r2
 8002156:	440a      	add	r2, r1
 8002158:	4413      	add	r3, r2
 800215a:	4622      	mov	r2, r4
 800215c:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800215e:	7ebb      	ldrb	r3, [r7, #26]
 8002160:	3301      	adds	r3, #1
 8002162:	76bb      	strb	r3, [r7, #26]
 8002164:	7ebb      	ldrb	r3, [r7, #26]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	d9e7      	bls.n	800213a <Si468x_dab_get_digital_service_list+0x466>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 800216a:	2300      	movs	r3, #0
 800216c:	767b      	strb	r3, [r7, #25]
 800216e:	e032      	b.n	80021d6 <Si468x_dab_get_digital_service_list+0x502>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002170:	7f3b      	ldrb	r3, [r7, #28]
 8002172:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002174:	7892      	ldrb	r2, [r2, #2]
 8002176:	441a      	add	r2, r3
 8002178:	7e7b      	ldrb	r3, [r7, #25]
 800217a:	492e      	ldr	r1, [pc, #184]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 800217c:	201a      	movs	r0, #26
 800217e:	fb00 f202 	mul.w	r2, r0, r2
 8002182:	4413      	add	r3, r2
 8002184:	3314      	adds	r3, #20
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	440b      	add	r3, r1
 800218a:	2200      	movs	r2, #0
 800218c:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 800218e:	7fba      	ldrb	r2, [r7, #30]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800219c:	7f7b      	ldrb	r3, [r7, #29]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 80021a4:	5cd1      	ldrb	r1, [r2, r3]
 80021a6:	7f3b      	ldrb	r3, [r7, #28]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80021aa:	7892      	ldrb	r2, [r2, #2]
 80021ac:	441a      	add	r2, r3
 80021ae:	7e7b      	ldrb	r3, [r7, #25]
 80021b0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021b4:	b2cc      	uxtb	r4, r1
 80021b6:	491f      	ldr	r1, [pc, #124]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80021b8:	201a      	movs	r0, #26
 80021ba:	fb00 f202 	mul.w	r2, r0, r2
 80021be:	4413      	add	r3, r2
 80021c0:	3314      	adds	r3, #20
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	440b      	add	r3, r1
 80021c6:	4622      	mov	r2, r4
 80021c8:	709a      	strb	r2, [r3, #2]
			components_count++;
 80021ca:	7f7b      	ldrb	r3, [r7, #29]
 80021cc:	3301      	adds	r3, #1
 80021ce:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80021d0:	7e7b      	ldrb	r3, [r7, #25]
 80021d2:	3301      	adds	r3, #1
 80021d4:	767b      	strb	r3, [r7, #25]
 80021d6:	7f3b      	ldrb	r3, [r7, #28]
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80021da:	7892      	ldrb	r2, [r2, #2]
 80021dc:	4413      	add	r3, r2
 80021de:	4a15      	ldr	r2, [pc, #84]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80021e0:	2134      	movs	r1, #52	; 0x34
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3329      	adds	r3, #41	; 0x29
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	7e7a      	ldrb	r2, [r7, #25]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3be      	bcc.n	8002170 <Si468x_dab_get_digital_service_list+0x49c>
		}
		services_count++;
 80021f2:	7fbb      	ldrb	r3, [r7, #30]
 80021f4:	3301      	adds	r3, #1
 80021f6:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80021f8:	7f3b      	ldrb	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	773b      	strb	r3, [r7, #28]
 80021fe:	7f3a      	ldrb	r2, [r7, #28]
 8002200:	7ffb      	ldrb	r3, [r7, #31]
 8002202:	429a      	cmp	r2, r3
 8002204:	f4ff adaa 	bcc.w	8001d5c <Si468x_dab_get_digital_service_list+0x88>
	}

	dab_management.total_services += number_of_services;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	4413      	add	r3, r2
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002214:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002218:	789a      	ldrb	r2, [r3, #2]
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	4413      	add	r3, r2
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002222:	709a      	strb	r2, [r3, #2]
}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	200011a4 	.word	0x200011a4
 8002230:	2000306c 	.word	0x2000306c
 8002234:	20001c1c 	.word	0x20001c1c
 8002238:	0800ce50 	.word	0x0800ce50

0800223c <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8002246:	2101      	movs	r1, #1
 8002248:	482d      	ldr	r0, [pc, #180]	; (8002300 <Si468x_dab_start_digital_service+0xc4>)
 800224a:	f001 f99d 	bl	8003588 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002250:	2281      	movs	r2, #129	; 0x81
 8002252:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800225c:	2200      	movs	r2, #0
 800225e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002262:	2200      	movs	r2, #0
 8002264:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800226c:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002276:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002280:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0e1b      	lsrs	r3, r3, #24
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800228a:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002292:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800229c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 80022a6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	0e1b      	lsrs	r3, r3, #24
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 80022b0:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80022b2:	4914      	ldr	r1, [pc, #80]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 80022b4:	200c      	movs	r0, #12
 80022b6:	f7ff f9e1 	bl	800167c <Si468x_write_command>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <Si468x_dab_start_digital_service+0xcc>)
 80022c0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f004 f9d8 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <Si468x_dab_start_digital_service+0xd0>)
 80022ca:	2005      	movs	r0, #5
 80022cc:	f7ff f9f8 	bl	80016c0 <Si468x_read_reply>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <Si468x_dab_start_digital_service+0xcc>)
 80022d6:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <Si468x_dab_start_digital_service+0xd4>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80022e6:	2101      	movs	r1, #1
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <Si468x_dab_start_digital_service+0xd8>)
 80022ea:	f001 f94d 	bl	8003588 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 80022ee:	e003      	b.n	80022f8 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80022f0:	2101      	movs	r1, #1
 80022f2:	4809      	ldr	r0, [pc, #36]	; (8002318 <Si468x_dab_start_digital_service+0xdc>)
 80022f4:	f001 f948 	bl	8003588 <send_debug_msg>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	0800ce64 	.word	0x0800ce64
 8002304:	200001a4 	.word	0x200001a4
 8002308:	200019e4 	.word	0x200019e4
 800230c:	200011a4 	.word	0x200011a4
 8002310:	20001ad0 	.word	0x20001ad0
 8002314:	0800c948 	.word	0x0800c948
 8002318:	0800cea0 	.word	0x0800cea0

0800231c <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 8002326:	2101      	movs	r1, #1
 8002328:	484a      	ldr	r0, [pc, #296]	; (8002454 <Si468x_dab_get_ensemble_info+0x138>)
 800232a:	f001 f92d 	bl	8003588 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 800232e:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 8002330:	22b4      	movs	r2, #180	; 0xb4
 8002332:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002334:	4b48      	ldr	r3, [pc, #288]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800233a:	4947      	ldr	r1, [pc, #284]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 800233c:	2002      	movs	r0, #2
 800233e:	f7ff f99d 	bl	800167c <Si468x_write_command>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 8002348:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800234a:	2002      	movs	r0, #2
 800234c:	f004 f994 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002350:	4943      	ldr	r1, [pc, #268]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 8002352:	2015      	movs	r0, #21
 8002354:	f7ff f9b4 	bl	80016c0 <Si468x_read_reply>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 800235e:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002360:	e012      	b.n	8002388 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002362:	493d      	ldr	r1, [pc, #244]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff f989 	bl	800167c <Si468x_write_command>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 8002370:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8002372:	2002      	movs	r0, #2
 8002374:	f004 f980 	bl	8006678 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002378:	4939      	ldr	r1, [pc, #228]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 800237a:	2015      	movs	r0, #21
 800237c:	f7ff f9a0 	bl	80016c0 <Si468x_read_reply>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 8002386:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 800238a:	799b      	ldrb	r3, [r3, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0e8      	beq.n	8002362 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <Si468x_dab_get_ensemble_info+0x148>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800239e:	2101      	movs	r1, #1
 80023a0:	4831      	ldr	r0, [pc, #196]	; (8002468 <Si468x_dab_get_ensemble_info+0x14c>)
 80023a2:	f001 f8f1 	bl	8003588 <send_debug_msg>
		return 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e050      	b.n	800244c <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 80023ac:	795b      	ldrb	r3, [r3, #5]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 80023b2:	7912      	ldrb	r2, [r2, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d041      	beq.n	8002442 <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80023be:	2101      	movs	r1, #1
 80023c0:	482a      	ldr	r0, [pc, #168]	; (800246c <Si468x_dab_get_ensemble_info+0x150>)
 80023c2:	f001 f8e1 	bl	8003588 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	b291      	uxth	r1, r2
 80023ce:	4a29      	ldr	r2, [pc, #164]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	4413      	add	r3, r2
 80023d4:	460a      	mov	r2, r1
 80023d6:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	4618      	mov	r0, r3
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	4924      	ldr	r1, [pc, #144]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 80023e4:	0143      	lsls	r3, r0, #5
 80023e6:	440b      	add	r3, r1
 80023e8:	3318      	adds	r3, #24
 80023ea:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	4618      	mov	r0, r3
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023f4:	7b19      	ldrb	r1, [r3, #12]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 80023f8:	0143      	lsls	r3, r0, #5
 80023fa:	4413      	add	r3, r2
 80023fc:	331c      	adds	r3, #28
 80023fe:	460a      	mov	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	71fb      	strb	r3, [r7, #7]
 8002406:	e011      	b.n	800242c <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	1d9a      	adds	r2, r3, #6
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	461c      	mov	r4, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4912      	ldr	r1, [pc, #72]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 8002416:	5c88      	ldrb	r0, [r1, r2]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 800241a:	0162      	lsls	r2, r4, #5
 800241c:	440a      	add	r2, r1
 800241e:	4413      	add	r3, r2
 8002420:	3302      	adds	r3, #2
 8002422:	4602      	mov	r2, r0
 8002424:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	3301      	adds	r3, #1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d9ea      	bls.n	8002408 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	3301      	adds	r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 800243c:	705a      	strb	r2, [r3, #1]
			return 1;
 800243e:	2301      	movs	r3, #1
 8002440:	e004      	b.n	800244c <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002442:	2101      	movs	r1, #1
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <Si468x_dab_get_ensemble_info+0x15c>)
 8002446:	f001 f89f 	bl	8003588 <send_debug_msg>
			return 0;
 800244a:	2300      	movs	r3, #0
		}
	}
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	0800cec0 	.word	0x0800cec0
 8002458:	200001a4 	.word	0x200001a4
 800245c:	200019e4 	.word	0x200019e4
 8002460:	200011a4 	.word	0x200011a4
 8002464:	20001ad0 	.word	0x20001ad0
 8002468:	0800c948 	.word	0x0800c948
 800246c:	0800cefc 	.word	0x0800cefc
 8002470:	2000306c 	.word	0x2000306c
 8002474:	20001adc 	.word	0x20001adc
 8002478:	0800cf0c 	.word	0x0800cf0c

0800247c <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247e:	b099      	sub	sp, #100	; 0x64
 8002480:	af0a      	add	r7, sp, #40	; 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 8002482:	2101      	movs	r1, #1
 8002484:	4881      	ldr	r0, [pc, #516]	; (800268c <Si468x_dab_full_scan+0x210>)
 8002486:	f001 f87f 	bl	8003588 <send_debug_msg>
	dab_management.total_services = 0;
 800248a:	4b81      	ldr	r3, [pc, #516]	; (8002690 <Si468x_dab_full_scan+0x214>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 8002490:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <Si468x_dab_full_scan+0x214>)
 8002492:	2200      	movs	r2, #0
 8002494:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 8002496:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <Si468x_dab_full_scan+0x214>)
 8002498:	2200      	movs	r2, #0
 800249a:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t fic_q_timeout = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t _scan_cancel_flag = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024b4:	e09e      	b.n	80025f4 <Si468x_dab_full_scan+0x178>
	{
		_touch_coordinates = Touch_read();
 80024b6:	f003 fd37 	bl	8005f28 <Touch_read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80024be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d90c      	bls.n	80024de <Si468x_dab_full_scan+0x62>
 80024c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024c6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80024ca:	d808      	bhi.n	80024de <Si468x_dab_full_scan+0x62>
 80024cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ce:	2bc3      	cmp	r3, #195	; 0xc3
 80024d0:	d905      	bls.n	80024de <Si468x_dab_full_scan+0x62>
 80024d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024d4:	2bea      	cmp	r3, #234	; 0xea
 80024d6:	d802      	bhi.n	80024de <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		if(_scan_cancel_flag)
 80024de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 808e 	bne.w	8002604 <Si468x_dab_full_scan+0x188>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80024e8:	2306      	movs	r3, #6
 80024ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 80024ee:	2396      	movs	r3, #150	; 0x96
 80024f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		Si468x_dab_tune_freq(freq_index, 0);
 80024f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fada 	bl	8001ab4 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002500:	463b      	mov	r3, r7
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fb8e 	bl	8001c24 <Si468x_dab_digrad_status>
			valid_timeout--;
 8002508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800250c:	3b01      	subs	r3, #1
 800250e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(!valid_timeout)
 8002512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002516:	2b00      	cmp	r3, #0
 8002518:	d104      	bne.n	8002524 <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 800251a:	2101      	movs	r1, #1
 800251c:	485d      	ldr	r0, [pc, #372]	; (8002694 <Si468x_dab_full_scan+0x218>)
 800251e:	f001 f833 	bl	8003588 <send_debug_msg>
				break;
 8002522:	e010      	b.n	8002546 <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002524:	2032      	movs	r0, #50	; 0x32
 8002526:	f004 f8a7 	bl	8006678 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 800252a:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <Si468x_dab_full_scan+0x21c>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0e3      	beq.n	8002500 <Si468x_dab_full_scan+0x84>
 8002538:	4b57      	ldr	r3, [pc, #348]	; (8002698 <Si468x_dab_full_scan+0x21c>)
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0dc      	beq.n	8002500 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 8002546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 800254e:	463b      	mov	r3, r7
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fb67 	bl	8001c24 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 8002556:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800255a:	3b01      	subs	r3, #1
 800255c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(!fic_q_timeout)
 8002560:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002568:	2101      	movs	r1, #1
 800256a:	484a      	ldr	r0, [pc, #296]	; (8002694 <Si468x_dab_full_scan+0x218>)
 800256c:	f001 f80c 	bl	8003588 <send_debug_msg>
					break;
 8002570:	e006      	b.n	8002580 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002572:	2032      	movs	r0, #50	; 0x32
 8002574:	f004 f880 	bl	8006678 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <Si468x_dab_full_scan+0x21c>)
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	2b31      	cmp	r3, #49	; 0x31
 800257e:	d9e6      	bls.n	800254e <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01d      	beq.n	80025c4 <Si468x_dab_full_scan+0x148>
 8002588:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800258c:	2b00      	cmp	r3, #0
 800258e:	d019      	beq.n	80025c4 <Si468x_dab_full_scan+0x148>
		{
			do
			{
				Si468x_dab_get_event_status();
 8002590:	f000 fb32 	bl	8002bf8 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 8002594:	200a      	movs	r0, #10
 8002596:	f004 f86f 	bl	8006678 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <Si468x_dab_full_scan+0x220>)
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f3      	beq.n	8002590 <Si468x_dab_full_scan+0x114>
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Si468x_dab_full_scan+0x220>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ec      	bne.n	8002590 <Si468x_dab_full_scan+0x114>

			if(Si468x_dab_get_ensemble_info())
 80025b6:	f7ff feb1 	bl	800231c <Si468x_dab_get_ensemble_info>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <Si468x_dab_full_scan+0x148>
			{
				Si468x_dab_get_digital_service_list();
 80025c0:	f7ff fb88 	bl	8001cd4 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80025c4:	4e34      	ldr	r6, [pc, #208]	; (8002698 <Si468x_dab_full_scan+0x21c>)
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <Si468x_dab_full_scan+0x214>)
 80025c8:	ac06      	add	r4, sp, #24
 80025ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025d0:	466d      	mov	r5, sp
 80025d2:	f106 0410 	add.w	r4, r6, #16
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025de:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025e6:	f001 fc49 	bl	8003e7c <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80025ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ee:	3301      	adds	r3, #1
 80025f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <Si468x_dab_full_scan+0x214>)
 80025f6:	7b5b      	ldrb	r3, [r3, #13]
 80025f8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f4ff af5a 	bcc.w	80024b6 <Si468x_dab_full_scan+0x3a>
 8002602:	e000      	b.n	8002606 <Si468x_dab_full_scan+0x18a>
			break;
 8002604:	bf00      	nop
	}

	if(_scan_cancel_flag)
 8002606:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <Si468x_dab_full_scan+0x1a2>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 800260e:	2101      	movs	r1, #1
 8002610:	4823      	ldr	r0, [pc, #140]	; (80026a0 <Si468x_dab_full_scan+0x224>)
 8002612:	f000 ffb9 	bl	8003588 <send_debug_msg>
		restore_from_eeprom();
 8002616:	f000 fc8f 	bl	8002f38 <restore_from_eeprom>
		return 0;
 800261a:	2300      	movs	r3, #0
 800261c:	e1d9      	b.n	80029d2 <Si468x_dab_full_scan+0x556>
	}

	else
	{
		eeprom_clear_scanning_data();
 800261e:	f002 fbc3 	bl	8004da8 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <Si468x_dab_full_scan+0x214>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <Si468x_dab_full_scan+0x1be>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <Si468x_dab_full_scan+0x214>)
 800262c:	7819      	ldrb	r1, [r3, #0]
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <Si468x_dab_full_scan+0x214>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <Si468x_dab_full_scan+0x228>)
 8002634:	481c      	ldr	r0, [pc, #112]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 8002636:	f002 fc13 	bl	8004e60 <eeprom_save_scanning_data>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800263a:	2100      	movs	r1, #0
 800263c:	481b      	ldr	r0, [pc, #108]	; (80026ac <Si468x_dab_full_scan+0x230>)
 800263e:	f000 ffa3 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <Si468x_dab_full_scan+0x214>)
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	220a      	movs	r2, #10
 8002648:	4919      	ldr	r1, [pc, #100]	; (80026b0 <Si468x_dab_full_scan+0x234>)
 800264a:	4618      	mov	r0, r3
 800264c:	f00a f80a 	bl	800c664 <itoa>
 8002650:	4603      	mov	r3, r0
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f000 ff97 	bl	8003588 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800265a:	2101      	movs	r1, #1
 800265c:	4815      	ldr	r0, [pc, #84]	; (80026b4 <Si468x_dab_full_scan+0x238>)
 800265e:	f000 ff93 	bl	8003588 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8002662:	2100      	movs	r1, #0
 8002664:	4814      	ldr	r0, [pc, #80]	; (80026b8 <Si468x_dab_full_scan+0x23c>)
 8002666:	f000 ff8f 	bl	8003588 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800266a:	2100      	movs	r1, #0
 800266c:	4813      	ldr	r0, [pc, #76]	; (80026bc <Si468x_dab_full_scan+0x240>)
 800266e:	f000 ff8b 	bl	8003588 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002672:	2100      	movs	r1, #0
 8002674:	4812      	ldr	r0, [pc, #72]	; (80026c0 <Si468x_dab_full_scan+0x244>)
 8002676:	f000 ff87 	bl	8003588 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 800267a:	2101      	movs	r1, #1
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <Si468x_dab_full_scan+0x248>)
 800267e:	f000 ff83 	bl	8003588 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002688:	e07a      	b.n	8002780 <Si468x_dab_full_scan+0x304>
 800268a:	bf00      	nop
 800268c:	0800cf20 	.word	0x0800cf20
 8002690:	2000306c 	.word	0x2000306c
 8002694:	0800cf0c 	.word	0x0800cf0c
 8002698:	20001aa8 	.word	0x20001aa8
 800269c:	20001ad4 	.word	0x20001ad4
 80026a0:	0800cf5c 	.word	0x0800cf5c
 80026a4:	20001adc 	.word	0x20001adc
 80026a8:	20001c1c 	.word	0x20001c1c
 80026ac:	0800cf70 	.word	0x0800cf70
 80026b0:	200019a4 	.word	0x200019a4
 80026b4:	0800cf84 	.word	0x0800cf84
 80026b8:	0800cfb8 	.word	0x0800cfb8
 80026bc:	0800cfc4 	.word	0x0800cfc4
 80026c0:	0800cfd8 	.word	0x0800cfd8
 80026c4:	0800cfe8 	.word	0x0800cfe8
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80026c8:	2100      	movs	r1, #0
 80026ca:	48c4      	ldr	r0, [pc, #784]	; (80029dc <Si468x_dab_full_scan+0x560>)
 80026cc:	f000 ff5c 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 80026d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026d4:	220a      	movs	r2, #10
 80026d6:	49c2      	ldr	r1, [pc, #776]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f009 ffc3 	bl	800c664 <itoa>
 80026de:	4603      	mov	r3, r0
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 ff50 	bl	8003588 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80026e8:	2100      	movs	r1, #0
 80026ea:	48be      	ldr	r0, [pc, #760]	; (80029e4 <Si468x_dab_full_scan+0x568>)
 80026ec:	f000 ff4c 	bl	8003588 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80026f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026f4:	015b      	lsls	r3, r3, #5
 80026f6:	4abc      	ldr	r2, [pc, #752]	; (80029e8 <Si468x_dab_full_scan+0x56c>)
 80026f8:	4413      	add	r3, r2
 80026fa:	3302      	adds	r3, #2
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 ff42 	bl	8003588 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8002704:	2100      	movs	r1, #0
 8002706:	48b5      	ldr	r0, [pc, #724]	; (80029dc <Si468x_dab_full_scan+0x560>)
 8002708:	f000 ff3e 	bl	8003588 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800270c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002710:	4ab5      	ldr	r2, [pc, #724]	; (80029e8 <Si468x_dab_full_scan+0x56c>)
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	4413      	add	r3, r2
 8002716:	3318      	adds	r3, #24
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	220a      	movs	r2, #10
 800271c:	49b0      	ldr	r1, [pc, #704]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 800271e:	4618      	mov	r0, r3
 8002720:	f009 ffa0 	bl	800c664 <itoa>
 8002724:	4603      	mov	r3, r0
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f000 ff2d 	bl	8003588 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800272e:	2100      	movs	r1, #0
 8002730:	48ae      	ldr	r0, [pc, #696]	; (80029ec <Si468x_dab_full_scan+0x570>)
 8002732:	f000 ff29 	bl	8003588 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800273a:	4aab      	ldr	r2, [pc, #684]	; (80029e8 <Si468x_dab_full_scan+0x56c>)
 800273c:	015b      	lsls	r3, r3, #5
 800273e:	4413      	add	r3, r2
 8002740:	331c      	adds	r3, #28
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4baa      	ldr	r3, [pc, #680]	; (80029f0 <Si468x_dab_full_scan+0x574>)
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff1a 	bl	8003588 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8002754:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002758:	4aa3      	ldr	r2, [pc, #652]	; (80029e8 <Si468x_dab_full_scan+0x56c>)
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	4413      	add	r3, r2
 800275e:	331c      	adds	r3, #28
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b13      	cmp	r3, #19
 8002764:	d803      	bhi.n	800276e <Si468x_dab_full_scan+0x2f2>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002766:	2100      	movs	r1, #0
 8002768:	48a2      	ldr	r0, [pc, #648]	; (80029f4 <Si468x_dab_full_scan+0x578>)
 800276a:	f000 ff0d 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("  |", CRLF_SEND);
 800276e:	2101      	movs	r1, #1
 8002770:	48a1      	ldr	r0, [pc, #644]	; (80029f8 <Si468x_dab_full_scan+0x57c>)
 8002772:	f000 ff09 	bl	8003588 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800277a:	3301      	adds	r3, #1
 800277c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002780:	4b9e      	ldr	r3, [pc, #632]	; (80029fc <Si468x_dab_full_scan+0x580>)
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002788:	429a      	cmp	r2, r3
 800278a:	d39d      	bcc.n	80026c8 <Si468x_dab_full_scan+0x24c>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800278c:	2101      	movs	r1, #1
 800278e:	489c      	ldr	r0, [pc, #624]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 8002790:	f000 fefa 	bl	8003588 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8002794:	2100      	movs	r1, #0
 8002796:	489b      	ldr	r0, [pc, #620]	; (8002a04 <Si468x_dab_full_scan+0x588>)
 8002798:	f000 fef6 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 800279c:	4b97      	ldr	r3, [pc, #604]	; (80029fc <Si468x_dab_full_scan+0x580>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	220a      	movs	r2, #10
 80027a2:	498f      	ldr	r1, [pc, #572]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f009 ff5d 	bl	800c664 <itoa>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 feea 	bl	8003588 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80027b4:	2101      	movs	r1, #1
 80027b6:	4894      	ldr	r0, [pc, #592]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 80027b8:	f000 fee6 	bl	8003588 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80027bc:	2101      	movs	r1, #1
 80027be:	4893      	ldr	r0, [pc, #588]	; (8002a0c <Si468x_dab_full_scan+0x590>)
 80027c0:	f000 fee2 	bl	8003588 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80027ca:	e0f6      	b.n	80029ba <Si468x_dab_full_scan+0x53e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80027cc:	2100      	movs	r1, #0
 80027ce:	4883      	ldr	r0, [pc, #524]	; (80029dc <Si468x_dab_full_scan+0x560>)
 80027d0:	f000 feda 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 80027d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80027d8:	220a      	movs	r2, #10
 80027da:	4981      	ldr	r1, [pc, #516]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f009 ff41 	bl	800c664 <itoa>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fece 	bl	8003588 <send_debug_msg>
			if(services_index < 10)
 80027ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d803      	bhi.n	80027fc <Si468x_dab_full_scan+0x380>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80027f4:	2100      	movs	r1, #0
 80027f6:	487f      	ldr	r0, [pc, #508]	; (80029f4 <Si468x_dab_full_scan+0x578>)
 80027f8:	f000 fec6 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80027fc:	2100      	movs	r1, #0
 80027fe:	4884      	ldr	r0, [pc, #528]	; (8002a10 <Si468x_dab_full_scan+0x594>)
 8002800:	f000 fec2 	bl	8003588 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002804:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002808:	2234      	movs	r2, #52	; 0x34
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	4a81      	ldr	r2, [pc, #516]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002810:	4413      	add	r3, r2
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f000 feb7 	bl	8003588 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800281a:	2100      	movs	r1, #0
 800281c:	487e      	ldr	r0, [pc, #504]	; (8002a18 <Si468x_dab_full_scan+0x59c>)
 800281e:	f000 feb3 	bl	8003588 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002828:	e021      	b.n	800286e <Si468x_dab_full_scan+0x3f2>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800282a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <Si468x_dab_full_scan+0x56c>)
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	4413      	add	r3, r2
 8002834:	331c      	adds	r3, #28
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800283c:	4975      	ldr	r1, [pc, #468]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 800283e:	2034      	movs	r0, #52	; 0x34
 8002840:	fb00 f303 	mul.w	r3, r0, r3
 8002844:	440b      	add	r3, r1
 8002846:	3328      	adds	r3, #40	; 0x28
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d10a      	bne.n	8002864 <Si468x_dab_full_scan+0x3e8>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800284e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002852:	015b      	lsls	r3, r3, #5
 8002854:	4a64      	ldr	r2, [pc, #400]	; (80029e8 <Si468x_dab_full_scan+0x56c>)
 8002856:	4413      	add	r3, r2
 8002858:	3302      	adds	r3, #2
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fe93 	bl	8003588 <send_debug_msg>
					break;
 8002862:	e00a      	b.n	800287a <Si468x_dab_full_scan+0x3fe>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002864:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002868:	3301      	adds	r3, #1
 800286a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <Si468x_dab_full_scan+0x580>)
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8002876:	429a      	cmp	r2, r3
 8002878:	d3d7      	bcc.n	800282a <Si468x_dab_full_scan+0x3ae>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800287a:	2100      	movs	r1, #0
 800287c:	4866      	ldr	r0, [pc, #408]	; (8002a18 <Si468x_dab_full_scan+0x59c>)
 800287e:	f000 fe83 	bl	8003588 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002886:	4a63      	ldr	r2, [pc, #396]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002888:	2134      	movs	r1, #52	; 0x34
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3324      	adds	r3, #36	; 0x24
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	220a      	movs	r2, #10
 8002896:	4952      	ldr	r1, [pc, #328]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 8002898:	4618      	mov	r0, r3
 800289a:	f009 fee3 	bl	800c664 <itoa>
 800289e:	4603      	mov	r3, r0
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe70 	bl	8003588 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80028a8:	2100      	movs	r1, #0
 80028aa:	4850      	ldr	r0, [pc, #320]	; (80029ec <Si468x_dab_full_scan+0x570>)
 80028ac:	f000 fe6c 	bl	8003588 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80028b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028b4:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 80028b6:	2134      	movs	r1, #52	; 0x34
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3328      	adds	r3, #40	; 0x28
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <Si468x_dab_full_scan+0x574>)
 80028c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fe5b 	bl	8003588 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80028d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028d6:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 80028d8:	2134      	movs	r1, #52	; 0x34
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3328      	adds	r3, #40	; 0x28
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b13      	cmp	r3, #19
 80028e6:	d803      	bhi.n	80028f0 <Si468x_dab_full_scan+0x474>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80028e8:	2100      	movs	r1, #0
 80028ea:	4842      	ldr	r0, [pc, #264]	; (80029f4 <Si468x_dab_full_scan+0x578>)
 80028ec:	f000 fe4c 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80028f0:	2100      	movs	r1, #0
 80028f2:	484a      	ldr	r0, [pc, #296]	; (8002a1c <Si468x_dab_full_scan+0x5a0>)
 80028f4:	f000 fe48 	bl	8003588 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 80028f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 80028fe:	2134      	movs	r1, #52	; 0x34
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3315      	adds	r3, #21
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	220a      	movs	r2, #10
 800290c:	4934      	ldr	r1, [pc, #208]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 800290e:	4618      	mov	r0, r3
 8002910:	f009 fea8 	bl	800c664 <itoa>
 8002914:	4603      	mov	r3, r0
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fe35 	bl	8003588 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 800291e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002922:	4a3c      	ldr	r2, [pc, #240]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002924:	2134      	movs	r1, #52	; 0x34
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3315      	adds	r3, #21
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b09      	cmp	r3, #9
 8002932:	d803      	bhi.n	800293c <Si468x_dab_full_scan+0x4c0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002934:	2100      	movs	r1, #0
 8002936:	482f      	ldr	r0, [pc, #188]	; (80029f4 <Si468x_dab_full_scan+0x578>)
 8002938:	f000 fe26 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 800293c:	2100      	movs	r1, #0
 800293e:	4837      	ldr	r0, [pc, #220]	; (8002a1c <Si468x_dab_full_scan+0x5a0>)
 8002940:	f000 fe22 	bl	8003588 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002944:	2100      	movs	r1, #0
 8002946:	4836      	ldr	r0, [pc, #216]	; (8002a20 <Si468x_dab_full_scan+0x5a4>)
 8002948:	f000 fe1e 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 800294c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002952:	2134      	movs	r1, #52	; 0x34
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3320      	adds	r3, #32
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2210      	movs	r2, #16
 8002960:	491f      	ldr	r1, [pc, #124]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 8002962:	4618      	mov	r0, r3
 8002964:	f009 fe7e 	bl	800c664 <itoa>
 8002968:	4603      	mov	r3, r0
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fe0b 	bl	8003588 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002972:	2100      	movs	r1, #0
 8002974:	4826      	ldr	r0, [pc, #152]	; (8002a10 <Si468x_dab_full_scan+0x594>)
 8002976:	f000 fe07 	bl	8003588 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800297a:	2100      	movs	r1, #0
 800297c:	4828      	ldr	r0, [pc, #160]	; (8002a20 <Si468x_dab_full_scan+0x5a4>)
 800297e:	f000 fe03 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002982:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002986:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002988:	2134      	movs	r1, #52	; 0x34
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	332a      	adds	r3, #42	; 0x2a
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2210      	movs	r2, #16
 8002996:	4912      	ldr	r1, [pc, #72]	; (80029e0 <Si468x_dab_full_scan+0x564>)
 8002998:	4618      	mov	r0, r3
 800299a:	f009 fe63 	bl	800c664 <itoa>
 800299e:	4603      	mov	r3, r0
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fdf0 	bl	8003588 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80029a8:	2101      	movs	r1, #1
 80029aa:	481e      	ldr	r0, [pc, #120]	; (8002a24 <Si468x_dab_full_scan+0x5a8>)
 80029ac:	f000 fdec 	bl	8003588 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80029b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029b4:	3301      	adds	r3, #1
 80029b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <Si468x_dab_full_scan+0x580>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80029c2:	429a      	cmp	r2, r3
 80029c4:	f4ff af02 	bcc.w	80027cc <Si468x_dab_full_scan+0x350>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80029c8:	2101      	movs	r1, #1
 80029ca:	480f      	ldr	r0, [pc, #60]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 80029cc:	f000 fddc 	bl	8003588 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 80029d0:	2301      	movs	r3, #1
	}
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	373c      	adds	r7, #60	; 0x3c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	bf00      	nop
 80029dc:	0800cff8 	.word	0x0800cff8
 80029e0:	200019a4 	.word	0x200019a4
 80029e4:	0800cffc 	.word	0x0800cffc
 80029e8:	20001adc 	.word	0x20001adc
 80029ec:	0800d008 	.word	0x0800d008
 80029f0:	20000008 	.word	0x20000008
 80029f4:	0800d010 	.word	0x0800d010
 80029f8:	0800d014 	.word	0x0800d014
 80029fc:	2000306c 	.word	0x2000306c
 8002a00:	0800cf84 	.word	0x0800cf84
 8002a04:	0800d018 	.word	0x0800d018
 8002a08:	0800d02c 	.word	0x0800d02c
 8002a0c:	0800d098 	.word	0x0800d098
 8002a10:	0800d104 	.word	0x0800d104
 8002a14:	20001c1c 	.word	0x20001c1c
 8002a18:	0800d10c 	.word	0x0800d10c
 8002a1c:	0800d110 	.word	0x0800d110
 8002a20:	0800d118 	.word	0x0800d118
 8002a24:	0800d11c 	.word	0x0800d11c

08002a28 <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4865      	ldr	r0, [pc, #404]	; (8002bc8 <Si468x_dab_get_audio_info+0x1a0>)
 8002a32:	f000 fda9 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002a36:	4b65      	ldr	r3, [pc, #404]	; (8002bcc <Si468x_dab_get_audio_info+0x1a4>)
 8002a38:	22bd      	movs	r2, #189	; 0xbd
 8002a3a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002a3c:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <Si468x_dab_get_audio_info+0x1a4>)
 8002a3e:	2203      	movs	r2, #3
 8002a40:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002a42:	4962      	ldr	r1, [pc, #392]	; (8002bcc <Si468x_dab_get_audio_info+0x1a4>)
 8002a44:	2002      	movs	r0, #2
 8002a46:	f7fe fe19 	bl	800167c <Si468x_write_command>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <Si468x_dab_get_audio_info+0x1a8>)
 8002a50:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f003 fe10 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002a58:	495e      	ldr	r1, [pc, #376]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002a5a:	2014      	movs	r0, #20
 8002a5c:	f7fe fe30 	bl	80016c0 <Si468x_read_reply>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <Si468x_dab_get_audio_info+0x1a8>)
 8002a66:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002a68:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002a6a:	795b      	ldrb	r3, [r3, #5]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002a74:	791b      	ldrb	r3, [r3, #4]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002a7c:	4b55      	ldr	r3, [pc, #340]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002a7e:	79db      	ldrb	r3, [r3, #7]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002a88:	799b      	ldrb	r3, [r3, #6]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002a92:	7a1b      	ldrb	r3, [r3, #8]
 8002a94:	111b      	asrs	r3, r3, #4
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002aa0:	7a1b      	ldrb	r3, [r3, #8]
 8002aa2:	10db      	asrs	r3, r3, #3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002aae:	7a1b      	ldrb	r3, [r3, #8]
 8002ab0:	109b      	asrs	r3, r3, #2
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002abc:	7a1b      	ldrb	r3, [r3, #8]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	703b      	strb	r3, [r7, #0]

	dab_digrad_status.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8002ac4:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002ac6:	7b1b      	ldrb	r3, [r3, #12]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002acc:	7b5b      	ldrb	r3, [r3, #13]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	441a      	add	r2, r3
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002ad4:	7b9b      	ldrb	r3, [r3, #14]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	441a      	add	r2, r3
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002adc:	7bdb      	ldrb	r3, [r3, #15]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	4413      	add	r3, r2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <Si468x_dab_get_audio_info+0x1b0>)
 8002ae6:	621a      	str	r2, [r3, #32]
	dab_digrad_status.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8002ae8:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002aea:	7c1b      	ldrb	r3, [r3, #16]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002af0:	7c5b      	ldrb	r3, [r3, #17]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	441a      	add	r2, r3
 8002af6:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002af8:	7c9b      	ldrb	r3, [r3, #18]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	441a      	add	r2, r3
 8002afe:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <Si468x_dab_get_audio_info+0x1ac>)
 8002b00:	7cdb      	ldrb	r3, [r3, #19]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	4413      	add	r3, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <Si468x_dab_get_audio_info+0x1b0>)
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

//	Display_dab_digrad_status_data(dab_digrad_status);

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4833      	ldr	r0, [pc, #204]	; (8002bdc <Si468x_dab_get_audio_info+0x1b4>)
 8002b10:	f000 fd3a 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	220a      	movs	r2, #10
 8002b18:	4931      	ldr	r1, [pc, #196]	; (8002be0 <Si468x_dab_get_audio_info+0x1b8>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f009 fda2 	bl	800c664 <itoa>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fd2f 	bl	8003588 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	482d      	ldr	r0, [pc, #180]	; (8002be4 <Si468x_dab_get_audio_info+0x1bc>)
 8002b2e:	f000 fd2b 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002b32:	88bb      	ldrh	r3, [r7, #4]
 8002b34:	220a      	movs	r2, #10
 8002b36:	492a      	ldr	r1, [pc, #168]	; (8002be0 <Si468x_dab_get_audio_info+0x1b8>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f009 fd93 	bl	800c664 <itoa>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fd20 	bl	8003588 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4827      	ldr	r0, [pc, #156]	; (8002be8 <Si468x_dab_get_audio_info+0x1c0>)
 8002b4c:	f000 fd1c 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	220a      	movs	r2, #10
 8002b54:	4922      	ldr	r1, [pc, #136]	; (8002be0 <Si468x_dab_get_audio_info+0x1b8>)
 8002b56:	4618      	mov	r0, r3
 8002b58:	f009 fd84 	bl	800c664 <itoa>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fd11 	bl	8003588 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002b66:	2100      	movs	r1, #0
 8002b68:	4820      	ldr	r0, [pc, #128]	; (8002bec <Si468x_dab_get_audio_info+0x1c4>)
 8002b6a:	f000 fd0d 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b6e:	78bb      	ldrb	r3, [r7, #2]
 8002b70:	220a      	movs	r2, #10
 8002b72:	491b      	ldr	r1, [pc, #108]	; (8002be0 <Si468x_dab_get_audio_info+0x1b8>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f009 fd75 	bl	800c664 <itoa>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fd02 	bl	8003588 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b84:	2100      	movs	r1, #0
 8002b86:	481a      	ldr	r0, [pc, #104]	; (8002bf0 <Si468x_dab_get_audio_info+0x1c8>)
 8002b88:	f000 fcfe 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	220a      	movs	r2, #10
 8002b90:	4913      	ldr	r1, [pc, #76]	; (8002be0 <Si468x_dab_get_audio_info+0x1b8>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f009 fd66 	bl	800c664 <itoa>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fcf3 	bl	8003588 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4813      	ldr	r0, [pc, #76]	; (8002bf4 <Si468x_dab_get_audio_info+0x1cc>)
 8002ba6:	f000 fcef 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002baa:	783b      	ldrb	r3, [r7, #0]
 8002bac:	220a      	movs	r2, #10
 8002bae:	490c      	ldr	r1, [pc, #48]	; (8002be0 <Si468x_dab_get_audio_info+0x1b8>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f009 fd57 	bl	800c664 <itoa>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fce4 	bl	8003588 <send_debug_msg>

}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	0800d128 	.word	0x0800d128
 8002bcc:	200001a4 	.word	0x200001a4
 8002bd0:	200019e4 	.word	0x200019e4
 8002bd4:	200011a4 	.word	0x200011a4
 8002bd8:	20001aa8 	.word	0x20001aa8
 8002bdc:	0800d164 	.word	0x0800d164
 8002be0:	200019a4 	.word	0x200019a4
 8002be4:	0800d170 	.word	0x0800d170
 8002be8:	0800d180 	.word	0x0800d180
 8002bec:	0800d194 	.word	0x0800d194
 8002bf0:	0800d1a0 	.word	0x0800d1a0
 8002bf4:	0800d1ac 	.word	0x0800d1ac

08002bf8 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <Si468x_dab_get_event_status+0x4c>)
 8002c00:	f000 fcc2 	bl	8003588 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <Si468x_dab_get_event_status+0x50>)
 8002c06:	22b3      	movs	r2, #179	; 0xb3
 8002c08:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <Si468x_dab_get_event_status+0x50>)
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002c10:	490d      	ldr	r1, [pc, #52]	; (8002c48 <Si468x_dab_get_event_status+0x50>)
 8002c12:	2002      	movs	r0, #2
 8002c14:	f7fe fd32 	bl	800167c <Si468x_write_command>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <Si468x_dab_get_event_status+0x54>)
 8002c1e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f003 fd29 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002c26:	490a      	ldr	r1, [pc, #40]	; (8002c50 <Si468x_dab_get_event_status+0x58>)
 8002c28:	2009      	movs	r0, #9
 8002c2a:	f7fe fd49 	bl	80016c0 <Si468x_read_reply>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <Si468x_dab_get_event_status+0x54>)
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <Si468x_dab_get_event_status+0x58>)
 8002c38:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002c3a:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <Si468x_dab_get_event_status+0x5c>)
 8002c3c:	6013      	str	r3, [r2, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800d1bc 	.word	0x0800d1bc
 8002c48:	200001a4 	.word	0x200001a4
 8002c4c:	200019e4 	.word	0x200019e4
 8002c50:	200011a4 	.word	0x200011a4
 8002c54:	20001ad4 	.word	0x20001ad4

08002c58 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c64:	2101      	movs	r1, #1
 8002c66:	484a      	ldr	r0, [pc, #296]	; (8002d90 <Si468x_dab_get_component_info+0x138>)
 8002c68:	f000 fc8e 	bl	8003588 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c6c:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c6e:	22bb      	movs	r2, #187	; 0xbb
 8002c70:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c72:	4b48      	ldr	r3, [pc, #288]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c78:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c7e:	4b45      	ldr	r3, [pc, #276]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b42      	ldr	r3, [pc, #264]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c8a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c94:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002c9e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0e1b      	lsrs	r3, r3, #24
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002ca8:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002caa:	4a3a      	ldr	r2, [pc, #232]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	121b      	asrs	r3, r3, #8
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002cb8:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	141b      	asrs	r3, r3, #16
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002cc2:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	161b      	asrs	r3, r3, #24
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002ccc:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002cce:	4931      	ldr	r1, [pc, #196]	; (8002d94 <Si468x_dab_get_component_info+0x13c>)
 8002cd0:	200c      	movs	r0, #12
 8002cd2:	f7fe fcd3 	bl	800167c <Si468x_write_command>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <Si468x_dab_get_component_info+0x140>)
 8002cdc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002cde:	2005      	movs	r0, #5
 8002ce0:	f003 fcca 	bl	8006678 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002ce4:	492d      	ldr	r1, [pc, #180]	; (8002d9c <Si468x_dab_get_component_info+0x144>)
 8002ce6:	201a      	movs	r0, #26
 8002ce8:	f7fe fcea 	bl	80016c0 <Si468x_read_reply>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <Si468x_dab_get_component_info+0x140>)
 8002cf2:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <Si468x_dab_get_component_info+0x144>)
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e00c      	b.n	8002d1e <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002d04:	7ffb      	ldrb	r3, [r7, #31]
 8002d06:	f103 0208 	add.w	r2, r3, #8
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	4923      	ldr	r1, [pc, #140]	; (8002d9c <Si468x_dab_get_component_info+0x144>)
 8002d0e:	5c8a      	ldrb	r2, [r1, r2]
 8002d10:	3320      	adds	r3, #32
 8002d12:	443b      	add	r3, r7
 8002d14:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002d18:	7ffb      	ldrb	r3, [r7, #31]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	7ffb      	ldrb	r3, [r7, #31]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d9ef      	bls.n	8002d04 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <Si468x_dab_get_component_info+0x144>)
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <Si468x_dab_get_component_info+0x144>)
 8002d2c:	7e5b      	ldrb	r3, [r3, #25]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4819      	ldr	r0, [pc, #100]	; (8002da0 <Si468x_dab_get_component_info+0x148>)
 8002d3c:	f000 fc24 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d40:	7fbb      	ldrb	r3, [r7, #30]
 8002d42:	220a      	movs	r2, #10
 8002d44:	4917      	ldr	r1, [pc, #92]	; (8002da4 <Si468x_dab_get_component_info+0x14c>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f009 fc8c 	bl	800c664 <itoa>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fc19 	bl	8003588 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d56:	2100      	movs	r1, #0
 8002d58:	4813      	ldr	r0, [pc, #76]	; (8002da8 <Si468x_dab_get_component_info+0x150>)
 8002d5a:	f000 fc15 	bl	8003588 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fc0f 	bl	8003588 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	480f      	ldr	r0, [pc, #60]	; (8002dac <Si468x_dab_get_component_info+0x154>)
 8002d6e:	f000 fc0b 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d72:	8bbb      	ldrh	r3, [r7, #28]
 8002d74:	2202      	movs	r2, #2
 8002d76:	490b      	ldr	r1, [pc, #44]	; (8002da4 <Si468x_dab_get_component_info+0x14c>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f009 fc73 	bl	800c664 <itoa>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fc00 	bl	8003588 <send_debug_msg>

}
 8002d88:	bf00      	nop
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0800d1fc 	.word	0x0800d1fc
 8002d94:	200001a4 	.word	0x200001a4
 8002d98:	200019e4 	.word	0x200019e4
 8002d9c:	200011a4 	.word	0x200011a4
 8002da0:	0800d230 	.word	0x0800d230
 8002da4:	200019a4 	.word	0x200019a4
 8002da8:	0800d23c 	.word	0x0800d23c
 8002dac:	0800d250 	.word	0x0800d250

08002db0 <play_station>:
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}

void play_station(uint8_t direction)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(dab_management.total_ensembles && dab_management.total_services)
 8002dbc:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <play_station+0x16c>)
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a6 	beq.w	8002f12 <play_station+0x162>
 8002dc6:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <play_station+0x16c>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a1 	beq.w	8002f12 <play_station+0x162>
	{
		switch(direction)
 8002dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d011      	beq.n	8002dfc <play_station+0x4c>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d122      	bne.n	8002e22 <play_station+0x72>
		{
			case 2:
				dab_management.actual_station++;
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <play_station+0x16c>)
 8002dde:	78db      	ldrb	r3, [r3, #3]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <play_station+0x16c>)
 8002de6:	70da      	strb	r2, [r3, #3]
				if(dab_management.actual_station == dab_management.total_services)
 8002de8:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <play_station+0x16c>)
 8002dea:	78da      	ldrb	r2, [r3, #3]
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <play_station+0x16c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d118      	bne.n	8002e26 <play_station+0x76>
				{
					dab_management.actual_station = 0;
 8002df4:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <play_station+0x16c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	70da      	strb	r2, [r3, #3]
				}
				break;
 8002dfa:	e014      	b.n	8002e26 <play_station+0x76>
			case 1:
				dab_management.actual_station--;
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <play_station+0x16c>)
 8002dfe:	78db      	ldrb	r3, [r3, #3]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <play_station+0x16c>)
 8002e06:	70da      	strb	r2, [r3, #3]
				if(dab_management.actual_station < 0 || dab_management.actual_station > dab_management.total_services)
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <play_station+0x16c>)
 8002e0a:	78da      	ldrb	r2, [r3, #3]
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <play_station+0x16c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d90a      	bls.n	8002e2a <play_station+0x7a>
				{
					dab_management.actual_station = dab_management.total_services - 1;
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <play_station+0x16c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <play_station+0x16c>)
 8002e1e:	70da      	strb	r2, [r3, #3]
				}
				break;
 8002e20:	e003      	b.n	8002e2a <play_station+0x7a>
			default:
				break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <play_station+0x7c>
				break;
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <play_station+0x7c>
				break;
 8002e2a:	bf00      	nop
		}

		dab_management.last_station_index = dab_management.actual_station;
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <play_station+0x16c>)
 8002e2e:	78da      	ldrb	r2, [r3, #3]
 8002e30:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <play_station+0x16c>)
 8002e32:	711a      	strb	r2, [r3, #4]

		eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002e34:	2201      	movs	r2, #1
 8002e36:	493a      	ldr	r1, [pc, #232]	; (8002f20 <play_station+0x170>)
 8002e38:	f240 1007 	movw	r0, #263	; 0x107
 8002e3c:	f001 ff8c 	bl	8004d58 <eeprom_write>

		send_debug_msg("---------------------------------", CRLF_SEND);
 8002e40:	2101      	movs	r1, #1
 8002e42:	4838      	ldr	r0, [pc, #224]	; (8002f24 <play_station+0x174>)
 8002e44:	f000 fba0 	bl	8003588 <send_debug_msg>
		send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4837      	ldr	r0, [pc, #220]	; (8002f28 <play_station+0x178>)
 8002e4c:	f000 fb9c 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 8002e50:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <play_station+0x16c>)
 8002e52:	78db      	ldrb	r3, [r3, #3]
 8002e54:	3301      	adds	r3, #1
 8002e56:	220a      	movs	r2, #10
 8002e58:	4934      	ldr	r1, [pc, #208]	; (8002f2c <play_station+0x17c>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f009 fc02 	bl	800c664 <itoa>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fb8f 	bl	8003588 <send_debug_msg>
		send_debug_msg("Name: ", CRLF_NO_SEND);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4830      	ldr	r0, [pc, #192]	; (8002f30 <play_station+0x180>)
 8002e6e:	f000 fb8b 	bl	8003588 <send_debug_msg>
		send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <play_station+0x16c>)
 8002e74:	78db      	ldrb	r3, [r3, #3]
 8002e76:	461a      	mov	r2, r3
 8002e78:	2334      	movs	r3, #52	; 0x34
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <play_station+0x184>)
 8002e80:	4413      	add	r3, r2
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fb7f 	bl	8003588 <send_debug_msg>
		Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <play_station+0x16c>)
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <play_station+0x184>)
 8002e92:	2334      	movs	r3, #52	; 0x34
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3328      	adds	r3, #40	; 0x28
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fe07 	bl	8001ab4 <Si468x_dab_tune_freq>
		Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <play_station+0x16c>)
 8002ea8:	78db      	ldrb	r3, [r3, #3]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <play_station+0x184>)
 8002eae:	2334      	movs	r3, #52	; 0x34
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3320      	adds	r3, #32
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <play_station+0x16c>)
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	491c      	ldr	r1, [pc, #112]	; (8002f34 <play_station+0x184>)
 8002ec2:	2334      	movs	r3, #52	; 0x34
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	440b      	add	r3, r1
 8002eca:	332a      	adds	r3, #42	; 0x2a
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f7ff fec1 	bl	8002c58 <Si468x_dab_get_component_info>
		Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <play_station+0x16c>)
 8002ed8:	78db      	ldrb	r3, [r3, #3]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <play_station+0x184>)
 8002ede:	2334      	movs	r3, #52	; 0x34
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3320      	adds	r3, #32
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <play_station+0x16c>)
 8002eec:	78db      	ldrb	r3, [r3, #3]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4910      	ldr	r1, [pc, #64]	; (8002f34 <play_station+0x184>)
 8002ef2:	2334      	movs	r3, #52	; 0x34
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
 8002ef8:	440b      	add	r3, r1
 8002efa:	332a      	adds	r3, #42	; 0x2a
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7ff f99b 	bl	800223c <Si468x_dab_start_digital_service>

		Si468x_dab_digrad_status();
 8002f06:	463b      	mov	r3, r7
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fe8b 	bl	8001c24 <Si468x_dab_digrad_status>
		Si468x_dab_get_audio_info();
 8002f0e:	f7ff fd8b 	bl	8002a28 <Si468x_dab_get_audio_info>


	}

}
 8002f12:	bf00      	nop
 8002f14:	3730      	adds	r7, #48	; 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000306c 	.word	0x2000306c
 8002f20:	20003070 	.word	0x20003070
 8002f24:	0800d2a0 	.word	0x0800d2a0
 8002f28:	0800d2c4 	.word	0x0800d2c4
 8002f2c:	200019a4 	.word	0x200019a4
 8002f30:	0800d2d8 	.word	0x0800d2d8
 8002f34:	20001c1c 	.word	0x20001c1c

08002f38 <restore_from_eeprom>:

void restore_from_eeprom()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4895      	ldr	r0, [pc, #596]	; (8003198 <restore_from_eeprom+0x260>)
 8002f42:	f000 fb21 	bl	8003588 <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 8002f46:	2201      	movs	r2, #1
 8002f48:	4994      	ldr	r1, [pc, #592]	; (800319c <restore_from_eeprom+0x264>)
 8002f4a:	203f      	movs	r0, #63	; 0x3f
 8002f4c:	f001 fee6 	bl	8004d1c <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]
 8002f54:	e012      	b.n	8002f7c <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4a8e      	ldr	r2, [pc, #568]	; (80031a0 <restore_from_eeprom+0x268>)
 8002f66:	4413      	add	r3, r2
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f001 fed6 	bl	8004d1c <eeprom_read>
		HAL_Delay(5);
 8002f70:	2005      	movs	r0, #5
 8002f72:	f003 fb81 	bl	8006678 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d9e9      	bls.n	8002f56 <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 8002f82:	2100      	movs	r1, #0
 8002f84:	4887      	ldr	r0, [pc, #540]	; (80031a4 <restore_from_eeprom+0x26c>)
 8002f86:	f000 faff 	bl	8003588 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8002f8a:	4b87      	ldr	r3, [pc, #540]	; (80031a8 <restore_from_eeprom+0x270>)
 8002f8c:	7b5b      	ldrb	r3, [r3, #13]
 8002f8e:	220a      	movs	r2, #10
 8002f90:	4986      	ldr	r1, [pc, #536]	; (80031ac <restore_from_eeprom+0x274>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f009 fb66 	bl	800c664 <itoa>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 faf3 	bl	8003588 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4882      	ldr	r0, [pc, #520]	; (80031b0 <restore_from_eeprom+0x278>)
 8002fa6:	f000 faef 	bl	8003588 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e022      	b.n	8002ff6 <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8002fb0:	220a      	movs	r2, #10
 8002fb2:	497e      	ldr	r1, [pc, #504]	; (80031ac <restore_from_eeprom+0x274>)
 8002fb4:	6938      	ldr	r0, [r7, #16]
 8002fb6:	f009 fb55 	bl	800c664 <itoa>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fae2 	bl	8003588 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	487b      	ldr	r0, [pc, #492]	; (80031b4 <restore_from_eeprom+0x27c>)
 8002fc8:	f000 fade 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8002fcc:	4a74      	ldr	r2, [pc, #464]	; (80031a0 <restore_from_eeprom+0x268>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd4:	220a      	movs	r2, #10
 8002fd6:	4975      	ldr	r1, [pc, #468]	; (80031ac <restore_from_eeprom+0x274>)
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f009 fb43 	bl	800c664 <itoa>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fad0 	bl	8003588 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4873      	ldr	r0, [pc, #460]	; (80031b8 <restore_from_eeprom+0x280>)
 8002fec:	f000 facc 	bl	8003588 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <restore_from_eeprom+0x270>)
 8002ff8:	7b5b      	ldrb	r3, [r3, #13]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	dbd6      	blt.n	8002fb0 <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 8003002:	2201      	movs	r2, #1
 8003004:	496d      	ldr	r1, [pc, #436]	; (80031bc <restore_from_eeprom+0x284>)
 8003006:	f240 1005 	movw	r0, #261	; 0x105
 800300a:	f001 fe87 	bl	8004d1c <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 800300e:	2201      	movs	r2, #1
 8003010:	4965      	ldr	r1, [pc, #404]	; (80031a8 <restore_from_eeprom+0x270>)
 8003012:	f44f 7083 	mov.w	r0, #262	; 0x106
 8003016:	f001 fe81 	bl	8004d1c <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 800301a:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <restore_from_eeprom+0x270>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	f000 8284 	beq.w	800352c <restore_from_eeprom+0x5f4>
 8003024:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <restore_from_eeprom+0x270>)
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2bff      	cmp	r3, #255	; 0xff
 800302a:	f000 827f 	beq.w	800352c <restore_from_eeprom+0x5f4>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 800302e:	2204      	movs	r2, #4
 8003030:	4963      	ldr	r1, [pc, #396]	; (80031c0 <restore_from_eeprom+0x288>)
 8003032:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003036:	f001 fe71 	bl	8004d1c <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 800303a:	2201      	movs	r2, #1
 800303c:	4961      	ldr	r1, [pc, #388]	; (80031c4 <restore_from_eeprom+0x28c>)
 800303e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003042:	f001 fe6b 	bl	8004d1c <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003046:	2201      	movs	r2, #1
 8003048:	495f      	ldr	r1, [pc, #380]	; (80031c8 <restore_from_eeprom+0x290>)
 800304a:	f240 1007 	movw	r0, #263	; 0x107
 800304e:	f001 fe65 	bl	8004d1c <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 8003052:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <restore_from_eeprom+0x270>)
 8003054:	791b      	ldrb	r3, [r3, #4]
 8003056:	2bff      	cmp	r3, #255	; 0xff
 8003058:	d102      	bne.n	8003060 <restore_from_eeprom+0x128>
		{
			dab_management.last_station_index = 0;
 800305a:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <restore_from_eeprom+0x270>)
 800305c:	2200      	movs	r2, #0
 800305e:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 8003060:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <restore_from_eeprom+0x270>)
 8003062:	791a      	ldrb	r2, [r3, #4]
 8003064:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <restore_from_eeprom+0x270>)
 8003066:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	e00e      	b.n	800308c <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	3305      	adds	r3, #5
 8003072:	019b      	lsls	r3, r3, #6
 8003074:	4618      	mov	r0, r3
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	015b      	lsls	r3, r3, #5
 800307a:	4a54      	ldr	r2, [pc, #336]	; (80031cc <restore_from_eeprom+0x294>)
 800307c:	4413      	add	r3, r2
 800307e:	2220      	movs	r2, #32
 8003080:	4619      	mov	r1, r3
 8003082:	f001 fe4b 	bl	8004d1c <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	3301      	adds	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <restore_from_eeprom+0x270>)
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	429a      	cmp	r2, r3
 8003094:	d3eb      	bcc.n	800306e <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003096:	2300      	movs	r3, #0
 8003098:	73bb      	strb	r3, [r7, #14]
 800309a:	e010      	b.n	80030be <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 800309c:	7bbb      	ldrb	r3, [r7, #14]
 800309e:	330f      	adds	r3, #15
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	4618      	mov	r0, r3
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	2234      	movs	r2, #52	; 0x34
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <restore_from_eeprom+0x298>)
 80030ae:	4413      	add	r3, r2
 80030b0:	2234      	movs	r2, #52	; 0x34
 80030b2:	4619      	mov	r1, r3
 80030b4:	f001 fe32 	bl	8004d1c <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_services; i++)
 80030b8:	7bbb      	ldrb	r3, [r7, #14]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73bb      	strb	r3, [r7, #14]
 80030be:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <restore_from_eeprom+0x270>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	7bba      	ldrb	r2, [r7, #14]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3e9      	bcc.n	800309c <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 80030c8:	2100      	movs	r1, #0
 80030ca:	4836      	ldr	r0, [pc, #216]	; (80031a4 <restore_from_eeprom+0x26c>)
 80030cc:	f000 fa5c 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <restore_from_eeprom+0x270>)
 80030d2:	7b5b      	ldrb	r3, [r3, #13]
 80030d4:	220a      	movs	r2, #10
 80030d6:	4935      	ldr	r1, [pc, #212]	; (80031ac <restore_from_eeprom+0x274>)
 80030d8:	4618      	mov	r0, r3
 80030da:	f009 fac3 	bl	800c664 <itoa>
 80030de:	4603      	mov	r3, r0
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fa50 	bl	8003588 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 80030e8:	2101      	movs	r1, #1
 80030ea:	4831      	ldr	r0, [pc, #196]	; (80031b0 <restore_from_eeprom+0x278>)
 80030ec:	f000 fa4c 	bl	8003588 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	e022      	b.n	800313c <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80030f6:	220a      	movs	r2, #10
 80030f8:	492c      	ldr	r1, [pc, #176]	; (80031ac <restore_from_eeprom+0x274>)
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	f009 fab2 	bl	800c664 <itoa>
 8003100:	4603      	mov	r3, r0
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fa3f 	bl	8003588 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 800310a:	2100      	movs	r1, #0
 800310c:	4829      	ldr	r0, [pc, #164]	; (80031b4 <restore_from_eeprom+0x27c>)
 800310e:	f000 fa3b 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003112:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <restore_from_eeprom+0x268>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	220a      	movs	r2, #10
 800311c:	4923      	ldr	r1, [pc, #140]	; (80031ac <restore_from_eeprom+0x274>)
 800311e:	4618      	mov	r0, r3
 8003120:	f009 faa0 	bl	800c664 <itoa>
 8003124:	4603      	mov	r3, r0
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fa2d 	bl	8003588 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 800312e:	2101      	movs	r1, #1
 8003130:	4821      	ldr	r0, [pc, #132]	; (80031b8 <restore_from_eeprom+0x280>)
 8003132:	f000 fa29 	bl	8003588 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <restore_from_eeprom+0x270>)
 800313e:	7b5b      	ldrb	r3, [r3, #13]
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4293      	cmp	r3, r2
 8003146:	dbd6      	blt.n	80030f6 <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8003148:	2100      	movs	r1, #0
 800314a:	4822      	ldr	r0, [pc, #136]	; (80031d4 <restore_from_eeprom+0x29c>)
 800314c:	f000 fa1c 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <restore_from_eeprom+0x270>)
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	220a      	movs	r2, #10
 8003156:	4915      	ldr	r1, [pc, #84]	; (80031ac <restore_from_eeprom+0x274>)
 8003158:	4618      	mov	r0, r3
 800315a:	f009 fa83 	bl	800c664 <itoa>
 800315e:	4603      	mov	r3, r0
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa10 	bl	8003588 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003168:	2101      	movs	r1, #1
 800316a:	481b      	ldr	r0, [pc, #108]	; (80031d8 <restore_from_eeprom+0x2a0>)
 800316c:	f000 fa0c 	bl	8003588 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8003170:	2100      	movs	r1, #0
 8003172:	481a      	ldr	r0, [pc, #104]	; (80031dc <restore_from_eeprom+0x2a4>)
 8003174:	f000 fa08 	bl	8003588 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8003178:	2100      	movs	r1, #0
 800317a:	4819      	ldr	r0, [pc, #100]	; (80031e0 <restore_from_eeprom+0x2a8>)
 800317c:	f000 fa04 	bl	8003588 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8003180:	2100      	movs	r1, #0
 8003182:	4818      	ldr	r0, [pc, #96]	; (80031e4 <restore_from_eeprom+0x2ac>)
 8003184:	f000 fa00 	bl	8003588 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003188:	2101      	movs	r1, #1
 800318a:	4817      	ldr	r0, [pc, #92]	; (80031e8 <restore_from_eeprom+0x2b0>)
 800318c:	f000 f9fc 	bl	8003588 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003190:	2300      	movs	r3, #0
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	e07f      	b.n	8003296 <restore_from_eeprom+0x35e>
 8003196:	bf00      	nop
 8003198:	0800d2e0 	.word	0x0800d2e0
 800319c:	20003079 	.word	0x20003079
 80031a0:	200019e8 	.word	0x200019e8
 80031a4:	0800cce0 	.word	0x0800cce0
 80031a8:	2000306c 	.word	0x2000306c
 80031ac:	200019a4 	.word	0x200019a4
 80031b0:	0800cce8 	.word	0x0800cce8
 80031b4:	0800cd00 	.word	0x0800cd00
 80031b8:	0800cd04 	.word	0x0800cd04
 80031bc:	2000306d 	.word	0x2000306d
 80031c0:	20003074 	.word	0x20003074
 80031c4:	20003078 	.word	0x20003078
 80031c8:	20003070 	.word	0x20003070
 80031cc:	20001adc 	.word	0x20001adc
 80031d0:	20001c1c 	.word	0x20001c1c
 80031d4:	0800cf70 	.word	0x0800cf70
 80031d8:	0800cf84 	.word	0x0800cf84
 80031dc:	0800cfb8 	.word	0x0800cfb8
 80031e0:	0800cfc4 	.word	0x0800cfc4
 80031e4:	0800cfd8 	.word	0x0800cfd8
 80031e8:	0800cfe8 	.word	0x0800cfe8
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80031ec:	2100      	movs	r1, #0
 80031ee:	48bc      	ldr	r0, [pc, #752]	; (80034e0 <restore_from_eeprom+0x5a8>)
 80031f0:	f000 f9ca 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	220a      	movs	r2, #10
 80031f8:	49ba      	ldr	r1, [pc, #744]	; (80034e4 <restore_from_eeprom+0x5ac>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f009 fa32 	bl	800c664 <itoa>
 8003200:	4603      	mov	r3, r0
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f9bf 	bl	8003588 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 800320a:	2100      	movs	r1, #0
 800320c:	48b6      	ldr	r0, [pc, #728]	; (80034e8 <restore_from_eeprom+0x5b0>)
 800320e:	f000 f9bb 	bl	8003588 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	015b      	lsls	r3, r3, #5
 8003216:	4ab5      	ldr	r2, [pc, #724]	; (80034ec <restore_from_eeprom+0x5b4>)
 8003218:	4413      	add	r3, r2
 800321a:	3302      	adds	r3, #2
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f9b2 	bl	8003588 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8003224:	2100      	movs	r1, #0
 8003226:	48ae      	ldr	r0, [pc, #696]	; (80034e0 <restore_from_eeprom+0x5a8>)
 8003228:	f000 f9ae 	bl	8003588 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	4aaf      	ldr	r2, [pc, #700]	; (80034ec <restore_from_eeprom+0x5b4>)
 8003230:	015b      	lsls	r3, r3, #5
 8003232:	4413      	add	r3, r2
 8003234:	3318      	adds	r3, #24
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	220a      	movs	r2, #10
 800323a:	49aa      	ldr	r1, [pc, #680]	; (80034e4 <restore_from_eeprom+0x5ac>)
 800323c:	4618      	mov	r0, r3
 800323e:	f009 fa11 	bl	800c664 <itoa>
 8003242:	4603      	mov	r3, r0
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f99e 	bl	8003588 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800324c:	2100      	movs	r1, #0
 800324e:	48a8      	ldr	r0, [pc, #672]	; (80034f0 <restore_from_eeprom+0x5b8>)
 8003250:	f000 f99a 	bl	8003588 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	4aa5      	ldr	r2, [pc, #660]	; (80034ec <restore_from_eeprom+0x5b4>)
 8003258:	015b      	lsls	r3, r3, #5
 800325a:	4413      	add	r3, r2
 800325c:	331c      	adds	r3, #28
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	4ba4      	ldr	r3, [pc, #656]	; (80034f4 <restore_from_eeprom+0x5bc>)
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f98c 	bl	8003588 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	4a9e      	ldr	r2, [pc, #632]	; (80034ec <restore_from_eeprom+0x5b4>)
 8003274:	015b      	lsls	r3, r3, #5
 8003276:	4413      	add	r3, r2
 8003278:	331c      	adds	r3, #28
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b13      	cmp	r3, #19
 800327e:	d803      	bhi.n	8003288 <restore_from_eeprom+0x350>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003280:	2100      	movs	r1, #0
 8003282:	489d      	ldr	r0, [pc, #628]	; (80034f8 <restore_from_eeprom+0x5c0>)
 8003284:	f000 f980 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("  |", CRLF_SEND);
 8003288:	2101      	movs	r1, #1
 800328a:	489c      	ldr	r0, [pc, #624]	; (80034fc <restore_from_eeprom+0x5c4>)
 800328c:	f000 f97c 	bl	8003588 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	3301      	adds	r3, #1
 8003294:	71fb      	strb	r3, [r7, #7]
 8003296:	4b9a      	ldr	r3, [pc, #616]	; (8003500 <restore_from_eeprom+0x5c8>)
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	79fa      	ldrb	r2, [r7, #7]
 800329c:	429a      	cmp	r2, r3
 800329e:	d3a5      	bcc.n	80031ec <restore_from_eeprom+0x2b4>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80032a0:	2101      	movs	r1, #1
 80032a2:	4898      	ldr	r0, [pc, #608]	; (8003504 <restore_from_eeprom+0x5cc>)
 80032a4:	f000 f970 	bl	8003588 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80032a8:	2100      	movs	r1, #0
 80032aa:	4897      	ldr	r0, [pc, #604]	; (8003508 <restore_from_eeprom+0x5d0>)
 80032ac:	f000 f96c 	bl	8003588 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80032b0:	4b93      	ldr	r3, [pc, #588]	; (8003500 <restore_from_eeprom+0x5c8>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	220a      	movs	r2, #10
 80032b6:	498b      	ldr	r1, [pc, #556]	; (80034e4 <restore_from_eeprom+0x5ac>)
 80032b8:	4618      	mov	r0, r3
 80032ba:	f009 f9d3 	bl	800c664 <itoa>
 80032be:	4603      	mov	r3, r0
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f960 	bl	8003588 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80032c8:	2101      	movs	r1, #1
 80032ca:	4890      	ldr	r0, [pc, #576]	; (800350c <restore_from_eeprom+0x5d4>)
 80032cc:	f000 f95c 	bl	8003588 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80032d0:	2101      	movs	r1, #1
 80032d2:	488f      	ldr	r0, [pc, #572]	; (8003510 <restore_from_eeprom+0x5d8>)
 80032d4:	f000 f958 	bl	8003588 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80032d8:	2300      	movs	r3, #0
 80032da:	71bb      	strb	r3, [r7, #6]
 80032dc:	e0e3      	b.n	80034a6 <restore_from_eeprom+0x56e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80032de:	2100      	movs	r1, #0
 80032e0:	487f      	ldr	r0, [pc, #508]	; (80034e0 <restore_from_eeprom+0x5a8>)
 80032e2:	f000 f951 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	220a      	movs	r2, #10
 80032ea:	497e      	ldr	r1, [pc, #504]	; (80034e4 <restore_from_eeprom+0x5ac>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f009 f9b9 	bl	800c664 <itoa>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f946 	bl	8003588 <send_debug_msg>
			if(services_index < 10)
 80032fc:	79bb      	ldrb	r3, [r7, #6]
 80032fe:	2b09      	cmp	r3, #9
 8003300:	d803      	bhi.n	800330a <restore_from_eeprom+0x3d2>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003302:	2100      	movs	r1, #0
 8003304:	487c      	ldr	r0, [pc, #496]	; (80034f8 <restore_from_eeprom+0x5c0>)
 8003306:	f000 f93f 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800330a:	2100      	movs	r1, #0
 800330c:	4881      	ldr	r0, [pc, #516]	; (8003514 <restore_from_eeprom+0x5dc>)
 800330e:	f000 f93b 	bl	8003588 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	2234      	movs	r2, #52	; 0x34
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a7f      	ldr	r2, [pc, #508]	; (8003518 <restore_from_eeprom+0x5e0>)
 800331c:	4413      	add	r3, r2
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f931 	bl	8003588 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003326:	2100      	movs	r1, #0
 8003328:	487c      	ldr	r0, [pc, #496]	; (800351c <restore_from_eeprom+0x5e4>)
 800332a:	f000 f92d 	bl	8003588 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	717b      	strb	r3, [r7, #5]
 8003332:	e01c      	b.n	800336e <restore_from_eeprom+0x436>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8003334:	797b      	ldrb	r3, [r7, #5]
 8003336:	4a6d      	ldr	r2, [pc, #436]	; (80034ec <restore_from_eeprom+0x5b4>)
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	4413      	add	r3, r2
 800333c:	331c      	adds	r3, #28
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	79bb      	ldrb	r3, [r7, #6]
 8003342:	4975      	ldr	r1, [pc, #468]	; (8003518 <restore_from_eeprom+0x5e0>)
 8003344:	2034      	movs	r0, #52	; 0x34
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	440b      	add	r3, r1
 800334c:	3328      	adds	r3, #40	; 0x28
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d109      	bne.n	8003368 <restore_from_eeprom+0x430>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8003354:	797b      	ldrb	r3, [r7, #5]
 8003356:	015b      	lsls	r3, r3, #5
 8003358:	4a64      	ldr	r2, [pc, #400]	; (80034ec <restore_from_eeprom+0x5b4>)
 800335a:	4413      	add	r3, r2
 800335c:	3302      	adds	r3, #2
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f911 	bl	8003588 <send_debug_msg>
					break;
 8003366:	e007      	b.n	8003378 <restore_from_eeprom+0x440>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003368:	797b      	ldrb	r3, [r7, #5]
 800336a:	3301      	adds	r3, #1
 800336c:	717b      	strb	r3, [r7, #5]
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <restore_from_eeprom+0x5c8>)
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	797a      	ldrb	r2, [r7, #5]
 8003374:	429a      	cmp	r2, r3
 8003376:	d3dd      	bcc.n	8003334 <restore_from_eeprom+0x3fc>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003378:	2100      	movs	r1, #0
 800337a:	4868      	ldr	r0, [pc, #416]	; (800351c <restore_from_eeprom+0x5e4>)
 800337c:	f000 f904 	bl	8003588 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003380:	79bb      	ldrb	r3, [r7, #6]
 8003382:	4a65      	ldr	r2, [pc, #404]	; (8003518 <restore_from_eeprom+0x5e0>)
 8003384:	2134      	movs	r1, #52	; 0x34
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	220a      	movs	r2, #10
 8003392:	4954      	ldr	r1, [pc, #336]	; (80034e4 <restore_from_eeprom+0x5ac>)
 8003394:	4618      	mov	r0, r3
 8003396:	f009 f965 	bl	800c664 <itoa>
 800339a:	4603      	mov	r3, r0
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f8f2 	bl	8003588 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80033a4:	2100      	movs	r1, #0
 80033a6:	4852      	ldr	r0, [pc, #328]	; (80034f0 <restore_from_eeprom+0x5b8>)
 80033a8:	f000 f8ee 	bl	8003588 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80033ac:	79bb      	ldrb	r3, [r7, #6]
 80033ae:	4a5a      	ldr	r2, [pc, #360]	; (8003518 <restore_from_eeprom+0x5e0>)
 80033b0:	2134      	movs	r1, #52	; 0x34
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3328      	adds	r3, #40	; 0x28
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <restore_from_eeprom+0x5bc>)
 80033c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f8de 	bl	8003588 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80033cc:	79bb      	ldrb	r3, [r7, #6]
 80033ce:	4a52      	ldr	r2, [pc, #328]	; (8003518 <restore_from_eeprom+0x5e0>)
 80033d0:	2134      	movs	r1, #52	; 0x34
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3328      	adds	r3, #40	; 0x28
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b13      	cmp	r3, #19
 80033de:	d803      	bhi.n	80033e8 <restore_from_eeprom+0x4b0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80033e0:	2100      	movs	r1, #0
 80033e2:	4845      	ldr	r0, [pc, #276]	; (80034f8 <restore_from_eeprom+0x5c0>)
 80033e4:	f000 f8d0 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80033e8:	2100      	movs	r1, #0
 80033ea:	484d      	ldr	r0, [pc, #308]	; (8003520 <restore_from_eeprom+0x5e8>)
 80033ec:	f000 f8cc 	bl	8003588 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 80033f0:	79bb      	ldrb	r3, [r7, #6]
 80033f2:	4a49      	ldr	r2, [pc, #292]	; (8003518 <restore_from_eeprom+0x5e0>)
 80033f4:	2134      	movs	r1, #52	; 0x34
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3315      	adds	r3, #21
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	220a      	movs	r2, #10
 8003402:	4938      	ldr	r1, [pc, #224]	; (80034e4 <restore_from_eeprom+0x5ac>)
 8003404:	4618      	mov	r0, r3
 8003406:	f009 f92d 	bl	800c664 <itoa>
 800340a:	4603      	mov	r3, r0
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f8ba 	bl	8003588 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8003414:	79bb      	ldrb	r3, [r7, #6]
 8003416:	4a40      	ldr	r2, [pc, #256]	; (8003518 <restore_from_eeprom+0x5e0>)
 8003418:	2134      	movs	r1, #52	; 0x34
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3315      	adds	r3, #21
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b09      	cmp	r3, #9
 8003426:	d803      	bhi.n	8003430 <restore_from_eeprom+0x4f8>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003428:	2100      	movs	r1, #0
 800342a:	4833      	ldr	r0, [pc, #204]	; (80034f8 <restore_from_eeprom+0x5c0>)
 800342c:	f000 f8ac 	bl	8003588 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8003430:	2100      	movs	r1, #0
 8003432:	483b      	ldr	r0, [pc, #236]	; (8003520 <restore_from_eeprom+0x5e8>)
 8003434:	f000 f8a8 	bl	8003588 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003438:	2100      	movs	r1, #0
 800343a:	483a      	ldr	r0, [pc, #232]	; (8003524 <restore_from_eeprom+0x5ec>)
 800343c:	f000 f8a4 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	4a35      	ldr	r2, [pc, #212]	; (8003518 <restore_from_eeprom+0x5e0>)
 8003444:	2134      	movs	r1, #52	; 0x34
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3320      	adds	r3, #32
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2210      	movs	r2, #16
 8003452:	4924      	ldr	r1, [pc, #144]	; (80034e4 <restore_from_eeprom+0x5ac>)
 8003454:	4618      	mov	r0, r3
 8003456:	f009 f905 	bl	800c664 <itoa>
 800345a:	4603      	mov	r3, r0
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f892 	bl	8003588 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003464:	2100      	movs	r1, #0
 8003466:	482b      	ldr	r0, [pc, #172]	; (8003514 <restore_from_eeprom+0x5dc>)
 8003468:	f000 f88e 	bl	8003588 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800346c:	2100      	movs	r1, #0
 800346e:	482d      	ldr	r0, [pc, #180]	; (8003524 <restore_from_eeprom+0x5ec>)
 8003470:	f000 f88a 	bl	8003588 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003474:	79bb      	ldrb	r3, [r7, #6]
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <restore_from_eeprom+0x5e0>)
 8003478:	2134      	movs	r1, #52	; 0x34
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	332a      	adds	r3, #42	; 0x2a
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	4917      	ldr	r1, [pc, #92]	; (80034e4 <restore_from_eeprom+0x5ac>)
 8003488:	4618      	mov	r0, r3
 800348a:	f009 f8eb 	bl	800c664 <itoa>
 800348e:	4603      	mov	r3, r0
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f878 	bl	8003588 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003498:	2101      	movs	r1, #1
 800349a:	4823      	ldr	r0, [pc, #140]	; (8003528 <restore_from_eeprom+0x5f0>)
 800349c:	f000 f874 	bl	8003588 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80034a0:	79bb      	ldrb	r3, [r7, #6]
 80034a2:	3301      	adds	r3, #1
 80034a4:	71bb      	strb	r3, [r7, #6]
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <restore_from_eeprom+0x5c8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	79ba      	ldrb	r2, [r7, #6]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f4ff af16 	bcc.w	80032de <restore_from_eeprom+0x3a6>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80034b2:	2101      	movs	r1, #1
 80034b4:	4815      	ldr	r0, [pc, #84]	; (800350c <restore_from_eeprom+0x5d4>)
 80034b6:	f000 f867 	bl	8003588 <send_debug_msg>


		Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, 0);
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <restore_from_eeprom+0x5c8>)
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	4619      	mov	r1, r3
 80034c0:	4a15      	ldr	r2, [pc, #84]	; (8003518 <restore_from_eeprom+0x5e0>)
 80034c2:	2334      	movs	r3, #52	; 0x34
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3328      	adds	r3, #40	; 0x28
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe faef 	bl	8001ab4 <Si468x_dab_tune_freq>
		play_station(0);
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7ff fc6a 	bl	8002db0 <play_station>
 80034dc:	e03a      	b.n	8003554 <restore_from_eeprom+0x61c>
 80034de:	bf00      	nop
 80034e0:	0800cff8 	.word	0x0800cff8
 80034e4:	200019a4 	.word	0x200019a4
 80034e8:	0800cffc 	.word	0x0800cffc
 80034ec:	20001adc 	.word	0x20001adc
 80034f0:	0800d008 	.word	0x0800d008
 80034f4:	20000008 	.word	0x20000008
 80034f8:	0800d010 	.word	0x0800d010
 80034fc:	0800d014 	.word	0x0800d014
 8003500:	2000306c 	.word	0x2000306c
 8003504:	0800cf84 	.word	0x0800cf84
 8003508:	0800d018 	.word	0x0800d018
 800350c:	0800d02c 	.word	0x0800d02c
 8003510:	0800d098 	.word	0x0800d098
 8003514:	0800d104 	.word	0x0800d104
 8003518:	20001c1c 	.word	0x20001c1c
 800351c:	0800d10c 	.word	0x0800d10c
 8003520:	0800d110 	.word	0x0800d110
 8003524:	0800d118 	.word	0x0800d118
 8003528:	0800d11c 	.word	0x0800d11c

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 800352c:	2101      	movs	r1, #1
 800352e:	480b      	ldr	r0, [pc, #44]	; (800355c <restore_from_eeprom+0x624>)
 8003530:	f000 f82a 	bl	8003588 <send_debug_msg>
		dab_management.actual_freq = 0;
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <restore_from_eeprom+0x628>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <restore_from_eeprom+0x628>)
 800353c:	2200      	movs	r2, #0
 800353e:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <restore_from_eeprom+0x628>)
 8003542:	2200      	movs	r2, #0
 8003544:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <restore_from_eeprom+0x628>)
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <restore_from_eeprom+0x628>)
 800354e:	2200      	movs	r2, #0
 8003550:	70da      	strb	r2, [r3, #3]
	}
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	0800d31c 	.word	0x0800d31c
 8003560:	2000306c 	.word	0x2000306c

08003564 <get_dab_management>:
{
	return ensembles_list;
}

dab_management_t get_dab_management()
{
 8003564:	b490      	push	{r4, r7}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	return dab_management;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <get_dab_management+0x20>)
 8003570:	461c      	mov	r4, r3
 8003572:	4613      	mov	r3, r2
 8003574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bc90      	pop	{r4, r7}
 8003582:	4770      	bx	lr
 8003584:	2000306c 	.word	0x2000306c

08003588 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fc fe17 	bl	80001c8 <strlen>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	2364      	movs	r3, #100	; 0x64
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	480a      	ldr	r0, [pc, #40]	; (80035d0 <send_debug_msg+0x48>)
 80035a8:	f008 fcab 	bl	800bf02 <HAL_UART_Transmit>

	if(is_crlf)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80035b2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80035b6:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80035b8:	f107 010c 	add.w	r1, r7, #12
 80035bc:	2364      	movs	r3, #100	; 0x64
 80035be:	2202      	movs	r2, #2
 80035c0:	4803      	ldr	r0, [pc, #12]	; (80035d0 <send_debug_msg+0x48>)
 80035c2:	f008 fc9e 	bl	800bf02 <HAL_UART_Transmit>
	}
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200033e4 	.word	0x200033e4

080035d4 <Display_clear_screen>:

static uint8_t display_freeze = 0;


void Display_clear_screen()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80035da:	2000      	movs	r0, #0
 80035dc:	f7fd f968 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80035e0:	2311      	movs	r3, #17
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035e8:	2211      	movs	r2, #17
 80035ea:	2100      	movs	r1, #0
 80035ec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80035f0:	f7fd f9e9 	bl	80009c6 <ILI9341_Draw_Line>
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <Display_booting_screen>:

void Display_booting_screen()
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003602:	2000      	movs	r0, #0
 8003604:	f7fd f954 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003608:	2302      	movs	r3, #2
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <Display_booting_screen+0xc4>)
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003616:	2128      	movs	r1, #40	; 0x28
 8003618:	205f      	movs	r0, #95	; 0x5f
 800361a:	f7fd fa55 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 800361e:	2302      	movs	r3, #2
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <Display_booting_screen+0xc8>)
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362c:	213c      	movs	r1, #60	; 0x3c
 800362e:	2046      	movs	r0, #70	; 0x46
 8003630:	f7fd fa4a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003634:	2302      	movs	r3, #2
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <Display_booting_screen+0xcc>)
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003642:	2150      	movs	r1, #80	; 0x50
 8003644:	2082      	movs	r0, #130	; 0x82
 8003646:	f7fd fa3f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 800364a:	2302      	movs	r3, #2
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <Display_booting_screen+0xd0>)
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2300      	movs	r3, #0
 8003654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003658:	2164      	movs	r1, #100	; 0x64
 800365a:	2064      	movs	r0, #100	; 0x64
 800365c:	f7fd fa34 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003660:	2302      	movs	r3, #2
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <Display_booting_screen+0xd4>)
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2300      	movs	r3, #0
 800366a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366e:	2178      	movs	r1, #120	; 0x78
 8003670:	205a      	movs	r0, #90	; 0x5a
 8003672:	f7fd fa29 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003676:	2302      	movs	r3, #2
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <Display_booting_screen+0xd8>)
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003684:	218c      	movs	r1, #140	; 0x8c
 8003686:	2032      	movs	r0, #50	; 0x32
 8003688:	f7fd fa1e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 800368c:	2302      	movs	r3, #2
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <Display_booting_screen+0xdc>)
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800369a:	21a0      	movs	r1, #160	; 0xa0
 800369c:	205a      	movs	r0, #90	; 0x5a
 800369e:	f7fd fa13 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 80036a2:	2302      	movs	r3, #2
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <Display_booting_screen+0xe0>)
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b0:	21b4      	movs	r1, #180	; 0xb4
 80036b2:	2078      	movs	r0, #120	; 0x78
 80036b4:	f7fd fa08 	bl	8000ac8 <ILI9341_Draw_String>
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	0800d3e4 	.word	0x0800d3e4
 80036c4:	0800d3f4 	.word	0x0800d3f4
 80036c8:	0800d40c 	.word	0x0800d40c
 80036cc:	0800d414 	.word	0x0800d414
 80036d0:	0800d424 	.word	0x0800d424
 80036d4:	0800d438 	.word	0x0800d438
 80036d8:	0800d454 	.word	0x0800d454
 80036dc:	0800d468 	.word	0x0800d468

080036e0 <Display_main_screen_background>:

void Display_main_screen_background()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80036e6:	f7ff ff75 	bl	80035d4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2); //Naglowek
 80036ea:	2302      	movs	r3, #2
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <Display_main_screen_background+0x110>)
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036f8:	2101      	movs	r1, #1
 80036fa:	2005      	movs	r0, #5
 80036fc:	f7fd f9e4 	bl	8000ac8 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003700:	2328      	movs	r3, #40	; 0x28
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	238c      	movs	r3, #140	; 0x8c
 8003706:	2214      	movs	r2, #20
 8003708:	2105      	movs	r1, #5
 800370a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800370e:	f7fd f939 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003712:	2341      	movs	r3, #65	; 0x41
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	238c      	movs	r3, #140	; 0x8c
 8003718:	222d      	movs	r2, #45	; 0x2d
 800371a:	2105      	movs	r1, #5
 800371c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003720:	f7fd f930 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003724:	235a      	movs	r3, #90	; 0x5a
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	238c      	movs	r3, #140	; 0x8c
 800372a:	2246      	movs	r2, #70	; 0x46
 800372c:	2105      	movs	r1, #5
 800372e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003732:	f7fd f927 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003736:	2373      	movs	r3, #115	; 0x73
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	238c      	movs	r3, #140	; 0x8c
 800373c:	225f      	movs	r2, #95	; 0x5f
 800373e:	2105      	movs	r1, #5
 8003740:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003744:	f7fd f91e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003748:	238c      	movs	r3, #140	; 0x8c
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	238c      	movs	r3, #140	; 0x8c
 800374e:	2278      	movs	r2, #120	; 0x78
 8003750:	2105      	movs	r1, #5
 8003752:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003756:	f7fd f915 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 800375a:	23a5      	movs	r3, #165	; 0xa5
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	238c      	movs	r3, #140	; 0x8c
 8003760:	2291      	movs	r2, #145	; 0x91
 8003762:	2105      	movs	r1, #5
 8003764:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003768:	f7fd f90c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 800376c:	23be      	movs	r3, #190	; 0xbe
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	238c      	movs	r3, #140	; 0x8c
 8003772:	22aa      	movs	r2, #170	; 0xaa
 8003774:	2105      	movs	r1, #5
 8003776:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800377a:	f7fd f903 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 800377e:	23be      	movs	r3, #190	; 0xbe
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	f240 133b 	movw	r3, #315	; 0x13b
 8003786:	2214      	movs	r2, #20
 8003788:	2191      	movs	r1, #145	; 0x91
 800378a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800378e:	f7fd f8f9 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003792:	23eb      	movs	r3, #235	; 0xeb
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	239d      	movs	r3, #157	; 0x9d
 8003798:	22c3      	movs	r2, #195	; 0xc3
 800379a:	2105      	movs	r1, #5
 800379c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80037a0:	f7fd f8f0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80037a4:	23eb      	movs	r3, #235	; 0xeb
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	f240 133b 	movw	r3, #315	; 0x13b
 80037ac:	22c3      	movs	r2, #195	; 0xc3
 80037ae:	21a3      	movs	r1, #163	; 0xa3
 80037b0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80037b4:	f7fd f8e6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 80037b8:	2302      	movs	r3, #2
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <Display_main_screen_background+0x114>)
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c8:	21cf      	movs	r1, #207	; 0xcf
 80037ca:	2032      	movs	r0, #50	; 0x32
 80037cc:	f7fd f97c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(197, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 80037d0:	2302      	movs	r3, #2
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <Display_main_screen_background+0x118>)
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037e0:	21cf      	movs	r1, #207	; 0xcf
 80037e2:	20c5      	movs	r0, #197	; 0xc5
 80037e4:	f7fd f970 	bl	8000ac8 <ILI9341_Draw_String>
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	0800d474 	.word	0x0800d474
 80037f4:	0800d484 	.word	0x0800d484
 80037f8:	0800d490 	.word	0x0800d490

080037fc <Display_stations_list_background>:
	//Station picture background

}

void Display_stations_list_background()
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003802:	f7ff fee7 	bl	80035d4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2); //Naglowek
 8003806:	2302      	movs	r3, #2
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	4b59      	ldr	r3, [pc, #356]	; (8003970 <Display_stations_list_background+0x174>)
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003814:	2101      	movs	r1, #1
 8003816:	2005      	movs	r0, #5
 8003818:	f7fd f956 	bl	8000ac8 <ILI9341_Draw_String>

	//Station 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 800381c:	2332      	movs	r3, #50	; 0x32
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	f240 131d 	movw	r3, #285	; 0x11d
 8003824:	2214      	movs	r2, #20
 8003826:	2105      	movs	r1, #5
 8003828:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800382c:	f7fd f8aa 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8003830:	2355      	movs	r3, #85	; 0x55
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f240 131d 	movw	r3, #285	; 0x11d
 8003838:	2237      	movs	r2, #55	; 0x37
 800383a:	2105      	movs	r1, #5
 800383c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003840:	f7fd f8a0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8003844:	2378      	movs	r3, #120	; 0x78
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f240 131d 	movw	r3, #285	; 0x11d
 800384c:	225a      	movs	r2, #90	; 0x5a
 800384e:	2105      	movs	r1, #5
 8003850:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003854:	f7fd f896 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8003858:	239b      	movs	r3, #155	; 0x9b
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	f240 131d 	movw	r3, #285	; 0x11d
 8003860:	227d      	movs	r2, #125	; 0x7d
 8003862:	2105      	movs	r1, #5
 8003864:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003868:	f7fd f88c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 800386c:	23be      	movs	r3, #190	; 0xbe
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f240 131d 	movw	r3, #285	; 0x11d
 8003874:	22a0      	movs	r2, #160	; 0xa0
 8003876:	2105      	movs	r1, #5
 8003878:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800387c:	f7fd f882 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>


	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8003880:	2366      	movs	r3, #102	; 0x66
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f240 133b 	movw	r3, #315	; 0x13b
 8003888:	2214      	movs	r2, #20
 800388a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800388e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003892:	f7fd f877 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8003896:	2302      	movs	r3, #2
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <Display_stations_list_background+0x178>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a6:	2138      	movs	r1, #56	; 0x38
 80038a8:	f240 1027 	movw	r0, #295	; 0x127
 80038ac:	f7fd f90c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 80038b0:	2302      	movs	r3, #2
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	4b30      	ldr	r3, [pc, #192]	; (8003978 <Display_stations_list_background+0x17c>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038c0:	2138      	movs	r1, #56	; 0x38
 80038c2:	f44f 7097 	mov.w	r0, #302	; 0x12e
 80038c6:	f7fd f8ff 	bl	8000ac8 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 80038ca:	23be      	movs	r3, #190	; 0xbe
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f240 133b 	movw	r3, #315	; 0x13b
 80038d2:	226c      	movs	r2, #108	; 0x6c
 80038d4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80038d8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80038dc:	f7fd f852 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 80038e0:	2302      	movs	r3, #2
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <Display_stations_list_background+0x17c>)
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f0:	2192      	movs	r1, #146	; 0x92
 80038f2:	f240 1027 	movw	r0, #295	; 0x127
 80038f6:	f7fd f8e7 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 80038fa:	2302      	movs	r3, #2
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <Display_stations_list_background+0x178>)
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800390a:	2192      	movs	r1, #146	; 0x92
 800390c:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8003910:	f7fd f8da 	bl	8000ac8 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003914:	23eb      	movs	r3, #235	; 0xeb
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	239d      	movs	r3, #157	; 0x9d
 800391a:	22c3      	movs	r2, #195	; 0xc3
 800391c:	2105      	movs	r1, #5
 800391e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003922:	f7fd f82f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003926:	23eb      	movs	r3, #235	; 0xeb
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	f240 133b 	movw	r3, #315	; 0x13b
 800392e:	22c3      	movs	r2, #195	; 0xc3
 8003930:	21a3      	movs	r1, #163	; 0xa3
 8003932:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003936:	f7fd f825 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 800393a:	2302      	movs	r3, #2
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <Display_stations_list_background+0x180>)
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394a:	21cf      	movs	r1, #207	; 0xcf
 800394c:	2023      	movs	r0, #35	; 0x23
 800394e:	f7fd f8bb 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(208, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003952:	2302      	movs	r3, #2
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <Display_stations_list_background+0x184>)
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800395e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003962:	21cf      	movs	r1, #207	; 0xcf
 8003964:	20d0      	movs	r0, #208	; 0xd0
 8003966:	f7fd f8af 	bl	8000ac8 <ILI9341_Draw_String>

}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	0800d4a0 	.word	0x0800d4a0
 8003974:	0800d4b4 	.word	0x0800d4b4
 8003978:	0800d4b8 	.word	0x0800d4b8
 800397c:	0800d490 	.word	0x0800d490
 8003980:	0800d484 	.word	0x0800d484

08003984 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management)
{
 8003984:	b084      	sub	sp, #16
 8003986:	b590      	push	{r4, r7, lr}
 8003988:	b093      	sub	sp, #76	; 0x4c
 800398a:	af02      	add	r7, sp, #8
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	dab_service_t temp;

	if(_dab_management.total_services)
 8003996:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8130 	beq.w	8003c00 <Display_stations_list_data+0x27c>
	{
		for(uint8_t i = 0; i < 5; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80039a6:	e125      	b.n	8003bf4 <Display_stations_list_data+0x270>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 80039a8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80039ac:	4619      	mov	r1, r3
 80039ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	4299      	cmp	r1, r3
 80039b8:	dc03      	bgt.n	80039c2 <Display_stations_list_data+0x3e>
			{
				start_station_index = 0 - i;
 80039ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039be:	425b      	negs	r3, r3
 80039c0:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 80039c2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	dc33      	bgt.n	8003a36 <Display_stations_list_data+0xb2>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 80039ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00da      	lsls	r2, r3, #3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	331c      	adds	r3, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	2302      	movs	r3, #2
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	4ba8      	ldr	r3, [pc, #672]	; (8003c88 <Display_stations_list_data+0x304>)
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f0:	2008      	movs	r0, #8
 80039f2:	f7fd f869 	bl	8000ac8 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80039f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00da      	lsls	r2, r3, #3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	331c      	adds	r3, #28
 8003a06:	461c      	mov	r4, r3
 8003a08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	3301      	adds	r3, #1
 8003a12:	220a      	movs	r2, #10
 8003a14:	499d      	ldr	r1, [pc, #628]	; (8003c8c <Display_stations_list_data+0x308>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f008 fe24 	bl	800c664 <itoa>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2202      	movs	r2, #2
 8003a20:	9201      	str	r2, [sp, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	2011      	movs	r0, #17
 8003a30:	f7fd f84a 	bl	8000ac8 <ILI9341_Draw_String>
 8003a34:	e01e      	b.n	8003a74 <Display_stations_list_data+0xf0>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8003a36:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00da      	lsls	r2, r3, #3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	331c      	adds	r3, #28
 8003a46:	461c      	mov	r4, r3
 8003a48:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	3301      	adds	r3, #1
 8003a52:	220a      	movs	r2, #10
 8003a54:	498d      	ldr	r1, [pc, #564]	; (8003c8c <Display_stations_list_data+0x308>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f008 fe04 	bl	800c664 <itoa>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2202      	movs	r2, #2
 8003a60:	9201      	str	r2, [sp, #4]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	2008      	movs	r0, #8
 8003a70:	f7fd f82a 	bl	8000ac8 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8003a74:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	331c      	adds	r3, #28
 8003a84:	4619      	mov	r1, r3
 8003a86:	2302      	movs	r3, #2
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <Display_stations_list_data+0x30c>)
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a96:	2018      	movs	r0, #24
 8003a98:	f7fd f816 	bl	8000ac8 <ILI9341_Draw_String>

			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * (i + start_station_index), &temp, sizeof(dab_service_t));
 8003a9c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	330f      	adds	r3, #15
 8003aa6:	019b      	lsls	r3, r3, #6
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	2234      	movs	r2, #52	; 0x34
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f001 f933 	bl	8004d1c <eeprom_read>
			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, temp.name, 2);
 8003ab6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00da      	lsls	r2, r3, #3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	2302      	movs	r3, #2
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	f107 0308 	add.w	r3, r7, #8
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ada:	2022      	movs	r0, #34	; 0x22
 8003adc:	f7fc fff4 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[temp.freq_id], 2);
 8003ae0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00da      	lsls	r2, r3, #3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	331c      	adds	r3, #28
 8003af0:	4619      	mov	r1, r3
 8003af2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <Display_stations_list_data+0x310>)
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	2202      	movs	r2, #2
 8003b00:	9201      	str	r2, [sp, #4]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b0c:	20ab      	movs	r0, #171	; 0xab
 8003b0e:	f7fc ffdb 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(temp.freq / 1000, itoa_buffer, 10), 2);
 8003b12:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00da      	lsls	r2, r3, #3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	331c      	adds	r3, #28
 8003b22:	461c      	mov	r4, r3
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	4a5c      	ldr	r2, [pc, #368]	; (8003c98 <Display_stations_list_data+0x314>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	220a      	movs	r2, #10
 8003b30:	4956      	ldr	r1, [pc, #344]	; (8003c8c <Display_stations_list_data+0x308>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	f008 fd96 	bl	800c664 <itoa>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	9201      	str	r2, [sp, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b48:	4621      	mov	r1, r4
 8003b4a:	20ca      	movs	r0, #202	; 0xca
 8003b4c:	f7fc ffbc 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8003b50:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00da      	lsls	r2, r3, #3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	331c      	adds	r3, #28
 8003b60:	4619      	mov	r1, r3
 8003b62:	2302      	movs	r3, #2
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <Display_stations_list_data+0x30c>)
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b72:	20e1      	movs	r0, #225	; 0xe1
 8003b74:	f7fc ffa8 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(temp.freq % 1000, itoa_buffer, 10), 2);
 8003b78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00da      	lsls	r2, r3, #3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	331c      	adds	r3, #28
 8003b88:	461c      	mov	r4, r3
 8003b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <Display_stations_list_data+0x314>)
 8003b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	220a      	movs	r2, #10
 8003ba0:	493a      	ldr	r1, [pc, #232]	; (8003c8c <Display_stations_list_data+0x308>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f008 fd5e 	bl	800c664 <itoa>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2202      	movs	r2, #2
 8003bac:	9201      	str	r2, [sp, #4]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bb8:	4621      	mov	r1, r4
 8003bba:	20e8      	movs	r0, #232	; 0xe8
 8003bbc:	f7fc ff84 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 8003bc0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00da      	lsls	r2, r3, #3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	331c      	adds	r3, #28
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <Display_stations_list_data+0x318>)
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be2:	f240 1003 	movw	r0, #259	; 0x103
 8003be6:	f7fc ff6f 	bl	8000ac8 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 8003bea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	f67f aed5 	bls.w	80039a8 <Display_stations_list_data+0x24>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 8003bfe:	e03b      	b.n	8003c78 <Display_stations_list_data+0x2f4>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 8003c00:	2302      	movs	r3, #2
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <Display_stations_list_data+0x31c>)
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c10:	211c      	movs	r1, #28
 8003c12:	2008      	movs	r0, #8
 8003c14:	f7fc ff58 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 8003c18:	2302      	movs	r3, #2
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <Display_stations_list_data+0x320>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c28:	213f      	movs	r1, #63	; 0x3f
 8003c2a:	2008      	movs	r0, #8
 8003c2c:	f7fc ff4c 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 8003c30:	2302      	movs	r3, #2
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <Display_stations_list_data+0x324>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c40:	2162      	movs	r1, #98	; 0x62
 8003c42:	2008      	movs	r0, #8
 8003c44:	f7fc ff40 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 8003c48:	2302      	movs	r3, #2
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <Display_stations_list_data+0x328>)
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c58:	2185      	movs	r1, #133	; 0x85
 8003c5a:	2008      	movs	r0, #8
 8003c5c:	f7fc ff34 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 8003c60:	2302      	movs	r3, #2
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <Display_stations_list_data+0x32c>)
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c70:	21a8      	movs	r1, #168	; 0xa8
 8003c72:	2008      	movs	r0, #8
 8003c74:	f7fc ff28 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003c78:	bf00      	nop
 8003c7a:	3744      	adds	r7, #68	; 0x44
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003c82:	b004      	add	sp, #16
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	0800d4bc 	.word	0x0800d4bc
 8003c8c:	2000307c 	.word	0x2000307c
 8003c90:	0800d4c0 	.word	0x0800d4c0
 8003c94:	200000ac 	.word	0x200000ac
 8003c98:	10624dd3 	.word	0x10624dd3
 8003c9c:	0800d4c4 	.word	0x0800d4c4
 8003ca0:	0800d4c8 	.word	0x0800d4c8
 8003ca4:	0800d4e0 	.word	0x0800d4e0
 8003ca8:	0800d4f8 	.word	0x0800d4f8
 8003cac:	0800d510 	.word	0x0800d510
 8003cb0:	0800d52c 	.word	0x0800d52c

08003cb4 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003cba:	f7ff fc8b 	bl	80035d4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2); //Naglowek
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <Display_scanning_screen_background+0x1a0>)
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2005      	movs	r0, #5
 8003cd0:	f7fc fefa 	bl	8000ac8 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8003cd4:	2328      	movs	r3, #40	; 0x28
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f240 133b 	movw	r3, #315	; 0x13b
 8003cdc:	2214      	movs	r2, #20
 8003cde:	2105      	movs	r1, #5
 8003ce0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003ce4:	f7fc fe4e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 8003ce8:	2302      	movs	r3, #2
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <Display_scanning_screen_background+0x1a4>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf8:	2117      	movs	r1, #23
 8003cfa:	2050      	movs	r0, #80	; 0x50
 8003cfc:	f7fc fee4 	bl	8000ac8 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8003d00:	2341      	movs	r3, #65	; 0x41
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	f240 133b 	movw	r3, #315	; 0x13b
 8003d08:	222d      	movs	r2, #45	; 0x2d
 8003d0a:	2105      	movs	r1, #5
 8003d0c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003d10:	f7fc fe38 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8003d14:	235a      	movs	r3, #90	; 0x5a
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	f240 133b 	movw	r3, #315	; 0x13b
 8003d1c:	2246      	movs	r2, #70	; 0x46
 8003d1e:	2105      	movs	r1, #5
 8003d20:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003d24:	f7fc fe2e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8003d28:	2302      	movs	r3, #2
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <Display_scanning_screen_background+0x1a8>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d38:	2149      	movs	r1, #73	; 0x49
 8003d3a:	200a      	movs	r0, #10
 8003d3c:	f7fc fec4 	bl	8000ac8 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8003d40:	2373      	movs	r3, #115	; 0x73
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	f240 133b 	movw	r3, #315	; 0x13b
 8003d48:	225f      	movs	r2, #95	; 0x5f
 8003d4a:	2105      	movs	r1, #5
 8003d4c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003d50:	f7fc fe18 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8003d54:	2302      	movs	r3, #2
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <Display_scanning_screen_background+0x1ac>)
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d64:	2162      	movs	r1, #98	; 0x62
 8003d66:	200a      	movs	r0, #10
 8003d68:	f7fc feae 	bl	8000ac8 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8003d6c:	238c      	movs	r3, #140	; 0x8c
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	f240 133b 	movw	r3, #315	; 0x13b
 8003d74:	2278      	movs	r2, #120	; 0x78
 8003d76:	2105      	movs	r1, #5
 8003d78:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003d7c:	f7fc fe02 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8003d80:	2302      	movs	r3, #2
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <Display_scanning_screen_background+0x1b0>)
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d90:	217b      	movs	r1, #123	; 0x7b
 8003d92:	200a      	movs	r0, #10
 8003d94:	f7fc fe98 	bl	8000ac8 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8003d98:	23a5      	movs	r3, #165	; 0xa5
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	f240 133b 	movw	r3, #315	; 0x13b
 8003da0:	2291      	movs	r2, #145	; 0x91
 8003da2:	2105      	movs	r1, #5
 8003da4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003da8:	f7fc fdec 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8003dac:	2302      	movs	r3, #2
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <Display_scanning_screen_background+0x1b4>)
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dbc:	2194      	movs	r1, #148	; 0x94
 8003dbe:	200a      	movs	r0, #10
 8003dc0:	f7fc fe82 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <Display_scanning_screen_background+0x1b8>)
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd4:	2194      	movs	r1, #148	; 0x94
 8003dd6:	2078      	movs	r0, #120	; 0x78
 8003dd8:	f7fc fe76 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8003ddc:	2302      	movs	r3, #2
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <Display_scanning_screen_background+0x1bc>)
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dec:	2194      	movs	r1, #148	; 0x94
 8003dee:	209e      	movs	r0, #158	; 0x9e
 8003df0:	f7fc fe6a 	bl	8000ac8 <ILI9341_Draw_String>


	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8003df4:	23be      	movs	r3, #190	; 0xbe
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f240 133b 	movw	r3, #315	; 0x13b
 8003dfc:	22aa      	movs	r2, #170	; 0xaa
 8003dfe:	2105      	movs	r1, #5
 8003e00:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003e04:	f7fc fdbe 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 8003e08:	2302      	movs	r3, #2
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <Display_scanning_screen_background+0x1c0>)
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e18:	21ad      	movs	r1, #173	; 0xad
 8003e1a:	200a      	movs	r0, #10
 8003e1c:	f7fc fe54 	bl	8000ac8 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8003e20:	23eb      	movs	r3, #235	; 0xeb
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	f240 133b 	movw	r3, #315	; 0x13b
 8003e28:	22c3      	movs	r2, #195	; 0xc3
 8003e2a:	2105      	movs	r1, #5
 8003e2c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003e30:	f7fc fda8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 8003e34:	2302      	movs	r3, #2
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <Display_scanning_screen_background+0x1c4>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e44:	21cf      	movs	r1, #207	; 0xcf
 8003e46:	2082      	movs	r0, #130	; 0x82
 8003e48:	f7fc fe3e 	bl	8000ac8 <ILI9341_Draw_String>

}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	0800d544 	.word	0x0800d544
 8003e58:	0800d554 	.word	0x0800d554
 8003e5c:	0800d56c 	.word	0x0800d56c
 8003e60:	0800d580 	.word	0x0800d580
 8003e64:	0800d590 	.word	0x0800d590
 8003e68:	0800d5a0 	.word	0x0800d5a0
 8003e6c:	0800d4c0 	.word	0x0800d4c0
 8003e70:	0800d4c4 	.word	0x0800d4c4
 8003e74:	0800d5ac 	.word	0x0800d5ac
 8003e78:	0800d5b8 	.word	0x0800d5b8

08003e7c <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af02      	add	r7, sp, #8
 8003e84:	f107 0c08 	add.w	ip, r7, #8
 8003e88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8003e8c:	7d3b      	ldrb	r3, [r7, #20]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ea0:	330a      	adds	r3, #10
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	233c      	movs	r3, #60	; 0x3c
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	2232      	movs	r2, #50	; 0x32
 8003eac:	210a      	movs	r1, #10
 8003eae:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003eb2:	f7fc fd67 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 8003eb6:	7d3b      	ldrb	r3, [r7, #20]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003eca:	330a      	adds	r3, #10
 8003ecc:	4619      	mov	r1, r3
 8003ece:	233c      	movs	r3, #60	; 0x3c
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003ed6:	2232      	movs	r2, #50	; 0x32
 8003ed8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003edc:	f7fc fd52 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 8003ee0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003ee4:	220a      	movs	r2, #10
 8003ee6:	4954      	ldr	r1, [pc, #336]	; (8004038 <Display_scanning_screen_data+0x1bc>)
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f008 fbbb 	bl	800c664 <itoa>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	9201      	str	r2, [sp, #4]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efe:	2149      	movs	r1, #73	; 0x49
 8003f00:	2091      	movs	r0, #145	; 0x91
 8003f02:	f7fc fde1 	bl	8000ac8 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 8003f06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f0a:	220a      	movs	r2, #10
 8003f0c:	494a      	ldr	r1, [pc, #296]	; (8004038 <Display_scanning_screen_data+0x1bc>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f008 fba8 	bl	800c664 <itoa>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2202      	movs	r2, #2
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f24:	2162      	movs	r1, #98	; 0x62
 8003f26:	2087      	movs	r0, #135	; 0x87
 8003f28:	f7fc fdce 	bl	8000ac8 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 8003f2c:	7d3b      	ldrb	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	220a      	movs	r2, #10
 8003f32:	4941      	ldr	r1, [pc, #260]	; (8004038 <Display_scanning_screen_data+0x1bc>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f008 fb95 	bl	800c664 <itoa>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	9201      	str	r2, [sp, #4]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4a:	217b      	movs	r1, #123	; 0x7b
 8003f4c:	2076      	movs	r0, #118	; 0x76
 8003f4e:	f7fc fdbb 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 8003f52:	2302      	movs	r3, #2
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <Display_scanning_screen_data+0x1c0>)
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f62:	217b      	movs	r1, #123	; 0x7b
 8003f64:	2089      	movs	r0, #137	; 0x89
 8003f66:	f7fc fdaf 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 8003f6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f6e:	220a      	movs	r2, #10
 8003f70:	4931      	ldr	r1, [pc, #196]	; (8004038 <Display_scanning_screen_data+0x1bc>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f008 fb76 	bl	800c664 <itoa>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	9201      	str	r2, [sp, #4]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f88:	217b      	movs	r1, #123	; 0x7b
 8003f8a:	2093      	movs	r0, #147	; 0x93
 8003f8c:	f7fc fd9c 	bl	8000ac8 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4a2b      	ldr	r2, [pc, #172]	; (8004040 <Display_scanning_screen_data+0x1c4>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	220a      	movs	r2, #10
 8003f9c:	4926      	ldr	r1, [pc, #152]	; (8004038 <Display_scanning_screen_data+0x1bc>)
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f008 fb60 	bl	800c664 <itoa>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	9201      	str	r2, [sp, #4]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fb4:	2194      	movs	r1, #148	; 0x94
 8003fb6:	205f      	movs	r0, #95	; 0x5f
 8003fb8:	f7fc fd86 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <Display_scanning_screen_data+0x1c4>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	220a      	movs	r2, #10
 8003fd2:	4919      	ldr	r1, [pc, #100]	; (8004038 <Display_scanning_screen_data+0x1bc>)
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f008 fb45 	bl	800c664 <itoa>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2202      	movs	r2, #2
 8003fde:	9201      	str	r2, [sp, #4]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fea:	2194      	movs	r1, #148	; 0x94
 8003fec:	2081      	movs	r0, #129	; 0x81
 8003fee:	f7fc fd6b 	bl	8000ac8 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <Display_scanning_screen_data+0x1c8>)
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004002:	21ad      	movs	r1, #173	; 0xad
 8004004:	2050      	movs	r0, #80	; 0x50
 8004006:	f7fc fd5f 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 800400a:	7d3b      	ldrb	r3, [r7, #20]
 800400c:	461a      	mov	r2, r3
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <Display_scanning_screen_data+0x1cc>)
 8004010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004014:	2202      	movs	r2, #2
 8004016:	9201      	str	r2, [sp, #4]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800401e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004022:	21ad      	movs	r1, #173	; 0xad
 8004024:	2050      	movs	r0, #80	; 0x50
 8004026:	f7fc fd4f 	bl	8000ac8 <ILI9341_Draw_String>


}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004032:	b004      	add	sp, #16
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	2000307c 	.word	0x2000307c
 800403c:	0800d4b4 	.word	0x0800d4b4
 8004040:	10624dd3 	.word	0x10624dd3
 8004044:	0800d5c0 	.word	0x0800d5c0
 8004048:	200000ac 	.word	0x200000ac

0800404c <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004052:	2328      	movs	r3, #40	; 0x28
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f240 133b 	movw	r3, #315	; 0x13b
 800405a:	2214      	movs	r2, #20
 800405c:	2105      	movs	r1, #5
 800405e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004062:	f7fc fc8f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 8004066:	2302      	movs	r3, #2
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <Display_scanning_screen_complete+0x64>)
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004076:	2117      	movs	r1, #23
 8004078:	2050      	movs	r0, #80	; 0x50
 800407a:	f7fc fd25 	bl	8000ac8 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 800407e:	23eb      	movs	r3, #235	; 0xeb
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	f240 133b 	movw	r3, #315	; 0x13b
 8004086:	22c3      	movs	r2, #195	; 0xc3
 8004088:	2105      	movs	r1, #5
 800408a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800408e:	f7fc fc79 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 8004092:	2302      	movs	r3, #2
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <Display_scanning_screen_complete+0x68>)
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800409e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a2:	21cf      	movs	r1, #207	; 0xcf
 80040a4:	2082      	movs	r0, #130	; 0x82
 80040a6:	f7fc fd0f 	bl	8000ac8 <ILI9341_Draw_String>

}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	0800d5c8 	.word	0x0800d5c8
 80040b4:	0800d5e0 	.word	0x0800d5e0

080040b8 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80040be:	f7ff fa89 	bl	80035d4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 80040c2:	2302      	movs	r3, #2
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	4bb4      	ldr	r3, [pc, #720]	; (8004398 <Display_dab_digrad_status_background+0x2e0>)
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	2300      	movs	r3, #0
 80040cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d0:	2101      	movs	r1, #1
 80040d2:	2005      	movs	r0, #5
 80040d4:	f7fc fcf8 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 80040d8:	2328      	movs	r3, #40	; 0x28
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2369      	movs	r3, #105	; 0x69
 80040de:	2214      	movs	r2, #20
 80040e0:	2105      	movs	r1, #5
 80040e2:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80040e6:	f7fc fc4d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80040ea:	2328      	movs	r3, #40	; 0x28
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	23d2      	movs	r3, #210	; 0xd2
 80040f0:	2214      	movs	r2, #20
 80040f2:	216e      	movs	r1, #110	; 0x6e
 80040f4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80040f8:	f7fc fc44 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80040fc:	2328      	movs	r3, #40	; 0x28
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f240 133b 	movw	r3, #315	; 0x13b
 8004104:	2214      	movs	r2, #20
 8004106:	21d7      	movs	r1, #215	; 0xd7
 8004108:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800410c:	f7fc fc3a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004110:	2341      	movs	r3, #65	; 0x41
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	f240 133b 	movw	r3, #315	; 0x13b
 8004118:	222d      	movs	r2, #45	; 0x2d
 800411a:	2105      	movs	r1, #5
 800411c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004120:	f7fc fc30 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 8004124:	2302      	movs	r3, #2
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	4b9c      	ldr	r3, [pc, #624]	; (800439c <Display_dab_digrad_status_background+0x2e4>)
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004134:	2130      	movs	r1, #48	; 0x30
 8004136:	200a      	movs	r0, #10
 8004138:	f7fc fcc6 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 800413c:	2302      	movs	r3, #2
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	4b97      	ldr	r3, [pc, #604]	; (80043a0 <Display_dab_digrad_status_background+0x2e8>)
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800414c:	2130      	movs	r1, #48	; 0x30
 800414e:	205a      	movs	r0, #90	; 0x5a
 8004150:	f7fc fcba 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004154:	235a      	movs	r3, #90	; 0x5a
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	f240 133b 	movw	r3, #315	; 0x13b
 800415c:	2246      	movs	r2, #70	; 0x46
 800415e:	2105      	movs	r1, #5
 8004160:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004164:	f7fc fc0e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8004168:	2302      	movs	r3, #2
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <Display_dab_digrad_status_background+0x2ec>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004178:	2149      	movs	r1, #73	; 0x49
 800417a:	200a      	movs	r0, #10
 800417c:	f7fc fca4 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004180:	2302      	movs	r3, #2
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <Display_dab_digrad_status_background+0x2f0>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800418c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004190:	2149      	movs	r1, #73	; 0x49
 8004192:	2069      	movs	r0, #105	; 0x69
 8004194:	f7fc fc98 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004198:	2373      	movs	r3, #115	; 0x73
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	f240 133b 	movw	r3, #315	; 0x13b
 80041a0:	225f      	movs	r2, #95	; 0x5f
 80041a2:	2105      	movs	r1, #5
 80041a4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041a8:	f7fc fbec 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80041ac:	2302      	movs	r3, #2
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <Display_dab_digrad_status_background+0x2f4>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041bc:	2162      	movs	r1, #98	; 0x62
 80041be:	200a      	movs	r0, #10
 80041c0:	f7fc fc82 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 80041c4:	2302      	movs	r3, #2
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <Display_dab_digrad_status_background+0x2f0>)
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d4:	2162      	movs	r1, #98	; 0x62
 80041d6:	2069      	movs	r0, #105	; 0x69
 80041d8:	f7fc fc76 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80041dc:	238c      	movs	r3, #140	; 0x8c
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	f240 133b 	movw	r3, #315	; 0x13b
 80041e4:	2278      	movs	r2, #120	; 0x78
 80041e6:	2105      	movs	r1, #5
 80041e8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041ec:	f7fc fbca 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 80041f0:	2302      	movs	r3, #2
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	4b6e      	ldr	r3, [pc, #440]	; (80043b0 <Display_dab_digrad_status_background+0x2f8>)
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004200:	217b      	movs	r1, #123	; 0x7b
 8004202:	200a      	movs	r0, #10
 8004204:	f7fc fc60 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004208:	2302      	movs	r3, #2
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <Display_dab_digrad_status_background+0x2fc>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004218:	217b      	movs	r1, #123	; 0x7b
 800421a:	206e      	movs	r0, #110	; 0x6e
 800421c:	f7fc fc54 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004220:	23a5      	movs	r3, #165	; 0xa5
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	f240 133b 	movw	r3, #315	; 0x13b
 8004228:	2291      	movs	r2, #145	; 0x91
 800422a:	2105      	movs	r1, #5
 800422c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004230:	f7fc fba8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004234:	2302      	movs	r3, #2
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	4b5f      	ldr	r3, [pc, #380]	; (80043b8 <Display_dab_digrad_status_background+0x300>)
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004244:	2194      	movs	r1, #148	; 0x94
 8004246:	200a      	movs	r0, #10
 8004248:	f7fc fc3e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 800424c:	2302      	movs	r3, #2
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	4b5a      	ldr	r3, [pc, #360]	; (80043bc <Display_dab_digrad_status_background+0x304>)
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800425c:	2194      	movs	r1, #148	; 0x94
 800425e:	2071      	movs	r0, #113	; 0x71
 8004260:	f7fc fc32 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004264:	2302      	movs	r3, #2
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <Display_dab_digrad_status_background+0x308>)
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004274:	2194      	movs	r1, #148	; 0x94
 8004276:	2094      	movs	r0, #148	; 0x94
 8004278:	f7fc fc26 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 800427c:	2302      	movs	r3, #2
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <Display_dab_digrad_status_background+0x30c>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428c:	2194      	movs	r1, #148	; 0x94
 800428e:	20b7      	movs	r0, #183	; 0xb7
 8004290:	f7fc fc1a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004294:	2302      	movs	r3, #2
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <Display_dab_digrad_status_background+0x310>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a4:	2194      	movs	r1, #148	; 0x94
 80042a6:	20db      	movs	r0, #219	; 0xdb
 80042a8:	f7fc fc0e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 80042ac:	2302      	movs	r3, #2
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	4b46      	ldr	r3, [pc, #280]	; (80043cc <Display_dab_digrad_status_background+0x314>)
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042bc:	2194      	movs	r1, #148	; 0x94
 80042be:	f240 101b 	movw	r0, #283	; 0x11b
 80042c2:	f7fc fc01 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 80042c6:	2302      	movs	r3, #2
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <Display_dab_digrad_status_background+0x318>)
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042d6:	2194      	movs	r1, #148	; 0x94
 80042d8:	f240 1025 	movw	r0, #293	; 0x125
 80042dc:	f7fc fbf4 	bl	8000ac8 <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80042e0:	23be      	movs	r3, #190	; 0xbe
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	f240 133b 	movw	r3, #315	; 0x13b
 80042e8:	22aa      	movs	r2, #170	; 0xaa
 80042ea:	2105      	movs	r1, #5
 80042ec:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80042f0:	f7fc fb48 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 80042f4:	2302      	movs	r3, #2
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <Display_dab_digrad_status_background+0x31c>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	21ad      	movs	r1, #173	; 0xad
 8004306:	200a      	movs	r0, #10
 8004308:	f7fc fbde 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 800430c:	2302      	movs	r3, #2
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <Display_dab_digrad_status_background+0x320>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800431c:	21ad      	movs	r1, #173	; 0xad
 800431e:	207d      	movs	r0, #125	; 0x7d
 8004320:	f7fc fbd2 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004324:	2302      	movs	r3, #2
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <Display_dab_digrad_status_background+0x324>)
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004334:	21ad      	movs	r1, #173	; 0xad
 8004336:	20b4      	movs	r0, #180	; 0xb4
 8004338:	f7fc fbc6 	bl	8000ac8 <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 800433c:	23eb      	movs	r3, #235	; 0xeb
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	239d      	movs	r3, #157	; 0x9d
 8004342:	22c3      	movs	r2, #195	; 0xc3
 8004344:	2105      	movs	r1, #5
 8004346:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800434a:	f7fc fb1b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800434e:	23eb      	movs	r3, #235	; 0xeb
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	f240 133b 	movw	r3, #315	; 0x13b
 8004356:	22c3      	movs	r2, #195	; 0xc3
 8004358:	21a3      	movs	r1, #163	; 0xa3
 800435a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800435e:	f7fc fb11 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8004362:	2302      	movs	r3, #2
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <Display_dab_digrad_status_background+0x328>)
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800436e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004372:	21cf      	movs	r1, #207	; 0xcf
 8004374:	2025      	movs	r0, #37	; 0x25
 8004376:	f7fc fba7 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 800437a:	2302      	movs	r3, #2
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <Display_dab_digrad_status_background+0x32c>)
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800438a:	21cf      	movs	r1, #207	; 0xcf
 800438c:	20c0      	movs	r0, #192	; 0xc0
 800438e:	f7fc fb9b 	bl	8000ac8 <ILI9341_Draw_String>
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	0800d5e8 	.word	0x0800d5e8
 800439c:	0800d5fc 	.word	0x0800d5fc
 80043a0:	0800d604 	.word	0x0800d604
 80043a4:	0800d60c 	.word	0x0800d60c
 80043a8:	0800d610 	.word	0x0800d610
 80043ac:	0800d614 	.word	0x0800d614
 80043b0:	0800d618 	.word	0x0800d618
 80043b4:	0800d620 	.word	0x0800d620
 80043b8:	0800d624 	.word	0x0800d624
 80043bc:	0800d4c0 	.word	0x0800d4c0
 80043c0:	0800d4c4 	.word	0x0800d4c4
 80043c4:	0800d630 	.word	0x0800d630
 80043c8:	0800d638 	.word	0x0800d638
 80043cc:	0800d4b4 	.word	0x0800d4b4
 80043d0:	0800d640 	.word	0x0800d640
 80043d4:	0800d644 	.word	0x0800d644
 80043d8:	0800d650 	.word	0x0800d650
 80043dc:	0800d654 	.word	0x0800d654
 80043e0:	0800d658 	.word	0x0800d658
 80043e4:	0800d664 	.word	0x0800d664

080043e8 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 80043e8:	b084      	sub	sp, #16
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af02      	add	r7, sp, #8
 80043f0:	f107 0c18 	add.w	ip, r7, #24
 80043f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 80043f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043fa:	461a      	mov	r2, r3
 80043fc:	23fa      	movs	r3, #250	; 0xfa
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <Display_dab_digrad_status_data+0xec>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <Display_dab_digrad_status_data+0xec>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 8004426:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <Display_dab_digrad_status_data+0xf0>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 8331 	bne.w	8004a92 <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 8004430:	7e7b      	ldrb	r3, [r7, #25]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 800443c:	2302      	movs	r3, #2
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <Display_dab_digrad_status_data+0xf4>)
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004448:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800444c:	2117      	movs	r1, #23
 800444e:	2023      	movs	r0, #35	; 0x23
 8004450:	f7fc fb3a 	bl	8000ac8 <ILI9341_Draw_String>
 8004454:	e00b      	b.n	800446e <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004456:	2302      	movs	r3, #2
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <Display_dab_digrad_status_data+0xf4>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004462:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004466:	2117      	movs	r1, #23
 8004468:	2023      	movs	r0, #35	; 0x23
 800446a:	f7fc fb2d 	bl	8000ac8 <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 800446e:	7e7b      	ldrb	r3, [r7, #25]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 800447a:	2302      	movs	r3, #2
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <Display_dab_digrad_status_data+0xf8>)
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004486:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800448a:	2117      	movs	r1, #23
 800448c:	2085      	movs	r0, #133	; 0x85
 800448e:	f7fc fb1b 	bl	8000ac8 <ILI9341_Draw_String>
 8004492:	e00b      	b.n	80044ac <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004494:	2302      	movs	r3, #2
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <Display_dab_digrad_status_data+0xf8>)
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80044a4:	2117      	movs	r1, #23
 80044a6:	2085      	movs	r0, #133	; 0x85
 80044a8:	f7fc fb0e 	bl	8000ac8 <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 80044ac:	7e7b      	ldrb	r3, [r7, #25]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d017      	beq.n	80044e8 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 80044b8:	2302      	movs	r3, #2
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <Display_dab_digrad_status_data+0xfc>)
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044c4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80044c8:	2117      	movs	r1, #23
 80044ca:	20e4      	movs	r0, #228	; 0xe4
 80044cc:	f7fc fafc 	bl	8000ac8 <ILI9341_Draw_String>
 80044d0:	e016      	b.n	8004500 <Display_dab_digrad_status_data+0x118>
 80044d2:	bf00      	nop
 80044d4:	10624dd3 	.word	0x10624dd3
 80044d8:	200030bc 	.word	0x200030bc
 80044dc:	0800d674 	.word	0x0800d674
 80044e0:	0800d67c 	.word	0x0800d67c
 80044e4:	0800d684 	.word	0x0800d684
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 80044e8:	2302      	movs	r3, #2
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	4bb6      	ldr	r3, [pc, #728]	; (80047c8 <Display_dab_digrad_status_data+0x3e0>)
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044f4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80044f8:	2117      	movs	r1, #23
 80044fa:	20e4      	movs	r0, #228	; 0xe4
 80044fc:	f7fc fae4 	bl	8000ac8 <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 8004500:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004504:	2b0d      	cmp	r3, #13
 8004506:	dc02      	bgt.n	800450e <Display_dab_digrad_status_data+0x126>
 8004508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800450c:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 800450e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004512:	2b1a      	cmp	r3, #26
 8004514:	dc06      	bgt.n	8004524 <Display_dab_digrad_status_data+0x13c>
 8004516:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800451a:	2b0d      	cmp	r3, #13
 800451c:	dd02      	ble.n	8004524 <Display_dab_digrad_status_data+0x13c>
 800451e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004522:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004524:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004528:	2b27      	cmp	r3, #39	; 0x27
 800452a:	dc06      	bgt.n	800453a <Display_dab_digrad_status_data+0x152>
 800452c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004530:	2b1a      	cmp	r3, #26
 8004532:	dd02      	ble.n	800453a <Display_dab_digrad_status_data+0x152>
 8004534:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004538:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 800453a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800453e:	2b34      	cmp	r3, #52	; 0x34
 8004540:	dc06      	bgt.n	8004550 <Display_dab_digrad_status_data+0x168>
 8004542:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004546:	2b27      	cmp	r3, #39	; 0x27
 8004548:	dd02      	ble.n	8004550 <Display_dab_digrad_status_data+0x168>
 800454a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800454e:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 8004550:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004554:	2b34      	cmp	r3, #52	; 0x34
 8004556:	dd02      	ble.n	800455e <Display_dab_digrad_status_data+0x176>
 8004558:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800455c:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 800455e:	2302      	movs	r3, #2
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	4b9a      	ldr	r3, [pc, #616]	; (80047cc <Display_dab_digrad_status_data+0x3e4>)
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800456a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800456e:	2130      	movs	r1, #48	; 0x30
 8004570:	2032      	movs	r0, #50	; 0x32
 8004572:	f7fc faa9 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004576:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800457a:	220a      	movs	r2, #10
 800457c:	4994      	ldr	r1, [pc, #592]	; (80047d0 <Display_dab_digrad_status_data+0x3e8>)
 800457e:	4618      	mov	r0, r3
 8004580:	f008 f870 	bl	800c664 <itoa>
 8004584:	4603      	mov	r3, r0
 8004586:	2202      	movs	r2, #2
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004594:	2130      	movs	r1, #48	; 0x30
 8004596:	2032      	movs	r0, #50	; 0x32
 8004598:	f7fc fa96 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 800459c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80045a0:	461a      	mov	r2, r3
 80045a2:	23b4      	movs	r3, #180	; 0xb4
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	da00      	bge.n	80045ae <Display_dab_digrad_status_data+0x1c6>
 80045ac:	333f      	adds	r3, #63	; 0x3f
 80045ae:	119b      	asrs	r3, r3, #6
 80045b0:	3382      	adds	r3, #130	; 0x82
 80045b2:	461a      	mov	r2, r3
 80045b4:	233c      	movs	r3, #60	; 0x3c
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	2232      	movs	r2, #50	; 0x32
 80045bc:	2182      	movs	r1, #130	; 0x82
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7fc f9e0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 80045c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80045c8:	461a      	mov	r2, r3
 80045ca:	23b4      	movs	r3, #180	; 0xb4
 80045cc:	fb02 f303 	mul.w	r3, r2, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	da00      	bge.n	80045d6 <Display_dab_digrad_status_data+0x1ee>
 80045d4:	333f      	adds	r3, #63	; 0x3f
 80045d6:	119b      	asrs	r3, r3, #6
 80045d8:	3382      	adds	r3, #130	; 0x82
 80045da:	4619      	mov	r1, r3
 80045dc:	233c      	movs	r3, #60	; 0x3c
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80045e4:	2232      	movs	r2, #50	; 0x32
 80045e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80045ea:	f7fc f9cb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 80045ee:	7efb      	ldrb	r3, [r7, #27]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d802      	bhi.n	80045fa <Display_dab_digrad_status_data+0x212>
 80045f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045f8:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 80045fa:	7efb      	ldrb	r3, [r7, #27]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d805      	bhi.n	800460c <Display_dab_digrad_status_data+0x224>
 8004600:	7efb      	ldrb	r3, [r7, #27]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d902      	bls.n	800460c <Display_dab_digrad_status_data+0x224>
 8004606:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800460a:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 800460c:	7efb      	ldrb	r3, [r7, #27]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d805      	bhi.n	800461e <Display_dab_digrad_status_data+0x236>
 8004612:	7efb      	ldrb	r3, [r7, #27]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d902      	bls.n	800461e <Display_dab_digrad_status_data+0x236>
 8004618:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800461c:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 800461e:	7efb      	ldrb	r3, [r7, #27]
 8004620:	2b10      	cmp	r3, #16
 8004622:	d805      	bhi.n	8004630 <Display_dab_digrad_status_data+0x248>
 8004624:	7efb      	ldrb	r3, [r7, #27]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d902      	bls.n	8004630 <Display_dab_digrad_status_data+0x248>
 800462a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800462e:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8004630:	7efb      	ldrb	r3, [r7, #27]
 8004632:	2b10      	cmp	r3, #16
 8004634:	d902      	bls.n	800463c <Display_dab_digrad_status_data+0x254>
 8004636:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800463a:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 800463c:	2302      	movs	r3, #2
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b62      	ldr	r3, [pc, #392]	; (80047cc <Display_dab_digrad_status_data+0x3e4>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464c:	2149      	movs	r1, #73	; 0x49
 800464e:	2032      	movs	r0, #50	; 0x32
 8004650:	f7fc fa3a 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004654:	7efb      	ldrb	r3, [r7, #27]
 8004656:	220a      	movs	r2, #10
 8004658:	495d      	ldr	r1, [pc, #372]	; (80047d0 <Display_dab_digrad_status_data+0x3e8>)
 800465a:	4618      	mov	r0, r3
 800465c:	f008 f802 	bl	800c664 <itoa>
 8004660:	4603      	mov	r3, r0
 8004662:	2202      	movs	r2, #2
 8004664:	9201      	str	r2, [sp, #4]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800466c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004670:	2149      	movs	r1, #73	; 0x49
 8004672:	2032      	movs	r0, #50	; 0x32
 8004674:	f7fc fa28 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004678:	7efb      	ldrb	r3, [r7, #27]
 800467a:	461a      	mov	r2, r3
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	3382      	adds	r3, #130	; 0x82
 8004684:	461a      	mov	r2, r3
 8004686:	2355      	movs	r3, #85	; 0x55
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	224b      	movs	r2, #75	; 0x4b
 800468e:	2182      	movs	r1, #130	; 0x82
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fc f977 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004696:	7efb      	ldrb	r3, [r7, #27]
 8004698:	461a      	mov	r2, r3
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	3382      	adds	r3, #130	; 0x82
 80046a2:	4619      	mov	r1, r3
 80046a4:	2355      	movs	r3, #85	; 0x55
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	f44f 739b 	mov.w	r3, #310	; 0x136
 80046ac:	224b      	movs	r2, #75	; 0x4b
 80046ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046b2:	f7fc f967 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 80046b6:	7f7b      	ldrb	r3, [r7, #29]
 80046b8:	2b0b      	cmp	r3, #11
 80046ba:	d802      	bhi.n	80046c2 <Display_dab_digrad_status_data+0x2da>
 80046bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046c0:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 80046c2:	7f7b      	ldrb	r3, [r7, #29]
 80046c4:	2b16      	cmp	r3, #22
 80046c6:	d805      	bhi.n	80046d4 <Display_dab_digrad_status_data+0x2ec>
 80046c8:	7f7b      	ldrb	r3, [r7, #29]
 80046ca:	2b0b      	cmp	r3, #11
 80046cc:	d902      	bls.n	80046d4 <Display_dab_digrad_status_data+0x2ec>
 80046ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80046d2:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 80046d4:	7f7b      	ldrb	r3, [r7, #29]
 80046d6:	2b21      	cmp	r3, #33	; 0x21
 80046d8:	d805      	bhi.n	80046e6 <Display_dab_digrad_status_data+0x2fe>
 80046da:	7f7b      	ldrb	r3, [r7, #29]
 80046dc:	2b16      	cmp	r3, #22
 80046de:	d902      	bls.n	80046e6 <Display_dab_digrad_status_data+0x2fe>
 80046e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046e4:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 80046e6:	7f7b      	ldrb	r3, [r7, #29]
 80046e8:	2b2c      	cmp	r3, #44	; 0x2c
 80046ea:	d805      	bhi.n	80046f8 <Display_dab_digrad_status_data+0x310>
 80046ec:	7f7b      	ldrb	r3, [r7, #29]
 80046ee:	2b21      	cmp	r3, #33	; 0x21
 80046f0:	d902      	bls.n	80046f8 <Display_dab_digrad_status_data+0x310>
 80046f2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046f6:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 80046f8:	7f7b      	ldrb	r3, [r7, #29]
 80046fa:	2b2c      	cmp	r3, #44	; 0x2c
 80046fc:	d902      	bls.n	8004704 <Display_dab_digrad_status_data+0x31c>
 80046fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004702:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004704:	2302      	movs	r3, #2
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <Display_dab_digrad_status_data+0x3e4>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004714:	2162      	movs	r1, #98	; 0x62
 8004716:	2032      	movs	r0, #50	; 0x32
 8004718:	f7fc f9d6 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 800471c:	7f7b      	ldrb	r3, [r7, #29]
 800471e:	220a      	movs	r2, #10
 8004720:	492b      	ldr	r1, [pc, #172]	; (80047d0 <Display_dab_digrad_status_data+0x3e8>)
 8004722:	4618      	mov	r0, r3
 8004724:	f007 ff9e 	bl	800c664 <itoa>
 8004728:	4603      	mov	r3, r0
 800472a:	2202      	movs	r2, #2
 800472c:	9201      	str	r2, [sp, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004738:	2162      	movs	r1, #98	; 0x62
 800473a:	2032      	movs	r0, #50	; 0x32
 800473c:	f7fc f9c4 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004740:	7f7b      	ldrb	r3, [r7, #29]
 8004742:	461a      	mov	r2, r3
 8004744:	23b4      	movs	r3, #180	; 0xb4
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <Display_dab_digrad_status_data+0x3ec>)
 800474c:	fb82 1203 	smull	r1, r2, r2, r3
 8004750:	1112      	asrs	r2, r2, #4
 8004752:	17db      	asrs	r3, r3, #31
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	3382      	adds	r3, #130	; 0x82
 8004758:	461a      	mov	r2, r3
 800475a:	236e      	movs	r3, #110	; 0x6e
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	2182      	movs	r1, #130	; 0x82
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7fc f90d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 800476a:	7f7b      	ldrb	r3, [r7, #29]
 800476c:	461a      	mov	r2, r3
 800476e:	23b4      	movs	r3, #180	; 0xb4
 8004770:	fb02 f303 	mul.w	r3, r2, r3
 8004774:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <Display_dab_digrad_status_data+0x3ec>)
 8004776:	fb82 1203 	smull	r1, r2, r2, r3
 800477a:	1112      	asrs	r2, r2, #4
 800477c:	17db      	asrs	r3, r3, #31
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	3382      	adds	r3, #130	; 0x82
 8004782:	4619      	mov	r1, r3
 8004784:	236e      	movs	r3, #110	; 0x6e
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	f44f 739b 	mov.w	r3, #310	; 0x136
 800478c:	2264      	movs	r2, #100	; 0x64
 800478e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004792:	f7fc f8f7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 8004796:	7f3b      	ldrb	r3, [r7, #28]
 8004798:	2b14      	cmp	r3, #20
 800479a:	d802      	bhi.n	80047a2 <Display_dab_digrad_status_data+0x3ba>
 800479c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047a0:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 80047a2:	7f3b      	ldrb	r3, [r7, #28]
 80047a4:	2b28      	cmp	r3, #40	; 0x28
 80047a6:	d805      	bhi.n	80047b4 <Display_dab_digrad_status_data+0x3cc>
 80047a8:	7f3b      	ldrb	r3, [r7, #28]
 80047aa:	2b14      	cmp	r3, #20
 80047ac:	d902      	bls.n	80047b4 <Display_dab_digrad_status_data+0x3cc>
 80047ae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80047b2:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 80047b4:	7f3b      	ldrb	r3, [r7, #28]
 80047b6:	2b3c      	cmp	r3, #60	; 0x3c
 80047b8:	d80e      	bhi.n	80047d8 <Display_dab_digrad_status_data+0x3f0>
 80047ba:	7f3b      	ldrb	r3, [r7, #28]
 80047bc:	2b28      	cmp	r3, #40	; 0x28
 80047be:	d90b      	bls.n	80047d8 <Display_dab_digrad_status_data+0x3f0>
 80047c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e007      	b.n	80047d8 <Display_dab_digrad_status_data+0x3f0>
 80047c8:	0800d684 	.word	0x0800d684
 80047cc:	0800d690 	.word	0x0800d690
 80047d0:	2000307c 	.word	0x2000307c
 80047d4:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 80047d8:	7f3b      	ldrb	r3, [r7, #28]
 80047da:	2b50      	cmp	r3, #80	; 0x50
 80047dc:	d805      	bhi.n	80047ea <Display_dab_digrad_status_data+0x402>
 80047de:	7f3b      	ldrb	r3, [r7, #28]
 80047e0:	2b3c      	cmp	r3, #60	; 0x3c
 80047e2:	d902      	bls.n	80047ea <Display_dab_digrad_status_data+0x402>
 80047e4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80047e8:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 80047ea:	7f3b      	ldrb	r3, [r7, #28]
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d902      	bls.n	80047f6 <Display_dab_digrad_status_data+0x40e>
 80047f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80047f4:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 80047f6:	2302      	movs	r3, #2
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	4ba9      	ldr	r3, [pc, #676]	; (8004aa0 <Display_dab_digrad_status_data+0x6b8>)
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004806:	217b      	movs	r1, #123	; 0x7b
 8004808:	204b      	movs	r0, #75	; 0x4b
 800480a:	f7fc f95d 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 800480e:	7f3b      	ldrb	r3, [r7, #28]
 8004810:	220a      	movs	r2, #10
 8004812:	49a4      	ldr	r1, [pc, #656]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 8004814:	4618      	mov	r0, r3
 8004816:	f007 ff25 	bl	800c664 <itoa>
 800481a:	4603      	mov	r3, r0
 800481c:	2202      	movs	r2, #2
 800481e:	9201      	str	r2, [sp, #4]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800482a:	217b      	movs	r1, #123	; 0x7b
 800482c:	204b      	movs	r0, #75	; 0x4b
 800482e:	f7fc f94b 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8004832:	7f3b      	ldrb	r3, [r7, #28]
 8004834:	461a      	mov	r2, r3
 8004836:	23b4      	movs	r3, #180	; 0xb4
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	4a9a      	ldr	r2, [pc, #616]	; (8004aa8 <Display_dab_digrad_status_data+0x6c0>)
 800483e:	fb82 1203 	smull	r1, r2, r2, r3
 8004842:	1152      	asrs	r2, r2, #5
 8004844:	17db      	asrs	r3, r3, #31
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	3382      	adds	r3, #130	; 0x82
 800484a:	461a      	mov	r2, r3
 800484c:	2387      	movs	r3, #135	; 0x87
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	227d      	movs	r2, #125	; 0x7d
 8004854:	2182      	movs	r1, #130	; 0x82
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7fc f894 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 800485c:	7f3b      	ldrb	r3, [r7, #28]
 800485e:	461a      	mov	r2, r3
 8004860:	23b4      	movs	r3, #180	; 0xb4
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	4a90      	ldr	r2, [pc, #576]	; (8004aa8 <Display_dab_digrad_status_data+0x6c0>)
 8004868:	fb82 1203 	smull	r1, r2, r2, r3
 800486c:	1152      	asrs	r2, r2, #5
 800486e:	17db      	asrs	r3, r3, #31
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	3382      	adds	r3, #130	; 0x82
 8004874:	4619      	mov	r1, r3
 8004876:	2387      	movs	r3, #135	; 0x87
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800487e:	227d      	movs	r2, #125	; 0x7d
 8004880:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004884:	f7fc f87e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	4a88      	ldr	r2, [pc, #544]	; (8004aac <Display_dab_digrad_status_data+0x6c4>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	220a      	movs	r2, #10
 8004894:	4983      	ldr	r1, [pc, #524]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 8004896:	4618      	mov	r0, r3
 8004898:	f007 fee4 	bl	800c664 <itoa>
 800489c:	4603      	mov	r3, r0
 800489e:	2202      	movs	r2, #2
 80048a0:	9201      	str	r2, [sp, #4]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ac:	2194      	movs	r1, #148	; 0x94
 80048ae:	205b      	movs	r0, #91	; 0x5b
 80048b0:	f7fc f90a 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	4b7d      	ldr	r3, [pc, #500]	; (8004aac <Display_dab_digrad_status_data+0x6c4>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	220a      	movs	r2, #10
 80048ca:	4976      	ldr	r1, [pc, #472]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 80048cc:	4618      	mov	r0, r3
 80048ce:	f007 fec9 	bl	800c664 <itoa>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2202      	movs	r2, #2
 80048d6:	9201      	str	r2, [sp, #4]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e2:	2194      	movs	r1, #148	; 0x94
 80048e4:	2078      	movs	r0, #120	; 0x78
 80048e6:	f7fc f8ef 	bl	8000ac8 <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 80048ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	d821      	bhi.n	8004936 <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 80048f2:	2302      	movs	r3, #2
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	4b6e      	ldr	r3, [pc, #440]	; (8004ab0 <Display_dab_digrad_status_data+0x6c8>)
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004902:	2194      	movs	r1, #148	; 0x94
 8004904:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004908:	f7fc f8de 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 800490c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004910:	220a      	movs	r2, #10
 8004912:	4964      	ldr	r1, [pc, #400]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 8004914:	4618      	mov	r0, r3
 8004916:	f007 fea5 	bl	800c664 <itoa>
 800491a:	4603      	mov	r3, r0
 800491c:	2202      	movs	r2, #2
 800491e:	9201      	str	r2, [sp, #4]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800492a:	2194      	movs	r1, #148	; 0x94
 800492c:	f240 1011 	movw	r0, #273	; 0x111
 8004930:	f7fc f8ca 	bl	8000ac8 <ILI9341_Draw_String>
 8004934:	e013      	b.n	800495e <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8004936:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800493a:	220a      	movs	r2, #10
 800493c:	4959      	ldr	r1, [pc, #356]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 800493e:	4618      	mov	r0, r3
 8004940:	f007 fe90 	bl	800c664 <itoa>
 8004944:	4603      	mov	r3, r0
 8004946:	2202      	movs	r2, #2
 8004948:	9201      	str	r2, [sp, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004954:	2194      	movs	r1, #148	; 0x94
 8004956:	f44f 7084 	mov.w	r0, #264	; 0x108
 800495a:	f7fc f8b5 	bl	8000ac8 <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	2b09      	cmp	r3, #9
 8004962:	d81d      	bhi.n	80049a0 <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8004964:	2302      	movs	r3, #2
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	4b52      	ldr	r3, [pc, #328]	; (8004ab4 <Display_dab_digrad_status_data+0x6cc>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004974:	21ad      	movs	r1, #173	; 0xad
 8004976:	204f      	movs	r0, #79	; 0x4f
 8004978:	f7fc f8a6 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	220a      	movs	r2, #10
 8004980:	4948      	ldr	r1, [pc, #288]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 8004982:	4618      	mov	r0, r3
 8004984:	f007 fe6e 	bl	800c664 <itoa>
 8004988:	4603      	mov	r3, r0
 800498a:	2202      	movs	r2, #2
 800498c:	9201      	str	r2, [sp, #4]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004998:	21ad      	movs	r1, #173	; 0xad
 800499a:	2057      	movs	r0, #87	; 0x57
 800499c:	f7fc f894 	bl	8000ac8 <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	2b09      	cmp	r3, #9
 80049a4:	d911      	bls.n	80049ca <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	220a      	movs	r2, #10
 80049aa:	493e      	ldr	r1, [pc, #248]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 80049ac:	4618      	mov	r0, r3
 80049ae:	f007 fe59 	bl	800c664 <itoa>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2202      	movs	r2, #2
 80049b6:	9201      	str	r2, [sp, #4]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049c2:	21ad      	movs	r1, #173	; 0xad
 80049c4:	204f      	movs	r0, #79	; 0x4f
 80049c6:	f7fc f87f 	bl	8000ac8 <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 80049ca:	2302      	movs	r3, #2
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <Display_dab_digrad_status_data+0x6d0>)
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049da:	21ad      	movs	r1, #173	; 0xad
 80049dc:	205f      	movs	r0, #95	; 0x5f
 80049de:	f7fc f873 	bl	8000ac8 <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 80049e2:	88bb      	ldrh	r3, [r7, #4]
 80049e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d023      	beq.n	8004a34 <Display_dab_digrad_status_data+0x64c>
 80049ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 80049f0:	4293      	cmp	r3, r2
 80049f2:	dc2c      	bgt.n	8004a4e <Display_dab_digrad_status_data+0x666>
 80049f4:	2bfa      	cmp	r3, #250	; 0xfa
 80049f6:	d003      	beq.n	8004a00 <Display_dab_digrad_status_data+0x618>
 80049f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049fc:	d00d      	beq.n	8004a1a <Display_dab_digrad_status_data+0x632>
 80049fe:	e026      	b.n	8004a4e <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8004a00:	2302      	movs	r3, #2
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <Display_dab_digrad_status_data+0x6d4>)
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a10:	21ad      	movs	r1, #173	; 0xad
 8004a12:	2067      	movs	r0, #103	; 0x67
 8004a14:	f7fc f858 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004a18:	e026      	b.n	8004a68 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <Display_dab_digrad_status_data+0x6d8>)
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2a:	21ad      	movs	r1, #173	; 0xad
 8004a2c:	2067      	movs	r0, #103	; 0x67
 8004a2e:	f7fc f84b 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004a32:	e019      	b.n	8004a68 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8004a34:	2302      	movs	r3, #2
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	4b22      	ldr	r3, [pc, #136]	; (8004ac4 <Display_dab_digrad_status_data+0x6dc>)
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a44:	21ad      	movs	r1, #173	; 0xad
 8004a46:	2067      	movs	r0, #103	; 0x67
 8004a48:	f7fc f83e 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004a4c:	e00c      	b.n	8004a68 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8004a4e:	2302      	movs	r3, #2
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <Display_dab_digrad_status_data+0x6e0>)
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a5e:	21ad      	movs	r1, #173	; 0xad
 8004a60:	2067      	movs	r0, #103	; 0x67
 8004a62:	f7fc f831 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004a66:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8004a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	220a      	movs	r2, #10
 8004a72:	490c      	ldr	r1, [pc, #48]	; (8004aa4 <Display_dab_digrad_status_data+0x6bc>)
 8004a74:	4618      	mov	r0, r3
 8004a76:	f007 fdf5 	bl	800c664 <itoa>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	9201      	str	r2, [sp, #4]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a8a:	21ad      	movs	r1, #173	; 0xad
 8004a8c:	20d7      	movs	r0, #215	; 0xd7
 8004a8e:	f7fc f81b 	bl	8000ac8 <ILI9341_Draw_String>
	}
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr
 8004aa0:	0800d690 	.word	0x0800d690
 8004aa4:	2000307c 	.word	0x2000307c
 8004aa8:	51eb851f 	.word	0x51eb851f
 8004aac:	10624dd3 	.word	0x10624dd3
 8004ab0:	0800d694 	.word	0x0800d694
 8004ab4:	0800d4bc 	.word	0x0800d4bc
 8004ab8:	0800d4c0 	.word	0x0800d4c0
 8004abc:	0800d698 	.word	0x0800d698
 8004ac0:	0800d69c 	.word	0x0800d69c
 8004ac4:	0800d6a0 	.word	0x0800d6a0
 8004ac8:	0800d6a4 	.word	0x0800d6a4

08004acc <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8004ad2:	f7fe fd7f 	bl	80035d4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <Display_settings_screen_background+0x1c4>)
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	2005      	movs	r0, #5
 8004ae8:	f7fb ffee 	bl	8000ac8 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8004aec:	2337      	movs	r3, #55	; 0x37
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	f240 133b 	movw	r3, #315	; 0x13b
 8004af4:	2214      	movs	r2, #20
 8004af6:	2105      	movs	r1, #5
 8004af8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004afc:	f7fb ff42 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8004b00:	2302      	movs	r3, #2
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	4b63      	ldr	r3, [pc, #396]	; (8004c94 <Display_settings_screen_background+0x1c8>)
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b10:	2116      	movs	r1, #22
 8004b12:	2037      	movs	r0, #55	; 0x37
 8004b14:	f7fb ffd8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 8004b18:	2302      	movs	r3, #2
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	4b5e      	ldr	r3, [pc, #376]	; (8004c98 <Display_settings_screen_background+0x1cc>)
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b28:	2116      	movs	r1, #22
 8004b2a:	20ce      	movs	r0, #206	; 0xce
 8004b2c:	f7fb ffcc 	bl	8000ac8 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8004b30:	2364      	movs	r3, #100	; 0x64
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	239d      	movs	r3, #157	; 0x9d
 8004b36:	223c      	movs	r2, #60	; 0x3c
 8004b38:	2105      	movs	r1, #5
 8004b3a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b3e:	f7fb ff21 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 8004b42:	2364      	movs	r3, #100	; 0x64
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f240 133b 	movw	r3, #315	; 0x13b
 8004b4a:	223c      	movs	r2, #60	; 0x3c
 8004b4c:	21a3      	movs	r1, #163	; 0xa3
 8004b4e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b52:	f7fb ff17 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 8004b56:	2302      	movs	r3, #2
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <Display_settings_screen_background+0x1d0>)
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b66:	2148      	movs	r1, #72	; 0x48
 8004b68:	2036      	movs	r0, #54	; 0x36
 8004b6a:	f7fb ffad 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8004b6e:	2302      	movs	r3, #2
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <Display_settings_screen_background+0x1d4>)
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b7e:	2148      	movs	r1, #72	; 0x48
 8004b80:	20d3      	movs	r0, #211	; 0xd3
 8004b82:	f7fb ffa1 	bl	8000ac8 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 8004b86:	2391      	movs	r3, #145	; 0x91
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	239d      	movs	r3, #157	; 0x9d
 8004b8c:	2269      	movs	r2, #105	; 0x69
 8004b8e:	2105      	movs	r1, #5
 8004b90:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b94:	f7fb fef6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8004b98:	2391      	movs	r3, #145	; 0x91
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	f240 133b 	movw	r3, #315	; 0x13b
 8004ba0:	2269      	movs	r2, #105	; 0x69
 8004ba2:	21a3      	movs	r1, #163	; 0xa3
 8004ba4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004ba8:	f7fb feec 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8004bac:	2302      	movs	r3, #2
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <Display_settings_screen_background+0x1d8>)
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bbc:	2175      	movs	r1, #117	; 0x75
 8004bbe:	2023      	movs	r0, #35	; 0x23
 8004bc0:	f7fb ff82 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <Display_settings_screen_background+0x1dc>)
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd4:	2175      	movs	r1, #117	; 0x75
 8004bd6:	20c1      	movs	r0, #193	; 0xc1
 8004bd8:	f7fb ff76 	bl	8000ac8 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8004bdc:	23be      	movs	r3, #190	; 0xbe
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	239d      	movs	r3, #157	; 0x9d
 8004be2:	2296      	movs	r2, #150	; 0x96
 8004be4:	2105      	movs	r1, #5
 8004be6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004bea:	f7fb fecb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 8004bee:	23be      	movs	r3, #190	; 0xbe
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	f240 133b 	movw	r3, #315	; 0x13b
 8004bf6:	2296      	movs	r2, #150	; 0x96
 8004bf8:	21a3      	movs	r1, #163	; 0xa3
 8004bfa:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004bfe:	f7fb fec1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 8004c02:	2302      	movs	r3, #2
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	4b29      	ldr	r3, [pc, #164]	; (8004cac <Display_settings_screen_background+0x1e0>)
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c12:	21a2      	movs	r1, #162	; 0xa2
 8004c14:	2020      	movs	r0, #32
 8004c16:	f7fb ff57 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <Display_settings_screen_background+0x1e4>)
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c2a:	21a2      	movs	r1, #162	; 0xa2
 8004c2c:	20a8      	movs	r0, #168	; 0xa8
 8004c2e:	f7fb ff4b 	bl	8000ac8 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004c32:	23eb      	movs	r3, #235	; 0xeb
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	239d      	movs	r3, #157	; 0x9d
 8004c38:	22c3      	movs	r2, #195	; 0xc3
 8004c3a:	2105      	movs	r1, #5
 8004c3c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004c40:	f7fb fea0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004c44:	23eb      	movs	r3, #235	; 0xeb
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	f240 133b 	movw	r3, #315	; 0x13b
 8004c4c:	22c3      	movs	r2, #195	; 0xc3
 8004c4e:	21a3      	movs	r1, #163	; 0xa3
 8004c50:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004c54:	f7fb fe96 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004c58:	2302      	movs	r3, #2
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <Display_settings_screen_background+0x1e8>)
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c68:	21cf      	movs	r1, #207	; 0xcf
 8004c6a:	2023      	movs	r0, #35	; 0x23
 8004c6c:	f7fb ff2c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8004c70:	2302      	movs	r3, #2
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <Display_settings_screen_background+0x1ec>)
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c80:	21cf      	movs	r1, #207	; 0xcf
 8004c82:	20c3      	movs	r0, #195	; 0xc3
 8004c84:	f7fb ff20 	bl	8000ac8 <ILI9341_Draw_String>

}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	0800d6a8 	.word	0x0800d6a8
 8004c94:	0800d6b8 	.word	0x0800d6b8
 8004c98:	0800d6c0 	.word	0x0800d6c0
 8004c9c:	0800d6cc 	.word	0x0800d6cc
 8004ca0:	0800d6d8 	.word	0x0800d6d8
 8004ca4:	0800d6e4 	.word	0x0800d6e4
 8004ca8:	0800d6f0 	.word	0x0800d6f0
 8004cac:	0800d6fc 	.word	0x0800d6fc
 8004cb0:	0800d70c 	.word	0x0800d70c
 8004cb4:	0800d664 	.word	0x0800d664
 8004cb8:	0800d658 	.word	0x0800d658

08004cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <MX_DMA_Init+0x3c>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <MX_DMA_Init+0x3c>)
 8004ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <MX_DMA_Init+0x3c>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	200f      	movs	r0, #15
 8004ce4:	f001 fdc7 	bl	8006876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004ce8:	200f      	movs	r0, #15
 8004cea:	f001 fde0 	bl	80068ae <HAL_NVIC_EnableIRQ>

}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 8004d00:	bf00      	nop
 8004d02:	f001 fcad 	bl	8006660 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <eeprom_wait+0x1c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b14      	cmp	r3, #20
 8004d10:	d9f7      	bls.n	8004d02 <eeprom_wait+0x6>
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	200030c0 	.word	0x200030c0

08004d1c <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8004d28:	f7ff ffe8 	bl	8004cfc <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d38:	9102      	str	r1, [sp, #8]
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2302      	movs	r3, #2
 8004d42:	21a0      	movs	r1, #160	; 0xa0
 8004d44:	4803      	ldr	r0, [pc, #12]	; (8004d54 <eeprom_read+0x38>)
 8004d46:	f002 fcf3 	bl	8007730 <HAL_I2C_Mem_Read>
 8004d4a:	4603      	mov	r3, r0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200030c4 	.word	0x200030c4

08004d58 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8004d64:	f7ff ffca 	bl	8004cfc <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d74:	9102      	str	r1, [sp, #8]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	21a0      	movs	r1, #160	; 0xa0
 8004d80:	4807      	ldr	r0, [pc, #28]	; (8004da0 <eeprom_write+0x48>)
 8004d82:	f002 fbdb 	bl	800753c <HAL_I2C_Mem_Write>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8004d8a:	f001 fc69 	bl	8006660 <HAL_GetTick>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <eeprom_write+0x4c>)
 8004d92:	6013      	str	r3, [r2, #0]

    return rc;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200030c4 	.word	0x200030c4
 8004da4:	200030c0 	.word	0x200030c0

08004da8 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b092      	sub	sp, #72	; 0x48
 8004dac:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 8004dae:	2101      	movs	r1, #1
 8004db0:	4829      	ldr	r0, [pc, #164]	; (8004e58 <eeprom_clear_scanning_data+0xb0>)
 8004db2:	f7fe fbe9 	bl	8003588 <send_debug_msg>

	 uint8_t clear_page_sequence[64];

	 for (uint8_t i = 0; i < 64; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004dbc:	e00b      	b.n	8004dd6 <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 8004dbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dc2:	3348      	adds	r3, #72	; 0x48
 8004dc4:	443b      	add	r3, r7
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	f803 2c44 	strb.w	r2, [r3, #-68]
	 for (uint8_t i = 0; i < 64; i++)
 8004dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004dd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dda:	2b3f      	cmp	r3, #63	; 0x3f
 8004ddc:	d9ef      	bls.n	8004dbe <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	2240      	movs	r2, #64	; 0x40
 8004de2:	4619      	mov	r1, r3
 8004de4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004de8:	f7ff ffb6 	bl	8004d58 <eeprom_write>


	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004df2:	e00e      	b.n	8004e12 <eeprom_clear_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 8004df4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004df8:	3305      	adds	r3, #5
 8004dfa:	019b      	lsls	r3, r3, #6
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	2240      	movs	r2, #64	; 0x40
 8004e02:	4619      	mov	r1, r3
 8004e04:	f7ff ffa8 	bl	8004d58 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 8004e08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004e12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e16:	2b09      	cmp	r3, #9
 8004e18:	d9ec      	bls.n	8004df4 <eeprom_clear_scanning_data+0x4c>
	}

	//clear services list
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004e20:	e00e      	b.n	8004e40 <eeprom_clear_scanning_data+0x98>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 8004e22:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004e26:	330f      	adds	r3, #15
 8004e28:	019b      	lsls	r3, r3, #6
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	4619      	mov	r1, r3
 8004e32:	f7ff ff91 	bl	8004d58 <eeprom_write>
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 8004e36:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004e40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004e44:	2b63      	cmp	r3, #99	; 0x63
 8004e46:	d9ec      	bls.n	8004e22 <eeprom_clear_scanning_data+0x7a>
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	4804      	ldr	r0, [pc, #16]	; (8004e5c <eeprom_clear_scanning_data+0xb4>)
 8004e4c:	f7fe fb9c 	bl	8003588 <send_debug_msg>
}
 8004e50:	bf00      	nop
 8004e52:	3748      	adds	r7, #72	; 0x48
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	0800d7e4 	.word	0x0800d7e4
 8004e5c:	0800d804 	.word	0x0800d804

08004e60 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	72fb      	strb	r3, [r7, #11]
 8004e70:	4613      	mov	r3, r2
 8004e72:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8004e74:	2101      	movs	r1, #1
 8004e76:	4824      	ldr	r0, [pc, #144]	; (8004f08 <eeprom_save_scanning_data+0xa8>)
 8004e78:	f7fe fb86 	bl	8003588 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8004e7c:	f107 030a 	add.w	r3, r7, #10
 8004e80:	2201      	movs	r2, #1
 8004e82:	4619      	mov	r1, r3
 8004e84:	f240 1005 	movw	r0, #261	; 0x105
 8004e88:	f7ff ff66 	bl	8004d58 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8004e8c:	f107 030b 	add.w	r3, r7, #11
 8004e90:	2201      	movs	r2, #1
 8004e92:	4619      	mov	r1, r3
 8004e94:	f44f 7083 	mov.w	r0, #262	; 0x106
 8004e98:	f7ff ff5e 	bl	8004d58 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	75fb      	strb	r3, [r7, #23]
 8004ea0:	e00e      	b.n	8004ec0 <eeprom_save_scanning_data+0x60>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	3305      	adds	r3, #5
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	015b      	lsls	r3, r3, #5
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f7ff ff4f 	bl	8004d58 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
 8004ec0:	7abb      	ldrb	r3, [r7, #10]
 8004ec2:	7dfa      	ldrb	r2, [r7, #23]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d3ec      	bcc.n	8004ea2 <eeprom_save_scanning_data+0x42>
	}

	//save services
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75bb      	strb	r3, [r7, #22]
 8004ecc:	e010      	b.n	8004ef0 <eeprom_save_scanning_data+0x90>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE, &_services_list[services_index], sizeof(dab_service_t));
 8004ece:	7dbb      	ldrb	r3, [r7, #22]
 8004ed0:	330f      	adds	r3, #15
 8004ed2:	019b      	lsls	r3, r3, #6
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	7dbb      	ldrb	r3, [r7, #22]
 8004ed8:	2234      	movs	r2, #52	; 0x34
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	2234      	movs	r2, #52	; 0x34
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	f7ff ff37 	bl	8004d58 <eeprom_write>
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8004eea:	7dbb      	ldrb	r3, [r7, #22]
 8004eec:	3301      	adds	r3, #1
 8004eee:	75bb      	strb	r3, [r7, #22]
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
 8004ef2:	7dba      	ldrb	r2, [r7, #22]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3ea      	bcc.n	8004ece <eeprom_save_scanning_data+0x6e>
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 8004ef8:	2101      	movs	r1, #1
 8004efa:	4804      	ldr	r0, [pc, #16]	; (8004f0c <eeprom_save_scanning_data+0xac>)
 8004efc:	f7fe fb44 	bl	8003588 <send_debug_msg>
}
 8004f00:	bf00      	nop
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0800d810 	.word	0x0800d810
 8004f0c:	0800d82c 	.word	0x0800d82c

08004f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08c      	sub	sp, #48	; 0x30
 8004f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f16:	f107 031c 	add.w	r3, r7, #28
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	4b6c      	ldr	r3, [pc, #432]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f34:	6313      	str	r3, [r2, #48]	; 0x30
 8004f36:	4b69      	ldr	r3, [pc, #420]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	4b65      	ldr	r3, [pc, #404]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a64      	ldr	r2, [pc, #400]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b62      	ldr	r3, [pc, #392]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	4b5e      	ldr	r3, [pc, #376]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	4a5d      	ldr	r2, [pc, #372]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	4b57      	ldr	r3, [pc, #348]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a56      	ldr	r2, [pc, #344]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b54      	ldr	r3, [pc, #336]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a4f      	ldr	r2, [pc, #316]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004fa0:	f043 0310 	orr.w	r3, r3, #16
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	4b49      	ldr	r3, [pc, #292]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	4a48      	ldr	r2, [pc, #288]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004fbc:	f043 0308 	orr.w	r3, r3, #8
 8004fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc2:	4b46      	ldr	r3, [pc, #280]	; (80050dc <MX_GPIO_Init+0x1cc>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2130      	movs	r1, #48	; 0x30
 8004fd2:	4843      	ldr	r0, [pc, #268]	; (80050e0 <MX_GPIO_Init+0x1d0>)
 8004fd4:	f002 f954 	bl	8007280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fde:	4841      	ldr	r0, [pc, #260]	; (80050e4 <MX_GPIO_Init+0x1d4>)
 8004fe0:	f002 f94e 	bl	8007280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f24f 7180 	movw	r1, #63360	; 0xf780
 8004fea:	483f      	ldr	r0, [pc, #252]	; (80050e8 <MX_GPIO_Init+0x1d8>)
 8004fec:	f002 f948 	bl	8007280 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2128      	movs	r1, #40	; 0x28
 8004ff4:	483d      	ldr	r0, [pc, #244]	; (80050ec <MX_GPIO_Init+0x1dc>)
 8004ff6:	f002 f943 	bl	8007280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8005006:	f107 031c 	add.w	r3, r7, #28
 800500a:	4619      	mov	r1, r3
 800500c:	4838      	ldr	r0, [pc, #224]	; (80050f0 <MX_GPIO_Init+0x1e0>)
 800500e:	f001 ff83 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8005012:	2330      	movs	r3, #48	; 0x30
 8005014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800501e:	2302      	movs	r3, #2
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005022:	f107 031c 	add.w	r3, r7, #28
 8005026:	4619      	mov	r1, r3
 8005028:	482d      	ldr	r0, [pc, #180]	; (80050e0 <MX_GPIO_Init+0x1d0>)
 800502a:	f001 ff75 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 800502e:	2311      	movs	r3, #17
 8005030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005032:	2300      	movs	r3, #0
 8005034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503a:	f107 031c 	add.w	r3, r7, #28
 800503e:	4619      	mov	r1, r3
 8005040:	482a      	ldr	r0, [pc, #168]	; (80050ec <MX_GPIO_Init+0x1dc>)
 8005042:	f001 ff69 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8005046:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800504a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800504c:	2301      	movs	r3, #1
 800504e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005054:	2300      	movs	r3, #0
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	4619      	mov	r1, r3
 800505e:	4821      	ldr	r0, [pc, #132]	; (80050e4 <MX_GPIO_Init+0x1d4>)
 8005060:	f001 ff5a 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8005064:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8005068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800506a:	2301      	movs	r3, #1
 800506c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005072:	2302      	movs	r3, #2
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005076:	f107 031c 	add.w	r3, r7, #28
 800507a:	4619      	mov	r1, r3
 800507c:	481a      	ldr	r0, [pc, #104]	; (80050e8 <MX_GPIO_Init+0x1d8>)
 800507e:	f001 ff4b 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005082:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005088:	2301      	movs	r3, #1
 800508a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005090:	2300      	movs	r3, #0
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005094:	f107 031c 	add.w	r3, r7, #28
 8005098:	4619      	mov	r1, r3
 800509a:	4813      	ldr	r0, [pc, #76]	; (80050e8 <MX_GPIO_Init+0x1d8>)
 800509c:	f001 ff3c 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80050ac:	f107 031c 	add.w	r3, r7, #28
 80050b0:	4619      	mov	r1, r3
 80050b2:	480d      	ldr	r0, [pc, #52]	; (80050e8 <MX_GPIO_Init+0x1d8>)
 80050b4:	f001 ff30 	bl	8006f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80050b8:	2328      	movs	r3, #40	; 0x28
 80050ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050bc:	2301      	movs	r3, #1
 80050be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050c4:	2302      	movs	r3, #2
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	4619      	mov	r1, r3
 80050ce:	4807      	ldr	r0, [pc, #28]	; (80050ec <MX_GPIO_Init+0x1dc>)
 80050d0:	f001 ff22 	bl	8006f18 <HAL_GPIO_Init>

}
 80050d4:	bf00      	nop
 80050d6:	3730      	adds	r7, #48	; 0x30
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40020800 	.word	0x40020800
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40020c00 	.word	0x40020c00
 80050ec:	40020400 	.word	0x40020400
 80050f0:	40020000 	.word	0x40020000

080050f4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <MX_I2C1_Init+0x50>)
 80050fa:	4a13      	ldr	r2, [pc, #76]	; (8005148 <MX_I2C1_Init+0x54>)
 80050fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <MX_I2C1_Init+0x50>)
 8005100:	4a12      	ldr	r2, [pc, #72]	; (800514c <MX_I2C1_Init+0x58>)
 8005102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <MX_I2C1_Init+0x50>)
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <MX_I2C1_Init+0x50>)
 800510c:	2200      	movs	r2, #0
 800510e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <MX_I2C1_Init+0x50>)
 8005112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <MX_I2C1_Init+0x50>)
 800511a:	2200      	movs	r2, #0
 800511c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <MX_I2C1_Init+0x50>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <MX_I2C1_Init+0x50>)
 8005126:	2200      	movs	r2, #0
 8005128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <MX_I2C1_Init+0x50>)
 800512c:	2200      	movs	r2, #0
 800512e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005130:	4804      	ldr	r0, [pc, #16]	; (8005144 <MX_I2C1_Init+0x50>)
 8005132:	f002 f8bf 	bl	80072b4 <HAL_I2C_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800513c:	f000 f982 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005140:	bf00      	nop
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200030c4 	.word	0x200030c4
 8005148:	40005400 	.word	0x40005400
 800514c:	000186a0 	.word	0x000186a0

08005150 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <MX_I2C3_Init+0x50>)
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <MX_I2C3_Init+0x54>)
 8005158:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <MX_I2C3_Init+0x50>)
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <MX_I2C3_Init+0x58>)
 800515e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <MX_I2C3_Init+0x50>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <MX_I2C3_Init+0x50>)
 8005168:	2200      	movs	r2, #0
 800516a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <MX_I2C3_Init+0x50>)
 800516e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005172:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <MX_I2C3_Init+0x50>)
 8005176:	2200      	movs	r2, #0
 8005178:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <MX_I2C3_Init+0x50>)
 800517c:	2200      	movs	r2, #0
 800517e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <MX_I2C3_Init+0x50>)
 8005182:	2200      	movs	r2, #0
 8005184:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <MX_I2C3_Init+0x50>)
 8005188:	2200      	movs	r2, #0
 800518a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800518c:	4804      	ldr	r0, [pc, #16]	; (80051a0 <MX_I2C3_Init+0x50>)
 800518e:	f002 f891 	bl	80072b4 <HAL_I2C_Init>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005198:	f000 f954 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800519c:	bf00      	nop
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20003118 	.word	0x20003118
 80051a4:	40005c00 	.word	0x40005c00
 80051a8:	000186a0 	.word	0x000186a0

080051ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a4a      	ldr	r2, [pc, #296]	; (80052f4 <HAL_I2C_MspInit+0x148>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d12c      	bne.n	8005228 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	4a48      	ldr	r2, [pc, #288]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	6313      	str	r3, [r2, #48]	; 0x30
 80051de:	4b46      	ldr	r3, [pc, #280]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80051ea:	23c0      	movs	r3, #192	; 0xc0
 80051ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051ee:	2312      	movs	r3, #18
 80051f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f6:	2303      	movs	r3, #3
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051fa:	2304      	movs	r3, #4
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051fe:	f107 031c 	add.w	r3, r7, #28
 8005202:	4619      	mov	r1, r3
 8005204:	483d      	ldr	r0, [pc, #244]	; (80052fc <HAL_I2C_MspInit+0x150>)
 8005206:	f001 fe87 	bl	8006f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	4b3a      	ldr	r3, [pc, #232]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b37      	ldr	r3, [pc, #220]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005226:	e060      	b.n	80052ea <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a34      	ldr	r2, [pc, #208]	; (8005300 <HAL_I2C_MspInit+0x154>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d15b      	bne.n	80052ea <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	4a2f      	ldr	r2, [pc, #188]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	6313      	str	r3, [r2, #48]	; 0x30
 8005242:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6313      	str	r3, [r2, #48]	; 0x30
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 800526a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800526e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005270:	2312      	movs	r3, #18
 8005272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005278:	2303      	movs	r3, #3
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800527c:	2304      	movs	r3, #4
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005280:	f107 031c 	add.w	r3, r7, #28
 8005284:	4619      	mov	r1, r3
 8005286:	481f      	ldr	r0, [pc, #124]	; (8005304 <HAL_I2C_MspInit+0x158>)
 8005288:	f001 fe46 	bl	8006f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 800528c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005292:	2312      	movs	r3, #18
 8005294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800529a:	2303      	movs	r3, #3
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800529e:	2304      	movs	r3, #4
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80052a2:	f107 031c 	add.w	r3, r7, #28
 80052a6:	4619      	mov	r1, r3
 80052a8:	4817      	ldr	r0, [pc, #92]	; (8005308 <HAL_I2C_MspInit+0x15c>)
 80052aa:	f001 fe35 	bl	8006f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 80052b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052bc:	6413      	str	r3, [r2, #64]	; 0x40
 80052be:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_I2C_MspInit+0x14c>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2100      	movs	r1, #0
 80052ce:	2048      	movs	r0, #72	; 0x48
 80052d0:	f001 fad1 	bl	8006876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80052d4:	2048      	movs	r0, #72	; 0x48
 80052d6:	f001 faea 	bl	80068ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80052da:	2200      	movs	r2, #0
 80052dc:	2100      	movs	r1, #0
 80052de:	2049      	movs	r0, #73	; 0x49
 80052e0:	f001 fac9 	bl	8006876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80052e4:	2049      	movs	r0, #73	; 0x49
 80052e6:	f001 fae2 	bl	80068ae <HAL_NVIC_EnableIRQ>
}
 80052ea:	bf00      	nop
 80052ec:	3730      	adds	r7, #48	; 0x30
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40005400 	.word	0x40005400
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40020400 	.word	0x40020400
 8005300:	40005c00 	.word	0x40005c00
 8005304:	40020800 	.word	0x40020800
 8005308:	40020000 	.word	0x40020000

0800530c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005310:	f001 f940 	bl	8006594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005314:	f000 f82c 	bl	8005370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005318:	f7ff fdfa 	bl	8004f10 <MX_GPIO_Init>
  MX_DMA_Init();
 800531c:	f7ff fcce 	bl	8004cbc <MX_DMA_Init>
  MX_I2C1_Init();
 8005320:	f7ff fee8 	bl	80050f4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005324:	f7ff ff14 	bl	8005150 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005328:	f000 f892 	bl	8005450 <MX_SPI1_Init>
  MX_SPI2_Init();
 800532c:	f000 f8c6 	bl	80054bc <MX_SPI2_Init>
  MX_TIM3_Init();
 8005330:	f000 fcb6 	bl	8005ca0 <MX_TIM3_Init>
  MX_UART5_Init();
 8005334:	f001 f810 	bl	8006358 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005338:	f001 f838 	bl	80063ac <MX_USART3_UART_Init>
  MX_TIM10_Init();
 800533c:	f000 fd0a 	bl	8005d54 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005340:	f000 fd2c 	bl	8005d9c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005344:	2101      	movs	r1, #1
 8005346:	4808      	ldr	r0, [pc, #32]	; (8005368 <main+0x5c>)
 8005348:	f7fe f91e 	bl	8003588 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <main+0x60>)
 800534e:	f005 fff9 	bl	800b344 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005352:	f7fb f8c3 	bl	80004dc <ILI9341_Init>
  Display_booting_screen();
 8005356:	f7fe f951 	bl	80035fc <Display_booting_screen>

  Si468x_dab_init();
 800535a:	f7fb fe7f 	bl	800105c <Si468x_dab_init>
  restore_from_eeprom();
 800535e:	f7fd fdeb 	bl	8002f38 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005362:	f000 f999 	bl	8005698 <state_machine>
 8005366:	e7fc      	b.n	8005362 <main+0x56>
 8005368:	0800da54 	.word	0x0800da54
 800536c:	20003354 	.word	0x20003354

08005370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b094      	sub	sp, #80	; 0x50
 8005374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005376:	f107 0320 	add.w	r3, r7, #32
 800537a:	2230      	movs	r2, #48	; 0x30
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f007 f972 	bl	800c668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <SystemClock_Config+0xcc>)
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	4a27      	ldr	r2, [pc, #156]	; (800543c <SystemClock_Config+0xcc>)
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a2:	6413      	str	r3, [r2, #64]	; 0x40
 80053a4:	4b25      	ldr	r3, [pc, #148]	; (800543c <SystemClock_Config+0xcc>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053b0:	2300      	movs	r3, #0
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	4b22      	ldr	r3, [pc, #136]	; (8005440 <SystemClock_Config+0xd0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a21      	ldr	r2, [pc, #132]	; (8005440 <SystemClock_Config+0xd0>)
 80053ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <SystemClock_Config+0xd0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053d6:	2302      	movs	r3, #2
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053e0:	2304      	movs	r3, #4
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 80053e4:	23f0      	movs	r3, #240	; 0xf0
 80053e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053e8:	2302      	movs	r3, #2
 80053ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80053ec:	2304      	movs	r3, #4
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053f0:	f107 0320 	add.w	r3, r7, #32
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 fbf7 	bl	8009be8 <HAL_RCC_OscConfig>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005400:	f000 f820 	bl	8005444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005404:	230f      	movs	r3, #15
 8005406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005408:	2302      	movs	r3, #2
 800540a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005410:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800541a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	2105      	movs	r1, #5
 8005422:	4618      	mov	r0, r3
 8005424:	f004 fe58 	bl	800a0d8 <HAL_RCC_ClockConfig>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800542e:	f000 f809 	bl	8005444 <Error_Handler>
  }
}
 8005432:	bf00      	nop
 8005434:	3750      	adds	r7, #80	; 0x50
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	40007000 	.word	0x40007000

08005444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005448:	b672      	cpsid	i
}
 800544a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800544c:	e7fe      	b.n	800544c <Error_Handler+0x8>
	...

08005450 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005454:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <MX_SPI1_Init+0x68>)
 8005458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <MX_SPI1_Init+0x64>)
 800545c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005462:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <MX_SPI1_Init+0x64>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005470:	2200      	movs	r2, #0
 8005472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005476:	2200      	movs	r2, #0
 8005478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <MX_SPI1_Init+0x64>)
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005484:	2220      	movs	r2, #32
 8005486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <MX_SPI1_Init+0x64>)
 800548a:	2200      	movs	r2, #0
 800548c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005490:	2200      	movs	r2, #0
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <MX_SPI1_Init+0x64>)
 8005496:	2200      	movs	r2, #0
 8005498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <MX_SPI1_Init+0x64>)
 800549c:	220a      	movs	r2, #10
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80054a0:	4804      	ldr	r0, [pc, #16]	; (80054b4 <MX_SPI1_Init+0x64>)
 80054a2:	f005 f839 	bl	800a518 <HAL_SPI_Init>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80054ac:	f7ff ffca 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000316c 	.word	0x2000316c
 80054b8:	40013000 	.word	0x40013000

080054bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <MX_SPI2_Init+0x64>)
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <MX_SPI2_Init+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <MX_SPI2_Init+0x64>)
 80054c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <MX_SPI2_Init+0x64>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <MX_SPI2_Init+0x64>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <MX_SPI2_Init+0x64>)
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <MX_SPI2_Init+0x64>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <MX_SPI2_Init+0x64>)
 80054e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <MX_SPI2_Init+0x64>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <MX_SPI2_Init+0x64>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <MX_SPI2_Init+0x64>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <MX_SPI2_Init+0x64>)
 8005502:	2200      	movs	r2, #0
 8005504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <MX_SPI2_Init+0x64>)
 8005508:	220a      	movs	r2, #10
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800550c:	4804      	ldr	r0, [pc, #16]	; (8005520 <MX_SPI2_Init+0x64>)
 800550e:	f005 f803 	bl	800a518 <HAL_SPI_Init>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005518:	f7ff ff94 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200031c4 	.word	0x200031c4
 8005524:	40003800 	.word	0x40003800

08005528 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08c      	sub	sp, #48	; 0x30
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005530:	f107 031c 	add.w	r3, r7, #28
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a4d      	ldr	r2, [pc, #308]	; (800567c <HAL_SPI_MspInit+0x154>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d12c      	bne.n	80055a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <HAL_SPI_MspInit+0x158>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	4a4b      	ldr	r2, [pc, #300]	; (8005680 <HAL_SPI_MspInit+0x158>)
 8005554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005558:	6453      	str	r3, [r2, #68]	; 0x44
 800555a:	4b49      	ldr	r3, [pc, #292]	; (8005680 <HAL_SPI_MspInit+0x158>)
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <HAL_SPI_MspInit+0x158>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	4a44      	ldr	r2, [pc, #272]	; (8005680 <HAL_SPI_MspInit+0x158>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6313      	str	r3, [r2, #48]	; 0x30
 8005576:	4b42      	ldr	r3, [pc, #264]	; (8005680 <HAL_SPI_MspInit+0x158>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005582:	23e0      	movs	r3, #224	; 0xe0
 8005584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005586:	2302      	movs	r3, #2
 8005588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558e:	2303      	movs	r3, #3
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005592:	2305      	movs	r3, #5
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005596:	f107 031c 	add.w	r3, r7, #28
 800559a:	4619      	mov	r1, r3
 800559c:	4839      	ldr	r0, [pc, #228]	; (8005684 <HAL_SPI_MspInit+0x15c>)
 800559e:	f001 fcbb 	bl	8006f18 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80055a2:	e066      	b.n	8005672 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <HAL_SPI_MspInit+0x160>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d161      	bne.n	8005672 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <HAL_SPI_MspInit+0x158>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	4a32      	ldr	r2, [pc, #200]	; (8005680 <HAL_SPI_MspInit+0x158>)
 80055b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055bc:	6413      	str	r3, [r2, #64]	; 0x40
 80055be:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_SPI_MspInit+0x158>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_SPI_MspInit+0x158>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <HAL_SPI_MspInit+0x158>)
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	6313      	str	r3, [r2, #48]	; 0x30
 80055da:	4b29      	ldr	r3, [pc, #164]	; (8005680 <HAL_SPI_MspInit+0x158>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80055e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80055ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f4:	2303      	movs	r3, #3
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055f8:	2305      	movs	r3, #5
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fc:	f107 031c 	add.w	r3, r7, #28
 8005600:	4619      	mov	r1, r3
 8005602:	4822      	ldr	r0, [pc, #136]	; (800568c <HAL_SPI_MspInit+0x164>)
 8005604:	f001 fc88 	bl	8006f18 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005608:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_SPI_MspInit+0x168>)
 800560a:	4a22      	ldr	r2, [pc, #136]	; (8005694 <HAL_SPI_MspInit+0x16c>)
 800560c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005610:	2200      	movs	r2, #0
 8005612:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <HAL_SPI_MspInit+0x168>)
 800561c:	2200      	movs	r2, #0
 800561e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005626:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_SPI_MspInit+0x168>)
 800562a:	2200      	movs	r2, #0
 800562c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005630:	2200      	movs	r2, #0
 8005632:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005636:	2200      	movs	r2, #0
 8005638:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_SPI_MspInit+0x168>)
 800563c:	2200      	movs	r2, #0
 800563e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005642:	2200      	movs	r2, #0
 8005644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005646:	4812      	ldr	r0, [pc, #72]	; (8005690 <HAL_SPI_MspInit+0x168>)
 8005648:	f001 f94c 	bl	80068e4 <HAL_DMA_Init>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8005652:	f7ff fef7 	bl	8005444 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <HAL_SPI_MspInit+0x168>)
 800565a:	649a      	str	r2, [r3, #72]	; 0x48
 800565c:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <HAL_SPI_MspInit+0x168>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005662:	2200      	movs	r2, #0
 8005664:	2100      	movs	r1, #0
 8005666:	2024      	movs	r0, #36	; 0x24
 8005668:	f001 f905 	bl	8006876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800566c:	2024      	movs	r0, #36	; 0x24
 800566e:	f001 f91e 	bl	80068ae <HAL_NVIC_EnableIRQ>
}
 8005672:	bf00      	nop
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40013000 	.word	0x40013000
 8005680:	40023800 	.word	0x40023800
 8005684:	40020000 	.word	0x40020000
 8005688:	40003800 	.word	0x40003800
 800568c:	40020400 	.word	0x40020400
 8005690:	2000321c 	.word	0x2000321c
 8005694:	40026070 	.word	0x40026070

08005698 <state_machine>:
uint8_t scan_cancel_flag = 0;

uint8_t scan_complete_flag = 0;

void state_machine()
{
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569a:	b095      	sub	sp, #84	; 0x54
 800569c:	af06      	add	r7, sp, #24
	touch_coordinates = Touch_read();
 800569e:	f000 fc43 	bl	8005f28 <Touch_read>
 80056a2:	4603      	mov	r3, r0
 80056a4:	4a84      	ldr	r2, [pc, #528]	; (80058b8 <state_machine+0x220>)
 80056a6:	6013      	str	r3, [r2, #0]

	switch(state)
 80056a8:	4b84      	ldr	r3, [pc, #528]	; (80058bc <state_machine+0x224>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	f200 8232 	bhi.w	8005b16 <state_machine+0x47e>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <state_machine+0x20>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056cd 	.word	0x080056cd
 80056bc:	0800574b 	.word	0x0800574b
 80056c0:	08005985 	.word	0x08005985
 80056c4:	080058cd 	.word	0x080058cd
 80056c8:	080059fb 	.word	0x080059fb
	{
	case main_screen:
		if(!state_change_done)
 80056cc:	4b7c      	ldr	r3, [pc, #496]	; (80058c0 <state_machine+0x228>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <state_machine+0x4e>
		{
			Display_main_screen_background();
 80056d4:	f7fe f804 	bl	80036e0 <Display_main_screen_background>
			HAL_Delay(1000); //time to complete refresh display
 80056d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056dc:	f000 ffcc 	bl	8006678 <HAL_Delay>
			state_change_done = 1;
 80056e0:	4b77      	ldr	r3, [pc, #476]	; (80058c0 <state_machine+0x228>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80056e6:	4b74      	ldr	r3, [pc, #464]	; (80058b8 <state_machine+0x220>)
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d911      	bls.n	8005712 <state_machine+0x7a>
 80056ee:	4b72      	ldr	r3, [pc, #456]	; (80058b8 <state_machine+0x220>)
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	2b9c      	cmp	r3, #156	; 0x9c
 80056f4:	d80d      	bhi.n	8005712 <state_machine+0x7a>
 80056f6:	4b70      	ldr	r3, [pc, #448]	; (80058b8 <state_machine+0x220>)
 80056f8:	885b      	ldrh	r3, [r3, #2]
 80056fa:	2bc3      	cmp	r3, #195	; 0xc3
 80056fc:	d909      	bls.n	8005712 <state_machine+0x7a>
 80056fe:	4b6e      	ldr	r3, [pc, #440]	; (80058b8 <state_machine+0x220>)
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	2bea      	cmp	r3, #234	; 0xea
 8005704:	d805      	bhi.n	8005712 <state_machine+0x7a>
		{
			state_change_done = 0;
 8005706:	4b6e      	ldr	r3, [pc, #440]	; (80058c0 <state_machine+0x228>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
			state = settings;
 800570c:	4b6b      	ldr	r3, [pc, #428]	; (80058bc <state_machine+0x224>)
 800570e:	2204      	movs	r2, #4
 8005710:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005712:	4b69      	ldr	r3, [pc, #420]	; (80058b8 <state_machine+0x220>)
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	2ba3      	cmp	r3, #163	; 0xa3
 8005718:	f240 81ff 	bls.w	8005b1a <state_machine+0x482>
 800571c:	4b66      	ldr	r3, [pc, #408]	; (80058b8 <state_machine+0x220>)
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005724:	f200 81f9 	bhi.w	8005b1a <state_machine+0x482>
 8005728:	4b63      	ldr	r3, [pc, #396]	; (80058b8 <state_machine+0x220>)
 800572a:	885b      	ldrh	r3, [r3, #2]
 800572c:	2bc3      	cmp	r3, #195	; 0xc3
 800572e:	f240 81f4 	bls.w	8005b1a <state_machine+0x482>
 8005732:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <state_machine+0x220>)
 8005734:	885b      	ldrh	r3, [r3, #2]
 8005736:	2bea      	cmp	r3, #234	; 0xea
 8005738:	f200 81ef 	bhi.w	8005b1a <state_machine+0x482>
		{
			state_change_done = 0;
 800573c:	4b60      	ldr	r3, [pc, #384]	; (80058c0 <state_machine+0x228>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
			state = signal_info;
 8005742:	4b5e      	ldr	r3, [pc, #376]	; (80058bc <state_machine+0x224>)
 8005744:	2203      	movs	r2, #3
 8005746:	701a      	strb	r2, [r3, #0]
		}


		break;
 8005748:	e1e7      	b.n	8005b1a <state_machine+0x482>

	case services_list_screen:
		if(!state_change_done)
 800574a:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <state_machine+0x228>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d11e      	bne.n	8005790 <state_machine+0xf8>
		{
			srv_list_start_index = 0;
 8005752:	4b5c      	ldr	r3, [pc, #368]	; (80058c4 <state_machine+0x22c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
			dab_management_to_display = get_dab_management();
 8005758:	4c5b      	ldr	r4, [pc, #364]	; (80058c8 <state_machine+0x230>)
 800575a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575e:	4618      	mov	r0, r3
 8005760:	f7fd ff00 	bl	8003564 <get_dab_management>
 8005764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800576a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Display_stations_list_background();
 800576e:	f7fe f845 	bl	80037fc <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display);
 8005772:	4b54      	ldr	r3, [pc, #336]	; (80058c4 <state_machine+0x22c>)
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	4b54      	ldr	r3, [pc, #336]	; (80058c8 <state_machine+0x230>)
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	9200      	str	r2, [sp, #0]
 800577c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800577e:	f7fe f901 	bl	8003984 <Display_stations_list_data>
			HAL_Delay(1000); //time to complete refresh display
 8005782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005786:	f000 ff77 	bl	8006678 <HAL_Delay>
			state_change_done = 1;
 800578a:	4b4d      	ldr	r3, [pc, #308]	; (80058c0 <state_machine+0x228>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (signal info)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005790:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <state_machine+0x220>)
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	2b05      	cmp	r3, #5
 8005796:	d911      	bls.n	80057bc <state_machine+0x124>
 8005798:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <state_machine+0x220>)
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	2b9c      	cmp	r3, #156	; 0x9c
 800579e:	d80d      	bhi.n	80057bc <state_machine+0x124>
 80057a0:	4b45      	ldr	r3, [pc, #276]	; (80058b8 <state_machine+0x220>)
 80057a2:	885b      	ldrh	r3, [r3, #2]
 80057a4:	2bc3      	cmp	r3, #195	; 0xc3
 80057a6:	d909      	bls.n	80057bc <state_machine+0x124>
 80057a8:	4b43      	ldr	r3, [pc, #268]	; (80058b8 <state_machine+0x220>)
 80057aa:	885b      	ldrh	r3, [r3, #2]
 80057ac:	2bea      	cmp	r3, #234	; 0xea
 80057ae:	d805      	bhi.n	80057bc <state_machine+0x124>
		{
			state_change_done = 0;
 80057b0:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <state_machine+0x228>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
			state = signal_info;
 80057b6:	4b41      	ldr	r3, [pc, #260]	; (80058bc <state_machine+0x224>)
 80057b8:	2203      	movs	r2, #3
 80057ba:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80057bc:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <state_machine+0x220>)
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	2ba3      	cmp	r3, #163	; 0xa3
 80057c2:	d912      	bls.n	80057ea <state_machine+0x152>
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <state_machine+0x220>)
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80057cc:	d80d      	bhi.n	80057ea <state_machine+0x152>
 80057ce:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <state_machine+0x220>)
 80057d0:	885b      	ldrh	r3, [r3, #2]
 80057d2:	2bc3      	cmp	r3, #195	; 0xc3
 80057d4:	d909      	bls.n	80057ea <state_machine+0x152>
 80057d6:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <state_machine+0x220>)
 80057d8:	885b      	ldrh	r3, [r3, #2]
 80057da:	2bea      	cmp	r3, #234	; 0xea
 80057dc:	d805      	bhi.n	80057ea <state_machine+0x152>
		{
			state_change_done = 0;
 80057de:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <state_machine+0x228>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
			state = settings;
 80057e4:	4b35      	ldr	r3, [pc, #212]	; (80058bc <state_machine+0x224>)
 80057e6:	2204      	movs	r2, #4
 80057e8:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 80057ea:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <state_machine+0x220>)
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80057f2:	d92d      	bls.n	8005850 <state_machine+0x1b8>
 80057f4:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <state_machine+0x220>)
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80057fc:	d828      	bhi.n	8005850 <state_machine+0x1b8>
 80057fe:	4b2e      	ldr	r3, [pc, #184]	; (80058b8 <state_machine+0x220>)
 8005800:	885b      	ldrh	r3, [r3, #2]
 8005802:	2b14      	cmp	r3, #20
 8005804:	d924      	bls.n	8005850 <state_machine+0x1b8>
 8005806:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <state_machine+0x220>)
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	2b65      	cmp	r3, #101	; 0x65
 800580c:	d820      	bhi.n	8005850 <state_machine+0x1b8>
		{
			if(dab_management_to_display.total_services)
 800580e:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <state_machine+0x230>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01c      	beq.n	8005850 <state_machine+0x1b8>
			{
				srv_list_start_index--;
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <state_machine+0x22c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <state_machine+0x22c>)
 800581e:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 8005820:	4b29      	ldr	r3, [pc, #164]	; (80058c8 <state_machine+0x230>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <state_machine+0x22c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	db03      	blt.n	8005836 <state_machine+0x19e>
 800582e:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <state_machine+0x22c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	da04      	bge.n	8005840 <state_machine+0x1a8>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 8005836:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <state_machine+0x230>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <state_machine+0x22c>)
 800583e:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display);
 8005840:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <state_machine+0x22c>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <state_machine+0x230>)
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	9200      	str	r2, [sp, #0]
 800584a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800584c:	f7fe f89a 	bl	8003984 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <state_machine+0x220>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8005858:	f240 8161 	bls.w	8005b1e <state_machine+0x486>
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <state_machine+0x220>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005864:	f200 815b 	bhi.w	8005b1e <state_machine+0x486>
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <state_machine+0x220>)
 800586a:	885b      	ldrh	r3, [r3, #2]
 800586c:	2b6c      	cmp	r3, #108	; 0x6c
 800586e:	f240 8156 	bls.w	8005b1e <state_machine+0x486>
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <state_machine+0x220>)
 8005874:	885b      	ldrh	r3, [r3, #2]
 8005876:	2bbd      	cmp	r3, #189	; 0xbd
 8005878:	f200 8151 	bhi.w	8005b1e <state_machine+0x486>
		{
			if(dab_management_to_display.total_services)
 800587c:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <state_machine+0x230>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 814c 	beq.w	8005b1e <state_machine+0x486>
			{
				srv_list_start_index++;
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <state_machine+0x22c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3301      	adds	r3, #1
 800588c:	4a0d      	ldr	r2, [pc, #52]	; (80058c4 <state_machine+0x22c>)
 800588e:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <state_machine+0x230>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <state_machine+0x22c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	dc02      	bgt.n	80058a4 <state_machine+0x20c>
				{
					srv_list_start_index = 0;
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <state_machine+0x22c>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display);
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <state_machine+0x22c>)
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <state_machine+0x230>)
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	9200      	str	r2, [sp, #0]
 80058ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b0:	f7fe f868 	bl	8003984 <Display_stations_list_data>
			}
		}

		break;
 80058b4:	e133      	b.n	8005b1e <state_machine+0x486>
 80058b6:	bf00      	nop
 80058b8:	20003284 	.word	0x20003284
 80058bc:	2000327c 	.word	0x2000327c
 80058c0:	2000327d 	.word	0x2000327d
 80058c4:	20003280 	.word	0x20003280
 80058c8:	200032b0 	.word	0x200032b0

	case signal_info:
		if(!state_change_done)
 80058cc:	4b99      	ldr	r3, [pc, #612]	; (8005b34 <state_machine+0x49c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <state_machine+0x24e>
		{
			Display_dab_digrad_status_background();
 80058d4:	f7fe fbf0 	bl	80040b8 <Display_dab_digrad_status_background>
			HAL_Delay(1000); //time to complete refresh display
 80058d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058dc:	f000 fecc 	bl	8006678 <HAL_Delay>
			state_change_done = 1;
 80058e0:	4b94      	ldr	r3, [pc, #592]	; (8005b34 <state_machine+0x49c>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 80058e6:	4c94      	ldr	r4, [pc, #592]	; (8005b38 <state_machine+0x4a0>)
 80058e8:	463b      	mov	r3, r7
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fc f99a 	bl	8001c24 <Si468x_dab_digrad_status>
 80058f0:	4625      	mov	r5, r4
 80058f2:	463c      	mov	r4, r7
 80058f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005900:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8005904:	4e8c      	ldr	r6, [pc, #560]	; (8005b38 <state_machine+0x4a0>)
 8005906:	466d      	mov	r5, sp
 8005908:	f106 0410 	add.w	r4, r6, #16
 800590c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800590e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005914:	e885 0003 	stmia.w	r5, {r0, r1}
 8005918:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800591c:	f7fe fd64 	bl	80043e8 <Display_dab_digrad_status_data>

		//left button handling (main screen)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005920:	4b86      	ldr	r3, [pc, #536]	; (8005b3c <state_machine+0x4a4>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d911      	bls.n	800594c <state_machine+0x2b4>
 8005928:	4b84      	ldr	r3, [pc, #528]	; (8005b3c <state_machine+0x4a4>)
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	2b9c      	cmp	r3, #156	; 0x9c
 800592e:	d80d      	bhi.n	800594c <state_machine+0x2b4>
 8005930:	4b82      	ldr	r3, [pc, #520]	; (8005b3c <state_machine+0x4a4>)
 8005932:	885b      	ldrh	r3, [r3, #2]
 8005934:	2bc3      	cmp	r3, #195	; 0xc3
 8005936:	d909      	bls.n	800594c <state_machine+0x2b4>
 8005938:	4b80      	ldr	r3, [pc, #512]	; (8005b3c <state_machine+0x4a4>)
 800593a:	885b      	ldrh	r3, [r3, #2]
 800593c:	2bea      	cmp	r3, #234	; 0xea
 800593e:	d805      	bhi.n	800594c <state_machine+0x2b4>
		{
			state_change_done = 0;
 8005940:	4b7c      	ldr	r3, [pc, #496]	; (8005b34 <state_machine+0x49c>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
			state = main_screen;
 8005946:	4b7e      	ldr	r3, [pc, #504]	; (8005b40 <state_machine+0x4a8>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (services list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800594c:	4b7b      	ldr	r3, [pc, #492]	; (8005b3c <state_machine+0x4a4>)
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	2ba3      	cmp	r3, #163	; 0xa3
 8005952:	f240 80e6 	bls.w	8005b22 <state_machine+0x48a>
 8005956:	4b79      	ldr	r3, [pc, #484]	; (8005b3c <state_machine+0x4a4>)
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800595e:	f200 80e0 	bhi.w	8005b22 <state_machine+0x48a>
 8005962:	4b76      	ldr	r3, [pc, #472]	; (8005b3c <state_machine+0x4a4>)
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	2bc3      	cmp	r3, #195	; 0xc3
 8005968:	f240 80db 	bls.w	8005b22 <state_machine+0x48a>
 800596c:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <state_machine+0x4a4>)
 800596e:	885b      	ldrh	r3, [r3, #2]
 8005970:	2bea      	cmp	r3, #234	; 0xea
 8005972:	f200 80d6 	bhi.w	8005b22 <state_machine+0x48a>
		{
			state_change_done = 0;
 8005976:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <state_machine+0x49c>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
			state = services_list_screen;
 800597c:	4b70      	ldr	r3, [pc, #448]	; (8005b40 <state_machine+0x4a8>)
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005982:	e0ce      	b.n	8005b22 <state_machine+0x48a>

	case scanning:
		if(!state_change_done)
 8005984:	4b6b      	ldr	r3, [pc, #428]	; (8005b34 <state_machine+0x49c>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d117      	bne.n	80059bc <state_machine+0x324>
		{
			Display_scanning_screen_background();
 800598c:	f7fe f992 	bl	8003cb4 <Display_scanning_screen_background>
			HAL_Delay(1000); //time to complete refresh display
 8005990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005994:	f000 fe70 	bl	8006678 <HAL_Delay>
			state_change_done = 1;
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <state_machine+0x49c>)
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 800599e:	f7fc fd6d 	bl	800247c <Si468x_dab_full_scan>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <state_machine+0x4ac>)
 80059a8:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 80059aa:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <state_machine+0x4ac>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <state_machine+0x324>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 80059b2:	f7fe fb4b 	bl	800404c <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 80059b6:	4b63      	ldr	r3, [pc, #396]	; (8005b44 <state_machine+0x4ac>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80059bc:	4b5f      	ldr	r3, [pc, #380]	; (8005b3c <state_machine+0x4a4>)
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	2b05      	cmp	r3, #5
 80059c2:	f240 80b0 	bls.w	8005b26 <state_machine+0x48e>
 80059c6:	4b5d      	ldr	r3, [pc, #372]	; (8005b3c <state_machine+0x4a4>)
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80059ce:	f200 80aa 	bhi.w	8005b26 <state_machine+0x48e>
 80059d2:	4b5a      	ldr	r3, [pc, #360]	; (8005b3c <state_machine+0x4a4>)
 80059d4:	885b      	ldrh	r3, [r3, #2]
 80059d6:	2bc3      	cmp	r3, #195	; 0xc3
 80059d8:	f240 80a5 	bls.w	8005b26 <state_machine+0x48e>
 80059dc:	4b57      	ldr	r3, [pc, #348]	; (8005b3c <state_machine+0x4a4>)
 80059de:	885b      	ldrh	r3, [r3, #2]
 80059e0:	2bea      	cmp	r3, #234	; 0xea
 80059e2:	f200 80a0 	bhi.w	8005b26 <state_machine+0x48e>
		{
			scan_cancel_flag = 1;
 80059e6:	4b58      	ldr	r3, [pc, #352]	; (8005b48 <state_machine+0x4b0>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 80059ec:	4b51      	ldr	r3, [pc, #324]	; (8005b34 <state_machine+0x49c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
			state = settings;
 80059f2:	4b53      	ldr	r3, [pc, #332]	; (8005b40 <state_machine+0x4a8>)
 80059f4:	2204      	movs	r2, #4
 80059f6:	701a      	strb	r2, [r3, #0]
		}

		break;
 80059f8:	e095      	b.n	8005b26 <state_machine+0x48e>

	case settings:
		if(!state_change_done)
 80059fa:	4b4e      	ldr	r3, [pc, #312]	; (8005b34 <state_machine+0x49c>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <state_machine+0x382>
		{
			Display_settings_screen_background();
 8005a02:	f7ff f863 	bl	8004acc <Display_settings_screen_background>
			HAL_Delay(1000); //time to complete refresh display
 8005a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a0a:	f000 fe35 	bl	8006678 <HAL_Delay>
			scan_cancel_flag = 0;
 8005a0e:	4b4e      	ldr	r3, [pc, #312]	; (8005b48 <state_machine+0x4b0>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 8005a14:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <state_machine+0x49c>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
		}

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8005a1a:	4b48      	ldr	r3, [pc, #288]	; (8005b3c <state_machine+0x4a4>)
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	2ba3      	cmp	r3, #163	; 0xa3
 8005a20:	d907      	bls.n	8005a32 <state_machine+0x39a>
 8005a22:	4b46      	ldr	r3, [pc, #280]	; (8005b3c <state_machine+0x4a4>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005a2a:	d802      	bhi.n	8005a32 <state_machine+0x39a>
 8005a2c:	4b43      	ldr	r3, [pc, #268]	; (8005b3c <state_machine+0x4a4>)
 8005a2e:	885b      	ldrh	r3, [r3, #2]
 8005a30:	2b3c      	cmp	r3, #60	; 0x3c
		{

		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8005a32:	4b42      	ldr	r3, [pc, #264]	; (8005b3c <state_machine+0x4a4>)
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	2b05      	cmp	r3, #5
 8005a38:	d906      	bls.n	8005a48 <state_machine+0x3b0>
 8005a3a:	4b40      	ldr	r3, [pc, #256]	; (8005b3c <state_machine+0x4a4>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	2b9c      	cmp	r3, #156	; 0x9c
 8005a40:	d802      	bhi.n	8005a48 <state_machine+0x3b0>
 8005a42:	4b3e      	ldr	r3, [pc, #248]	; (8005b3c <state_machine+0x4a4>)
 8005a44:	885b      	ldrh	r3, [r3, #2]
 8005a46:	2b3c      	cmp	r3, #60	; 0x3c
		{

		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8005a48:	4b3c      	ldr	r3, [pc, #240]	; (8005b3c <state_machine+0x4a4>)
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	2ba3      	cmp	r3, #163	; 0xa3
 8005a4e:	d907      	bls.n	8005a60 <state_machine+0x3c8>
 8005a50:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <state_machine+0x4a4>)
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005a58:	d802      	bhi.n	8005a60 <state_machine+0x3c8>
 8005a5a:	4b38      	ldr	r3, [pc, #224]	; (8005b3c <state_machine+0x4a4>)
 8005a5c:	885b      	ldrh	r3, [r3, #2]
 8005a5e:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8005a60:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <state_machine+0x4a4>)
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d906      	bls.n	8005a76 <state_machine+0x3de>
 8005a68:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <state_machine+0x4a4>)
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	2b9c      	cmp	r3, #156	; 0x9c
 8005a6e:	d802      	bhi.n	8005a76 <state_machine+0x3de>
 8005a70:	4b32      	ldr	r3, [pc, #200]	; (8005b3c <state_machine+0x4a4>)
 8005a72:	885b      	ldrh	r3, [r3, #2]
 8005a74:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8005a76:	4b31      	ldr	r3, [pc, #196]	; (8005b3c <state_machine+0x4a4>)
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	d911      	bls.n	8005aa2 <state_machine+0x40a>
 8005a7e:	4b2f      	ldr	r3, [pc, #188]	; (8005b3c <state_machine+0x4a4>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	2b9c      	cmp	r3, #156	; 0x9c
 8005a84:	d80d      	bhi.n	8005aa2 <state_machine+0x40a>
 8005a86:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <state_machine+0x4a4>)
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	2b96      	cmp	r3, #150	; 0x96
 8005a8c:	d909      	bls.n	8005aa2 <state_machine+0x40a>
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <state_machine+0x4a4>)
 8005a90:	885b      	ldrh	r3, [r3, #2]
 8005a92:	2bbd      	cmp	r3, #189	; 0xbd
 8005a94:	d805      	bhi.n	8005aa2 <state_machine+0x40a>
		{
			state_change_done = 0;
 8005a96:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <state_machine+0x49c>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
			state = scanning;
 8005a9c:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <state_machine+0x4a8>)
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8005aa2:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <state_machine+0x4a4>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	2ba3      	cmp	r3, #163	; 0xa3
 8005aa8:	d907      	bls.n	8005aba <state_machine+0x422>
 8005aaa:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <state_machine+0x4a4>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005ab2:	d802      	bhi.n	8005aba <state_machine+0x422>
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <state_machine+0x4a4>)
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005aba:	4b20      	ldr	r3, [pc, #128]	; (8005b3c <state_machine+0x4a4>)
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d911      	bls.n	8005ae6 <state_machine+0x44e>
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <state_machine+0x4a4>)
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	2b9c      	cmp	r3, #156	; 0x9c
 8005ac8:	d80d      	bhi.n	8005ae6 <state_machine+0x44e>
 8005aca:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <state_machine+0x4a4>)
 8005acc:	885b      	ldrh	r3, [r3, #2]
 8005ace:	2bc3      	cmp	r3, #195	; 0xc3
 8005ad0:	d909      	bls.n	8005ae6 <state_machine+0x44e>
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <state_machine+0x4a4>)
 8005ad4:	885b      	ldrh	r3, [r3, #2]
 8005ad6:	2bea      	cmp	r3, #234	; 0xea
 8005ad8:	d805      	bhi.n	8005ae6 <state_machine+0x44e>
		{
			state_change_done = 0;
 8005ada:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <state_machine+0x49c>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
			state = services_list_screen;
 8005ae0:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <state_machine+0x4a8>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <state_machine+0x4a4>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	2ba3      	cmp	r3, #163	; 0xa3
 8005aec:	d91d      	bls.n	8005b2a <state_machine+0x492>
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <state_machine+0x4a4>)
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005af6:	d818      	bhi.n	8005b2a <state_machine+0x492>
 8005af8:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <state_machine+0x4a4>)
 8005afa:	885b      	ldrh	r3, [r3, #2]
 8005afc:	2bc3      	cmp	r3, #195	; 0xc3
 8005afe:	d914      	bls.n	8005b2a <state_machine+0x492>
 8005b00:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <state_machine+0x4a4>)
 8005b02:	885b      	ldrh	r3, [r3, #2]
 8005b04:	2bea      	cmp	r3, #234	; 0xea
 8005b06:	d810      	bhi.n	8005b2a <state_machine+0x492>
		{
			state_change_done = 0;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <state_machine+0x49c>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
			state = main_screen;
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <state_machine+0x4a8>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
		}


		break;
 8005b14:	e009      	b.n	8005b2a <state_machine+0x492>

	default:
		break;
 8005b16:	bf00      	nop
 8005b18:	e008      	b.n	8005b2c <state_machine+0x494>
		break;
 8005b1a:	bf00      	nop
 8005b1c:	e006      	b.n	8005b2c <state_machine+0x494>
		break;
 8005b1e:	bf00      	nop
 8005b20:	e004      	b.n	8005b2c <state_machine+0x494>
		break;
 8005b22:	bf00      	nop
 8005b24:	e002      	b.n	8005b2c <state_machine+0x494>
		break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <state_machine+0x494>
		break;
 8005b2a:	bf00      	nop
	}
}
 8005b2c:	bf00      	nop
 8005b2e:	373c      	adds	r7, #60	; 0x3c
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b34:	2000327d 	.word	0x2000327d
 8005b38:	20003288 	.word	0x20003288
 8005b3c:	20003284 	.word	0x20003284
 8005b40:	2000327c 	.word	0x2000327c
 8005b44:	200032c1 	.word	0x200032c1
 8005b48:	200032c0 	.word	0x200032c0

08005b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <HAL_MspInit+0x4c>)
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <HAL_MspInit+0x4c>)
 8005b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b60:	6453      	str	r3, [r2, #68]	; 0x44
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <HAL_MspInit+0x4c>)
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <HAL_MspInit+0x4c>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <HAL_MspInit+0x4c>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_MspInit+0x4c>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800

08005b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ba0:	e7fe      	b.n	8005ba0 <NMI_Handler+0x4>

08005ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ba6:	e7fe      	b.n	8005ba6 <HardFault_Handler+0x4>

08005ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bac:	e7fe      	b.n	8005bac <MemManage_Handler+0x4>

08005bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bb2:	e7fe      	b.n	8005bb2 <BusFault_Handler+0x4>

08005bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bb8:	e7fe      	b.n	8005bb8 <UsageFault_Handler+0x4>

08005bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bcc:	bf00      	nop
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005be8:	f000 fd26 	bl	8006638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bec:	bf00      	nop
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005bf4:	4802      	ldr	r0, [pc, #8]	; (8005c00 <DMA1_Stream4_IRQHandler+0x10>)
 8005bf6:	f000 ff45 	bl	8006a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2000321c 	.word	0x2000321c

08005c04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005c0a:	f005 fc5a 	bl	800b4c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000330c 	.word	0x2000330c

08005c18 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005c1c:	4802      	ldr	r0, [pc, #8]	; (8005c28 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005c1e:	f005 fc50 	bl	800b4c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20003354 	.word	0x20003354

08005c2c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <SPI2_IRQHandler+0x10>)
 8005c32:	f005 f8e9 	bl	800ae08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	200031c4 	.word	0x200031c4

08005c40 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8005c44:	4802      	ldr	r0, [pc, #8]	; (8005c50 <I2C3_EV_IRQHandler+0x10>)
 8005c46:	f001 ff99 	bl	8007b7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20003118 	.word	0x20003118

08005c54 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <I2C3_ER_IRQHandler+0x10>)
 8005c5a:	f002 f900 	bl	8007e5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20003118 	.word	0x20003118

08005c68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <SystemInit+0x20>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <SystemInit+0x20>)
 8005c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ca6:	f107 0320 	add.w	r3, r7, #32
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005cb0:	1d3b      	adds	r3, r7, #4
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	609a      	str	r2, [r3, #8]
 8005cba:	60da      	str	r2, [r3, #12]
 8005cbc:	611a      	str	r2, [r3, #16]
 8005cbe:	615a      	str	r2, [r3, #20]
 8005cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005cc4:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <MX_TIM3_Init+0xb0>)
 8005cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005cc8:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cce:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ce8:	4818      	ldr	r0, [pc, #96]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005cea:	f005 fb9b 	bl	800b424 <HAL_TIM_PWM_Init>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005cf4:	f7ff fba6 	bl	8005444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d00:	f107 0320 	add.w	r3, r7, #32
 8005d04:	4619      	mov	r1, r3
 8005d06:	4811      	ldr	r0, [pc, #68]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005d08:	f006 f81e 	bl	800bd48 <HAL_TIMEx_MasterConfigSynchronization>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005d12:	f7ff fb97 	bl	8005444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d16:	2360      	movs	r3, #96	; 0x60
 8005d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	2208      	movs	r2, #8
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4807      	ldr	r0, [pc, #28]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005d2e:	f005 fcd1 	bl	800b6d4 <HAL_TIM_PWM_ConfigChannel>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005d38:	f7ff fb84 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005d3c:	4803      	ldr	r0, [pc, #12]	; (8005d4c <MX_TIM3_Init+0xac>)
 8005d3e:	f000 f8b9 	bl	8005eb4 <HAL_TIM_MspPostInit>

}
 8005d42:	bf00      	nop
 8005d44:	3728      	adds	r7, #40	; 0x28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200032c4 	.word	0x200032c4
 8005d50:	40000400 	.word	0x40000400

08005d54 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d5a:	4a0f      	ldr	r2, [pc, #60]	; (8005d98 <MX_TIM10_Init+0x44>)
 8005d5c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d60:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005d64:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d6e:	f240 2257 	movw	r2, #599	; 0x257
 8005d72:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005d80:	4804      	ldr	r0, [pc, #16]	; (8005d94 <MX_TIM10_Init+0x40>)
 8005d82:	f005 fa8f 	bl	800b2a4 <HAL_TIM_Base_Init>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005d8c:	f7ff fb5a 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	2000330c 	.word	0x2000330c
 8005d98:	40014400 	.word	0x40014400

08005d9c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005da0:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005da2:	4a0f      	ldr	r2, [pc, #60]	; (8005de0 <MX_TIM11_Init+0x44>)
 8005da4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005da8:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005dac:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005db6:	f240 5213 	movw	r2, #1299	; 0x513
 8005dba:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005dc8:	4804      	ldr	r0, [pc, #16]	; (8005ddc <MX_TIM11_Init+0x40>)
 8005dca:	f005 fa6b 	bl	800b2a4 <HAL_TIM_Base_Init>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8005dd4:	f7ff fb36 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005dd8:	bf00      	nop
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20003354 	.word	0x20003354
 8005de0:	40014800 	.word	0x40014800

08005de4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <HAL_TIM_PWM_MspInit+0x3c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10d      	bne.n	8005e12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <HAL_TIM_PWM_MspInit+0x40>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <HAL_TIM_PWM_MspInit+0x40>)
 8005e00:	f043 0302 	orr.w	r3, r3, #2
 8005e04:	6413      	str	r3, [r2, #64]	; 0x40
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <HAL_TIM_PWM_MspInit+0x40>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40023800 	.word	0x40023800

08005e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <HAL_TIM_Base_MspInit+0x80>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d116      	bne.n	8005e68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_TIM_Base_MspInit+0x84>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <HAL_TIM_Base_MspInit+0x84>)
 8005e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e48:	6453      	str	r3, [r2, #68]	; 0x44
 8005e4a:	4b18      	ldr	r3, [pc, #96]	; (8005eac <HAL_TIM_Base_MspInit+0x84>)
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005e56:	2200      	movs	r2, #0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	2019      	movs	r0, #25
 8005e5c:	f000 fd0b 	bl	8006876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e60:	2019      	movs	r0, #25
 8005e62:	f000 fd24 	bl	80068ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005e66:	e01a      	b.n	8005e9e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <HAL_TIM_Base_MspInit+0x88>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d115      	bne.n	8005e9e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <HAL_TIM_Base_MspInit+0x84>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <HAL_TIM_Base_MspInit+0x84>)
 8005e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e80:	6453      	str	r3, [r2, #68]	; 0x44
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <HAL_TIM_Base_MspInit+0x84>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2100      	movs	r1, #0
 8005e92:	201a      	movs	r0, #26
 8005e94:	f000 fcef 	bl	8006876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005e98:	201a      	movs	r0, #26
 8005e9a:	f000 fd08 	bl	80068ae <HAL_NVIC_EnableIRQ>
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40014800 	.word	0x40014800

08005eb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ebc:	f107 030c 	add.w	r3, r7, #12
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <HAL_TIM_MspPostInit+0x68>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d11e      	bne.n	8005f14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <HAL_TIM_MspPostInit+0x6c>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <HAL_TIM_MspPostInit+0x6c>)
 8005ee0:	f043 0304 	orr.w	r3, r3, #4
 8005ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <HAL_TIM_MspPostInit+0x6c>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8005ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ef6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f04:	2302      	movs	r3, #2
 8005f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005f08:	f107 030c 	add.w	r3, r7, #12
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4805      	ldr	r0, [pc, #20]	; (8005f24 <HAL_TIM_MspPostInit+0x70>)
 8005f10:	f001 f802 	bl	8006f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005f14:	bf00      	nop
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40020800 	.word	0x40020800

08005f28 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8005f2e:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <Touch_read+0xa0>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2000      	movs	r0, #0
 8005f34:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <Touch_read+0xa0>)
 8005f38:	7c1b      	ldrb	r3, [r3, #16]
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da32      	bge.n	8005fa6 <Touch_read+0x7e>
	{
		xtemp = TP_Read_XOY(0xD0);
 8005f40:	20d0      	movs	r0, #208	; 0xd0
 8005f42:	f000 f8e9 	bl	8006118 <TP_Read_XOY>
 8005f46:	4603      	mov	r3, r0
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <Touch_read+0xa4>)
 8005f4c:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8005f4e:	2090      	movs	r0, #144	; 0x90
 8005f50:	f000 f8e2 	bl	8006118 <TP_Read_XOY>
 8005f54:	4603      	mov	r3, r0
 8005f56:	461a      	mov	r2, r3
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <Touch_read+0xa8>)
 8005f5a:	801a      	strh	r2, [r3, #0]

		touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
 8005f5c:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <Touch_read+0xa8>)
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	019b      	lsls	r3, r3, #6
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <Touch_read+0xac>)
 8005f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8005f72:	441a      	add	r2, r3
 8005f74:	12d2      	asrs	r2, r2, #11
 8005f76:	17db      	asrs	r3, r3, #31
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <Touch_read+0xa4>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	3bf0      	subs	r3, #240	; 0xf0
 8005f8a:	22e6      	movs	r2, #230	; 0xe6
 8005f8c:	fb02 f303 	mul.w	r3, r2, r3
 8005f90:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <Touch_read+0xb0>)
 8005f92:	fb82 1203 	smull	r1, r2, r2, r3
 8005f96:	1252      	asrs	r2, r2, #9
 8005f98:	17db      	asrs	r3, r3, #31
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	33f0      	adds	r3, #240	; 0xf0
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	807b      	strh	r3, [r7, #2]
 8005fa4:	e003      	b.n	8005fae <Touch_read+0x86>

	}

	else
	{
		touch_coordinates.x = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	88ba      	ldrh	r2, [r7, #4]
 8005fb6:	f362 030f 	bfi	r3, r2, #0, #16
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	f362 431f 	bfi	r3, r2, #16, #16
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000154 	.word	0x20000154
 8005fcc:	2000339c 	.word	0x2000339c
 8005fd0:	2000339e 	.word	0x2000339e
 8005fd4:	93afcf8b 	.word	0x93afcf8b
 8005fd8:	24b70025 	.word	0x24b70025

08005fdc <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e021      	b.n	8006034 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8005ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	da05      	bge.n	8006004 <TP_Write_Byte+0x28>
			T_DIN_ON;
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	2120      	movs	r1, #32
 8005ffc:	4811      	ldr	r0, [pc, #68]	; (8006044 <TP_Write_Byte+0x68>)
 8005ffe:	f001 f93f 	bl	8007280 <HAL_GPIO_WritePin>
 8006002:	e004      	b.n	800600e <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8006004:	2200      	movs	r2, #0
 8006006:	2120      	movs	r1, #32
 8006008:	480e      	ldr	r0, [pc, #56]	; (8006044 <TP_Write_Byte+0x68>)
 800600a:	f001 f939 	bl	8007280 <HAL_GPIO_WritePin>

		num <<= 1;
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8006014:	2200      	movs	r2, #0
 8006016:	2108      	movs	r1, #8
 8006018:	480a      	ldr	r0, [pc, #40]	; (8006044 <TP_Write_Byte+0x68>)
 800601a:	f001 f931 	bl	8007280 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800601e:	2001      	movs	r0, #1
 8006020:	f000 fb2a 	bl	8006678 <HAL_Delay>
		T_CLK_ON;
 8006024:	2201      	movs	r2, #1
 8006026:	2108      	movs	r1, #8
 8006028:	4806      	ldr	r0, [pc, #24]	; (8006044 <TP_Write_Byte+0x68>)
 800602a:	f001 f929 	bl	8007280 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	3301      	adds	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b07      	cmp	r3, #7
 8006038:	d9da      	bls.n	8005ff0 <TP_Write_Byte+0x14>
	}
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40020400 	.word	0x40020400

08006048 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 800605a:	2200      	movs	r2, #0
 800605c:	2108      	movs	r1, #8
 800605e:	482c      	ldr	r0, [pc, #176]	; (8006110 <TP_Read_AD+0xc8>)
 8006060:	f001 f90e 	bl	8007280 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8006064:	2200      	movs	r2, #0
 8006066:	2120      	movs	r1, #32
 8006068:	4829      	ldr	r0, [pc, #164]	; (8006110 <TP_Read_AD+0xc8>)
 800606a:	f001 f909 	bl	8007280 <HAL_GPIO_WritePin>
	T_CS_OFF;
 800606e:	2200      	movs	r2, #0
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	4828      	ldr	r0, [pc, #160]	; (8006114 <TP_Read_AD+0xcc>)
 8006074:	f001 f904 	bl	8007280 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ffae 	bl	8005fdc <TP_Write_Byte>
	HAL_Delay(1);
 8006080:	2001      	movs	r0, #1
 8006082:	f000 faf9 	bl	8006678 <HAL_Delay>
	T_CLK_OFF;
 8006086:	2200      	movs	r2, #0
 8006088:	2108      	movs	r1, #8
 800608a:	4821      	ldr	r0, [pc, #132]	; (8006110 <TP_Read_AD+0xc8>)
 800608c:	f001 f8f8 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006090:	2001      	movs	r0, #1
 8006092:	f000 faf1 	bl	8006678 <HAL_Delay>
	T_CLK_ON;
 8006096:	2201      	movs	r2, #1
 8006098:	2108      	movs	r1, #8
 800609a:	481d      	ldr	r0, [pc, #116]	; (8006110 <TP_Read_AD+0xc8>)
 800609c:	f001 f8f0 	bl	8007280 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80060a0:	2001      	movs	r0, #1
 80060a2:	f000 fae9 	bl	8006678 <HAL_Delay>
	T_CLK_OFF;
 80060a6:	2200      	movs	r2, #0
 80060a8:	2108      	movs	r1, #8
 80060aa:	4819      	ldr	r0, [pc, #100]	; (8006110 <TP_Read_AD+0xc8>)
 80060ac:	f001 f8e8 	bl	8007280 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e01c      	b.n	80060f0 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 80060b6:	89bb      	ldrh	r3, [r7, #12]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 80060bc:	2200      	movs	r2, #0
 80060be:	2108      	movs	r1, #8
 80060c0:	4813      	ldr	r0, [pc, #76]	; (8006110 <TP_Read_AD+0xc8>)
 80060c2:	f001 f8dd 	bl	8007280 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80060c6:	2001      	movs	r0, #1
 80060c8:	f000 fad6 	bl	8006678 <HAL_Delay>
		T_CLK_ON;
 80060cc:	2201      	movs	r2, #1
 80060ce:	2108      	movs	r1, #8
 80060d0:	480f      	ldr	r0, [pc, #60]	; (8006110 <TP_Read_AD+0xc8>)
 80060d2:	f001 f8d5 	bl	8007280 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 80060d6:	2110      	movs	r1, #16
 80060d8:	480d      	ldr	r0, [pc, #52]	; (8006110 <TP_Read_AD+0xc8>)
 80060da:	f001 f8b9 	bl	8007250 <HAL_GPIO_ReadPin>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <TP_Read_AD+0xa2>
 80060e4:	89bb      	ldrh	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	3301      	adds	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b0f      	cmp	r3, #15
 80060f4:	d9df      	bls.n	80060b6 <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 80060f6:	89bb      	ldrh	r3, [r7, #12]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 80060fc:	2201      	movs	r2, #1
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	4804      	ldr	r0, [pc, #16]	; (8006114 <TP_Read_AD+0xcc>)
 8006102:	f001 f8bd 	bl	8007280 <HAL_GPIO_WritePin>
	return(Num);
 8006106:	89bb      	ldrh	r3, [r7, #12]

}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40020400 	.word	0x40020400
 8006114:	40020c00 	.word	0x40020c00

08006118 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff8f 	bl	8006048 <TP_Read_AD>
}
 800612a:	bf00      	nop
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 800613e:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <TP_Read_XY+0x3c>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff ffe8 	bl	8006118 <TP_Read_XOY>
 8006148:	4603      	mov	r3, r0
 800614a:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <TP_Read_XY+0x40>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff ffe1 	bl	8006118 <TP_Read_XOY>
 8006156:	4603      	mov	r3, r0
 8006158:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	89fa      	ldrh	r2, [r7, #14]
 800615e:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	89ba      	ldrh	r2, [r7, #12]
 8006164:	801a      	strh	r2, [r3, #0]
	return 1;
 8006166:	2301      	movs	r3, #1
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000178 	.word	0x20000178
 8006174:	20000179 	.word	0x20000179

08006178 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006182:	f107 0212 	add.w	r2, r7, #18
 8006186:	f107 0314 	add.w	r3, r7, #20
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff ffd1 	bl	8006134 <TP_Read_XY>
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <TP_Read_XY2+0x28>
    	return(0);
 800619c:	2300      	movs	r3, #0
 800619e:	e049      	b.n	8006234 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 80061a0:	f107 020e 	add.w	r2, r7, #14
 80061a4:	f107 0310 	add.w	r3, r7, #16
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff ffc2 	bl	8006134 <TP_Read_XY>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <TP_Read_XY2+0x46>
    	return(0);
 80061ba:	2300      	movs	r3, #0
 80061bc:	e03a      	b.n	8006234 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 80061be:	8a3a      	ldrh	r2, [r7, #16]
 80061c0:	8abb      	ldrh	r3, [r7, #20]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d804      	bhi.n	80061d0 <TP_Read_XY2+0x58>
 80061c6:	8a3b      	ldrh	r3, [r7, #16]
 80061c8:	3331      	adds	r3, #49	; 0x31
 80061ca:	8aba      	ldrh	r2, [r7, #20]
 80061cc:	4293      	cmp	r3, r2
 80061ce:	da08      	bge.n	80061e2 <TP_Read_XY2+0x6a>
 80061d0:	8aba      	ldrh	r2, [r7, #20]
 80061d2:	8a3b      	ldrh	r3, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d82c      	bhi.n	8006232 <TP_Read_XY2+0xba>
 80061d8:	8abb      	ldrh	r3, [r7, #20]
 80061da:	3331      	adds	r3, #49	; 0x31
 80061dc:	8a3a      	ldrh	r2, [r7, #16]
 80061de:	4293      	cmp	r3, r2
 80061e0:	db27      	blt.n	8006232 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 80061e2:	89fa      	ldrh	r2, [r7, #14]
 80061e4:	8a7b      	ldrh	r3, [r7, #18]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d804      	bhi.n	80061f4 <TP_Read_XY2+0x7c>
 80061ea:	89fb      	ldrh	r3, [r7, #14]
 80061ec:	3331      	adds	r3, #49	; 0x31
 80061ee:	8a7a      	ldrh	r2, [r7, #18]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	da08      	bge.n	8006206 <TP_Read_XY2+0x8e>
 80061f4:	8a7a      	ldrh	r2, [r7, #18]
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d81a      	bhi.n	8006232 <TP_Read_XY2+0xba>
 80061fc:	8a7b      	ldrh	r3, [r7, #18]
 80061fe:	3331      	adds	r3, #49	; 0x31
 8006200:	89fa      	ldrh	r2, [r7, #14]
 8006202:	4293      	cmp	r3, r2
 8006204:	db15      	blt.n	8006232 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006206:	8abb      	ldrh	r3, [r7, #20]
 8006208:	461a      	mov	r2, r3
 800620a:	8a3b      	ldrh	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	0fda      	lsrs	r2, r3, #31
 8006210:	4413      	add	r3, r2
 8006212:	105b      	asrs	r3, r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 800621a:	8a7b      	ldrh	r3, [r7, #18]
 800621c:	461a      	mov	r2, r3
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	4413      	add	r3, r2
 8006222:	0fda      	lsrs	r2, r3, #31
 8006224:	4413      	add	r3, r2
 8006226:	105b      	asrs	r3, r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	801a      	strh	r2, [r3, #0]
        return 1;
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	483f      	ldr	r0, [pc, #252]	; (8006348 <TP_Scan+0x10c>)
 800624a:	f001 f801 	bl	8007250 <HAL_GPIO_ReadPin>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d155      	bne.n	8006300 <TP_Scan+0xc4>
	{
		if(tp)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 800625a:	493c      	ldr	r1, [pc, #240]	; (800634c <TP_Scan+0x110>)
 800625c:	483c      	ldr	r0, [pc, #240]	; (8006350 <TP_Scan+0x114>)
 800625e:	f7ff ff8b 	bl	8006178 <TP_Read_XY2>
 8006262:	e03c      	b.n	80062de <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8006264:	4939      	ldr	r1, [pc, #228]	; (800634c <TP_Scan+0x110>)
 8006266:	483a      	ldr	r0, [pc, #232]	; (8006350 <TP_Scan+0x114>)
 8006268:	f7ff ff86 	bl	8006178 <TP_Read_XY2>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d035      	beq.n	80062de <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8006272:	4b38      	ldr	r3, [pc, #224]	; (8006354 <TP_Scan+0x118>)
 8006274:	ed93 7a05 	vldr	s14, [r3, #20]
 8006278:	4b36      	ldr	r3, [pc, #216]	; (8006354 <TP_Scan+0x118>)
 800627a:	899b      	ldrh	r3, [r3, #12]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006288:	4b32      	ldr	r3, [pc, #200]	; (8006354 <TP_Scan+0x118>)
 800628a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 3a90 	vmov	r3, s15
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <TP_Scan+0x118>)
 80062a6:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <TP_Scan+0x118>)
 80062aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <TP_Scan+0x118>)
 80062b0:	89db      	ldrh	r3, [r3, #14]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062be:	4b25      	ldr	r3, [pc, #148]	; (8006354 <TP_Scan+0x118>)
 80062c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d4:	ee17 3a90 	vmov	r3, s15
 80062d8:	b29a      	uxth	r2, r3
 80062da:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <TP_Scan+0x118>)
 80062dc:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <TP_Scan+0x118>)
 80062e0:	7c1b      	ldrb	r3, [r3, #16]
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db26      	blt.n	8006336 <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <TP_Scan+0x118>)
 80062ea:	22c0      	movs	r2, #192	; 0xc0
 80062ec:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 80062ee:	4b19      	ldr	r3, [pc, #100]	; (8006354 <TP_Scan+0x118>)
 80062f0:	899a      	ldrh	r2, [r3, #12]
 80062f2:	4b18      	ldr	r3, [pc, #96]	; (8006354 <TP_Scan+0x118>)
 80062f4:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <TP_Scan+0x118>)
 80062f8:	89da      	ldrh	r2, [r3, #14]
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <TP_Scan+0x118>)
 80062fc:	815a      	strh	r2, [r3, #10]
 80062fe:	e01a      	b.n	8006336 <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <TP_Scan+0x118>)
 8006302:	7c1b      	ldrb	r3, [r3, #16]
 8006304:	b25b      	sxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	da07      	bge.n	800631a <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <TP_Scan+0x118>)
 800630c:	7c1b      	ldrb	r3, [r3, #16]
 800630e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006312:	b2da      	uxtb	r2, r3
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <TP_Scan+0x118>)
 8006316:	741a      	strb	r2, [r3, #16]
 8006318:	e00d      	b.n	8006336 <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 800631a:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <TP_Scan+0x118>)
 800631c:	2200      	movs	r2, #0
 800631e:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8006320:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <TP_Scan+0x118>)
 8006322:	2200      	movs	r2, #0
 8006324:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <TP_Scan+0x118>)
 8006328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800632c:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <TP_Scan+0x118>)
 8006330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006334:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8006336:	4b07      	ldr	r3, [pc, #28]	; (8006354 <TP_Scan+0x118>)
 8006338:	7c1b      	ldrb	r3, [r3, #16]
 800633a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800633e:	b2db      	uxtb	r3, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40020c00 	.word	0x40020c00
 800634c:	20000162 	.word	0x20000162
 8006350:	20000160 	.word	0x20000160
 8006354:	20000154 	.word	0x20000154

08006358 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <MX_UART5_Init+0x4c>)
 800635e:	4a12      	ldr	r2, [pc, #72]	; (80063a8 <MX_UART5_Init+0x50>)
 8006360:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006362:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <MX_UART5_Init+0x4c>)
 8006364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006368:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800636a:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <MX_UART5_Init+0x4c>)
 800636c:	2200      	movs	r2, #0
 800636e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <MX_UART5_Init+0x4c>)
 8006372:	2200      	movs	r2, #0
 8006374:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <MX_UART5_Init+0x4c>)
 8006378:	2200      	movs	r2, #0
 800637a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <MX_UART5_Init+0x4c>)
 800637e:	220c      	movs	r2, #12
 8006380:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006382:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <MX_UART5_Init+0x4c>)
 8006384:	2200      	movs	r2, #0
 8006386:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <MX_UART5_Init+0x4c>)
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800638e:	4805      	ldr	r0, [pc, #20]	; (80063a4 <MX_UART5_Init+0x4c>)
 8006390:	f005 fd6a 	bl	800be68 <HAL_UART_Init>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800639a:	f7ff f853 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800639e:	bf00      	nop
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200033a0 	.word	0x200033a0
 80063a8:	40005000 	.word	0x40005000

080063ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80063b0:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063b2:	4a12      	ldr	r2, [pc, #72]	; (80063fc <MX_USART3_UART_Init+0x50>)
 80063b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063d2:	220c      	movs	r2, #12
 80063d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063d6:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063de:	2200      	movs	r2, #0
 80063e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80063e2:	4805      	ldr	r0, [pc, #20]	; (80063f8 <MX_USART3_UART_Init+0x4c>)
 80063e4:	f005 fd40 	bl	800be68 <HAL_UART_Init>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80063ee:	f7ff f829 	bl	8005444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200033e4 	.word	0x200033e4
 80063fc:	40004800 	.word	0x40004800

08006400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006408:	f107 031c 	add.w	r3, r7, #28
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a42      	ldr	r2, [pc, #264]	; (8006528 <HAL_UART_MspInit+0x128>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d14b      	bne.n	80064ba <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	4b41      	ldr	r3, [pc, #260]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	4a40      	ldr	r2, [pc, #256]	; (800652c <HAL_UART_MspInit+0x12c>)
 800642c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006430:	6413      	str	r3, [r2, #64]	; 0x40
 8006432:	4b3e      	ldr	r3, [pc, #248]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	4b3a      	ldr	r3, [pc, #232]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	4a39      	ldr	r2, [pc, #228]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006448:	f043 0304 	orr.w	r3, r3, #4
 800644c:	6313      	str	r3, [r2, #48]	; 0x30
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4a32      	ldr	r2, [pc, #200]	; (800652c <HAL_UART_MspInit+0x12c>)
 8006464:	f043 0308 	orr.w	r3, r3, #8
 8006468:	6313      	str	r3, [r2, #48]	; 0x30
 800646a:	4b30      	ldr	r3, [pc, #192]	; (800652c <HAL_UART_MspInit+0x12c>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800647a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006488:	2308      	movs	r3, #8
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800648c:	f107 031c 	add.w	r3, r7, #28
 8006490:	4619      	mov	r1, r3
 8006492:	4827      	ldr	r0, [pc, #156]	; (8006530 <HAL_UART_MspInit+0x130>)
 8006494:	f000 fd40 	bl	8006f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006498:	2304      	movs	r3, #4
 800649a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649c:	2302      	movs	r3, #2
 800649e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a4:	2303      	movs	r3, #3
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80064a8:	2308      	movs	r3, #8
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064ac:	f107 031c 	add.w	r3, r7, #28
 80064b0:	4619      	mov	r1, r3
 80064b2:	4820      	ldr	r0, [pc, #128]	; (8006534 <HAL_UART_MspInit+0x134>)
 80064b4:	f000 fd30 	bl	8006f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80064b8:	e031      	b.n	800651e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1e      	ldr	r2, [pc, #120]	; (8006538 <HAL_UART_MspInit+0x138>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d12c      	bne.n	800651e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <HAL_UART_MspInit+0x12c>)
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_UART_MspInit+0x12c>)
 80064ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d2:	6413      	str	r3, [r2, #64]	; 0x40
 80064d4:	4b15      	ldr	r3, [pc, #84]	; (800652c <HAL_UART_MspInit+0x12c>)
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	4b11      	ldr	r3, [pc, #68]	; (800652c <HAL_UART_MspInit+0x12c>)
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	4a10      	ldr	r2, [pc, #64]	; (800652c <HAL_UART_MspInit+0x12c>)
 80064ea:	f043 0302 	orr.w	r3, r3, #2
 80064ee:	6313      	str	r3, [r2, #48]	; 0x30
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <HAL_UART_MspInit+0x12c>)
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80064fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006502:	2302      	movs	r3, #2
 8006504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650a:	2303      	movs	r3, #3
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800650e:	2307      	movs	r3, #7
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006512:	f107 031c 	add.w	r3, r7, #28
 8006516:	4619      	mov	r1, r3
 8006518:	4808      	ldr	r0, [pc, #32]	; (800653c <HAL_UART_MspInit+0x13c>)
 800651a:	f000 fcfd 	bl	8006f18 <HAL_GPIO_Init>
}
 800651e:	bf00      	nop
 8006520:	3730      	adds	r7, #48	; 0x30
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40005000 	.word	0x40005000
 800652c:	40023800 	.word	0x40023800
 8006530:	40020800 	.word	0x40020800
 8006534:	40020c00 	.word	0x40020c00
 8006538:	40004800 	.word	0x40004800
 800653c:	40020400 	.word	0x40020400

08006540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006544:	480d      	ldr	r0, [pc, #52]	; (800657c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006546:	490e      	ldr	r1, [pc, #56]	; (8006580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006548:	4a0e      	ldr	r2, [pc, #56]	; (8006584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800654a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800654c:	e002      	b.n	8006554 <LoopCopyDataInit>

0800654e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800654e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006552:	3304      	adds	r3, #4

08006554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006558:	d3f9      	bcc.n	800654e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800655a:	4a0b      	ldr	r2, [pc, #44]	; (8006588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800655c:	4c0b      	ldr	r4, [pc, #44]	; (800658c <LoopFillZerobss+0x26>)
  movs r3, #0
 800655e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006560:	e001      	b.n	8006566 <LoopFillZerobss>

08006562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006564:	3204      	adds	r2, #4

08006566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006568:	d3fb      	bcc.n	8006562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800656a:	f7ff fb87 	bl	8005c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800656e:	f006 f83d 	bl	800c5ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006572:	f7fe fecb 	bl	800530c <main>
  bx  lr    
 8006576:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800657c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006580:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8006584:	0800fa28 	.word	0x0800fa28
  ldr r2, =_sbss
 8006588:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800658c:	2000342c 	.word	0x2000342c

08006590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006590:	e7fe      	b.n	8006590 <ADC_IRQHandler>
	...

08006594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <HAL_Init+0x40>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a0d      	ldr	r2, [pc, #52]	; (80065d4 <HAL_Init+0x40>)
 800659e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <HAL_Init+0x40>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <HAL_Init+0x40>)
 80065aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <HAL_Init+0x40>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a07      	ldr	r2, [pc, #28]	; (80065d4 <HAL_Init+0x40>)
 80065b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065bc:	2003      	movs	r0, #3
 80065be:	f000 f94f 	bl	8006860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065c2:	200f      	movs	r0, #15
 80065c4:	f000 f808 	bl	80065d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065c8:	f7ff fac0 	bl	8005b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40023c00 	.word	0x40023c00

080065d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_InitTick+0x54>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	4b12      	ldr	r3, [pc, #72]	; (8006630 <HAL_InitTick+0x58>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	4619      	mov	r1, r3
 80065ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 f967 	bl	80068ca <HAL_SYSTICK_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e00e      	b.n	8006624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b0f      	cmp	r3, #15
 800660a:	d80a      	bhi.n	8006622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800660c:	2200      	movs	r2, #0
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	f04f 30ff 	mov.w	r0, #4294967295
 8006614:	f000 f92f 	bl	8006876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006618:	4a06      	ldr	r2, [pc, #24]	; (8006634 <HAL_InitTick+0x5c>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e000      	b.n	8006624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000150 	.word	0x20000150
 8006630:	20000180 	.word	0x20000180
 8006634:	2000017c 	.word	0x2000017c

08006638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <HAL_IncTick+0x20>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_IncTick+0x24>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4413      	add	r3, r2
 8006648:	4a04      	ldr	r2, [pc, #16]	; (800665c <HAL_IncTick+0x24>)
 800664a:	6013      	str	r3, [r2, #0]
}
 800664c:	bf00      	nop
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000180 	.word	0x20000180
 800665c:	20003428 	.word	0x20003428

08006660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return uwTick;
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_GetTick+0x14>)
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20003428 	.word	0x20003428

08006678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006680:	f7ff ffee 	bl	8006660 <HAL_GetTick>
 8006684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d005      	beq.n	800669e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <HAL_Delay+0x44>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800669e:	bf00      	nop
 80066a0:	f7ff ffde 	bl	8006660 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d8f7      	bhi.n	80066a0 <HAL_Delay+0x28>
  {
  }
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000180 	.word	0x20000180

080066c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <__NVIC_SetPriorityGrouping+0x44>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066dc:	4013      	ands	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066f2:	4a04      	ldr	r2, [pc, #16]	; (8006704 <__NVIC_SetPriorityGrouping+0x44>)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	60d3      	str	r3, [r2, #12]
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	e000ed00 	.word	0xe000ed00

08006708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <__NVIC_GetPriorityGrouping+0x18>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	0a1b      	lsrs	r3, r3, #8
 8006712:	f003 0307 	and.w	r3, r3, #7
}
 8006716:	4618      	mov	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	db0b      	blt.n	800674e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	f003 021f 	and.w	r2, r3, #31
 800673c:	4907      	ldr	r1, [pc, #28]	; (800675c <__NVIC_EnableIRQ+0x38>)
 800673e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	2001      	movs	r0, #1
 8006746:	fa00 f202 	lsl.w	r2, r0, r2
 800674a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	e000e100 	.word	0xe000e100

08006760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800676c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006770:	2b00      	cmp	r3, #0
 8006772:	db0a      	blt.n	800678a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	490c      	ldr	r1, [pc, #48]	; (80067ac <__NVIC_SetPriority+0x4c>)
 800677a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677e:	0112      	lsls	r2, r2, #4
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	440b      	add	r3, r1
 8006784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006788:	e00a      	b.n	80067a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4908      	ldr	r1, [pc, #32]	; (80067b0 <__NVIC_SetPriority+0x50>)
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	3b04      	subs	r3, #4
 8006798:	0112      	lsls	r2, r2, #4
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	440b      	add	r3, r1
 800679e:	761a      	strb	r2, [r3, #24]
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	e000e100 	.word	0xe000e100
 80067b0:	e000ed00 	.word	0xe000ed00

080067b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	; 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f1c3 0307 	rsb	r3, r3, #7
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	bf28      	it	cs
 80067d2:	2304      	movcs	r3, #4
 80067d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3304      	adds	r3, #4
 80067da:	2b06      	cmp	r3, #6
 80067dc:	d902      	bls.n	80067e4 <NVIC_EncodePriority+0x30>
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	3b03      	subs	r3, #3
 80067e2:	e000      	b.n	80067e6 <NVIC_EncodePriority+0x32>
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067e8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	43da      	mvns	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	401a      	ands	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	fa01 f303 	lsl.w	r3, r1, r3
 8006806:	43d9      	mvns	r1, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800680c:	4313      	orrs	r3, r2
         );
}
 800680e:	4618      	mov	r0, r3
 8006810:	3724      	adds	r7, #36	; 0x24
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3b01      	subs	r3, #1
 8006828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800682c:	d301      	bcc.n	8006832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800682e:	2301      	movs	r3, #1
 8006830:	e00f      	b.n	8006852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006832:	4a0a      	ldr	r2, [pc, #40]	; (800685c <SysTick_Config+0x40>)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3b01      	subs	r3, #1
 8006838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800683a:	210f      	movs	r1, #15
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	f7ff ff8e 	bl	8006760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <SysTick_Config+0x40>)
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800684a:	4b04      	ldr	r3, [pc, #16]	; (800685c <SysTick_Config+0x40>)
 800684c:	2207      	movs	r2, #7
 800684e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	e000e010 	.word	0xe000e010

08006860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff ff29 	bl	80066c0 <__NVIC_SetPriorityGrouping>
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af00      	add	r7, sp, #0
 800687c:	4603      	mov	r3, r0
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006888:	f7ff ff3e 	bl	8006708 <__NVIC_GetPriorityGrouping>
 800688c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	6978      	ldr	r0, [r7, #20]
 8006894:	f7ff ff8e 	bl	80067b4 <NVIC_EncodePriority>
 8006898:	4602      	mov	r2, r0
 800689a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff ff5d 	bl	8006760 <__NVIC_SetPriority>
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	4603      	mov	r3, r0
 80068b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff ff31 	bl	8006724 <__NVIC_EnableIRQ>
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff ffa2 	bl	800681c <SysTick_Config>
 80068d8:	4603      	mov	r3, r0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80068f0:	f7ff feb6 	bl	8006660 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e099      	b.n	8006a34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006920:	e00f      	b.n	8006942 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006922:	f7ff fe9d 	bl	8006660 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b05      	cmp	r3, #5
 800692e:	d908      	bls.n	8006942 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2203      	movs	r2, #3
 800693a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e078      	b.n	8006a34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e8      	bne.n	8006922 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4b38      	ldr	r3, [pc, #224]	; (8006a3c <HAL_DMA_Init+0x158>)
 800695c:	4013      	ands	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800696e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800697a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	2b04      	cmp	r3, #4
 800699a:	d107      	bne.n	80069ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	4313      	orrs	r3, r2
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d117      	bne.n	8006a06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00e      	beq.n	8006a06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fa19 	bl	8006e20 <DMA_CheckFifoParam>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a02:	2301      	movs	r3, #1
 8006a04:	e016      	b.n	8006a34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9d0 	bl	8006db4 <DMA_CalcBaseAndBitshift>
 8006a14:	4603      	mov	r3, r0
 8006a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	223f      	movs	r2, #63	; 0x3f
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	f010803f 	.word	0xf010803f

08006a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d004      	beq.n	8006a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e00c      	b.n	8006a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2205      	movs	r2, #5
 8006a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a90:	4b8e      	ldr	r3, [pc, #568]	; (8006ccc <HAL_DMA_IRQHandler+0x248>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a8e      	ldr	r2, [pc, #568]	; (8006cd0 <HAL_DMA_IRQHandler+0x24c>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	0a9b      	lsrs	r3, r3, #10
 8006a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aae:	2208      	movs	r2, #8
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01a      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0204 	bic.w	r2, r2, #4
 8006ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	2208      	movs	r2, #8
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	f043 0201 	orr.w	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	2201      	movs	r2, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d012      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	2201      	movs	r2, #1
 8006b14:	409a      	lsls	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	f043 0202 	orr.w	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d012      	beq.n	8006b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	2204      	movs	r2, #4
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	f043 0204 	orr.w	r2, r3, #4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b60:	2210      	movs	r2, #16
 8006b62:	409a      	lsls	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d043      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d03c      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7e:	2210      	movs	r2, #16
 8006b80:	409a      	lsls	r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d018      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d024      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
 8006bb2:	e01f      	b.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01b      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
 8006bc4:	e016      	b.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d107      	bne.n	8006be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0208 	bic.w	r2, r2, #8
 8006be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 808f 	beq.w	8006d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8087 	beq.w	8006d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	409a      	lsls	r2, r3
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	d136      	bne.n	8006c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0216 	bic.w	r2, r2, #22
 8006c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695a      	ldr	r2, [r3, #20]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <HAL_DMA_IRQHandler+0x1da>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0208 	bic.w	r2, r2, #8
 8006c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c72:	223f      	movs	r2, #63	; 0x3f
 8006c74:	409a      	lsls	r2, r3
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d07e      	beq.n	8006d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
        }
        return;
 8006c9a:	e079      	b.n	8006d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01d      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10d      	bne.n	8006cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d031      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
 8006cc8:	e02c      	b.n	8006d24 <HAL_DMA_IRQHandler+0x2a0>
 8006cca:	bf00      	nop
 8006ccc:	20000150 	.word	0x20000150
 8006cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d023      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
 8006ce4:	e01e      	b.n	8006d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10f      	bne.n	8006d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0210 	bic.w	r2, r2, #16
 8006d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d032      	beq.n	8006d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d022      	beq.n	8006d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0201 	bic.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d307      	bcc.n	8006d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f2      	bne.n	8006d50 <HAL_DMA_IRQHandler+0x2cc>
 8006d6a:	e000      	b.n	8006d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
 8006d8e:	e000      	b.n	8006d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d90:	bf00      	nop
    }
  }
}
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da6:	b2db      	uxtb	r3, r3
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	3b10      	subs	r3, #16
 8006dc4:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <DMA_CalcBaseAndBitshift+0x64>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006dce:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <DMA_CalcBaseAndBitshift+0x68>)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d909      	bls.n	8006df6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	1d1a      	adds	r2, r3, #4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	659a      	str	r2, [r3, #88]	; 0x58
 8006df4:	e007      	b.n	8006e06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	aaaaaaab 	.word	0xaaaaaaab
 8006e1c:	0800f9e8 	.word	0x0800f9e8

08006e20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d11f      	bne.n	8006e7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d856      	bhi.n	8006eee <DMA_CheckFifoParam+0xce>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <DMA_CheckFifoParam+0x28>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e6b 	.word	0x08006e6b
 8006e50:	08006e59 	.word	0x08006e59
 8006e54:	08006eef 	.word	0x08006eef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d046      	beq.n	8006ef2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e68:	e043      	b.n	8006ef2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e72:	d140      	bne.n	8006ef6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e78:	e03d      	b.n	8006ef6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e82:	d121      	bne.n	8006ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d837      	bhi.n	8006efa <DMA_CheckFifoParam+0xda>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <DMA_CheckFifoParam+0x70>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006ea7 	.word	0x08006ea7
 8006e98:	08006ea1 	.word	0x08006ea1
 8006e9c:	08006eb9 	.word	0x08006eb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea4:	e030      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d025      	beq.n	8006efe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eb6:	e022      	b.n	8006efe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ec0:	d11f      	bne.n	8006f02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006ec6:	e01c      	b.n	8006f02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d903      	bls.n	8006ed6 <DMA_CheckFifoParam+0xb6>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d003      	beq.n	8006edc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ed4:	e018      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eda:	e015      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00e      	beq.n	8006f06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e00b      	b.n	8006f06 <DMA_CheckFifoParam+0xe6>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e00a      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e008      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e006      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      break;
 8006efa:	bf00      	nop
 8006efc:	e004      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      break;
 8006efe:	bf00      	nop
 8006f00:	e002      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      break;   
 8006f02:	bf00      	nop
 8006f04:	e000      	b.n	8006f08 <DMA_CheckFifoParam+0xe8>
      break;
 8006f06:	bf00      	nop
    }
  } 
  
  return status; 
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop

08006f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b089      	sub	sp, #36	; 0x24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e16b      	b.n	800720c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f34:	2201      	movs	r2, #1
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4013      	ands	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	f040 815a 	bne.w	8007206 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d005      	beq.n	8006f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d130      	bne.n	8006fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	2203      	movs	r2, #3
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	4013      	ands	r3, r2
 8006fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 0201 	and.w	r2, r3, #1
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d017      	beq.n	8007008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	4013      	ands	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d123      	bne.n	800705c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	08da      	lsrs	r2, r3, #3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3208      	adds	r2, #8
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	220f      	movs	r2, #15
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4013      	ands	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4313      	orrs	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	08da      	lsrs	r2, r3, #3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3208      	adds	r2, #8
 8007056:	69b9      	ldr	r1, [r7, #24]
 8007058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	2203      	movs	r2, #3
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f003 0203 	and.w	r2, r3, #3
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4313      	orrs	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80b4 	beq.w	8007206 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	4b60      	ldr	r3, [pc, #384]	; (8007224 <HAL_GPIO_Init+0x30c>)
 80070a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a6:	4a5f      	ldr	r2, [pc, #380]	; (8007224 <HAL_GPIO_Init+0x30c>)
 80070a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070ac:	6453      	str	r3, [r2, #68]	; 0x44
 80070ae:	4b5d      	ldr	r3, [pc, #372]	; (8007224 <HAL_GPIO_Init+0x30c>)
 80070b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070ba:	4a5b      	ldr	r2, [pc, #364]	; (8007228 <HAL_GPIO_Init+0x310>)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	089b      	lsrs	r3, r3, #2
 80070c0:	3302      	adds	r3, #2
 80070c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	220f      	movs	r2, #15
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a52      	ldr	r2, [pc, #328]	; (800722c <HAL_GPIO_Init+0x314>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02b      	beq.n	800713e <HAL_GPIO_Init+0x226>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a51      	ldr	r2, [pc, #324]	; (8007230 <HAL_GPIO_Init+0x318>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d025      	beq.n	800713a <HAL_GPIO_Init+0x222>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a50      	ldr	r2, [pc, #320]	; (8007234 <HAL_GPIO_Init+0x31c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01f      	beq.n	8007136 <HAL_GPIO_Init+0x21e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a4f      	ldr	r2, [pc, #316]	; (8007238 <HAL_GPIO_Init+0x320>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d019      	beq.n	8007132 <HAL_GPIO_Init+0x21a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a4e      	ldr	r2, [pc, #312]	; (800723c <HAL_GPIO_Init+0x324>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <HAL_GPIO_Init+0x216>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a4d      	ldr	r2, [pc, #308]	; (8007240 <HAL_GPIO_Init+0x328>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d00d      	beq.n	800712a <HAL_GPIO_Init+0x212>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a4c      	ldr	r2, [pc, #304]	; (8007244 <HAL_GPIO_Init+0x32c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d007      	beq.n	8007126 <HAL_GPIO_Init+0x20e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a4b      	ldr	r2, [pc, #300]	; (8007248 <HAL_GPIO_Init+0x330>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d101      	bne.n	8007122 <HAL_GPIO_Init+0x20a>
 800711e:	2307      	movs	r3, #7
 8007120:	e00e      	b.n	8007140 <HAL_GPIO_Init+0x228>
 8007122:	2308      	movs	r3, #8
 8007124:	e00c      	b.n	8007140 <HAL_GPIO_Init+0x228>
 8007126:	2306      	movs	r3, #6
 8007128:	e00a      	b.n	8007140 <HAL_GPIO_Init+0x228>
 800712a:	2305      	movs	r3, #5
 800712c:	e008      	b.n	8007140 <HAL_GPIO_Init+0x228>
 800712e:	2304      	movs	r3, #4
 8007130:	e006      	b.n	8007140 <HAL_GPIO_Init+0x228>
 8007132:	2303      	movs	r3, #3
 8007134:	e004      	b.n	8007140 <HAL_GPIO_Init+0x228>
 8007136:	2302      	movs	r3, #2
 8007138:	e002      	b.n	8007140 <HAL_GPIO_Init+0x228>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_GPIO_Init+0x228>
 800713e:	2300      	movs	r3, #0
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	f002 0203 	and.w	r2, r2, #3
 8007146:	0092      	lsls	r2, r2, #2
 8007148:	4093      	lsls	r3, r2
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	4313      	orrs	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007150:	4935      	ldr	r1, [pc, #212]	; (8007228 <HAL_GPIO_Init+0x310>)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	089b      	lsrs	r3, r3, #2
 8007156:	3302      	adds	r3, #2
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800715e:	4b3b      	ldr	r3, [pc, #236]	; (800724c <HAL_GPIO_Init+0x334>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	43db      	mvns	r3, r3
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	4013      	ands	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007182:	4a32      	ldr	r2, [pc, #200]	; (800724c <HAL_GPIO_Init+0x334>)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007188:	4b30      	ldr	r3, [pc, #192]	; (800724c <HAL_GPIO_Init+0x334>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	43db      	mvns	r3, r3
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4013      	ands	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071ac:	4a27      	ldr	r2, [pc, #156]	; (800724c <HAL_GPIO_Init+0x334>)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071b2:	4b26      	ldr	r3, [pc, #152]	; (800724c <HAL_GPIO_Init+0x334>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	43db      	mvns	r3, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	4013      	ands	r3, r2
 80071c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071d6:	4a1d      	ldr	r2, [pc, #116]	; (800724c <HAL_GPIO_Init+0x334>)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071dc:	4b1b      	ldr	r3, [pc, #108]	; (800724c <HAL_GPIO_Init+0x334>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	4013      	ands	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007200:	4a12      	ldr	r2, [pc, #72]	; (800724c <HAL_GPIO_Init+0x334>)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3301      	adds	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	2b0f      	cmp	r3, #15
 8007210:	f67f ae90 	bls.w	8006f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3724      	adds	r7, #36	; 0x24
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40023800 	.word	0x40023800
 8007228:	40013800 	.word	0x40013800
 800722c:	40020000 	.word	0x40020000
 8007230:	40020400 	.word	0x40020400
 8007234:	40020800 	.word	0x40020800
 8007238:	40020c00 	.word	0x40020c00
 800723c:	40021000 	.word	0x40021000
 8007240:	40021400 	.word	0x40021400
 8007244:	40021800 	.word	0x40021800
 8007248:	40021c00 	.word	0x40021c00
 800724c:	40013c00 	.word	0x40013c00

08007250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	887b      	ldrh	r3, [r7, #2]
 8007262:	4013      	ands	r3, r2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
 800726c:	e001      	b.n	8007272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	807b      	strh	r3, [r7, #2]
 800728c:	4613      	mov	r3, r2
 800728e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007290:	787b      	ldrb	r3, [r7, #1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007296:	887a      	ldrh	r2, [r7, #2]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800729c:	e003      	b.n	80072a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800729e:	887b      	ldrh	r3, [r7, #2]
 80072a0:	041a      	lsls	r2, r3, #16
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	619a      	str	r2, [r3, #24]
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e12b      	b.n	800751e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fd ff66 	bl	80051ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2224      	movs	r2, #36	; 0x24
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007318:	f003 f8d6 	bl	800a4c8 <HAL_RCC_GetPCLK1Freq>
 800731c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4a81      	ldr	r2, [pc, #516]	; (8007528 <HAL_I2C_Init+0x274>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d807      	bhi.n	8007338 <HAL_I2C_Init+0x84>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4a80      	ldr	r2, [pc, #512]	; (800752c <HAL_I2C_Init+0x278>)
 800732c:	4293      	cmp	r3, r2
 800732e:	bf94      	ite	ls
 8007330:	2301      	movls	r3, #1
 8007332:	2300      	movhi	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	e006      	b.n	8007346 <HAL_I2C_Init+0x92>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a7d      	ldr	r2, [pc, #500]	; (8007530 <HAL_I2C_Init+0x27c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	bf94      	ite	ls
 8007340:	2301      	movls	r3, #1
 8007342:	2300      	movhi	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e0e7      	b.n	800751e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4a78      	ldr	r2, [pc, #480]	; (8007534 <HAL_I2C_Init+0x280>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	0c9b      	lsrs	r3, r3, #18
 8007358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4a6a      	ldr	r2, [pc, #424]	; (8007528 <HAL_I2C_Init+0x274>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d802      	bhi.n	8007388 <HAL_I2C_Init+0xd4>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	3301      	adds	r3, #1
 8007386:	e009      	b.n	800739c <HAL_I2C_Init+0xe8>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800738e:	fb02 f303 	mul.w	r3, r2, r3
 8007392:	4a69      	ldr	r2, [pc, #420]	; (8007538 <HAL_I2C_Init+0x284>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	099b      	lsrs	r3, r3, #6
 800739a:	3301      	adds	r3, #1
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	430b      	orrs	r3, r1
 80073a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80073ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	495c      	ldr	r1, [pc, #368]	; (8007528 <HAL_I2C_Init+0x274>)
 80073b8:	428b      	cmp	r3, r1
 80073ba:	d819      	bhi.n	80073f0 <HAL_I2C_Init+0x13c>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	1e59      	subs	r1, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073ca:	1c59      	adds	r1, r3, #1
 80073cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073d0:	400b      	ands	r3, r1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_I2C_Init+0x138>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1e59      	subs	r1, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80073e4:	3301      	adds	r3, #1
 80073e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ea:	e051      	b.n	8007490 <HAL_I2C_Init+0x1dc>
 80073ec:	2304      	movs	r3, #4
 80073ee:	e04f      	b.n	8007490 <HAL_I2C_Init+0x1dc>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d111      	bne.n	800741c <HAL_I2C_Init+0x168>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1e58      	subs	r0, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	440b      	add	r3, r1
 8007406:	fbb0 f3f3 	udiv	r3, r0, r3
 800740a:	3301      	adds	r3, #1
 800740c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007410:	2b00      	cmp	r3, #0
 8007412:	bf0c      	ite	eq
 8007414:	2301      	moveq	r3, #1
 8007416:	2300      	movne	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e012      	b.n	8007442 <HAL_I2C_Init+0x18e>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1e58      	subs	r0, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6859      	ldr	r1, [r3, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	0099      	lsls	r1, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007432:	3301      	adds	r3, #1
 8007434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <HAL_I2C_Init+0x196>
 8007446:	2301      	movs	r3, #1
 8007448:	e022      	b.n	8007490 <HAL_I2C_Init+0x1dc>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10e      	bne.n	8007470 <HAL_I2C_Init+0x1bc>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1e58      	subs	r0, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	440b      	add	r3, r1
 8007460:	fbb0 f3f3 	udiv	r3, r0, r3
 8007464:	3301      	adds	r3, #1
 8007466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800746a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746e:	e00f      	b.n	8007490 <HAL_I2C_Init+0x1dc>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	1e58      	subs	r0, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	0099      	lsls	r1, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	fbb0 f3f3 	udiv	r3, r0, r3
 8007486:	3301      	adds	r3, #1
 8007488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	6809      	ldr	r1, [r1, #0]
 8007494:	4313      	orrs	r3, r2
 8007496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80074be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6911      	ldr	r1, [r2, #16]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68d2      	ldr	r2, [r2, #12]
 80074ca:	4311      	orrs	r1, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695a      	ldr	r2, [r3, #20]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	000186a0 	.word	0x000186a0
 800752c:	001e847f 	.word	0x001e847f
 8007530:	003d08ff 	.word	0x003d08ff
 8007534:	431bde83 	.word	0x431bde83
 8007538:	10624dd3 	.word	0x10624dd3

0800753c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af02      	add	r7, sp, #8
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	461a      	mov	r2, r3
 800754a:	4603      	mov	r3, r0
 800754c:	817b      	strh	r3, [r7, #10]
 800754e:	460b      	mov	r3, r1
 8007550:	813b      	strh	r3, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007556:	f7ff f883 	bl	8006660 <HAL_GetTick>
 800755a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b20      	cmp	r3, #32
 8007566:	f040 80d9 	bne.w	800771c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	2319      	movs	r3, #25
 8007570:	2201      	movs	r2, #1
 8007572:	496d      	ldr	r1, [pc, #436]	; (8007728 <HAL_I2C_Mem_Write+0x1ec>)
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f002 f90d 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007580:	2302      	movs	r3, #2
 8007582:	e0cc      	b.n	800771e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_I2C_Mem_Write+0x56>
 800758e:	2302      	movs	r3, #2
 8007590:	e0c5      	b.n	800771e <HAL_I2C_Mem_Write+0x1e2>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d007      	beq.n	80075b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2221      	movs	r2, #33	; 0x21
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2240      	movs	r2, #64	; 0x40
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a3a      	ldr	r2, [r7, #32]
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4a4d      	ldr	r2, [pc, #308]	; (800772c <HAL_I2C_Mem_Write+0x1f0>)
 80075f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075fa:	88f8      	ldrh	r0, [r7, #6]
 80075fc:	893a      	ldrh	r2, [r7, #8]
 80075fe:	8979      	ldrh	r1, [r7, #10]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4603      	mov	r3, r0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f001 fe9c 	bl	8009348 <I2C_RequestMemoryWrite>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d052      	beq.n	80076bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e081      	b.n	800771e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f002 f98e 	bl	8009940 <I2C_WaitOnTXEFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00d      	beq.n	8007646 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2b04      	cmp	r3, #4
 8007630:	d107      	bne.n	8007642 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e06b      	b.n	800771e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d11b      	bne.n	80076bc <HAL_I2C_Mem_Write+0x180>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	d017      	beq.n	80076bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1aa      	bne.n	800761a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f002 f97a 	bl	80099c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00d      	beq.n	80076f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d107      	bne.n	80076ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e016      	b.n	800771e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	e000      	b.n	800771e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800771c:	2302      	movs	r3, #2
  }
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	00100002 	.word	0x00100002
 800772c:	ffff0000 	.word	0xffff0000

08007730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08c      	sub	sp, #48	; 0x30
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	461a      	mov	r2, r3
 800773e:	4603      	mov	r3, r0
 8007740:	817b      	strh	r3, [r7, #10]
 8007742:	460b      	mov	r3, r1
 8007744:	813b      	strh	r3, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800774a:	f7fe ff89 	bl	8006660 <HAL_GetTick>
 800774e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b20      	cmp	r3, #32
 800775a:	f040 8208 	bne.w	8007b6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	2319      	movs	r3, #25
 8007764:	2201      	movs	r2, #1
 8007766:	497b      	ldr	r1, [pc, #492]	; (8007954 <HAL_I2C_Mem_Read+0x224>)
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f002 f813 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007774:	2302      	movs	r3, #2
 8007776:	e1fb      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2C_Mem_Read+0x56>
 8007782:	2302      	movs	r3, #2
 8007784:	e1f4      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b01      	cmp	r3, #1
 800779a:	d007      	beq.n	80077ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0201 	orr.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2222      	movs	r2, #34	; 0x22
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2240      	movs	r2, #64	; 0x40
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80077dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a5b      	ldr	r2, [pc, #364]	; (8007958 <HAL_I2C_Mem_Read+0x228>)
 80077ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077ee:	88f8      	ldrh	r0, [r7, #6]
 80077f0:	893a      	ldrh	r2, [r7, #8]
 80077f2:	8979      	ldrh	r1, [r7, #10]
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	4603      	mov	r3, r0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 fe38 	bl	8009474 <I2C_RequestMemoryRead>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e1b0      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	2b00      	cmp	r3, #0
 8007814:	d113      	bne.n	800783e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007816:	2300      	movs	r3, #0
 8007818:	623b      	str	r3, [r7, #32]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	623b      	str	r3, [r7, #32]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	e184      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007842:	2b01      	cmp	r3, #1
 8007844:	d11b      	bne.n	800787e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	e164      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007882:	2b02      	cmp	r3, #2
 8007884:	d11b      	bne.n	80078be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a6:	2300      	movs	r3, #0
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	e144      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078d4:	e138      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078da:	2b03      	cmp	r3, #3
 80078dc:	f200 80f1 	bhi.w	8007ac2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d123      	bne.n	8007930 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f002 f8db 	bl	8009aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e139      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800792e:	e10b      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007934:	2b02      	cmp	r3, #2
 8007936:	d14e      	bne.n	80079d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	2200      	movs	r2, #0
 8007940:	4906      	ldr	r1, [pc, #24]	; (800795c <HAL_I2C_Mem_Read+0x22c>)
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f001 ff26 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e10e      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
 8007952:	bf00      	nop
 8007954:	00100002 	.word	0x00100002
 8007958:	ffff0000 	.word	0xffff0000
 800795c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079d4:	e0b8      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	2200      	movs	r2, #0
 80079de:	4966      	ldr	r1, [pc, #408]	; (8007b78 <HAL_I2C_Mem_Read+0x448>)
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f001 fed7 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0bf      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	2200      	movs	r2, #0
 8007a3a:	494f      	ldr	r1, [pc, #316]	; (8007b78 <HAL_I2C_Mem_Read+0x448>)
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f001 fea9 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e091      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691a      	ldr	r2, [r3, #16]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ac0:	e042      	b.n	8007b48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f001 ffee 	bl	8009aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e04c      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d118      	bne.n	8007b48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f aec2 	bne.w	80078d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3728      	adds	r7, #40	; 0x28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	00010004 	.word	0x00010004

08007b7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b10      	cmp	r3, #16
 8007baa:	d003      	beq.n	8007bb4 <HAL_I2C_EV_IRQHandler+0x38>
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	f040 80c1 	bne.w	8007d36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10d      	bne.n	8007bea <HAL_I2C_EV_IRQHandler+0x6e>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007bd4:	d003      	beq.n	8007bde <HAL_I2C_EV_IRQHandler+0x62>
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007bdc:	d101      	bne.n	8007be2 <HAL_I2C_EV_IRQHandler+0x66>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <HAL_I2C_EV_IRQHandler+0x68>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	f000 8132 	beq.w	8007e4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00c      	beq.n	8007c0e <HAL_I2C_EV_IRQHandler+0x92>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	0a5b      	lsrs	r3, r3, #9
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 ffd6 	bl	8009bb2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fd83 	bl	8008712 <I2C_Master_SB>
 8007c0c:	e092      	b.n	8007d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <HAL_I2C_EV_IRQHandler+0xb2>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	0a5b      	lsrs	r3, r3, #9
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fdf9 	bl	800881e <I2C_Master_ADD10>
 8007c2c:	e082      	b.n	8007d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	085b      	lsrs	r3, r3, #1
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <HAL_I2C_EV_IRQHandler+0xd2>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fe13 	bl	8008872 <I2C_Master_ADDR>
 8007c4c:	e072      	b.n	8007d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	089b      	lsrs	r3, r3, #2
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d03b      	beq.n	8007cd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c68:	f000 80f3 	beq.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	09db      	lsrs	r3, r3, #7
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_I2C_EV_IRQHandler+0x11c>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	0a9b      	lsrs	r3, r3, #10
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <HAL_I2C_EV_IRQHandler+0x11c>
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	089b      	lsrs	r3, r3, #2
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d103      	bne.n	8007c98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9f3 	bl	800807c <I2C_MasterTransmit_TXE>
 8007c96:	e04d      	b.n	8007d34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80d6 	beq.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	0a5b      	lsrs	r3, r3, #9
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80cf 	beq.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b21      	cmp	r3, #33	; 0x21
 8007cb8:	d103      	bne.n	8007cc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa7a 	bl	80081b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cc0:	e0c7      	b.n	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	f040 80c4 	bne.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fae8 	bl	80082a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cd0:	e0bf      	b.n	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce0:	f000 80b7 	beq.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00f      	beq.n	8007d10 <HAL_I2C_EV_IRQHandler+0x194>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	0a9b      	lsrs	r3, r3, #10
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <HAL_I2C_EV_IRQHandler+0x194>
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	089b      	lsrs	r3, r3, #2
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fb5d 	bl	80083c8 <I2C_MasterReceive_RXNE>
 8007d0e:	e011      	b.n	8007d34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	089b      	lsrs	r3, r3, #2
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 809a 	beq.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	0a5b      	lsrs	r3, r3, #9
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8093 	beq.w	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fc06 	bl	800853e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d32:	e08e      	b.n	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007d34:	e08d      	b.n	8007e52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	e007      	b.n	8007d58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d012      	beq.n	8007d8a <HAL_I2C_EV_IRQHandler+0x20e>
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	0a5b      	lsrs	r3, r3, #9
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00c      	beq.n	8007d8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 ffc4 	bl	8008d10 <I2C_Slave_ADDR>
 8007d88:	e066      	b.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <HAL_I2C_EV_IRQHandler+0x22e>
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	0a5b      	lsrs	r3, r3, #9
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fffe 	bl	8008da4 <I2C_Slave_STOPF>
 8007da8:	e056      	b.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	2b21      	cmp	r3, #33	; 0x21
 8007dae:	d002      	beq.n	8007db6 <HAL_I2C_EV_IRQHandler+0x23a>
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b29      	cmp	r3, #41	; 0x29
 8007db4:	d125      	bne.n	8007e02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	09db      	lsrs	r3, r3, #7
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00f      	beq.n	8007de2 <HAL_I2C_EV_IRQHandler+0x266>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	0a9b      	lsrs	r3, r3, #10
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <HAL_I2C_EV_IRQHandler+0x266>
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	089b      	lsrs	r3, r3, #2
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d103      	bne.n	8007de2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 feda 	bl	8008b94 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007de0:	e039      	b.n	8007e56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d033      	beq.n	8007e56 <HAL_I2C_EV_IRQHandler+0x2da>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	0a5b      	lsrs	r3, r3, #9
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d02d      	beq.n	8007e56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff07 	bl	8008c0e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e00:	e029      	b.n	8007e56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00f      	beq.n	8007e2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	0a9b      	lsrs	r3, r3, #10
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	089b      	lsrs	r3, r3, #2
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 ff12 	bl	8008c50 <I2C_SlaveReceive_RXNE>
 8007e2c:	e014      	b.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	089b      	lsrs	r3, r3, #2
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00e      	beq.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 ff40 	bl	8008ccc <I2C_SlaveReceive_BTF>
 8007e4c:	e004      	b.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007e58:	3720      	adds	r7, #32
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b08a      	sub	sp, #40	; 0x28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00e      	beq.n	8007eac <HAL_I2C_ER_IRQHandler+0x4e>
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d008      	beq.n	8007eac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007eaa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	0a5b      	lsrs	r3, r3, #9
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_I2C_ER_IRQHandler+0x78>
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d008      	beq.n	8007ed6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007ed4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	0a9b      	lsrs	r3, r3, #10
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d03f      	beq.n	8007f62 <HAL_I2C_ER_IRQHandler+0x104>
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	0a1b      	lsrs	r3, r3, #8
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d039      	beq.n	8007f62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007eee:	7efb      	ldrb	r3, [r7, #27]
 8007ef0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007f08:	7ebb      	ldrb	r3, [r7, #26]
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d112      	bne.n	8007f34 <HAL_I2C_ER_IRQHandler+0xd6>
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <HAL_I2C_ER_IRQHandler+0xd6>
 8007f14:	7cfb      	ldrb	r3, [r7, #19]
 8007f16:	2b21      	cmp	r3, #33	; 0x21
 8007f18:	d008      	beq.n	8007f2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007f1a:	7cfb      	ldrb	r3, [r7, #19]
 8007f1c:	2b29      	cmp	r3, #41	; 0x29
 8007f1e:	d005      	beq.n	8007f2c <HAL_I2C_ER_IRQHandler+0xce>
 8007f20:	7cfb      	ldrb	r3, [r7, #19]
 8007f22:	2b28      	cmp	r3, #40	; 0x28
 8007f24:	d106      	bne.n	8007f34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b21      	cmp	r3, #33	; 0x21
 8007f2a:	d103      	bne.n	8007f34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 f869 	bl	8009004 <I2C_Slave_AF>
 8007f32:	e016      	b.n	8007f62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	f043 0304 	orr.w	r3, r3, #4
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007f46:	7efb      	ldrb	r3, [r7, #27]
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d002      	beq.n	8007f52 <HAL_I2C_ER_IRQHandler+0xf4>
 8007f4c:	7efb      	ldrb	r3, [r7, #27]
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d107      	bne.n	8007f62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	0adb      	lsrs	r3, r3, #11
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <HAL_I2C_ER_IRQHandler+0x12e>
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	f043 0308 	orr.w	r3, r3, #8
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007f8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f8a0 	bl	80090e4 <I2C_ITError>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3728      	adds	r7, #40	; 0x28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
 8008008:	4613      	mov	r3, r2
 800800a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008092:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d150      	bne.n	8008144 <I2C_MasterTransmit_TXE+0xc8>
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	2b21      	cmp	r3, #33	; 0x21
 80080a6:	d14d      	bne.n	8008144 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d01d      	beq.n	80080ea <I2C_MasterTransmit_TXE+0x6e>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d01a      	beq.n	80080ea <I2C_MasterTransmit_TXE+0x6e>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080ba:	d016      	beq.n	80080ea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080ca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2211      	movs	r2, #17
 80080d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ff62 	bl	8007fac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080e8:	e060      	b.n	80081ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080f8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008108:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d107      	bne.n	8008134 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ff7d 	bl	800802c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008132:	e03b      	b.n	80081ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff ff35 	bl	8007fac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008142:	e033      	b.n	80081ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b21      	cmp	r3, #33	; 0x21
 8008148:	d005      	beq.n	8008156 <I2C_MasterTransmit_TXE+0xda>
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d12d      	bne.n	80081ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b22      	cmp	r3, #34	; 0x22
 8008154:	d12a      	bne.n	80081ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d108      	bne.n	8008172 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008170:	e01c      	b.n	80081ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d103      	bne.n	8008186 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f88e 	bl	80082a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8008184:	e012      	b.n	80081ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80081aa:	e7ff      	b.n	80081ac <I2C_MasterTransmit_TXE+0x130>
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b21      	cmp	r3, #33	; 0x21
 80081cc:	d164      	bne.n	8008298 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80081fc:	e04c      	b.n	8008298 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d01d      	beq.n	8008240 <I2C_MasterTransmit_BTF+0x8c>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b20      	cmp	r3, #32
 8008208:	d01a      	beq.n	8008240 <I2C_MasterTransmit_BTF+0x8c>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008210:	d016      	beq.n	8008240 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008220:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2211      	movs	r2, #17
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff feb7 	bl	8007fac <HAL_I2C_MasterTxCpltCallback>
}
 800823e:	e02b      	b.n	8008298 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800824e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800825e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d107      	bne.n	800828a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fed2 	bl	800802c <HAL_I2C_MemTxCpltCallback>
}
 8008288:	e006      	b.n	8008298 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff fe8a 	bl	8007fac <HAL_I2C_MasterTxCpltCallback>
}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d11d      	bne.n	80082f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d10b      	bne.n	80082d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d0:	1c9a      	adds	r2, r3, #2
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80082d6:	e073      	b.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082dc:	b29b      	uxth	r3, r3
 80082de:	121b      	asrs	r3, r3, #8
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80082f2:	e065      	b.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d10b      	bne.n	8008314 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008300:	b2da      	uxtb	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008312:	e055      	b.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008318:	2b02      	cmp	r3, #2
 800831a:	d151      	bne.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	2b22      	cmp	r3, #34	; 0x22
 8008320:	d10d      	bne.n	800833e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008330:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800833c:	e040      	b.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d015      	beq.n	8008374 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b21      	cmp	r3, #33	; 0x21
 800834c:	d112      	bne.n	8008374 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008372:	e025      	b.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d120      	bne.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b21      	cmp	r3, #33	; 0x21
 8008382:	d11d      	bne.n	80083c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008392:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff fe36 	bl	800802c <HAL_I2C_MemTxCpltCallback>
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b22      	cmp	r3, #34	; 0x22
 80083da:	f040 80ac 	bne.w	8008536 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d921      	bls.n	8008430 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	f040 808c 	bne.w	8008536 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800842e:	e082      	b.n	8008536 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	2b02      	cmp	r3, #2
 8008436:	d075      	beq.n	8008524 <I2C_MasterReceive_RXNE+0x15c>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d002      	beq.n	8008444 <I2C_MasterReceive_RXNE+0x7c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d16f      	bne.n	8008524 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 fafd 	bl	8009a44 <I2C_WaitOnSTOPRequestThroughIT>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d142      	bne.n	80084d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800845e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800846e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691a      	ldr	r2, [r3, #16]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b40      	cmp	r3, #64	; 0x40
 80084a8:	d10a      	bne.n	80084c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fdc1 	bl	8008040 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80084be:	e03a      	b.n	8008536 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2212      	movs	r2, #18
 80084cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff fd76 	bl	8007fc0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80084d4:	e02f      	b.n	8008536 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff fd99 	bl	8008054 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008522:	e008      	b.n	8008536 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008532:	605a      	str	r2, [r3, #4]
}
 8008534:	e7ff      	b.n	8008536 <I2C_MasterReceive_RXNE+0x16e>
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b04      	cmp	r3, #4
 8008554:	d11b      	bne.n	800858e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008564:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800858c:	e0bd      	b.n	800870a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b03      	cmp	r3, #3
 8008596:	d129      	bne.n	80085ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d00a      	beq.n	80085c4 <I2C_MasterReceive_BTF+0x86>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d007      	beq.n	80085c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80085ea:	e08e      	b.n	800870a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d176      	bne.n	80086e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d002      	beq.n	8008602 <I2C_MasterReceive_BTF+0xc4>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b10      	cmp	r3, #16
 8008600:	d108      	bne.n	8008614 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e019      	b.n	8008648 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b04      	cmp	r3, #4
 8008618:	d002      	beq.n	8008620 <I2C_MasterReceive_BTF+0xe2>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d108      	bne.n	8008632 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e00a      	b.n	8008648 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b10      	cmp	r3, #16
 8008636:	d007      	beq.n	8008648 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008646:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691a      	ldr	r2, [r3, #16]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80086a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d10a      	bne.n	80086ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff fcba 	bl	8008040 <HAL_I2C_MemRxCpltCallback>
}
 80086cc:	e01d      	b.n	800870a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2212      	movs	r2, #18
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff fc6f 	bl	8007fc0 <HAL_I2C_MasterRxCpltCallback>
}
 80086e2:	e012      	b.n	800870a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d117      	bne.n	8008756 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872a:	2b00      	cmp	r3, #0
 800872c:	d109      	bne.n	8008742 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008732:	b2db      	uxtb	r3, r3
 8008734:	461a      	mov	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800873e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008740:	e067      	b.n	8008812 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f043 0301 	orr.w	r3, r3, #1
 800874c:	b2da      	uxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	611a      	str	r2, [r3, #16]
}
 8008754:	e05d      	b.n	8008812 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800875e:	d133      	bne.n	80087c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b21      	cmp	r3, #33	; 0x21
 800876a:	d109      	bne.n	8008780 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	b2db      	uxtb	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800877c:	611a      	str	r2, [r3, #16]
 800877e:	e008      	b.n	8008792 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	2b00      	cmp	r3, #0
 8008798:	d004      	beq.n	80087a4 <I2C_Master_SB+0x92>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d108      	bne.n	80087b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d032      	beq.n	8008812 <I2C_Master_SB+0x100>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02d      	beq.n	8008812 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087c4:	605a      	str	r2, [r3, #4]
}
 80087c6:	e024      	b.n	8008812 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10e      	bne.n	80087ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	11db      	asrs	r3, r3, #7
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0306 	and.w	r3, r3, #6
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f063 030f 	orn	r3, r3, #15
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	611a      	str	r2, [r3, #16]
}
 80087ec:	e011      	b.n	8008812 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10d      	bne.n	8008812 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	11db      	asrs	r3, r3, #7
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 0306 	and.w	r3, r3, #6
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f063 030e 	orn	r3, r3, #14
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	611a      	str	r2, [r3, #16]
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	b2da      	uxtb	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <I2C_Master_ADD10+0x26>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00c      	beq.n	8008866 <I2C_Master_ADD10+0x48>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008864:	605a      	str	r2, [r3, #4]
  }
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008872:	b480      	push	{r7}
 8008874:	b091      	sub	sp, #68	; 0x44
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b22      	cmp	r3, #34	; 0x22
 800889a:	f040 8169 	bne.w	8008b70 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10f      	bne.n	80088c6 <I2C_Master_ADDR+0x54>
 80088a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088aa:	2b40      	cmp	r3, #64	; 0x40
 80088ac:	d10b      	bne.n	80088c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ae:	2300      	movs	r3, #0
 80088b0:	633b      	str	r3, [r7, #48]	; 0x30
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	633b      	str	r3, [r7, #48]	; 0x30
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	e160      	b.n	8008b88 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d11d      	bne.n	800890a <I2C_Master_ADDR+0x98>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088d6:	d118      	bne.n	800890a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088d8:	2300      	movs	r3, #0
 80088da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	651a      	str	r2, [r3, #80]	; 0x50
 8008908:	e13e      	b.n	8008b88 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d113      	bne.n	800893c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008914:	2300      	movs	r3, #0
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e115      	b.n	8008b68 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b01      	cmp	r3, #1
 8008944:	f040 808a 	bne.w	8008a5c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800894e:	d137      	bne.n	80089c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800895e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800896a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800896e:	d113      	bne.n	8008998 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008980:	2300      	movs	r3, #0
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	e0e7      	b.n	8008b68 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008998:	2300      	movs	r3, #0
 800899a:	623b      	str	r3, [r7, #32]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	623b      	str	r3, [r7, #32]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	623b      	str	r3, [r7, #32]
 80089ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e0d3      	b.n	8008b68 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d02e      	beq.n	8008a24 <I2C_Master_ADDR+0x1b2>
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d02b      	beq.n	8008a24 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80089cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ce:	2b12      	cmp	r3, #18
 80089d0:	d102      	bne.n	80089d8 <I2C_Master_ADDR+0x166>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d125      	bne.n	8008a24 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d00e      	beq.n	80089fc <I2C_Master_ADDR+0x18a>
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d00b      	beq.n	80089fc <I2C_Master_ADDR+0x18a>
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d008      	beq.n	80089fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e007      	b.n	8008a0c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a0a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	e0a1      	b.n	8008b68 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a34:	2300      	movs	r3, #0
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	61bb      	str	r3, [r7, #24]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	e085      	b.n	8008b68 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d14d      	bne.n	8008b02 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d016      	beq.n	8008a9a <I2C_Master_ADDR+0x228>
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d013      	beq.n	8008a9a <I2C_Master_ADDR+0x228>
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	d010      	beq.n	8008a9a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a86:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e007      	b.n	8008aaa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008aa8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab8:	d117      	bne.n	8008aea <I2C_Master_ADDR+0x278>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ac0:	d00b      	beq.n	8008ada <I2C_Master_ADDR+0x268>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d008      	beq.n	8008ada <I2C_Master_ADDR+0x268>
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	2b08      	cmp	r3, #8
 8008acc:	d005      	beq.n	8008ada <I2C_Master_ADDR+0x268>
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d002      	beq.n	8008ada <I2C_Master_ADDR+0x268>
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d107      	bne.n	8008aea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ae8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	617b      	str	r3, [r7, #20]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	e032      	b.n	8008b68 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b10:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b20:	d117      	bne.n	8008b52 <I2C_Master_ADDR+0x2e0>
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b28:	d00b      	beq.n	8008b42 <I2C_Master_ADDR+0x2d0>
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d008      	beq.n	8008b42 <I2C_Master_ADDR+0x2d0>
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	d005      	beq.n	8008b42 <I2C_Master_ADDR+0x2d0>
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	2b10      	cmp	r3, #16
 8008b3a:	d002      	beq.n	8008b42 <I2C_Master_ADDR+0x2d0>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d107      	bne.n	8008b52 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008b6e:	e00b      	b.n	8008b88 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	e7ff      	b.n	8008b88 <I2C_Master_ADDR+0x316>
 8008b88:	bf00      	nop
 8008b8a:	3744      	adds	r7, #68	; 0x44
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d02b      	beq.n	8008c06 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d114      	bne.n	8008c06 <I2C_SlaveTransmit_TXE+0x72>
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b29      	cmp	r3, #41	; 0x29
 8008be0:	d111      	bne.n	8008c06 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bf0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2221      	movs	r2, #33	; 0x21
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2228      	movs	r2, #40	; 0x28
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff f9e7 	bl	8007fd4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d011      	beq.n	8008c44 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d02c      	beq.n	8008cc4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	691a      	ldr	r2, [r3, #16]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	b2d2      	uxtb	r2, r2
 8008c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d114      	bne.n	8008cc4 <I2C_SlaveReceive_RXNE+0x74>
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9e:	d111      	bne.n	8008cc4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2222      	movs	r2, #34	; 0x22
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2228      	movs	r2, #40	; 0x28
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff f992 	bl	8007fe8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d012      	beq.n	8008d04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	691a      	ldr	r2, [r3, #16]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d2a:	2b28      	cmp	r3, #40	; 0x28
 8008d2c:	d127      	bne.n	8008d7e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	089b      	lsrs	r3, r3, #2
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	09db      	lsrs	r3, r3, #7
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	81bb      	strh	r3, [r7, #12]
 8008d60:	e002      	b.n	8008d68 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008d70:	89ba      	ldrh	r2, [r7, #12]
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff f940 	bl	8007ffc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d7c:	e00e      	b.n	8008d9c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	60bb      	str	r3, [r7, #8]
 8008d92:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008d9c:	bf00      	nop
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008db2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dc2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60bb      	str	r3, [r7, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	60bb      	str	r3, [r7, #8]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008df0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e00:	d172      	bne.n	8008ee8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	2b22      	cmp	r3, #34	; 0x22
 8008e06:	d002      	beq.n	8008e0e <I2C_Slave_STOPF+0x6a>
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d135      	bne.n	8008e7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fd ffa6 	bl	8006d98 <HAL_DMA_GetState>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d049      	beq.n	8008ee6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	4a69      	ldr	r2, [pc, #420]	; (8008ffc <I2C_Slave_STOPF+0x258>)
 8008e58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd fdee 	bl	8006a40 <HAL_DMA_Abort_IT>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d03d      	beq.n	8008ee6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e78:	e035      	b.n	8008ee6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f043 0204 	orr.w	r2, r3, #4
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fd ff70 	bl	8006d98 <HAL_DMA_GetState>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d014      	beq.n	8008ee8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec2:	4a4e      	ldr	r2, [pc, #312]	; (8008ffc <I2C_Slave_STOPF+0x258>)
 8008ec4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fdb8 	bl	8006a40 <HAL_DMA_Abort_IT>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	e000      	b.n	8008ee8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ee6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d03e      	beq.n	8008f70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d112      	bne.n	8008f26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b40      	cmp	r3, #64	; 0x40
 8008f32:	d112      	bne.n	8008f5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	f043 0204 	orr.w	r2, r3, #4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f8b3 	bl	80090e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008f7e:	e039      	b.n	8008ff4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	2b2a      	cmp	r3, #42	; 0x2a
 8008f84:	d109      	bne.n	8008f9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2228      	movs	r2, #40	; 0x28
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff f827 	bl	8007fe8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b28      	cmp	r3, #40	; 0x28
 8008fa4:	d111      	bne.n	8008fca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a15      	ldr	r2, [pc, #84]	; (8009000 <I2C_Slave_STOPF+0x25c>)
 8008faa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f828 	bl	8008018 <HAL_I2C_ListenCpltCallback>
}
 8008fc8:	e014      	b.n	8008ff4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	2b22      	cmp	r3, #34	; 0x22
 8008fd0:	d002      	beq.n	8008fd8 <I2C_Slave_STOPF+0x234>
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	2b22      	cmp	r3, #34	; 0x22
 8008fd6:	d10d      	bne.n	8008ff4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fe fffa 	bl	8007fe8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008ff4:	bf00      	nop
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	08009645 	.word	0x08009645
 8009000:	ffff0000 	.word	0xffff0000

08009004 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009012:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2b08      	cmp	r3, #8
 800901e:	d002      	beq.n	8009026 <I2C_Slave_AF+0x22>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b20      	cmp	r3, #32
 8009024:	d129      	bne.n	800907a <I2C_Slave_AF+0x76>
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b28      	cmp	r3, #40	; 0x28
 800902a:	d126      	bne.n	800907a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a2c      	ldr	r2, [pc, #176]	; (80090e0 <I2C_Slave_AF+0xdc>)
 8009030:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009040:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800904a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800905a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fe ffd0 	bl	8008018 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009078:	e02e      	b.n	80090d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b21      	cmp	r3, #33	; 0x21
 800907e:	d126      	bne.n	80090ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <I2C_Slave_AF+0xdc>)
 8009084:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2221      	movs	r2, #33	; 0x21
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fe ff84 	bl	8007fd4 <HAL_I2C_SlaveTxCpltCallback>
}
 80090cc:	e004      	b.n	80090d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090d6:	615a      	str	r2, [r3, #20]
}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	ffff0000 	.word	0xffff0000

080090e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d002      	beq.n	8009108 <I2C_ITError+0x24>
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b40      	cmp	r3, #64	; 0x40
 8009106:	d10a      	bne.n	800911e <I2C_ITError+0x3a>
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	2b22      	cmp	r3, #34	; 0x22
 800910c:	d107      	bne.n	800911e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800911c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009124:	2b28      	cmp	r3, #40	; 0x28
 8009126:	d107      	bne.n	8009138 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2228      	movs	r2, #40	; 0x28
 8009132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009136:	e015      	b.n	8009164 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009146:	d00a      	beq.n	800915e <I2C_ITError+0x7a>
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	2b60      	cmp	r3, #96	; 0x60
 800914c:	d007      	beq.n	800915e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800916e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009172:	d162      	bne.n	800923a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009182:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b01      	cmp	r3, #1
 8009190:	d020      	beq.n	80091d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	4a6a      	ldr	r2, [pc, #424]	; (8009340 <I2C_ITError+0x25c>)
 8009198:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fd fc4e 	bl	8006a40 <HAL_DMA_Abort_IT>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8089 	beq.w	80092be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091ce:	4610      	mov	r0, r2
 80091d0:	4798      	blx	r3
 80091d2:	e074      	b.n	80092be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	4a59      	ldr	r2, [pc, #356]	; (8009340 <I2C_ITError+0x25c>)
 80091da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fd fc2d 	bl	8006a40 <HAL_DMA_Abort_IT>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d068      	beq.n	80092be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f6:	2b40      	cmp	r3, #64	; 0x40
 80091f8:	d10b      	bne.n	8009212 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691a      	ldr	r2, [r3, #16]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	b2d2      	uxtb	r2, r2
 8009206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0201 	bic.w	r2, r2, #1
 8009220:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	e041      	b.n	80092be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b60      	cmp	r3, #96	; 0x60
 8009244:	d125      	bne.n	8009292 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2220      	movs	r2, #32
 800924a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b40      	cmp	r3, #64	; 0x40
 8009260:	d10b      	bne.n	800927a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	b2d2      	uxtb	r2, r2
 800926e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0201 	bic.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe feec 	bl	8008068 <HAL_I2C_AbortCpltCallback>
 8009290:	e015      	b.n	80092be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	d10b      	bne.n	80092b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7fe fecb 	bl	8008054 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10e      	bne.n	80092ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d109      	bne.n	80092ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009302:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b04      	cmp	r3, #4
 800930e:	d113      	bne.n	8009338 <I2C_ITError+0x254>
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	2b28      	cmp	r3, #40	; 0x28
 8009314:	d110      	bne.n	8009338 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a0a      	ldr	r2, [pc, #40]	; (8009344 <I2C_ITError+0x260>)
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe fe70 	bl	8008018 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009338:	bf00      	nop
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	08009645 	.word	0x08009645
 8009344:	ffff0000 	.word	0xffff0000

08009348 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	4608      	mov	r0, r1
 8009352:	4611      	mov	r1, r2
 8009354:	461a      	mov	r2, r3
 8009356:	4603      	mov	r3, r0
 8009358:	817b      	strh	r3, [r7, #10]
 800935a:	460b      	mov	r3, r1
 800935c:	813b      	strh	r3, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	2200      	movs	r2, #0
 800937a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fa08 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00d      	beq.n	80093a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009398:	d103      	bne.n	80093a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e05f      	b.n	8009466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093a6:	897b      	ldrh	r3, [r7, #10]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	6a3a      	ldr	r2, [r7, #32]
 80093ba:	492d      	ldr	r1, [pc, #180]	; (8009470 <I2C_RequestMemoryWrite+0x128>)
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fa40 	bl	8009842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e04c      	b.n	8009466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e4:	6a39      	ldr	r1, [r7, #32]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 faaa 	bl	8009940 <I2C_WaitOnTXEFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d107      	bne.n	800940a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e02b      	b.n	8009466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800940e:	88fb      	ldrh	r3, [r7, #6]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d105      	bne.n	8009420 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009414:	893b      	ldrh	r3, [r7, #8]
 8009416:	b2da      	uxtb	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	611a      	str	r2, [r3, #16]
 800941e:	e021      	b.n	8009464 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009420:	893b      	ldrh	r3, [r7, #8]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b29b      	uxth	r3, r3
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009430:	6a39      	ldr	r1, [r7, #32]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fa84 	bl	8009940 <I2C_WaitOnTXEFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	2b04      	cmp	r3, #4
 8009444:	d107      	bne.n	8009456 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e005      	b.n	8009466 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800945a:	893b      	ldrh	r3, [r7, #8]
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	00010002 	.word	0x00010002

08009474 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af02      	add	r7, sp, #8
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	461a      	mov	r2, r3
 8009482:	4603      	mov	r3, r0
 8009484:	817b      	strh	r3, [r7, #10]
 8009486:	460b      	mov	r3, r1
 8009488:	813b      	strh	r3, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800949c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 f96a 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00d      	beq.n	80094e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d4:	d103      	bne.n	80094de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e0aa      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80094e2:	897b      	ldrh	r3, [r7, #10]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80094f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	6a3a      	ldr	r2, [r7, #32]
 80094f6:	4952      	ldr	r1, [pc, #328]	; (8009640 <I2C_RequestMemoryRead+0x1cc>)
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 f9a2 	bl	8009842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e097      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800951e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009520:	6a39      	ldr	r1, [r7, #32]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fa0c 	bl	8009940 <I2C_WaitOnTXEFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	2b04      	cmp	r3, #4
 8009534:	d107      	bne.n	8009546 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e076      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800954a:	88fb      	ldrh	r3, [r7, #6]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d105      	bne.n	800955c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009550:	893b      	ldrh	r3, [r7, #8]
 8009552:	b2da      	uxtb	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	611a      	str	r2, [r3, #16]
 800955a:	e021      	b.n	80095a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800955c:	893b      	ldrh	r3, [r7, #8]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b29b      	uxth	r3, r3
 8009562:	b2da      	uxtb	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800956a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800956c:	6a39      	ldr	r1, [r7, #32]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f9e6 	bl	8009940 <I2C_WaitOnTXEFlagUntilTimeout>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00d      	beq.n	8009596 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	2b04      	cmp	r3, #4
 8009580:	d107      	bne.n	8009592 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e050      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009596:	893b      	ldrh	r3, [r7, #8]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a2:	6a39      	ldr	r1, [r7, #32]
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f9cb 	bl	8009940 <I2C_WaitOnTXEFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00d      	beq.n	80095cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d107      	bne.n	80095c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e035      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 f8d3 	bl	8009794 <I2C_WaitOnFlagUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00d      	beq.n	8009610 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009602:	d103      	bne.n	800960c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800960a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e013      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009610:	897b      	ldrh	r3, [r7, #10]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f043 0301 	orr.w	r3, r3, #1
 8009618:	b2da      	uxtb	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	6a3a      	ldr	r2, [r7, #32]
 8009624:	4906      	ldr	r1, [pc, #24]	; (8009640 <I2C_RequestMemoryRead+0x1cc>)
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 f90b 	bl	8009842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	00010002 	.word	0x00010002

08009644 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800965c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800965e:	4b4b      	ldr	r3, [pc, #300]	; (800978c <I2C_DMAAbort+0x148>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	08db      	lsrs	r3, r3, #3
 8009664:	4a4a      	ldr	r2, [pc, #296]	; (8009790 <I2C_DMAAbort+0x14c>)
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	0a1a      	lsrs	r2, r3, #8
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	00da      	lsls	r2, r3, #3
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f043 0220 	orr.w	r2, r3, #32
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800968a:	e00a      	b.n	80096a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3b01      	subs	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800969c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096a0:	d0ea      	beq.n	8009678 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ae:	2200      	movs	r2, #0
 80096b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	2200      	movs	r2, #0
 80096c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2200      	movs	r2, #0
 80096d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d003      	beq.n	80096e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	2200      	movs	r2, #0
 80096e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	2200      	movs	r2, #0
 80096f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0201 	bic.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b60      	cmp	r3, #96	; 0x60
 8009712:	d10e      	bne.n	8009732 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2200      	movs	r2, #0
 8009728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	f7fe fc9c 	bl	8008068 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009730:	e027      	b.n	8009782 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009732:	7cfb      	ldrb	r3, [r7, #19]
 8009734:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009738:	2b28      	cmp	r3, #40	; 0x28
 800973a:	d117      	bne.n	800976c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800975a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2200      	movs	r2, #0
 8009760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2228      	movs	r2, #40	; 0x28
 8009766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800976a:	e007      	b.n	800977c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2220      	movs	r2, #32
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800977c:	6978      	ldr	r0, [r7, #20]
 800977e:	f7fe fc69 	bl	8008054 <HAL_I2C_ErrorCallback>
}
 8009782:	bf00      	nop
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000150 	.word	0x20000150
 8009790:	14f8b589 	.word	0x14f8b589

08009794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	4613      	mov	r3, r2
 80097a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097a4:	e025      	b.n	80097f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d021      	beq.n	80097f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ae:	f7fc ff57 	bl	8006660 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d302      	bcc.n	80097c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d116      	bne.n	80097f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	f043 0220 	orr.w	r2, r3, #32
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e023      	b.n	800983a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	0c1b      	lsrs	r3, r3, #16
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d10d      	bne.n	8009818 <I2C_WaitOnFlagUntilTimeout+0x84>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	43da      	mvns	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4013      	ands	r3, r2
 8009808:	b29b      	uxth	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	461a      	mov	r2, r3
 8009816:	e00c      	b.n	8009832 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	43da      	mvns	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4013      	ands	r3, r2
 8009824:	b29b      	uxth	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf0c      	ite	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	2300      	movne	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	461a      	mov	r2, r3
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	429a      	cmp	r2, r3
 8009836:	d0b6      	beq.n	80097a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009850:	e051      	b.n	80098f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009860:	d123      	bne.n	80098aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009870:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800987a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2220      	movs	r2, #32
 8009886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009896:	f043 0204 	orr.w	r2, r3, #4
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e046      	b.n	8009938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b0:	d021      	beq.n	80098f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098b2:	f7fc fed5 	bl	8006660 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d302      	bcc.n	80098c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d116      	bne.n	80098f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e2:	f043 0220 	orr.w	r2, r3, #32
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e020      	b.n	8009938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10c      	bne.n	800991a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	43da      	mvns	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4013      	ands	r3, r2
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	bf14      	ite	ne
 8009912:	2301      	movne	r3, #1
 8009914:	2300      	moveq	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	e00b      	b.n	8009932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	43da      	mvns	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4013      	ands	r3, r2
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	bf14      	ite	ne
 800992c:	2301      	movne	r3, #1
 800992e:	2300      	moveq	r3, #0
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d18d      	bne.n	8009852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800994c:	e02d      	b.n	80099aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 f900 	bl	8009b54 <I2C_IsAcknowledgeFailed>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e02d      	b.n	80099ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d021      	beq.n	80099aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009966:	f7fc fe7b 	bl	8006660 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	429a      	cmp	r2, r3
 8009974:	d302      	bcc.n	800997c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d116      	bne.n	80099aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e007      	b.n	80099ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b4:	2b80      	cmp	r3, #128	; 0x80
 80099b6:	d1ca      	bne.n	800994e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099ce:	e02d      	b.n	8009a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f8bf 	bl	8009b54 <I2C_IsAcknowledgeFailed>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e02d      	b.n	8009a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e6:	d021      	beq.n	8009a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e8:	f7fc fe3a 	bl	8006660 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d302      	bcc.n	80099fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d116      	bne.n	8009a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	f043 0220 	orr.w	r2, r3, #32
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e007      	b.n	8009a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d1ca      	bne.n	80099d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a50:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	08db      	lsrs	r3, r3, #3
 8009a56:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009a58:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5c:	0a1a      	lsrs	r2, r3, #8
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d107      	bne.n	8009a82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	f043 0220 	orr.w	r2, r3, #32
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e008      	b.n	8009a94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a90:	d0e9      	beq.n	8009a66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	20000150 	.word	0x20000150
 8009aa4:	14f8b589 	.word	0x14f8b589

08009aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ab4:	e042      	b.n	8009b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	f003 0310 	and.w	r3, r3, #16
 8009ac0:	2b10      	cmp	r3, #16
 8009ac2:	d119      	bne.n	8009af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0210 	mvn.w	r2, #16
 8009acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e029      	b.n	8009b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af8:	f7fc fdb2 	bl	8006660 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d302      	bcc.n	8009b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d116      	bne.n	8009b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b28:	f043 0220 	orr.w	r2, r3, #32
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e007      	b.n	8009b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b46:	2b40      	cmp	r3, #64	; 0x40
 8009b48:	d1b5      	bne.n	8009ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b6a:	d11b      	bne.n	8009ba4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	f043 0204 	orr.w	r2, r3, #4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b083      	sub	sp, #12
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009bc2:	d103      	bne.n	8009bcc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009bca:	e007      	b.n	8009bdc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009bd4:	d102      	bne.n	8009bdc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e267      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d075      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c06:	4b88      	ldr	r3, [pc, #544]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 030c 	and.w	r3, r3, #12
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d00c      	beq.n	8009c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c12:	4b85      	ldr	r3, [pc, #532]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c1a:	2b08      	cmp	r3, #8
 8009c1c:	d112      	bne.n	8009c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c1e:	4b82      	ldr	r3, [pc, #520]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c2a:	d10b      	bne.n	8009c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c2c:	4b7e      	ldr	r3, [pc, #504]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d05b      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x108>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d157      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e242      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c4c:	d106      	bne.n	8009c5c <HAL_RCC_OscConfig+0x74>
 8009c4e:	4b76      	ldr	r3, [pc, #472]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a75      	ldr	r2, [pc, #468]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	e01d      	b.n	8009c98 <HAL_RCC_OscConfig+0xb0>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c64:	d10c      	bne.n	8009c80 <HAL_RCC_OscConfig+0x98>
 8009c66:	4b70      	ldr	r3, [pc, #448]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a6f      	ldr	r2, [pc, #444]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	4b6d      	ldr	r3, [pc, #436]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a6c      	ldr	r2, [pc, #432]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	e00b      	b.n	8009c98 <HAL_RCC_OscConfig+0xb0>
 8009c80:	4b69      	ldr	r3, [pc, #420]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a68      	ldr	r2, [pc, #416]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	4b66      	ldr	r3, [pc, #408]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a65      	ldr	r2, [pc, #404]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d013      	beq.n	8009cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ca0:	f7fc fcde 	bl	8006660 <HAL_GetTick>
 8009ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ca8:	f7fc fcda 	bl	8006660 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b64      	cmp	r3, #100	; 0x64
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e207      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cba:	4b5b      	ldr	r3, [pc, #364]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f0      	beq.n	8009ca8 <HAL_RCC_OscConfig+0xc0>
 8009cc6:	e014      	b.n	8009cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc8:	f7fc fcca 	bl	8006660 <HAL_GetTick>
 8009ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cce:	e008      	b.n	8009ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cd0:	f7fc fcc6 	bl	8006660 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b64      	cmp	r3, #100	; 0x64
 8009cdc:	d901      	bls.n	8009ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e1f3      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ce2:	4b51      	ldr	r3, [pc, #324]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f0      	bne.n	8009cd0 <HAL_RCC_OscConfig+0xe8>
 8009cee:	e000      	b.n	8009cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d063      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009cfe:	4b4a      	ldr	r3, [pc, #296]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 030c 	and.w	r3, r3, #12
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d0a:	4b47      	ldr	r3, [pc, #284]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d12:	2b08      	cmp	r3, #8
 8009d14:	d11c      	bne.n	8009d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d16:	4b44      	ldr	r3, [pc, #272]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d116      	bne.n	8009d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d22:	4b41      	ldr	r3, [pc, #260]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d005      	beq.n	8009d3a <HAL_RCC_OscConfig+0x152>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d001      	beq.n	8009d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e1c7      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d3a:	4b3b      	ldr	r3, [pc, #236]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	4937      	ldr	r1, [pc, #220]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d4e:	e03a      	b.n	8009dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d020      	beq.n	8009d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d58:	4b34      	ldr	r3, [pc, #208]	; (8009e2c <HAL_RCC_OscConfig+0x244>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5e:	f7fc fc7f 	bl	8006660 <HAL_GetTick>
 8009d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d64:	e008      	b.n	8009d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d66:	f7fc fc7b 	bl	8006660 <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d901      	bls.n	8009d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e1a8      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d78:	4b2b      	ldr	r3, [pc, #172]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d0f0      	beq.n	8009d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d84:	4b28      	ldr	r3, [pc, #160]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	4925      	ldr	r1, [pc, #148]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	600b      	str	r3, [r1, #0]
 8009d98:	e015      	b.n	8009dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d9a:	4b24      	ldr	r3, [pc, #144]	; (8009e2c <HAL_RCC_OscConfig+0x244>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da0:	f7fc fc5e 	bl	8006660 <HAL_GetTick>
 8009da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009da6:	e008      	b.n	8009dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009da8:	f7fc fc5a 	bl	8006660 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e187      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dba:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f0      	bne.n	8009da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d036      	beq.n	8009e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d016      	beq.n	8009e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dda:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <HAL_RCC_OscConfig+0x248>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de0:	f7fc fc3e 	bl	8006660 <HAL_GetTick>
 8009de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009de6:	e008      	b.n	8009dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009de8:	f7fc fc3a 	bl	8006660 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e167      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <HAL_RCC_OscConfig+0x240>)
 8009dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f0      	beq.n	8009de8 <HAL_RCC_OscConfig+0x200>
 8009e06:	e01b      	b.n	8009e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e08:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <HAL_RCC_OscConfig+0x248>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e0e:	f7fc fc27 	bl	8006660 <HAL_GetTick>
 8009e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e14:	e00e      	b.n	8009e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e16:	f7fc fc23 	bl	8006660 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d907      	bls.n	8009e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e150      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
 8009e28:	40023800 	.word	0x40023800
 8009e2c:	42470000 	.word	0x42470000
 8009e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e34:	4b88      	ldr	r3, [pc, #544]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1ea      	bne.n	8009e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8097 	beq.w	8009f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e52:	4b81      	ldr	r3, [pc, #516]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10f      	bne.n	8009e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	4b7d      	ldr	r3, [pc, #500]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	4a7c      	ldr	r2, [pc, #496]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8009e6e:	4b7a      	ldr	r3, [pc, #488]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e76:	60bb      	str	r3, [r7, #8]
 8009e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e7e:	4b77      	ldr	r3, [pc, #476]	; (800a05c <HAL_RCC_OscConfig+0x474>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d118      	bne.n	8009ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e8a:	4b74      	ldr	r3, [pc, #464]	; (800a05c <HAL_RCC_OscConfig+0x474>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a73      	ldr	r2, [pc, #460]	; (800a05c <HAL_RCC_OscConfig+0x474>)
 8009e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e96:	f7fc fbe3 	bl	8006660 <HAL_GetTick>
 8009e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e9e:	f7fc fbdf 	bl	8006660 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e10c      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009eb0:	4b6a      	ldr	r3, [pc, #424]	; (800a05c <HAL_RCC_OscConfig+0x474>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f0      	beq.n	8009e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d106      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x2ea>
 8009ec4:	4b64      	ldr	r3, [pc, #400]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec8:	4a63      	ldr	r2, [pc, #396]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009eca:	f043 0301 	orr.w	r3, r3, #1
 8009ece:	6713      	str	r3, [r2, #112]	; 0x70
 8009ed0:	e01c      	b.n	8009f0c <HAL_RCC_OscConfig+0x324>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	d10c      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x30c>
 8009eda:	4b5f      	ldr	r3, [pc, #380]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ede:	4a5e      	ldr	r2, [pc, #376]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009ee0:	f043 0304 	orr.w	r3, r3, #4
 8009ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ee6:	4b5c      	ldr	r3, [pc, #368]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	4a5b      	ldr	r2, [pc, #364]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ef2:	e00b      	b.n	8009f0c <HAL_RCC_OscConfig+0x324>
 8009ef4:	4b58      	ldr	r3, [pc, #352]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef8:	4a57      	ldr	r2, [pc, #348]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009efa:	f023 0301 	bic.w	r3, r3, #1
 8009efe:	6713      	str	r3, [r2, #112]	; 0x70
 8009f00:	4b55      	ldr	r3, [pc, #340]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f04:	4a54      	ldr	r2, [pc, #336]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f06:	f023 0304 	bic.w	r3, r3, #4
 8009f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d015      	beq.n	8009f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f14:	f7fc fba4 	bl	8006660 <HAL_GetTick>
 8009f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f1a:	e00a      	b.n	8009f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f1c:	f7fc fba0 	bl	8006660 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e0cb      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f32:	4b49      	ldr	r3, [pc, #292]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0ee      	beq.n	8009f1c <HAL_RCC_OscConfig+0x334>
 8009f3e:	e014      	b.n	8009f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f40:	f7fc fb8e 	bl	8006660 <HAL_GetTick>
 8009f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f46:	e00a      	b.n	8009f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f48:	f7fc fb8a 	bl	8006660 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d901      	bls.n	8009f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e0b5      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f5e:	4b3e      	ldr	r3, [pc, #248]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1ee      	bne.n	8009f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d105      	bne.n	8009f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f70:	4b39      	ldr	r3, [pc, #228]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	4a38      	ldr	r2, [pc, #224]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80a1 	beq.w	800a0c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f86:	4b34      	ldr	r3, [pc, #208]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f003 030c 	and.w	r3, r3, #12
 8009f8e:	2b08      	cmp	r3, #8
 8009f90:	d05c      	beq.n	800a04c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d141      	bne.n	800a01e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f9a:	4b31      	ldr	r3, [pc, #196]	; (800a060 <HAL_RCC_OscConfig+0x478>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fa0:	f7fc fb5e 	bl	8006660 <HAL_GetTick>
 8009fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fa6:	e008      	b.n	8009fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fa8:	f7fc fb5a 	bl	8006660 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d901      	bls.n	8009fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e087      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fba:	4b27      	ldr	r3, [pc, #156]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f0      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	69da      	ldr	r2, [r3, #28]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	019b      	lsls	r3, r3, #6
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	085b      	lsrs	r3, r3, #1
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	041b      	lsls	r3, r3, #16
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	061b      	lsls	r3, r3, #24
 8009fea:	491b      	ldr	r1, [pc, #108]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ff0:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <HAL_RCC_OscConfig+0x478>)
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ff6:	f7fc fb33 	bl	8006660 <HAL_GetTick>
 8009ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ffc:	e008      	b.n	800a010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ffe:	f7fc fb2f 	bl	8006660 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e05c      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a010:	4b11      	ldr	r3, [pc, #68]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0f0      	beq.n	8009ffe <HAL_RCC_OscConfig+0x416>
 800a01c:	e054      	b.n	800a0c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a01e:	4b10      	ldr	r3, [pc, #64]	; (800a060 <HAL_RCC_OscConfig+0x478>)
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a024:	f7fc fb1c 	bl	8006660 <HAL_GetTick>
 800a028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a02a:	e008      	b.n	800a03e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a02c:	f7fc fb18 	bl	8006660 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	2b02      	cmp	r3, #2
 800a038:	d901      	bls.n	800a03e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e045      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a03e:	4b06      	ldr	r3, [pc, #24]	; (800a058 <HAL_RCC_OscConfig+0x470>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1f0      	bne.n	800a02c <HAL_RCC_OscConfig+0x444>
 800a04a:	e03d      	b.n	800a0c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d107      	bne.n	800a064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e038      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
 800a058:	40023800 	.word	0x40023800
 800a05c:	40007000 	.word	0x40007000
 800a060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a064:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <HAL_RCC_OscConfig+0x4ec>)
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d028      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d121      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d11a      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a094:	4013      	ands	r3, r2
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a09a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d111      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d107      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d001      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	40023800 	.word	0x40023800

0800a0d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0cc      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0ec:	4b68      	ldr	r3, [pc, #416]	; (800a290 <HAL_RCC_ClockConfig+0x1b8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d90c      	bls.n	800a114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0fa:	4b65      	ldr	r3, [pc, #404]	; (800a290 <HAL_RCC_ClockConfig+0x1b8>)
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	b2d2      	uxtb	r2, r2
 800a100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a102:	4b63      	ldr	r3, [pc, #396]	; (800a290 <HAL_RCC_ClockConfig+0x1b8>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0307 	and.w	r3, r3, #7
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d001      	beq.n	800a114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e0b8      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0302 	and.w	r3, r3, #2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d020      	beq.n	800a162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a12c:	4b59      	ldr	r3, [pc, #356]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	4a58      	ldr	r2, [pc, #352]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a144:	4b53      	ldr	r3, [pc, #332]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	4a52      	ldr	r2, [pc, #328]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a14a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a14e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a150:	4b50      	ldr	r3, [pc, #320]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	494d      	ldr	r1, [pc, #308]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d044      	beq.n	800a1f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d107      	bne.n	800a186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a176:	4b47      	ldr	r3, [pc, #284]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d119      	bne.n	800a1b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e07f      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d003      	beq.n	800a196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a192:	2b03      	cmp	r3, #3
 800a194:	d107      	bne.n	800a1a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a196:	4b3f      	ldr	r3, [pc, #252]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e06f      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1a6:	4b3b      	ldr	r3, [pc, #236]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0302 	and.w	r3, r3, #2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e067      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a1b6:	4b37      	ldr	r3, [pc, #220]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f023 0203 	bic.w	r2, r3, #3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	4934      	ldr	r1, [pc, #208]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a1c8:	f7fc fa4a 	bl	8006660 <HAL_GetTick>
 800a1cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ce:	e00a      	b.n	800a1e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1d0:	f7fc fa46 	bl	8006660 <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d901      	bls.n	800a1e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e04f      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1e6:	4b2b      	ldr	r3, [pc, #172]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f003 020c 	and.w	r2, r3, #12
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d1eb      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1f8:	4b25      	ldr	r3, [pc, #148]	; (800a290 <HAL_RCC_ClockConfig+0x1b8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0307 	and.w	r3, r3, #7
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d20c      	bcs.n	800a220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a206:	4b22      	ldr	r3, [pc, #136]	; (800a290 <HAL_RCC_ClockConfig+0x1b8>)
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a20e:	4b20      	ldr	r3, [pc, #128]	; (800a290 <HAL_RCC_ClockConfig+0x1b8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d001      	beq.n	800a220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e032      	b.n	800a286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d008      	beq.n	800a23e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a22c:	4b19      	ldr	r3, [pc, #100]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	4916      	ldr	r1, [pc, #88]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	490e      	ldr	r1, [pc, #56]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a25e:	f000 f821 	bl	800a2a4 <HAL_RCC_GetSysClockFreq>
 800a262:	4602      	mov	r2, r0
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <HAL_RCC_ClockConfig+0x1bc>)
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	091b      	lsrs	r3, r3, #4
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	490a      	ldr	r1, [pc, #40]	; (800a298 <HAL_RCC_ClockConfig+0x1c0>)
 800a270:	5ccb      	ldrb	r3, [r1, r3]
 800a272:	fa22 f303 	lsr.w	r3, r2, r3
 800a276:	4a09      	ldr	r2, [pc, #36]	; (800a29c <HAL_RCC_ClockConfig+0x1c4>)
 800a278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a27a:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fc f9aa 	bl	80065d8 <HAL_InitTick>

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	40023c00 	.word	0x40023c00
 800a294:	40023800 	.word	0x40023800
 800a298:	0800f9d0 	.word	0x0800f9d0
 800a29c:	20000150 	.word	0x20000150
 800a2a0:	2000017c 	.word	0x2000017c

0800a2a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2a8:	b094      	sub	sp, #80	; 0x50
 800a2aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2bc:	4b79      	ldr	r3, [pc, #484]	; (800a4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f003 030c 	and.w	r3, r3, #12
 800a2c4:	2b08      	cmp	r3, #8
 800a2c6:	d00d      	beq.n	800a2e4 <HAL_RCC_GetSysClockFreq+0x40>
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	f200 80e1 	bhi.w	800a490 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <HAL_RCC_GetSysClockFreq+0x34>
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d003      	beq.n	800a2de <HAL_RCC_GetSysClockFreq+0x3a>
 800a2d6:	e0db      	b.n	800a490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2d8:	4b73      	ldr	r3, [pc, #460]	; (800a4a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a2da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a2dc:	e0db      	b.n	800a496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a2de:	4b73      	ldr	r3, [pc, #460]	; (800a4ac <HAL_RCC_GetSysClockFreq+0x208>)
 800a2e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2e2:	e0d8      	b.n	800a496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a2e4:	4b6f      	ldr	r3, [pc, #444]	; (800a4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a2ee:	4b6d      	ldr	r3, [pc, #436]	; (800a4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d063      	beq.n	800a3c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2fa:	4b6a      	ldr	r3, [pc, #424]	; (800a4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	099b      	lsrs	r3, r3, #6
 800a300:	2200      	movs	r2, #0
 800a302:	63bb      	str	r3, [r7, #56]	; 0x38
 800a304:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30c:	633b      	str	r3, [r7, #48]	; 0x30
 800a30e:	2300      	movs	r3, #0
 800a310:	637b      	str	r3, [r7, #52]	; 0x34
 800a312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a316:	4622      	mov	r2, r4
 800a318:	462b      	mov	r3, r5
 800a31a:	f04f 0000 	mov.w	r0, #0
 800a31e:	f04f 0100 	mov.w	r1, #0
 800a322:	0159      	lsls	r1, r3, #5
 800a324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a328:	0150      	lsls	r0, r2, #5
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4621      	mov	r1, r4
 800a330:	1a51      	subs	r1, r2, r1
 800a332:	6139      	str	r1, [r7, #16]
 800a334:	4629      	mov	r1, r5
 800a336:	eb63 0301 	sbc.w	r3, r3, r1
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	f04f 0200 	mov.w	r2, #0
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a348:	4659      	mov	r1, fp
 800a34a:	018b      	lsls	r3, r1, #6
 800a34c:	4651      	mov	r1, sl
 800a34e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a352:	4651      	mov	r1, sl
 800a354:	018a      	lsls	r2, r1, #6
 800a356:	4651      	mov	r1, sl
 800a358:	ebb2 0801 	subs.w	r8, r2, r1
 800a35c:	4659      	mov	r1, fp
 800a35e:	eb63 0901 	sbc.w	r9, r3, r1
 800a362:	f04f 0200 	mov.w	r2, #0
 800a366:	f04f 0300 	mov.w	r3, #0
 800a36a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a36e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a376:	4690      	mov	r8, r2
 800a378:	4699      	mov	r9, r3
 800a37a:	4623      	mov	r3, r4
 800a37c:	eb18 0303 	adds.w	r3, r8, r3
 800a380:	60bb      	str	r3, [r7, #8]
 800a382:	462b      	mov	r3, r5
 800a384:	eb49 0303 	adc.w	r3, r9, r3
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	f04f 0300 	mov.w	r3, #0
 800a392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a396:	4629      	mov	r1, r5
 800a398:	024b      	lsls	r3, r1, #9
 800a39a:	4621      	mov	r1, r4
 800a39c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	024a      	lsls	r2, r1, #9
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3b4:	f7f5 ff10 	bl	80001d8 <__aeabi_uldivmod>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4613      	mov	r3, r2
 800a3be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3c0:	e058      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3c2:	4b38      	ldr	r3, [pc, #224]	; (800a4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	099b      	lsrs	r3, r3, #6
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a3d2:	623b      	str	r3, [r7, #32]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a3dc:	4642      	mov	r2, r8
 800a3de:	464b      	mov	r3, r9
 800a3e0:	f04f 0000 	mov.w	r0, #0
 800a3e4:	f04f 0100 	mov.w	r1, #0
 800a3e8:	0159      	lsls	r1, r3, #5
 800a3ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3ee:	0150      	lsls	r0, r2, #5
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	ebb2 0a01 	subs.w	sl, r2, r1
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	eb63 0b01 	sbc.w	fp, r3, r1
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 0300 	mov.w	r3, #0
 800a408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a40c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a414:	ebb2 040a 	subs.w	r4, r2, sl
 800a418:	eb63 050b 	sbc.w	r5, r3, fp
 800a41c:	f04f 0200 	mov.w	r2, #0
 800a420:	f04f 0300 	mov.w	r3, #0
 800a424:	00eb      	lsls	r3, r5, #3
 800a426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a42a:	00e2      	lsls	r2, r4, #3
 800a42c:	4614      	mov	r4, r2
 800a42e:	461d      	mov	r5, r3
 800a430:	4643      	mov	r3, r8
 800a432:	18e3      	adds	r3, r4, r3
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	464b      	mov	r3, r9
 800a438:	eb45 0303 	adc.w	r3, r5, r3
 800a43c:	607b      	str	r3, [r7, #4]
 800a43e:	f04f 0200 	mov.w	r2, #0
 800a442:	f04f 0300 	mov.w	r3, #0
 800a446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a44a:	4629      	mov	r1, r5
 800a44c:	028b      	lsls	r3, r1, #10
 800a44e:	4621      	mov	r1, r4
 800a450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a454:	4621      	mov	r1, r4
 800a456:	028a      	lsls	r2, r1, #10
 800a458:	4610      	mov	r0, r2
 800a45a:	4619      	mov	r1, r3
 800a45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a45e:	2200      	movs	r2, #0
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	61fa      	str	r2, [r7, #28]
 800a464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a468:	f7f5 feb6 	bl	80001d8 <__aeabi_uldivmod>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4613      	mov	r3, r2
 800a472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	0c1b      	lsrs	r3, r3, #16
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	3301      	adds	r3, #1
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a488:	fbb2 f3f3 	udiv	r3, r2, r3
 800a48c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a48e:	e002      	b.n	800a496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a494:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3750      	adds	r7, #80	; 0x50
 800a49c:	46bd      	mov	sp, r7
 800a49e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4a2:	bf00      	nop
 800a4a4:	40023800 	.word	0x40023800
 800a4a8:	00f42400 	.word	0x00f42400
 800a4ac:	007a1200 	.word	0x007a1200

0800a4b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4b4:	4b03      	ldr	r3, [pc, #12]	; (800a4c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20000150 	.word	0x20000150

0800a4c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a4cc:	f7ff fff0 	bl	800a4b0 <HAL_RCC_GetHCLKFreq>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	0a9b      	lsrs	r3, r3, #10
 800a4d8:	f003 0307 	and.w	r3, r3, #7
 800a4dc:	4903      	ldr	r1, [pc, #12]	; (800a4ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4de:	5ccb      	ldrb	r3, [r1, r3]
 800a4e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	0800f9e0 	.word	0x0800f9e0

0800a4f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a4f4:	f7ff ffdc 	bl	800a4b0 <HAL_RCC_GetHCLKFreq>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	0b5b      	lsrs	r3, r3, #13
 800a500:	f003 0307 	and.w	r3, r3, #7
 800a504:	4903      	ldr	r1, [pc, #12]	; (800a514 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a506:	5ccb      	ldrb	r3, [r1, r3]
 800a508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40023800 	.word	0x40023800
 800a514:	0800f9e0 	.word	0x0800f9e0

0800a518 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e07b      	b.n	800a622 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d108      	bne.n	800a544 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a53a:	d009      	beq.n	800a550 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	61da      	str	r2, [r3, #28]
 800a542:	e005      	b.n	800a550 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7fa ffdc 	bl	8005528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a586:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f003 0302 	and.w	r3, r3, #2
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	431a      	orrs	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d4:	ea42 0103 	orr.w	r1, r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	0c1b      	lsrs	r3, r3, #16
 800a5ee:	f003 0104 	and.w	r1, r3, #4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	f003 0210 	and.w	r2, r3, #16
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69da      	ldr	r2, [r3, #28]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a610:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b088      	sub	sp, #32
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	603b      	str	r3, [r7, #0]
 800a636:	4613      	mov	r3, r2
 800a638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a644:	2b01      	cmp	r3, #1
 800a646:	d101      	bne.n	800a64c <HAL_SPI_Transmit+0x22>
 800a648:	2302      	movs	r3, #2
 800a64a:	e126      	b.n	800a89a <HAL_SPI_Transmit+0x270>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a654:	f7fc f804 	bl	8006660 <HAL_GetTick>
 800a658:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b01      	cmp	r3, #1
 800a668:	d002      	beq.n	800a670 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a66a:	2302      	movs	r3, #2
 800a66c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a66e:	e10b      	b.n	800a888 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <HAL_SPI_Transmit+0x52>
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d102      	bne.n	800a682 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a680:	e102      	b.n	800a888 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2203      	movs	r2, #3
 800a686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	88fa      	ldrh	r2, [r7, #6]
 800a69a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	88fa      	ldrh	r2, [r7, #6]
 800a6a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6c8:	d10f      	bne.n	800a6ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f4:	2b40      	cmp	r3, #64	; 0x40
 800a6f6:	d007      	beq.n	800a708 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a710:	d14b      	bne.n	800a7aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <HAL_SPI_Transmit+0xf6>
 800a71a:	8afb      	ldrh	r3, [r7, #22]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d13e      	bne.n	800a79e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a724:	881a      	ldrh	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	1c9a      	adds	r2, r3, #2
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a744:	e02b      	b.n	800a79e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b02      	cmp	r3, #2
 800a752:	d112      	bne.n	800a77a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	881a      	ldrh	r2, [r3, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	1c9a      	adds	r2, r3, #2
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a76e:	b29b      	uxth	r3, r3
 800a770:	3b01      	subs	r3, #1
 800a772:	b29a      	uxth	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	86da      	strh	r2, [r3, #54]	; 0x36
 800a778:	e011      	b.n	800a79e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a77a:	f7fb ff71 	bl	8006660 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d803      	bhi.n	800a792 <HAL_SPI_Transmit+0x168>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d102      	bne.n	800a798 <HAL_SPI_Transmit+0x16e>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a79c:	e074      	b.n	800a888 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1ce      	bne.n	800a746 <HAL_SPI_Transmit+0x11c>
 800a7a8:	e04c      	b.n	800a844 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <HAL_SPI_Transmit+0x18e>
 800a7b2:	8afb      	ldrh	r3, [r7, #22]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d140      	bne.n	800a83a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	330c      	adds	r3, #12
 800a7c2:	7812      	ldrb	r2, [r2, #0]
 800a7c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a7de:	e02c      	b.n	800a83a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d113      	bne.n	800a816 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	330c      	adds	r3, #12
 800a7f8:	7812      	ldrb	r2, [r2, #0]
 800a7fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	86da      	strh	r2, [r3, #54]	; 0x36
 800a814:	e011      	b.n	800a83a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a816:	f7fb ff23 	bl	8006660 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d803      	bhi.n	800a82e <HAL_SPI_Transmit+0x204>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d102      	bne.n	800a834 <HAL_SPI_Transmit+0x20a>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a838:	e026      	b.n	800a888 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1cd      	bne.n	800a7e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 fce9 	bl	800b220 <SPI_EndRxTxTransaction>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2220      	movs	r2, #32
 800a858:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10a      	bne.n	800a878 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	77fb      	strb	r3, [r7, #31]
 800a884:	e000      	b.n	800a888 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a898:	7ffb      	ldrb	r3, [r7, #31]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af02      	add	r7, sp, #8
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	603b      	str	r3, [r7, #0]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8be:	d112      	bne.n	800a8e6 <HAL_SPI_Receive+0x44>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10e      	bne.n	800a8e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a8d0:	88fa      	ldrh	r2, [r7, #6]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f8f1 	bl	800aac4 <HAL_SPI_TransmitReceive>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	e0ea      	b.n	800aabc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_SPI_Receive+0x52>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e0e3      	b.n	800aabc <HAL_SPI_Receive+0x21a>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8fc:	f7fb feb0 	bl	8006660 <HAL_GetTick>
 800a900:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d002      	beq.n	800a914 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a90e:	2302      	movs	r3, #2
 800a910:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a912:	e0ca      	b.n	800aaaa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <HAL_SPI_Receive+0x7e>
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a924:	e0c1      	b.n	800aaaa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2204      	movs	r2, #4
 800a92a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	88fa      	ldrh	r2, [r7, #6]
 800a93e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a96c:	d10f      	bne.n	800a98e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a97c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a98c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a998:	2b40      	cmp	r3, #64	; 0x40
 800a99a:	d007      	beq.n	800a9ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d162      	bne.n	800aa7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a9b4:	e02e      	b.n	800aa14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d115      	bne.n	800a9f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f103 020c 	add.w	r2, r3, #12
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	b2d2      	uxtb	r2, r2
 800a9d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9ee:	e011      	b.n	800aa14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9f0:	f7fb fe36 	bl	8006660 <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d803      	bhi.n	800aa08 <HAL_SPI_Receive+0x166>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d102      	bne.n	800aa0e <HAL_SPI_Receive+0x16c>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	75fb      	strb	r3, [r7, #23]
          goto error;
 800aa12:	e04a      	b.n	800aaaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1cb      	bne.n	800a9b6 <HAL_SPI_Receive+0x114>
 800aa1e:	e031      	b.n	800aa84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d113      	bne.n	800aa56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa40:	1c9a      	adds	r2, r3, #2
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa54:	e011      	b.n	800aa7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa56:	f7fb fe03 	bl	8006660 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d803      	bhi.n	800aa6e <HAL_SPI_Receive+0x1cc>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6c:	d102      	bne.n	800aa74 <HAL_SPI_Receive+0x1d2>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d102      	bne.n	800aa7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	75fb      	strb	r3, [r7, #23]
          goto error;
 800aa78:	e017      	b.n	800aaaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1cd      	bne.n	800aa20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 fb63 	bl	800b154 <SPI_EndRxTransaction>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2220      	movs	r2, #32
 800aa98:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	75fb      	strb	r3, [r7, #23]
 800aaa6:	e000      	b.n	800aaaa <HAL_SPI_Receive+0x208>
  }

error :
 800aaa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08c      	sub	sp, #48	; 0x30
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aad2:	2301      	movs	r3, #1
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d101      	bne.n	800aaea <HAL_SPI_TransmitReceive+0x26>
 800aae6:	2302      	movs	r3, #2
 800aae8:	e18a      	b.n	800ae00 <HAL_SPI_TransmitReceive+0x33c>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aaf2:	f7fb fdb5 	bl	8006660 <HAL_GetTick>
 800aaf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aafe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ab08:	887b      	ldrh	r3, [r7, #2]
 800ab0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d00f      	beq.n	800ab34 <HAL_SPI_TransmitReceive+0x70>
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab1a:	d107      	bne.n	800ab2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d103      	bne.n	800ab2c <HAL_SPI_TransmitReceive+0x68>
 800ab24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab28:	2b04      	cmp	r3, #4
 800ab2a:	d003      	beq.n	800ab34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ab32:	e15b      	b.n	800adec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <HAL_SPI_TransmitReceive+0x82>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <HAL_SPI_TransmitReceive+0x82>
 800ab40:	887b      	ldrh	r3, [r7, #2]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d103      	bne.n	800ab4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ab4c:	e14e      	b.n	800adec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d003      	beq.n	800ab62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	887a      	ldrh	r2, [r7, #2]
 800ab72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	887a      	ldrh	r2, [r7, #2]
 800ab78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	887a      	ldrh	r2, [r7, #2]
 800ab84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	887a      	ldrh	r2, [r7, #2]
 800ab8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba2:	2b40      	cmp	r3, #64	; 0x40
 800aba4:	d007      	beq.n	800abb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abbe:	d178      	bne.n	800acb2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <HAL_SPI_TransmitReceive+0x10a>
 800abc8:	8b7b      	ldrh	r3, [r7, #26]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d166      	bne.n	800ac9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd2:	881a      	ldrh	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	1c9a      	adds	r2, r3, #2
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b01      	subs	r3, #1
 800abec:	b29a      	uxth	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abf2:	e053      	b.n	800ac9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f003 0302 	and.w	r3, r3, #2
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d11b      	bne.n	800ac3a <HAL_SPI_TransmitReceive+0x176>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d016      	beq.n	800ac3a <HAL_SPI_TransmitReceive+0x176>
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d113      	bne.n	800ac3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac16:	881a      	ldrh	r2, [r3, #0]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	1c9a      	adds	r2, r3, #2
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d119      	bne.n	800ac7c <HAL_SPI_TransmitReceive+0x1b8>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d014      	beq.n	800ac7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68da      	ldr	r2, [r3, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	b292      	uxth	r2, r2
 800ac5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	1c9a      	adds	r2, r3, #2
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	3b01      	subs	r3, #1
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ac7c:	f7fb fcf0 	bl	8006660 <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d807      	bhi.n	800ac9c <HAL_SPI_TransmitReceive+0x1d8>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d003      	beq.n	800ac9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac9a:	e0a7      	b.n	800adec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1a6      	bne.n	800abf4 <HAL_SPI_TransmitReceive+0x130>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acaa:	b29b      	uxth	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1a1      	bne.n	800abf4 <HAL_SPI_TransmitReceive+0x130>
 800acb0:	e07c      	b.n	800adac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <HAL_SPI_TransmitReceive+0x1fc>
 800acba:	8b7b      	ldrh	r3, [r7, #26]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d16b      	bne.n	800ad98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	330c      	adds	r3, #12
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	1c5a      	adds	r2, r3, #1
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ace6:	e057      	b.n	800ad98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f003 0302 	and.w	r3, r3, #2
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d11c      	bne.n	800ad30 <HAL_SPI_TransmitReceive+0x26c>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d017      	beq.n	800ad30 <HAL_SPI_TransmitReceive+0x26c>
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d114      	bne.n	800ad30 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	330c      	adds	r3, #12
 800ad10:	7812      	ldrb	r2, [r2, #0]
 800ad12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	3b01      	subs	r3, #1
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d119      	bne.n	800ad72 <HAL_SPI_TransmitReceive+0x2ae>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d014      	beq.n	800ad72 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	3b01      	subs	r3, #1
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ad72:	f7fb fc75 	bl	8006660 <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d803      	bhi.n	800ad8a <HAL_SPI_TransmitReceive+0x2c6>
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d102      	bne.n	800ad90 <HAL_SPI_TransmitReceive+0x2cc>
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad96:	e029      	b.n	800adec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1a2      	bne.n	800ace8 <HAL_SPI_TransmitReceive+0x224>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d19d      	bne.n	800ace8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 fa35 	bl	800b220 <SPI_EndRxTxTransaction>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d006      	beq.n	800adca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2220      	movs	r2, #32
 800adc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800adc8:	e010      	b.n	800adec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10b      	bne.n	800adea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	617b      	str	r3, [r7, #20]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	e000      	b.n	800adec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800adea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800adfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3730      	adds	r7, #48	; 0x30
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	099b      	lsrs	r3, r3, #6
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10f      	bne.n	800ae4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	099b      	lsrs	r3, r3, #6
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d004      	beq.n	800ae4c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
    return;
 800ae4a:	e0d7      	b.n	800affc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	085b      	lsrs	r3, r3, #1
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00a      	beq.n	800ae6e <HAL_SPI_IRQHandler+0x66>
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	09db      	lsrs	r3, r3, #7
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	4798      	blx	r3
    return;
 800ae6c:	e0c6      	b.n	800affc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10c      	bne.n	800ae94 <HAL_SPI_IRQHandler+0x8c>
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	099b      	lsrs	r3, r3, #6
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	0a1b      	lsrs	r3, r3, #8
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 80b4 	beq.w	800affc <HAL_SPI_IRQHandler+0x1f4>
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	095b      	lsrs	r3, r3, #5
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 80ad 	beq.w	800affc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	099b      	lsrs	r3, r3, #6
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d023      	beq.n	800aef6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d011      	beq.n	800aede <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aebe:	f043 0204 	orr.w	r2, r3, #4
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aec6:	2300      	movs	r3, #0
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	e00b      	b.n	800aef6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aede:	2300      	movs	r3, #0
 800aee0:	613b      	str	r3, [r7, #16]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	613b      	str	r3, [r7, #16]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	613b      	str	r3, [r7, #16]
 800aef2:	693b      	ldr	r3, [r7, #16]
        return;
 800aef4:	e082      	b.n	800affc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	095b      	lsrs	r3, r3, #5
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d014      	beq.n	800af2c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af06:	f043 0201 	orr.w	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af0e:	2300      	movs	r3, #0
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	0a1b      	lsrs	r3, r3, #8
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00c      	beq.n	800af52 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af3c:	f043 0208 	orr.w	r2, r3, #8
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af44:	2300      	movs	r3, #0
 800af46:	60bb      	str	r3, [r7, #8]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	60bb      	str	r3, [r7, #8]
 800af50:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af56:	2b00      	cmp	r3, #0
 800af58:	d04f      	beq.n	800affa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d104      	bne.n	800af86 <HAL_SPI_IRQHandler+0x17e>
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d034      	beq.n	800aff0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f022 0203 	bic.w	r2, r2, #3
 800af94:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d011      	beq.n	800afc2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa2:	4a18      	ldr	r2, [pc, #96]	; (800b004 <HAL_SPI_IRQHandler+0x1fc>)
 800afa4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fb fd48 	bl	8006a40 <HAL_DMA_Abort_IT>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d005      	beq.n	800afc2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d016      	beq.n	800aff8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afce:	4a0d      	ldr	r2, [pc, #52]	; (800b004 <HAL_SPI_IRQHandler+0x1fc>)
 800afd0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fb fd32 	bl	8006a40 <HAL_DMA_Abort_IT>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800afee:	e003      	b.n	800aff8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f809 	bl	800b008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aff6:	e000      	b.n	800affa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800aff8:	bf00      	nop
    return;
 800affa:	bf00      	nop
  }
}
 800affc:	3720      	adds	r7, #32
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	0800b01d 	.word	0x0800b01d

0800b008 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b028:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff ffe6 	bl	800b008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b03c:	bf00      	nop
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	4613      	mov	r3, r2
 800b052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b054:	f7fb fb04 	bl	8006660 <HAL_GetTick>
 800b058:	4602      	mov	r2, r0
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	1a9b      	subs	r3, r3, r2
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	4413      	add	r3, r2
 800b062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b064:	f7fb fafc 	bl	8006660 <HAL_GetTick>
 800b068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b06a:	4b39      	ldr	r3, [pc, #228]	; (800b150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	015b      	lsls	r3, r3, #5
 800b070:	0d1b      	lsrs	r3, r3, #20
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	fb02 f303 	mul.w	r3, r2, r3
 800b078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b07a:	e054      	b.n	800b126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d050      	beq.n	800b126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b084:	f7fb faec 	bl	8006660 <HAL_GetTick>
 800b088:	4602      	mov	r2, r0
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	69fa      	ldr	r2, [r7, #28]
 800b090:	429a      	cmp	r2, r3
 800b092:	d902      	bls.n	800b09a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d13d      	bne.n	800b116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b0a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0b2:	d111      	bne.n	800b0d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0bc:	d004      	beq.n	800b0c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0c6:	d107      	bne.n	800b0d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e0:	d10f      	bne.n	800b102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b112:	2303      	movs	r3, #3
 800b114:	e017      	b.n	800b146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	3b01      	subs	r3, #1
 800b124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	689a      	ldr	r2, [r3, #8]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4013      	ands	r3, r2
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	429a      	cmp	r2, r3
 800b134:	bf0c      	ite	eq
 800b136:	2301      	moveq	r3, #1
 800b138:	2300      	movne	r3, #0
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	79fb      	ldrb	r3, [r7, #7]
 800b140:	429a      	cmp	r2, r3
 800b142:	d19b      	bne.n	800b07c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20000150 	.word	0x20000150

0800b154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af02      	add	r7, sp, #8
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b168:	d111      	bne.n	800b18e <SPI_EndRxTransaction+0x3a>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b172:	d004      	beq.n	800b17e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17c:	d107      	bne.n	800b18e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b18c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b196:	d12a      	bne.n	800b1ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1a0:	d012      	beq.n	800b1c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2180      	movs	r1, #128	; 0x80
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7ff ff49 	bl	800b044 <SPI_WaitFlagStateUntilTimeout>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d02d      	beq.n	800b214 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1bc:	f043 0220 	orr.w	r2, r3, #32
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e026      	b.n	800b216 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff ff36 	bl	800b044 <SPI_WaitFlagStateUntilTimeout>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01a      	beq.n	800b214 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e2:	f043 0220 	orr.w	r2, r3, #32
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e013      	b.n	800b216 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f7ff ff23 	bl	800b044 <SPI_WaitFlagStateUntilTimeout>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d007      	beq.n	800b214 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b208:	f043 0220 	orr.w	r2, r3, #32
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b210:	2303      	movs	r3, #3
 800b212:	e000      	b.n	800b216 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af02      	add	r7, sp, #8
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b22c:	4b1b      	ldr	r3, [pc, #108]	; (800b29c <SPI_EndRxTxTransaction+0x7c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a1b      	ldr	r2, [pc, #108]	; (800b2a0 <SPI_EndRxTxTransaction+0x80>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	0d5b      	lsrs	r3, r3, #21
 800b238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b23c:	fb02 f303 	mul.w	r3, r2, r3
 800b240:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b24a:	d112      	bne.n	800b272 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2200      	movs	r2, #0
 800b254:	2180      	movs	r1, #128	; 0x80
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff fef4 	bl	800b044 <SPI_WaitFlagStateUntilTimeout>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d016      	beq.n	800b290 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b266:	f043 0220 	orr.w	r2, r3, #32
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e00f      	b.n	800b292 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00a      	beq.n	800b28e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b288:	2b80      	cmp	r3, #128	; 0x80
 800b28a:	d0f2      	beq.n	800b272 <SPI_EndRxTxTransaction+0x52>
 800b28c:	e000      	b.n	800b290 <SPI_EndRxTxTransaction+0x70>
        break;
 800b28e:	bf00      	nop
  }

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20000150 	.word	0x20000150
 800b2a0:	165e9f81 	.word	0x165e9f81

0800b2a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e041      	b.n	800b33a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7fa fdac 	bl	8005e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	f000 fae0 	bl	800b8a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
	...

0800b344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b01      	cmp	r3, #1
 800b356:	d001      	beq.n	800b35c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e04e      	b.n	800b3fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2202      	movs	r2, #2
 800b360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68da      	ldr	r2, [r3, #12]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f042 0201 	orr.w	r2, r2, #1
 800b372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a23      	ldr	r2, [pc, #140]	; (800b408 <HAL_TIM_Base_Start_IT+0xc4>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d022      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b386:	d01d      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a1f      	ldr	r2, [pc, #124]	; (800b40c <HAL_TIM_Base_Start_IT+0xc8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d018      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a1e      	ldr	r2, [pc, #120]	; (800b410 <HAL_TIM_Base_Start_IT+0xcc>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d013      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a1c      	ldr	r2, [pc, #112]	; (800b414 <HAL_TIM_Base_Start_IT+0xd0>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00e      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a1b      	ldr	r2, [pc, #108]	; (800b418 <HAL_TIM_Base_Start_IT+0xd4>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d009      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a19      	ldr	r2, [pc, #100]	; (800b41c <HAL_TIM_Base_Start_IT+0xd8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIM_Base_Start_IT+0x80>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a18      	ldr	r2, [pc, #96]	; (800b420 <HAL_TIM_Base_Start_IT+0xdc>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d111      	bne.n	800b3e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	f003 0307 	and.w	r3, r3, #7
 800b3ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b06      	cmp	r3, #6
 800b3d4:	d010      	beq.n	800b3f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f042 0201 	orr.w	r2, r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e6:	e007      	b.n	800b3f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0201 	orr.w	r2, r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40010000 	.word	0x40010000
 800b40c:	40000400 	.word	0x40000400
 800b410:	40000800 	.word	0x40000800
 800b414:	40000c00 	.word	0x40000c00
 800b418:	40010400 	.word	0x40010400
 800b41c:	40014000 	.word	0x40014000
 800b420:	40001800 	.word	0x40001800

0800b424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e041      	b.n	800b4ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fa fcca 	bl	8005de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3304      	adds	r3, #4
 800b460:	4619      	mov	r1, r3
 800b462:	4610      	mov	r0, r2
 800b464:	f000 fa20 	bl	800b8a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d122      	bne.n	800b51e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f003 0302 	and.w	r3, r3, #2
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d11b      	bne.n	800b51e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f06f 0202 	mvn.w	r2, #2
 800b4ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	f003 0303 	and.w	r3, r3, #3
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f9b1 	bl	800b86c <HAL_TIM_IC_CaptureCallback>
 800b50a:	e005      	b.n	800b518 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f9a3 	bl	800b858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f9b4 	bl	800b880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	f003 0304 	and.w	r3, r3, #4
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d122      	bne.n	800b572 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f003 0304 	and.w	r3, r3, #4
 800b536:	2b04      	cmp	r3, #4
 800b538:	d11b      	bne.n	800b572 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f06f 0204 	mvn.w	r2, #4
 800b542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b554:	2b00      	cmp	r3, #0
 800b556:	d003      	beq.n	800b560 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f987 	bl	800b86c <HAL_TIM_IC_CaptureCallback>
 800b55e:	e005      	b.n	800b56c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f979 	bl	800b858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f98a 	bl	800b880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d122      	bne.n	800b5c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f003 0308 	and.w	r3, r3, #8
 800b58a:	2b08      	cmp	r3, #8
 800b58c:	d11b      	bne.n	800b5c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f06f 0208 	mvn.w	r2, #8
 800b596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2204      	movs	r2, #4
 800b59c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	f003 0303 	and.w	r3, r3, #3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f95d 	bl	800b86c <HAL_TIM_IC_CaptureCallback>
 800b5b2:	e005      	b.n	800b5c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f94f 	bl	800b858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f960 	bl	800b880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d122      	bne.n	800b61a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	f003 0310 	and.w	r3, r3, #16
 800b5de:	2b10      	cmp	r3, #16
 800b5e0:	d11b      	bne.n	800b61a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f06f 0210 	mvn.w	r2, #16
 800b5ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2208      	movs	r2, #8
 800b5f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f933 	bl	800b86c <HAL_TIM_IC_CaptureCallback>
 800b606:	e005      	b.n	800b614 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f925 	bl	800b858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f936 	bl	800b880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10e      	bne.n	800b646 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b01      	cmp	r3, #1
 800b634:	d107      	bne.n	800b646 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f06f 0201 	mvn.w	r2, #1
 800b63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7fa fb11 	bl	8005c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b650:	2b80      	cmp	r3, #128	; 0x80
 800b652:	d10e      	bne.n	800b672 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b65e:	2b80      	cmp	r3, #128	; 0x80
 800b660:	d107      	bne.n	800b672 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fbf1 	bl	800be54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67c:	2b40      	cmp	r3, #64	; 0x40
 800b67e:	d10e      	bne.n	800b69e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b68a:	2b40      	cmp	r3, #64	; 0x40
 800b68c:	d107      	bne.n	800b69e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f8fb 	bl	800b894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b20      	cmp	r3, #32
 800b6aa:	d10e      	bne.n	800b6ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f003 0320 	and.w	r3, r3, #32
 800b6b6:	2b20      	cmp	r3, #32
 800b6b8:	d107      	bne.n	800b6ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f06f 0220 	mvn.w	r2, #32
 800b6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fbbb 	bl	800be40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e0ae      	b.n	800b850 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b0c      	cmp	r3, #12
 800b6fe:	f200 809f 	bhi.w	800b840 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b702:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b708:	0800b73d 	.word	0x0800b73d
 800b70c:	0800b841 	.word	0x0800b841
 800b710:	0800b841 	.word	0x0800b841
 800b714:	0800b841 	.word	0x0800b841
 800b718:	0800b77d 	.word	0x0800b77d
 800b71c:	0800b841 	.word	0x0800b841
 800b720:	0800b841 	.word	0x0800b841
 800b724:	0800b841 	.word	0x0800b841
 800b728:	0800b7bf 	.word	0x0800b7bf
 800b72c:	0800b841 	.word	0x0800b841
 800b730:	0800b841 	.word	0x0800b841
 800b734:	0800b841 	.word	0x0800b841
 800b738:	0800b7ff 	.word	0x0800b7ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f950 	bl	800b9e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	699a      	ldr	r2, [r3, #24]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f042 0208 	orr.w	r2, r2, #8
 800b756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699a      	ldr	r2, [r3, #24]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f022 0204 	bic.w	r2, r2, #4
 800b766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6999      	ldr	r1, [r3, #24]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	691a      	ldr	r2, [r3, #16]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	619a      	str	r2, [r3, #24]
      break;
 800b77a:	e064      	b.n	800b846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 f9a0 	bl	800bac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699a      	ldr	r2, [r3, #24]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6999      	ldr	r1, [r3, #24]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	021a      	lsls	r2, r3, #8
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	430a      	orrs	r2, r1
 800b7ba:	619a      	str	r2, [r3, #24]
      break;
 800b7bc:	e043      	b.n	800b846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68b9      	ldr	r1, [r7, #8]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 f9f5 	bl	800bbb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69da      	ldr	r2, [r3, #28]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f042 0208 	orr.w	r2, r2, #8
 800b7d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	69da      	ldr	r2, [r3, #28]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 0204 	bic.w	r2, r2, #4
 800b7e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	69d9      	ldr	r1, [r3, #28]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	691a      	ldr	r2, [r3, #16]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	430a      	orrs	r2, r1
 800b7fa:	61da      	str	r2, [r3, #28]
      break;
 800b7fc:	e023      	b.n	800b846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68b9      	ldr	r1, [r7, #8]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fa49 	bl	800bc9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69da      	ldr	r2, [r3, #28]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69da      	ldr	r2, [r3, #28]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	69d9      	ldr	r1, [r3, #28]
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	021a      	lsls	r2, r3, #8
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	61da      	str	r2, [r3, #28]
      break;
 800b83e:	e002      	b.n	800b846 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	75fb      	strb	r3, [r7, #23]
      break;
 800b844:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a40      	ldr	r2, [pc, #256]	; (800b9bc <TIM_Base_SetConfig+0x114>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d013      	beq.n	800b8e8 <TIM_Base_SetConfig+0x40>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c6:	d00f      	beq.n	800b8e8 <TIM_Base_SetConfig+0x40>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a3d      	ldr	r2, [pc, #244]	; (800b9c0 <TIM_Base_SetConfig+0x118>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00b      	beq.n	800b8e8 <TIM_Base_SetConfig+0x40>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a3c      	ldr	r2, [pc, #240]	; (800b9c4 <TIM_Base_SetConfig+0x11c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d007      	beq.n	800b8e8 <TIM_Base_SetConfig+0x40>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a3b      	ldr	r2, [pc, #236]	; (800b9c8 <TIM_Base_SetConfig+0x120>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d003      	beq.n	800b8e8 <TIM_Base_SetConfig+0x40>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a3a      	ldr	r2, [pc, #232]	; (800b9cc <TIM_Base_SetConfig+0x124>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d108      	bne.n	800b8fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a2f      	ldr	r2, [pc, #188]	; (800b9bc <TIM_Base_SetConfig+0x114>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d02b      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b908:	d027      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a2c      	ldr	r2, [pc, #176]	; (800b9c0 <TIM_Base_SetConfig+0x118>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d023      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a2b      	ldr	r2, [pc, #172]	; (800b9c4 <TIM_Base_SetConfig+0x11c>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d01f      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a2a      	ldr	r2, [pc, #168]	; (800b9c8 <TIM_Base_SetConfig+0x120>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d01b      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a29      	ldr	r2, [pc, #164]	; (800b9cc <TIM_Base_SetConfig+0x124>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d017      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a28      	ldr	r2, [pc, #160]	; (800b9d0 <TIM_Base_SetConfig+0x128>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d013      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a27      	ldr	r2, [pc, #156]	; (800b9d4 <TIM_Base_SetConfig+0x12c>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00f      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a26      	ldr	r2, [pc, #152]	; (800b9d8 <TIM_Base_SetConfig+0x130>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00b      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a25      	ldr	r2, [pc, #148]	; (800b9dc <TIM_Base_SetConfig+0x134>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d007      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a24      	ldr	r2, [pc, #144]	; (800b9e0 <TIM_Base_SetConfig+0x138>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d003      	beq.n	800b95a <TIM_Base_SetConfig+0xb2>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a23      	ldr	r2, [pc, #140]	; (800b9e4 <TIM_Base_SetConfig+0x13c>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d108      	bne.n	800b96c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	4313      	orrs	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <TIM_Base_SetConfig+0x114>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d003      	beq.n	800b9a0 <TIM_Base_SetConfig+0xf8>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a0c      	ldr	r2, [pc, #48]	; (800b9cc <TIM_Base_SetConfig+0x124>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d103      	bne.n	800b9a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	691a      	ldr	r2, [r3, #16]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	615a      	str	r2, [r3, #20]
}
 800b9ae:	bf00      	nop
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	40010000 	.word	0x40010000
 800b9c0:	40000400 	.word	0x40000400
 800b9c4:	40000800 	.word	0x40000800
 800b9c8:	40000c00 	.word	0x40000c00
 800b9cc:	40010400 	.word	0x40010400
 800b9d0:	40014000 	.word	0x40014000
 800b9d4:	40014400 	.word	0x40014400
 800b9d8:	40014800 	.word	0x40014800
 800b9dc:	40001800 	.word	0x40001800
 800b9e0:	40001c00 	.word	0x40001c00
 800b9e4:	40002000 	.word	0x40002000

0800b9e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	f023 0201 	bic.w	r2, r3, #1
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f023 0303 	bic.w	r3, r3, #3
 800ba1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f023 0302 	bic.w	r3, r3, #2
 800ba30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a20      	ldr	r2, [pc, #128]	; (800bac0 <TIM_OC1_SetConfig+0xd8>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d003      	beq.n	800ba4c <TIM_OC1_SetConfig+0x64>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a1f      	ldr	r2, [pc, #124]	; (800bac4 <TIM_OC1_SetConfig+0xdc>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d10c      	bne.n	800ba66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f023 0308 	bic.w	r3, r3, #8
 800ba52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f023 0304 	bic.w	r3, r3, #4
 800ba64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a15      	ldr	r2, [pc, #84]	; (800bac0 <TIM_OC1_SetConfig+0xd8>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d003      	beq.n	800ba76 <TIM_OC1_SetConfig+0x8e>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a14      	ldr	r2, [pc, #80]	; (800bac4 <TIM_OC1_SetConfig+0xdc>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d111      	bne.n	800ba9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	621a      	str	r2, [r3, #32]
}
 800bab4:	bf00      	nop
 800bab6:	371c      	adds	r7, #28
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	40010000 	.word	0x40010000
 800bac4:	40010400 	.word	0x40010400

0800bac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	f023 0210 	bic.w	r2, r3, #16
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f023 0320 	bic.w	r3, r3, #32
 800bb12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	011b      	lsls	r3, r3, #4
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a22      	ldr	r2, [pc, #136]	; (800bbac <TIM_OC2_SetConfig+0xe4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d003      	beq.n	800bb30 <TIM_OC2_SetConfig+0x68>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a21      	ldr	r2, [pc, #132]	; (800bbb0 <TIM_OC2_SetConfig+0xe8>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d10d      	bne.n	800bb4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	011b      	lsls	r3, r3, #4
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a17      	ldr	r2, [pc, #92]	; (800bbac <TIM_OC2_SetConfig+0xe4>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d003      	beq.n	800bb5c <TIM_OC2_SetConfig+0x94>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a16      	ldr	r2, [pc, #88]	; (800bbb0 <TIM_OC2_SetConfig+0xe8>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d113      	bne.n	800bb84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	621a      	str	r2, [r3, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	40010000 	.word	0x40010000
 800bbb0:	40010400 	.word	0x40010400

0800bbb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 0303 	bic.w	r3, r3, #3
 800bbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	021b      	lsls	r3, r3, #8
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a21      	ldr	r2, [pc, #132]	; (800bc94 <TIM_OC3_SetConfig+0xe0>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d003      	beq.n	800bc1a <TIM_OC3_SetConfig+0x66>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a20      	ldr	r2, [pc, #128]	; (800bc98 <TIM_OC3_SetConfig+0xe4>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d10d      	bne.n	800bc36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a16      	ldr	r2, [pc, #88]	; (800bc94 <TIM_OC3_SetConfig+0xe0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d003      	beq.n	800bc46 <TIM_OC3_SetConfig+0x92>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <TIM_OC3_SetConfig+0xe4>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d113      	bne.n	800bc6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	011b      	lsls	r3, r3, #4
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	621a      	str	r2, [r3, #32]
}
 800bc88:	bf00      	nop
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	40010000 	.word	0x40010000
 800bc98:	40010400 	.word	0x40010400

0800bc9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	021b      	lsls	r3, r3, #8
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	031b      	lsls	r3, r3, #12
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a12      	ldr	r2, [pc, #72]	; (800bd40 <TIM_OC4_SetConfig+0xa4>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d003      	beq.n	800bd04 <TIM_OC4_SetConfig+0x68>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a11      	ldr	r2, [pc, #68]	; (800bd44 <TIM_OC4_SetConfig+0xa8>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d109      	bne.n	800bd18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	019b      	lsls	r3, r3, #6
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	621a      	str	r2, [r3, #32]
}
 800bd32:	bf00      	nop
 800bd34:	371c      	adds	r7, #28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40010000 	.word	0x40010000
 800bd44:	40010400 	.word	0x40010400

0800bd48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d101      	bne.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	e05a      	b.n	800be16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a21      	ldr	r2, [pc, #132]	; (800be24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d022      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdac:	d01d      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a1d      	ldr	r2, [pc, #116]	; (800be28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d018      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a1b      	ldr	r2, [pc, #108]	; (800be2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d013      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a1a      	ldr	r2, [pc, #104]	; (800be30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d00e      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a18      	ldr	r2, [pc, #96]	; (800be34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d009      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a17      	ldr	r2, [pc, #92]	; (800be38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d004      	beq.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a15      	ldr	r2, [pc, #84]	; (800be3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d10c      	bne.n	800be04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	40010000 	.word	0x40010000
 800be28:	40000400 	.word	0x40000400
 800be2c:	40000800 	.word	0x40000800
 800be30:	40000c00 	.word	0x40000c00
 800be34:	40010400 	.word	0x40010400
 800be38:	40014000 	.word	0x40014000
 800be3c:	40001800 	.word	0x40001800

0800be40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e03f      	b.n	800befa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d106      	bne.n	800be94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7fa fab6 	bl	8006400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2224      	movs	r2, #36	; 0x24
 800be98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68da      	ldr	r2, [r3, #12]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800beaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f929 	bl	800c104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	691a      	ldr	r2, [r3, #16]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	695a      	ldr	r2, [r3, #20]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2220      	movs	r2, #32
 800beec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2220      	movs	r2, #32
 800bef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b08a      	sub	sp, #40	; 0x28
 800bf06:	af02      	add	r7, sp, #8
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	603b      	str	r3, [r7, #0]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b20      	cmp	r3, #32
 800bf20:	d17c      	bne.n	800c01c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <HAL_UART_Transmit+0x2c>
 800bf28:	88fb      	ldrh	r3, [r7, #6]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e075      	b.n	800c01e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d101      	bne.n	800bf40 <HAL_UART_Transmit+0x3e>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e06e      	b.n	800c01e <HAL_UART_Transmit+0x11c>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2221      	movs	r2, #33	; 0x21
 800bf52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf56:	f7fa fb83 	bl	8006660 <HAL_GetTick>
 800bf5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	88fa      	ldrh	r2, [r7, #6]
 800bf60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	88fa      	ldrh	r2, [r7, #6]
 800bf66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf70:	d108      	bne.n	800bf84 <HAL_UART_Transmit+0x82>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d104      	bne.n	800bf84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	61bb      	str	r3, [r7, #24]
 800bf82:	e003      	b.n	800bf8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bf94:	e02a      	b.n	800bfec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2180      	movs	r1, #128	; 0x80
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f000 f840 	bl	800c026 <UART_WaitOnFlagUntilTimeout>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e036      	b.n	800c01e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	3302      	adds	r3, #2
 800bfca:	61bb      	str	r3, [r7, #24]
 800bfcc:	e007      	b.n	800bfde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	781a      	ldrb	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1cf      	bne.n	800bf96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2200      	movs	r2, #0
 800bffe:	2140      	movs	r1, #64	; 0x40
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f000 f810 	bl	800c026 <UART_WaitOnFlagUntilTimeout>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e006      	b.n	800c01e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2220      	movs	r2, #32
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	e000      	b.n	800c01e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c01c:	2302      	movs	r3, #2
  }
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3720      	adds	r7, #32
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b090      	sub	sp, #64	; 0x40
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	603b      	str	r3, [r7, #0]
 800c032:	4613      	mov	r3, r2
 800c034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c036:	e050      	b.n	800c0da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d04c      	beq.n	800c0da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c042:	2b00      	cmp	r3, #0
 800c044:	d007      	beq.n	800c056 <UART_WaitOnFlagUntilTimeout+0x30>
 800c046:	f7fa fb0b 	bl	8006660 <HAL_GetTick>
 800c04a:	4602      	mov	r2, r0
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c052:	429a      	cmp	r2, r3
 800c054:	d241      	bcs.n	800c0da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	330c      	adds	r3, #12
 800c05c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	330c      	adds	r3, #12
 800c074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c076:	637a      	str	r2, [r7, #52]	; 0x34
 800c078:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c07c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c07e:	e841 2300 	strex	r3, r2, [r1]
 800c082:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e5      	bne.n	800c056 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3314      	adds	r3, #20
 800c090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	613b      	str	r3, [r7, #16]
   return(result);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f023 0301 	bic.w	r3, r3, #1
 800c0a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3314      	adds	r3, #20
 800c0a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0aa:	623a      	str	r2, [r7, #32]
 800c0ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	69f9      	ldr	r1, [r7, #28]
 800c0b0:	6a3a      	ldr	r2, [r7, #32]
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e5      	bne.n	800c08a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2220      	movs	r2, #32
 800c0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e00f      	b.n	800c0fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	bf0c      	ite	eq
 800c0ea:	2301      	moveq	r3, #1
 800c0ec:	2300      	movne	r3, #0
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d09f      	beq.n	800c038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3740      	adds	r7, #64	; 0x40
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c108:	b0c0      	sub	sp, #256	; 0x100
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c120:	68d9      	ldr	r1, [r3, #12]
 800c122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	ea40 0301 	orr.w	r3, r0, r1
 800c12c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c132:	689a      	ldr	r2, [r3, #8]
 800c134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	431a      	orrs	r2, r3
 800c13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	431a      	orrs	r2, r3
 800c144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c148:	69db      	ldr	r3, [r3, #28]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c15c:	f021 010c 	bic.w	r1, r1, #12
 800c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c16a:	430b      	orrs	r3, r1
 800c16c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c17e:	6999      	ldr	r1, [r3, #24]
 800c180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	ea40 0301 	orr.w	r3, r0, r1
 800c18a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	4b8f      	ldr	r3, [pc, #572]	; (800c3d0 <UART_SetConfig+0x2cc>)
 800c194:	429a      	cmp	r2, r3
 800c196:	d005      	beq.n	800c1a4 <UART_SetConfig+0xa0>
 800c198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	4b8d      	ldr	r3, [pc, #564]	; (800c3d4 <UART_SetConfig+0x2d0>)
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d104      	bne.n	800c1ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1a4:	f7fe f9a4 	bl	800a4f0 <HAL_RCC_GetPCLK2Freq>
 800c1a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c1ac:	e003      	b.n	800c1b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1ae:	f7fe f98b 	bl	800a4c8 <HAL_RCC_GetPCLK1Freq>
 800c1b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1c0:	f040 810c 	bne.w	800c3dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c1d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	462b      	mov	r3, r5
 800c1da:	1891      	adds	r1, r2, r2
 800c1dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800c1de:	415b      	adcs	r3, r3
 800c1e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	eb12 0801 	adds.w	r8, r2, r1
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	eb43 0901 	adc.w	r9, r3, r1
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	f04f 0300 	mov.w	r3, #0
 800c1fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c206:	4690      	mov	r8, r2
 800c208:	4699      	mov	r9, r3
 800c20a:	4623      	mov	r3, r4
 800c20c:	eb18 0303 	adds.w	r3, r8, r3
 800c210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c214:	462b      	mov	r3, r5
 800c216:	eb49 0303 	adc.w	r3, r9, r3
 800c21a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c22a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c22e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c232:	460b      	mov	r3, r1
 800c234:	18db      	adds	r3, r3, r3
 800c236:	653b      	str	r3, [r7, #80]	; 0x50
 800c238:	4613      	mov	r3, r2
 800c23a:	eb42 0303 	adc.w	r3, r2, r3
 800c23e:	657b      	str	r3, [r7, #84]	; 0x54
 800c240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c248:	f7f3 ffc6 	bl	80001d8 <__aeabi_uldivmod>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <UART_SetConfig+0x2d4>)
 800c252:	fba3 2302 	umull	r2, r3, r3, r2
 800c256:	095b      	lsrs	r3, r3, #5
 800c258:	011c      	lsls	r4, r3, #4
 800c25a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c26c:	4642      	mov	r2, r8
 800c26e:	464b      	mov	r3, r9
 800c270:	1891      	adds	r1, r2, r2
 800c272:	64b9      	str	r1, [r7, #72]	; 0x48
 800c274:	415b      	adcs	r3, r3
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c27c:	4641      	mov	r1, r8
 800c27e:	eb12 0a01 	adds.w	sl, r2, r1
 800c282:	4649      	mov	r1, r9
 800c284:	eb43 0b01 	adc.w	fp, r3, r1
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	f04f 0300 	mov.w	r3, #0
 800c290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c29c:	4692      	mov	sl, r2
 800c29e:	469b      	mov	fp, r3
 800c2a0:	4643      	mov	r3, r8
 800c2a2:	eb1a 0303 	adds.w	r3, sl, r3
 800c2a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	eb4b 0303 	adc.w	r3, fp, r3
 800c2b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c2c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	18db      	adds	r3, r3, r3
 800c2cc:	643b      	str	r3, [r7, #64]	; 0x40
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	eb42 0303 	adc.w	r3, r2, r3
 800c2d4:	647b      	str	r3, [r7, #68]	; 0x44
 800c2d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c2da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c2de:	f7f3 ff7b 	bl	80001d8 <__aeabi_uldivmod>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4b3b      	ldr	r3, [pc, #236]	; (800c3d8 <UART_SetConfig+0x2d4>)
 800c2ea:	fba3 2301 	umull	r2, r3, r3, r1
 800c2ee:	095b      	lsrs	r3, r3, #5
 800c2f0:	2264      	movs	r2, #100	; 0x64
 800c2f2:	fb02 f303 	mul.w	r3, r2, r3
 800c2f6:	1acb      	subs	r3, r1, r3
 800c2f8:	00db      	lsls	r3, r3, #3
 800c2fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c2fe:	4b36      	ldr	r3, [pc, #216]	; (800c3d8 <UART_SetConfig+0x2d4>)
 800c300:	fba3 2302 	umull	r2, r3, r3, r2
 800c304:	095b      	lsrs	r3, r3, #5
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c30c:	441c      	add	r4, r3
 800c30e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c312:	2200      	movs	r2, #0
 800c314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c31c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c320:	4642      	mov	r2, r8
 800c322:	464b      	mov	r3, r9
 800c324:	1891      	adds	r1, r2, r2
 800c326:	63b9      	str	r1, [r7, #56]	; 0x38
 800c328:	415b      	adcs	r3, r3
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c32c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c330:	4641      	mov	r1, r8
 800c332:	1851      	adds	r1, r2, r1
 800c334:	6339      	str	r1, [r7, #48]	; 0x30
 800c336:	4649      	mov	r1, r9
 800c338:	414b      	adcs	r3, r1
 800c33a:	637b      	str	r3, [r7, #52]	; 0x34
 800c33c:	f04f 0200 	mov.w	r2, #0
 800c340:	f04f 0300 	mov.w	r3, #0
 800c344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c348:	4659      	mov	r1, fp
 800c34a:	00cb      	lsls	r3, r1, #3
 800c34c:	4651      	mov	r1, sl
 800c34e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c352:	4651      	mov	r1, sl
 800c354:	00ca      	lsls	r2, r1, #3
 800c356:	4610      	mov	r0, r2
 800c358:	4619      	mov	r1, r3
 800c35a:	4603      	mov	r3, r0
 800c35c:	4642      	mov	r2, r8
 800c35e:	189b      	adds	r3, r3, r2
 800c360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c364:	464b      	mov	r3, r9
 800c366:	460a      	mov	r2, r1
 800c368:	eb42 0303 	adc.w	r3, r2, r3
 800c36c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c37c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c384:	460b      	mov	r3, r1
 800c386:	18db      	adds	r3, r3, r3
 800c388:	62bb      	str	r3, [r7, #40]	; 0x28
 800c38a:	4613      	mov	r3, r2
 800c38c:	eb42 0303 	adc.w	r3, r2, r3
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c39a:	f7f3 ff1d 	bl	80001d8 <__aeabi_uldivmod>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	; (800c3d8 <UART_SetConfig+0x2d4>)
 800c3a4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3a8:	095b      	lsrs	r3, r3, #5
 800c3aa:	2164      	movs	r1, #100	; 0x64
 800c3ac:	fb01 f303 	mul.w	r3, r1, r3
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	3332      	adds	r3, #50	; 0x32
 800c3b6:	4a08      	ldr	r2, [pc, #32]	; (800c3d8 <UART_SetConfig+0x2d4>)
 800c3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3bc:	095b      	lsrs	r3, r3, #5
 800c3be:	f003 0207 	and.w	r2, r3, #7
 800c3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4422      	add	r2, r4
 800c3ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3cc:	e105      	b.n	800c5da <UART_SetConfig+0x4d6>
 800c3ce:	bf00      	nop
 800c3d0:	40011000 	.word	0x40011000
 800c3d4:	40011400 	.word	0x40011400
 800c3d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c3e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c3ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c3ee:	4642      	mov	r2, r8
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	1891      	adds	r1, r2, r2
 800c3f4:	6239      	str	r1, [r7, #32]
 800c3f6:	415b      	adcs	r3, r3
 800c3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c3fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3fe:	4641      	mov	r1, r8
 800c400:	1854      	adds	r4, r2, r1
 800c402:	4649      	mov	r1, r9
 800c404:	eb43 0501 	adc.w	r5, r3, r1
 800c408:	f04f 0200 	mov.w	r2, #0
 800c40c:	f04f 0300 	mov.w	r3, #0
 800c410:	00eb      	lsls	r3, r5, #3
 800c412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c416:	00e2      	lsls	r2, r4, #3
 800c418:	4614      	mov	r4, r2
 800c41a:	461d      	mov	r5, r3
 800c41c:	4643      	mov	r3, r8
 800c41e:	18e3      	adds	r3, r4, r3
 800c420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c424:	464b      	mov	r3, r9
 800c426:	eb45 0303 	adc.w	r3, r5, r3
 800c42a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c43a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c43e:	f04f 0200 	mov.w	r2, #0
 800c442:	f04f 0300 	mov.w	r3, #0
 800c446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c44a:	4629      	mov	r1, r5
 800c44c:	008b      	lsls	r3, r1, #2
 800c44e:	4621      	mov	r1, r4
 800c450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c454:	4621      	mov	r1, r4
 800c456:	008a      	lsls	r2, r1, #2
 800c458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c45c:	f7f3 febc 	bl	80001d8 <__aeabi_uldivmod>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4b60      	ldr	r3, [pc, #384]	; (800c5e8 <UART_SetConfig+0x4e4>)
 800c466:	fba3 2302 	umull	r2, r3, r3, r2
 800c46a:	095b      	lsrs	r3, r3, #5
 800c46c:	011c      	lsls	r4, r3, #4
 800c46e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c472:	2200      	movs	r2, #0
 800c474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c47c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c480:	4642      	mov	r2, r8
 800c482:	464b      	mov	r3, r9
 800c484:	1891      	adds	r1, r2, r2
 800c486:	61b9      	str	r1, [r7, #24]
 800c488:	415b      	adcs	r3, r3
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c490:	4641      	mov	r1, r8
 800c492:	1851      	adds	r1, r2, r1
 800c494:	6139      	str	r1, [r7, #16]
 800c496:	4649      	mov	r1, r9
 800c498:	414b      	adcs	r3, r1
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	f04f 0200 	mov.w	r2, #0
 800c4a0:	f04f 0300 	mov.w	r3, #0
 800c4a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4a8:	4659      	mov	r1, fp
 800c4aa:	00cb      	lsls	r3, r1, #3
 800c4ac:	4651      	mov	r1, sl
 800c4ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4b2:	4651      	mov	r1, sl
 800c4b4:	00ca      	lsls	r2, r1, #3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	4642      	mov	r2, r8
 800c4be:	189b      	adds	r3, r3, r2
 800c4c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4c4:	464b      	mov	r3, r9
 800c4c6:	460a      	mov	r2, r1
 800c4c8:	eb42 0303 	adc.w	r3, r2, r3
 800c4cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c4dc:	f04f 0200 	mov.w	r2, #0
 800c4e0:	f04f 0300 	mov.w	r3, #0
 800c4e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c4e8:	4649      	mov	r1, r9
 800c4ea:	008b      	lsls	r3, r1, #2
 800c4ec:	4641      	mov	r1, r8
 800c4ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4f2:	4641      	mov	r1, r8
 800c4f4:	008a      	lsls	r2, r1, #2
 800c4f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c4fa:	f7f3 fe6d 	bl	80001d8 <__aeabi_uldivmod>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4b39      	ldr	r3, [pc, #228]	; (800c5e8 <UART_SetConfig+0x4e4>)
 800c504:	fba3 1302 	umull	r1, r3, r3, r2
 800c508:	095b      	lsrs	r3, r3, #5
 800c50a:	2164      	movs	r1, #100	; 0x64
 800c50c:	fb01 f303 	mul.w	r3, r1, r3
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	011b      	lsls	r3, r3, #4
 800c514:	3332      	adds	r3, #50	; 0x32
 800c516:	4a34      	ldr	r2, [pc, #208]	; (800c5e8 <UART_SetConfig+0x4e4>)
 800c518:	fba2 2303 	umull	r2, r3, r2, r3
 800c51c:	095b      	lsrs	r3, r3, #5
 800c51e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c522:	441c      	add	r4, r3
 800c524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c528:	2200      	movs	r2, #0
 800c52a:	673b      	str	r3, [r7, #112]	; 0x70
 800c52c:	677a      	str	r2, [r7, #116]	; 0x74
 800c52e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c532:	4642      	mov	r2, r8
 800c534:	464b      	mov	r3, r9
 800c536:	1891      	adds	r1, r2, r2
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	415b      	adcs	r3, r3
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c542:	4641      	mov	r1, r8
 800c544:	1851      	adds	r1, r2, r1
 800c546:	6039      	str	r1, [r7, #0]
 800c548:	4649      	mov	r1, r9
 800c54a:	414b      	adcs	r3, r1
 800c54c:	607b      	str	r3, [r7, #4]
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	f04f 0300 	mov.w	r3, #0
 800c556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c55a:	4659      	mov	r1, fp
 800c55c:	00cb      	lsls	r3, r1, #3
 800c55e:	4651      	mov	r1, sl
 800c560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c564:	4651      	mov	r1, sl
 800c566:	00ca      	lsls	r2, r1, #3
 800c568:	4610      	mov	r0, r2
 800c56a:	4619      	mov	r1, r3
 800c56c:	4603      	mov	r3, r0
 800c56e:	4642      	mov	r2, r8
 800c570:	189b      	adds	r3, r3, r2
 800c572:	66bb      	str	r3, [r7, #104]	; 0x68
 800c574:	464b      	mov	r3, r9
 800c576:	460a      	mov	r2, r1
 800c578:	eb42 0303 	adc.w	r3, r2, r3
 800c57c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	663b      	str	r3, [r7, #96]	; 0x60
 800c588:	667a      	str	r2, [r7, #100]	; 0x64
 800c58a:	f04f 0200 	mov.w	r2, #0
 800c58e:	f04f 0300 	mov.w	r3, #0
 800c592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c596:	4649      	mov	r1, r9
 800c598:	008b      	lsls	r3, r1, #2
 800c59a:	4641      	mov	r1, r8
 800c59c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	008a      	lsls	r2, r1, #2
 800c5a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c5a8:	f7f3 fe16 	bl	80001d8 <__aeabi_uldivmod>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <UART_SetConfig+0x4e4>)
 800c5b2:	fba3 1302 	umull	r1, r3, r3, r2
 800c5b6:	095b      	lsrs	r3, r3, #5
 800c5b8:	2164      	movs	r1, #100	; 0x64
 800c5ba:	fb01 f303 	mul.w	r3, r1, r3
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	011b      	lsls	r3, r3, #4
 800c5c2:	3332      	adds	r3, #50	; 0x32
 800c5c4:	4a08      	ldr	r2, [pc, #32]	; (800c5e8 <UART_SetConfig+0x4e4>)
 800c5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ca:	095b      	lsrs	r3, r3, #5
 800c5cc:	f003 020f 	and.w	r2, r3, #15
 800c5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4422      	add	r2, r4
 800c5d8:	609a      	str	r2, [r3, #8]
}
 800c5da:	bf00      	nop
 800c5dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5e6:	bf00      	nop
 800c5e8:	51eb851f 	.word	0x51eb851f

0800c5ec <__libc_init_array>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	4d0d      	ldr	r5, [pc, #52]	; (800c624 <__libc_init_array+0x38>)
 800c5f0:	4c0d      	ldr	r4, [pc, #52]	; (800c628 <__libc_init_array+0x3c>)
 800c5f2:	1b64      	subs	r4, r4, r5
 800c5f4:	10a4      	asrs	r4, r4, #2
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	42a6      	cmp	r6, r4
 800c5fa:	d109      	bne.n	800c610 <__libc_init_array+0x24>
 800c5fc:	4d0b      	ldr	r5, [pc, #44]	; (800c62c <__libc_init_array+0x40>)
 800c5fe:	4c0c      	ldr	r4, [pc, #48]	; (800c630 <__libc_init_array+0x44>)
 800c600:	f000 f87c 	bl	800c6fc <_init>
 800c604:	1b64      	subs	r4, r4, r5
 800c606:	10a4      	asrs	r4, r4, #2
 800c608:	2600      	movs	r6, #0
 800c60a:	42a6      	cmp	r6, r4
 800c60c:	d105      	bne.n	800c61a <__libc_init_array+0x2e>
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	f855 3b04 	ldr.w	r3, [r5], #4
 800c614:	4798      	blx	r3
 800c616:	3601      	adds	r6, #1
 800c618:	e7ee      	b.n	800c5f8 <__libc_init_array+0xc>
 800c61a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c61e:	4798      	blx	r3
 800c620:	3601      	adds	r6, #1
 800c622:	e7f2      	b.n	800c60a <__libc_init_array+0x1e>
 800c624:	0800fa20 	.word	0x0800fa20
 800c628:	0800fa20 	.word	0x0800fa20
 800c62c:	0800fa20 	.word	0x0800fa20
 800c630:	0800fa24 	.word	0x0800fa24

0800c634 <__itoa>:
 800c634:	1e93      	subs	r3, r2, #2
 800c636:	2b22      	cmp	r3, #34	; 0x22
 800c638:	b510      	push	{r4, lr}
 800c63a:	460c      	mov	r4, r1
 800c63c:	d904      	bls.n	800c648 <__itoa+0x14>
 800c63e:	2300      	movs	r3, #0
 800c640:	700b      	strb	r3, [r1, #0]
 800c642:	461c      	mov	r4, r3
 800c644:	4620      	mov	r0, r4
 800c646:	bd10      	pop	{r4, pc}
 800c648:	2a0a      	cmp	r2, #10
 800c64a:	d109      	bne.n	800c660 <__itoa+0x2c>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	da07      	bge.n	800c660 <__itoa+0x2c>
 800c650:	232d      	movs	r3, #45	; 0x2d
 800c652:	700b      	strb	r3, [r1, #0]
 800c654:	4240      	negs	r0, r0
 800c656:	2101      	movs	r1, #1
 800c658:	4421      	add	r1, r4
 800c65a:	f000 f80d 	bl	800c678 <__utoa>
 800c65e:	e7f1      	b.n	800c644 <__itoa+0x10>
 800c660:	2100      	movs	r1, #0
 800c662:	e7f9      	b.n	800c658 <__itoa+0x24>

0800c664 <itoa>:
 800c664:	f7ff bfe6 	b.w	800c634 <__itoa>

0800c668 <memset>:
 800c668:	4402      	add	r2, r0
 800c66a:	4603      	mov	r3, r0
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d100      	bne.n	800c672 <memset+0xa>
 800c670:	4770      	bx	lr
 800c672:	f803 1b01 	strb.w	r1, [r3], #1
 800c676:	e7f9      	b.n	800c66c <memset+0x4>

0800c678 <__utoa>:
 800c678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c67a:	4c1f      	ldr	r4, [pc, #124]	; (800c6f8 <__utoa+0x80>)
 800c67c:	b08b      	sub	sp, #44	; 0x2c
 800c67e:	4605      	mov	r5, r0
 800c680:	460b      	mov	r3, r1
 800c682:	466e      	mov	r6, sp
 800c684:	f104 0c20 	add.w	ip, r4, #32
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	6861      	ldr	r1, [r4, #4]
 800c68c:	4637      	mov	r7, r6
 800c68e:	c703      	stmia	r7!, {r0, r1}
 800c690:	3408      	adds	r4, #8
 800c692:	4564      	cmp	r4, ip
 800c694:	463e      	mov	r6, r7
 800c696:	d1f7      	bne.n	800c688 <__utoa+0x10>
 800c698:	7921      	ldrb	r1, [r4, #4]
 800c69a:	7139      	strb	r1, [r7, #4]
 800c69c:	1e91      	subs	r1, r2, #2
 800c69e:	6820      	ldr	r0, [r4, #0]
 800c6a0:	6038      	str	r0, [r7, #0]
 800c6a2:	2922      	cmp	r1, #34	; 0x22
 800c6a4:	f04f 0100 	mov.w	r1, #0
 800c6a8:	d904      	bls.n	800c6b4 <__utoa+0x3c>
 800c6aa:	7019      	strb	r1, [r3, #0]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	b00b      	add	sp, #44	; 0x2c
 800c6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b4:	1e58      	subs	r0, r3, #1
 800c6b6:	4684      	mov	ip, r0
 800c6b8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c6bc:	fb02 5617 	mls	r6, r2, r7, r5
 800c6c0:	3628      	adds	r6, #40	; 0x28
 800c6c2:	446e      	add	r6, sp
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c6ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c6ce:	462e      	mov	r6, r5
 800c6d0:	42b2      	cmp	r2, r6
 800c6d2:	f101 0101 	add.w	r1, r1, #1
 800c6d6:	463d      	mov	r5, r7
 800c6d8:	d9ee      	bls.n	800c6b8 <__utoa+0x40>
 800c6da:	2200      	movs	r2, #0
 800c6dc:	545a      	strb	r2, [r3, r1]
 800c6de:	1919      	adds	r1, r3, r4
 800c6e0:	1aa5      	subs	r5, r4, r2
 800c6e2:	42aa      	cmp	r2, r5
 800c6e4:	dae3      	bge.n	800c6ae <__utoa+0x36>
 800c6e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c6ea:	780e      	ldrb	r6, [r1, #0]
 800c6ec:	7006      	strb	r6, [r0, #0]
 800c6ee:	3201      	adds	r2, #1
 800c6f0:	f801 5901 	strb.w	r5, [r1], #-1
 800c6f4:	e7f4      	b.n	800c6e0 <__utoa+0x68>
 800c6f6:	bf00      	nop
 800c6f8:	0800f9f0 	.word	0x0800f9f0

0800c6fc <_init>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	bf00      	nop
 800c700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c702:	bc08      	pop	{r3}
 800c704:	469e      	mov	lr, r3
 800c706:	4770      	bx	lr

0800c708 <_fini>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	bf00      	nop
 800c70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70e:	bc08      	pop	{r3}
 800c710:	469e      	mov	lr, r3
 800c712:	4770      	bx	lr
