
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033a0  0800d04c  0800d04c  0001d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103ec  080103ec  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  080103ec  080103ec  000203ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103f4  080103f4  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103f4  080103f4  000203f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080103fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030188  2**0
                  CONTENTS
 10 .bss          000032d8  20000188  20000188  00030188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003460  20003460  00030188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019200  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000399a  00000000  00000000  000493b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0004cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e0  00000000  00000000  0004e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245f6  00000000  00000000  0004f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cbde  00000000  00000000  00073c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a41  00000000  00000000  00090844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00163285  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005860  00000000  00000000  001632d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d034 	.word	0x0800d034

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d034 	.word	0x0800d034

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f00a fc32 	bl	800af62 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200031e0 	.word	0x200031e0

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f007 fa4e 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f006 fc47 	bl	8006fb0 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f007 fa45 	bl	8007bb8 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f007 fa3f 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f006 fc38 	bl	8006fb0 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f007 fa33 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f007 f9d8 	bl	8007bb8 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f007 f9d2 	bl	8007bb8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f007 f9c8 	bl	8007bb8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f007 f93a 	bl	8007bb8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f007 f931 	bl	8007bb8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200001a4 	.word	0x200001a4

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f006 ffa0 	bl	8007bb8 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f006 ff9a 	bl	8007bb8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f006 ff91 	bl	8007bb8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f006 fef7 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f006 fecd 	bl	8007bb8 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f006 fec4 	bl	8007bb8 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f006 fe78 	bl	8007bb8 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f006 fe6f 	bl	8007bb8 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f006 fe23 	bl	8007bb8 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f006 fe1a 	bl	8007bb8 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800e438 	.word	0x0800e438
 8001010:	0800e710 	.word	0x0800e710

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f006 fdca 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f006 fdc4 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f006 fdb8 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f006 fdb2 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_dab_init>:

static dab_management_t dab_management;					//struct that contains some DAB management data


void Si468x_dab_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <Si468x_dab_init+0xc0>)
 8001064:	f002 faee 	bl	8003644 <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f85a 	bl	8001120 <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f874 	bl	8001158 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f8f6 	bl	8001260 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f966 	bl	8001348 <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa04 	bl	8001488 <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbbc 	bl	80017fc <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb34 	bl	80016f0 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc25 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc1f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc19 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc14 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc0f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc09 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc03 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fbfe 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fbf9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fbf4 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fbef 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbe9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbe4 	bl	80018dc <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001114:	f000 faec 	bl	80016f0 <Si468x_get_sys_state>

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800d0fc 	.word	0x0800d0fc

08001120 <Si468x_reset>:

void Si468x_reset()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001124:	2101      	movs	r1, #1
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <Si468x_reset+0x30>)
 8001128:	f002 fa8c 	bl	8003644 <send_debug_msg>
	RESET_PIN_LOW;
 800112c:	2200      	movs	r2, #0
 800112e:	2120      	movs	r1, #32
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <Si468x_reset+0x34>)
 8001132:	f006 fd41 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f005 ff3a 	bl	8006fb0 <HAL_Delay>
	RESET_PIN_HIGH;
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <Si468x_reset+0x34>)
 8001142:	f006 fd39 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001146:	20c8      	movs	r0, #200	; 0xc8
 8001148:	f005 ff32 	bl	8006fb0 <HAL_Delay>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800d14c 	.word	0x0800d14c
 8001154:	40020800 	.word	0x40020800

08001158 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 800115c:	2101      	movs	r1, #1
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <Si468x_power_up+0xa0>)
 8001160:	f002 fa70 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <Si468x_power_up+0xa4>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <Si468x_power_up+0xa4>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Si468x_power_up+0xa4>)
 8001172:	2217      	movs	r2, #23
 8001174:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <Si468x_power_up+0xa4>)
 8001178:	2250      	movs	r2, #80	; 0x50
 800117a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <Si468x_power_up+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <Si468x_power_up+0xa4>)
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <Si468x_power_up+0xa4>)
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <Si468x_power_up+0xa4>)
 8001190:	2201      	movs	r2, #1
 8001192:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <Si468x_power_up+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Si468x_power_up+0xa4>)
 800119c:	2210      	movs	r2, #16
 800119e:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <Si468x_power_up+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Si468x_power_up+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Si468x_power_up+0xa4>)
 80011b4:	2228      	movs	r2, #40	; 0x28
 80011b6:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Si468x_power_up+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <Si468x_power_up+0xa4>)
 80011c6:	2010      	movs	r0, #16
 80011c8:	f000 fa58 	bl	800167c <Si468x_write_command>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <Si468x_power_up+0xa8>)
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f005 feeb 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <Si468x_power_up+0xac>)
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fa6f 	bl	80016c0 <Si468x_read_reply>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <Si468x_power_up+0xa8>)
 80011e8:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011ea:	2101      	movs	r1, #1
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <Si468x_power_up+0xb0>)
 80011ee:	f002 fa29 	bl	8003644 <send_debug_msg>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800d160 	.word	0x0800d160
 80011fc:	200001a8 	.word	0x200001a8
 8001200:	200019e8 	.word	0x200019e8
 8001204:	200011a8 	.word	0x200011a8
 8001208:	0800d19c 	.word	0x0800d19c

0800120c <Si468x_load_init>:

void Si468x_load_init()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <Si468x_load_init+0x44>)
 8001214:	f002 fa16 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <Si468x_load_init+0x48>)
 800121a:	2206      	movs	r2, #6
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <Si468x_load_init+0x48>)
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001224:	490b      	ldr	r1, [pc, #44]	; (8001254 <Si468x_load_init+0x48>)
 8001226:	2002      	movs	r0, #2
 8001228:	f000 fa28 	bl	800167c <Si468x_write_command>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <Si468x_load_init+0x4c>)
 8001232:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f005 febb 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <Si468x_load_init+0x50>)
 800123c:	2005      	movs	r0, #5
 800123e:	f000 fa3f 	bl	80016c0 <Si468x_read_reply>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <Si468x_load_init+0x4c>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800d1bc 	.word	0x0800d1bc
 8001254:	200001a8 	.word	0x200001a8
 8001258:	200019e8 	.word	0x200019e8
 800125c:	200011a8 	.word	0x200011a8

08001260 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 8001266:	2101      	movs	r1, #1
 8001268:	4830      	ldr	r0, [pc, #192]	; (800132c <Si468x_bootloader_load_host+0xcc>)
 800126a:	f002 f9eb 	bl	8003644 <send_debug_msg>
	Si468x_load_init();
 800126e:	f7ff ffcd 	bl	800120c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001272:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001276:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	e03e      	b.n	8001314 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001296:	2300      	movs	r3, #0
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	e014      	b.n	80012c6 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800129c:	88ba      	ldrh	r2, [r7, #4]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4924      	ldr	r1, [pc, #144]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012a2:	fba1 1303 	umull	r1, r3, r1, r3
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	441a      	add	r2, r3
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	491f      	ldr	r1, [pc, #124]	; (8001338 <Si468x_bootloader_load_host+0xd8>)
 80012ba:	5c89      	ldrb	r1, [r1, r2]
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012be:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	88ba      	ldrh	r2, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3e1      	bcc.n	800129c <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3304      	adds	r3, #4
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9c6 	bl	800167c <Si468x_write_command>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 80012f6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f005 fe59 	bl	8006fb0 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <Si468x_bootloader_load_host+0xe0>)
 8001300:	2005      	movs	r0, #5
 8001302:	f000 f9dd 	bl	80016c0 <Si468x_read_reply>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 800130c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	3301      	adds	r3, #1
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d9bd      	bls.n	8001296 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <Si468x_bootloader_load_host+0xe4>)
 800131e:	f002 f991 	bl	8003644 <send_debug_msg>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	0800d1d4 	.word	0x0800d1d4
 8001330:	200001a8 	.word	0x200001a8
 8001334:	aaaaaaab 	.word	0xaaaaaaab
 8001338:	0800ed00 	.word	0x0800ed00
 800133c:	200019e8 	.word	0x200019e8
 8001340:	200011a8 	.word	0x200011a8
 8001344:	0800d210 	.word	0x0800d210

08001348 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001350:	2101      	movs	r1, #1
 8001352:	4845      	ldr	r0, [pc, #276]	; (8001468 <Si468x_firmware_load_flash+0x120>)
 8001354:	f002 f976 	bl	8003644 <send_debug_msg>
	Si468x_load_init();
 8001358:	f7ff ff58 	bl	800120c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800135e:	2205      	movs	r2, #5
 8001360:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800137a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001384:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800138e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001398:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800139a:	2100      	movs	r1, #0
 800139c:	4834      	ldr	r0, [pc, #208]	; (8001470 <Si468x_firmware_load_flash+0x128>)
 800139e:	f002 f951 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013a2:	4b32      	ldr	r3, [pc, #200]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	2210      	movs	r2, #16
 80013a8:	4932      	ldr	r1, [pc, #200]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00b fdf6 	bl	800cf9c <itoa>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f945 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	2210      	movs	r2, #16
 80013c0:	492c      	ldr	r1, [pc, #176]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b fdea 	bl	800cf9c <itoa>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f939 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013d4:	799b      	ldrb	r3, [r3, #6]
 80013d6:	2210      	movs	r2, #16
 80013d8:	4926      	ldr	r1, [pc, #152]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b fdde 	bl	800cf9c <itoa>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 f92d 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	2210      	movs	r2, #16
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00b fdd2 	bl	800cf9c <itoa>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2101      	movs	r1, #1
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f921 	bl	8003644 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800140a:	2200      	movs	r2, #0
 800140c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001410:	2200      	movs	r2, #0
 8001412:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800141c:	200c      	movs	r0, #12
 800141e:	f000 f92d 	bl	800167c <Si468x_write_command>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 8001428:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f005 fdc0 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001430:	4912      	ldr	r1, [pc, #72]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001432:	2005      	movs	r0, #5
 8001434:	f000 f944 	bl	80016c0 <Si468x_read_reply>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 800143e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800144c:	2101      	movs	r1, #1
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <Si468x_firmware_load_flash+0x138>)
 8001450:	f002 f8f8 	bl	8003644 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001454:	e003      	b.n	800145e <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001456:	2101      	movs	r1, #1
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <Si468x_firmware_load_flash+0x13c>)
 800145a:	f002 f8f3 	bl	8003644 <send_debug_msg>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800d230 	.word	0x0800d230
 800146c:	200001a8 	.word	0x200001a8
 8001470:	0800d26c 	.word	0x0800d26c
 8001474:	200019a8 	.word	0x200019a8
 8001478:	200019e8 	.word	0x200019e8
 800147c:	200011a8 	.word	0x200011a8
 8001480:	0800d280 	.word	0x0800d280
 8001484:	0800d290 	.word	0x0800d290

08001488 <Si468x_boot>:

void Si468x_boot()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 800148c:	2101      	movs	r1, #1
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <Si468x_boot+0x60>)
 8001490:	f002 f8d8 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <Si468x_boot+0x64>)
 8001496:	2207      	movs	r2, #7
 8001498:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <Si468x_boot+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <Si468x_boot+0x64>)
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f8ea 	bl	800167c <Si468x_write_command>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <Si468x_boot+0x68>)
 80014ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f005 fd7d 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014b6:	490f      	ldr	r1, [pc, #60]	; (80014f4 <Si468x_boot+0x6c>)
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 f901 	bl	80016c0 <Si468x_read_reply>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Si468x_boot+0x68>)
 80014c4:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <Si468x_boot+0x6c>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ce:	2bc0      	cmp	r3, #192	; 0xc0
 80014d0:	d104      	bne.n	80014dc <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <Si468x_boot+0x70>)
 80014d6:	f002 f8b5 	bl	8003644 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014da:	e003      	b.n	80014e4 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014dc:	2101      	movs	r1, #1
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <Si468x_boot+0x74>)
 80014e0:	f002 f8b0 	bl	8003644 <send_debug_msg>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800d2ac 	.word	0x0800d2ac
 80014ec:	200001a8 	.word	0x200001a8
 80014f0:	200019e8 	.word	0x200019e8
 80014f4:	200011a8 	.word	0x200011a8
 80014f8:	0800d2e8 	.word	0x0800d2e8
 80014fc:	0800d304 	.word	0x0800d304

08001500 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800150a:	1df9      	adds	r1, r7, #7
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <Si468x_write_single_byte+0x20>)
 8001512:	f009 fd26 	bl	800af62 <HAL_SPI_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20003188 	.word	0x20003188

08001524 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <Si468x_read_single_byte+0x20>)
 8001536:	f009 fe50 	bl	800b1da <HAL_SPI_Receive>
	return data_buffer;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20003188 	.word	0x20003188

08001548 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	e01f      	b.n	8001598 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <Si468x_wait_for_CTS+0x6c>)
 800155a:	2001      	movs	r0, #1
 800155c:	f000 f8b0 	bl	80016c0 <Si468x_read_reply>
		if(rd_reply.cts)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00e      	beq.n	800158c <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 800157c:	2101      	movs	r1, #1
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <Si468x_wait_for_CTS+0x74>)
 8001580:	f002 f860 	bl	8003644 <send_debug_msg>
				return COMMAND_ERROR;
 8001584:	2320      	movs	r3, #32
 8001586:	e010      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 8001588:	2300      	movs	r3, #0
 800158a:	e00e      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f005 fd0f 	bl	8006fb0 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	81fb      	strh	r3, [r7, #14]
 8001598:	89fa      	ldrh	r2, [r7, #14]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3db      	bcc.n	8001558 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015a0:	2101      	movs	r1, #1
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <Si468x_wait_for_CTS+0x78>)
 80015a4:	f002 f84e 	bl	8003644 <send_debug_msg>
	return TIMEOUT;
 80015a8:	2308      	movs	r3, #8
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200011a8 	.word	0x200011a8
 80015b8:	20001ad4 	.word	0x20001ad4
 80015bc:	0800d318 	.word	0x0800d318
 80015c0:	0800d340 	.word	0x0800d340

080015c4 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <Si468x_write_multiple+0x4c>)
 80015da:	f006 faed 	bl	8007bb8 <HAL_GPIO_WritePin>
	while(len--)
 80015de:	e009      	b.n	80015f4 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	81fa      	strh	r2, [r7, #14]
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff86 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	80fa      	strh	r2, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80015fe:	2201      	movs	r2, #1
 8001600:	2110      	movs	r1, #16
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <Si468x_write_multiple+0x4c>)
 8001604:	f006 fad8 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020800 	.word	0x40020800

08001614 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <Si468x_read_multiple+0x64>)
 800162a:	f006 fac5 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800162e:	2003      	movs	r0, #3
 8001630:	f005 fcbe 	bl	8006fb0 <HAL_Delay>
	CS_PIN_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <Si468x_read_multiple+0x64>)
 800163a:	f006 fabd 	bl	8007bb8 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff ff5e 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 8001644:	e009      	b.n	800165a <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	81fa      	strh	r2, [r7, #14]
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	189c      	adds	r4, r3, r2
 8001652:	f7ff ff67 	bl	8001524 <Si468x_read_single_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
	while(len--)
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	80fa      	strh	r2, [r7, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <Si468x_read_multiple+0x64>)
 800166a:	f006 faa5 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	40020800 	.word	0x40020800

0800167c <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f7ff ff5c 	bl	8001548 <Si468x_wait_for_CTS>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <Si468x_write_command+0x24>
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b20      	cmp	r3, #32
 800169e:	d10a      	bne.n	80016b6 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff8d 	bl	80015c4 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ae:	f7ff ff4b 	bl	8001548 <Si468x_wait_for_CTS>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff9f 	bl	8001614 <Si468x_read_multiple>
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <Si468x_read_reply+0x28>)
 80016d8:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <Si468x_read_reply+0x2c>)
 80016dc:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200011a8 	.word	0x200011a8
 80016ec:	20001ad4 	.word	0x20001ad4

080016f0 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4833      	ldr	r0, [pc, #204]	; (80017c4 <Si468x_get_sys_state+0xd4>)
 80016f8:	f001 ffa4 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 80016fe:	2209      	movs	r2, #9
 8001700:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001708:	492f      	ldr	r1, [pc, #188]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 800170a:	2002      	movs	r0, #2
 800170c:	f7ff ffb6 	bl	800167c <Si468x_write_command>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <Si468x_get_sys_state+0xdc>)
 8001716:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f005 fc49 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001720:	2005      	movs	r0, #5
 8001722:	f7ff ffcd 	bl	80016c0 <Si468x_read_reply>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <Si468x_get_sys_state+0xdc>)
 800172c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800172e:	2100      	movs	r1, #0
 8001730:	4828      	ldr	r0, [pc, #160]	; (80017d4 <Si468x_get_sys_state+0xe4>)
 8001732:	f001 ff87 	bl	8003644 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	2b07      	cmp	r3, #7
 800173c:	d83a      	bhi.n	80017b4 <Si468x_get_sys_state+0xc4>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <Si468x_get_sys_state+0x54>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001765 	.word	0x08001765
 8001748:	0800176f 	.word	0x0800176f
 800174c:	08001779 	.word	0x08001779
 8001750:	08001783 	.word	0x08001783
 8001754:	0800178d 	.word	0x0800178d
 8001758:	08001797 	.word	0x08001797
 800175c:	080017a1 	.word	0x080017a1
 8001760:	080017ab 	.word	0x080017ab
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001764:	2101      	movs	r1, #1
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <Si468x_get_sys_state+0xe8>)
 8001768:	f001 ff6c 	bl	8003644 <send_debug_msg>
			break;
 800176c:	e027      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800176e:	2101      	movs	r1, #1
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <Si468x_get_sys_state+0xec>)
 8001772:	f001 ff67 	bl	8003644 <send_debug_msg>
			break;
 8001776:	e022      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001778:	2101      	movs	r1, #1
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <Si468x_get_sys_state+0xf0>)
 800177c:	f001 ff62 	bl	8003644 <send_debug_msg>
			break;
 8001780:	e01d      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001782:	2101      	movs	r1, #1
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <Si468x_get_sys_state+0xf4>)
 8001786:	f001 ff5d 	bl	8003644 <send_debug_msg>
			break;
 800178a:	e018      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <Si468x_get_sys_state+0xf8>)
 8001790:	f001 ff58 	bl	8003644 <send_debug_msg>
			break;
 8001794:	e013      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 8001796:	2101      	movs	r1, #1
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <Si468x_get_sys_state+0xfc>)
 800179a:	f001 ff53 	bl	8003644 <send_debug_msg>
			break;
 800179e:	e00e      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <Si468x_get_sys_state+0x100>)
 80017a4:	f001 ff4e 	bl	8003644 <send_debug_msg>
			break;
 80017a8:	e009      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <Si468x_get_sys_state+0x104>)
 80017ae:	f001 ff49 	bl	8003644 <send_debug_msg>
			break;
 80017b2:	e004      	b.n	80017be <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <Si468x_get_sys_state+0x108>)
 80017b8:	f001 ff44 	bl	8003644 <send_debug_msg>
			break;
 80017bc:	bf00      	nop
	}
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800d350 	.word	0x0800d350
 80017c8:	200001a8 	.word	0x200001a8
 80017cc:	200019e8 	.word	0x200019e8
 80017d0:	200011a8 	.word	0x200011a8
 80017d4:	0800d38c 	.word	0x0800d38c
 80017d8:	0800d398 	.word	0x0800d398
 80017dc:	0800d3b0 	.word	0x0800d3b0
 80017e0:	0800d3c8 	.word	0x0800d3c8
 80017e4:	0800d3e0 	.word	0x0800d3e0
 80017e8:	0800d408 	.word	0x0800d408
 80017ec:	0800d424 	.word	0x0800d424
 80017f0:	0800d43c 	.word	0x0800d43c
 80017f4:	0800d458 	.word	0x0800d458
 80017f8:	0800d470 	.word	0x0800d470

080017fc <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001802:	2101      	movs	r1, #1
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <Si468x_get_part_info+0xc0>)
 8001806:	f001 ff1d 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <Si468x_get_part_info+0xc4>)
 800180c:	2208      	movs	r2, #8
 800180e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001816:	492a      	ldr	r1, [pc, #168]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff ff2f 	bl	800167c <Si468x_write_command>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001824:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f005 fbc2 	bl	8006fb0 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fe67 	bl	8001500 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ff43 	bl	80016c0 <Si468x_read_reply>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001840:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001842:	2100      	movs	r1, #0
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <Si468x_get_part_info+0xd0>)
 8001846:	f001 fefd 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	220a      	movs	r2, #10
 8001850:	491f      	ldr	r1, [pc, #124]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00b fba2 	bl	800cf9c <itoa>
 8001858:	4603      	mov	r3, r0
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fef1 	bl	8003644 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001862:	2100      	movs	r1, #0
 8001864:	481b      	ldr	r0, [pc, #108]	; (80018d4 <Si468x_get_part_info+0xd8>)
 8001866:	f001 feed 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800186c:	795b      	ldrb	r3, [r3, #5]
 800186e:	220a      	movs	r2, #10
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001872:	4618      	mov	r0, r3
 8001874:	f00b fb92 	bl	800cf9c <itoa>
 8001878:	4603      	mov	r3, r0
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f001 fee1 	bl	8003644 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001882:	2100      	movs	r1, #0
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <Si468x_get_part_info+0xdc>)
 8001886:	f001 fedd 	bl	8003644 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	b29b      	uxth	r3, r3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001896:	7a1b      	ldrb	r3, [r3, #8]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4413      	add	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	220a      	movs	r2, #10
 80018a2:	490b      	ldr	r1, [pc, #44]	; (80018d0 <Si468x_get_part_info+0xd4>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00b fb79 	bl	800cf9c <itoa>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fec8 	bl	8003644 <send_debug_msg>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800d484 	.word	0x0800d484
 80018c0:	200001a8 	.word	0x200001a8
 80018c4:	200019e8 	.word	0x200019e8
 80018c8:	200011a8 	.word	0x200011a8
 80018cc:	0800d4c0 	.word	0x0800d4c0
 80018d0:	200019a8 	.word	0x200019a8
 80018d4:	0800d4d0 	.word	0x0800d4d0
 80018d8:	0800d4dc 	.word	0x0800d4dc

080018dc <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 80018ec:	2101      	movs	r1, #1
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <Si468x_set_property+0xdc>)
 80018f0:	f001 fea8 	bl	8003644 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80018f4:	2100      	movs	r1, #0
 80018f6:	4831      	ldr	r0, [pc, #196]	; (80019bc <Si468x_set_property+0xe0>)
 80018f8:	f001 fea4 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	2210      	movs	r2, #16
 8001900:	492f      	ldr	r1, [pc, #188]	; (80019c0 <Si468x_set_property+0xe4>)
 8001902:	4618      	mov	r0, r3
 8001904:	f00b fb4a 	bl	800cf9c <itoa>
 8001908:	4603      	mov	r3, r0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fe99 	bl	8003644 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001912:	2100      	movs	r1, #0
 8001914:	482b      	ldr	r0, [pc, #172]	; (80019c4 <Si468x_set_property+0xe8>)
 8001916:	f001 fe95 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	2210      	movs	r2, #16
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <Si468x_set_property+0xe4>)
 8001920:	4618      	mov	r0, r3
 8001922:	f00b fb3b 	bl	800cf9c <itoa>
 8001926:	4603      	mov	r3, r0
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fe8a 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <Si468x_set_property+0xec>)
 8001932:	2213      	movs	r2, #19
 8001934:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <Si468x_set_property+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <Si468x_set_property+0xec>)
 8001942:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <Si468x_set_property+0xec>)
 800194e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <Si468x_set_property+0xec>)
 8001956:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Si468x_set_property+0xec>)
 8001962:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <Si468x_set_property+0xec>)
 8001966:	2006      	movs	r0, #6
 8001968:	f7ff fe88 	bl	800167c <Si468x_write_command>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <Si468x_set_property+0xf0>)
 8001972:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f005 fb1b 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800197a:	4915      	ldr	r1, [pc, #84]	; (80019d0 <Si468x_set_property+0xf4>)
 800197c:	2005      	movs	r0, #5
 800197e:	f7ff fe9f 	bl	80016c0 <Si468x_read_reply>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <Si468x_set_property+0xf0>)
 8001988:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f825 	bl	80019dc <Si468x_get_property>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001996:	89fa      	ldrh	r2, [r7, #14]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d104      	bne.n	80019a8 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 800199e:	2101      	movs	r1, #1
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <Si468x_set_property+0xf8>)
 80019a2:	f001 fe4f 	bl	8003644 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019a6:	e003      	b.n	80019b0 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019a8:	2101      	movs	r1, #1
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <Si468x_set_property+0xfc>)
 80019ac:	f001 fe4a 	bl	8003644 <send_debug_msg>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800d4ec 	.word	0x0800d4ec
 80019bc:	0800d52c 	.word	0x0800d52c
 80019c0:	200019a8 	.word	0x200019a8
 80019c4:	0800d53c 	.word	0x0800d53c
 80019c8:	200001a8 	.word	0x200001a8
 80019cc:	200019e8 	.word	0x200019e8
 80019d0:	200011a8 	.word	0x200011a8
 80019d4:	0800d558 	.word	0x0800d558
 80019d8:	0800d574 	.word	0x0800d574

080019dc <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019e6:	2101      	movs	r1, #1
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <Si468x_get_property+0xbc>)
 80019ea:	f001 fe2b 	bl	8003644 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019ee:	2100      	movs	r1, #0
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <Si468x_get_property+0xc0>)
 80019f2:	f001 fe27 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2210      	movs	r2, #16
 80019fa:	4929      	ldr	r1, [pc, #164]	; (8001aa0 <Si468x_get_property+0xc4>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00b facd 	bl	800cf9c <itoa>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fe1c 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a0e:	2214      	movs	r2, #20
 8001a10:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a1e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2a:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7ff fe24 	bl	800167c <Si468x_write_command>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f005 fab7 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a42:	491a      	ldr	r1, [pc, #104]	; (8001aac <Si468x_get_property+0xd0>)
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff fe3b 	bl	80016c0 <Si468x_read_reply>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a50:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <Si468x_get_property+0xd4>)
 8001a56:	f001 fdf5 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <Si468x_get_property+0xd0>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <Si468x_get_property+0xd0>)
 8001a62:	7912      	ldrb	r2, [r2, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	2210      	movs	r2, #16
 8001a68:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <Si468x_get_property+0xc4>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00b fa96 	bl	800cf9c <itoa>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fde5 	bl	8003644 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <Si468x_get_property+0xd0>)
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <Si468x_get_property+0xd0>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800d58c 	.word	0x0800d58c
 8001a9c:	0800d52c 	.word	0x0800d52c
 8001aa0:	200019a8 	.word	0x200019a8
 8001aa4:	200001a8 	.word	0x200001a8
 8001aa8:	200019e8 	.word	0x200019e8
 8001aac:	200011a8 	.word	0x200011a8
 8001ab0:	0800d5c8 	.word	0x0800d5c8

08001ab4 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4849      	ldr	r0, [pc, #292]	; (8001bec <Si468x_dab_tune_freq+0x138>)
 8001ac8:	f001 fdbc 	bl	8003644 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4848      	ldr	r0, [pc, #288]	; (8001bf0 <Si468x_dab_tune_freq+0x13c>)
 8001ad0:	f001 fdb8 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	220a      	movs	r2, #10
 8001ade:	4946      	ldr	r1, [pc, #280]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00b fa5b 	bl	800cf9c <itoa>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fdaa 	bl	8003644 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001af0:	2101      	movs	r1, #1
 8001af2:	4842      	ldr	r0, [pc, #264]	; (8001bfc <Si468x_dab_tune_freq+0x148>)
 8001af4:	f001 fda6 	bl	8003644 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001afa:	22b0      	movs	r2, #176	; 0xb0
 8001afc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b04:	4a3e      	ldr	r2, [pc, #248]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b16:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b22:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b24:	4936      	ldr	r1, [pc, #216]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b26:	2006      	movs	r0, #6
 8001b28:	f7ff fda8 	bl	800167c <Si468x_write_command>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b32:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b34:	4934      	ldr	r1, [pc, #208]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fdc2 	bl	80016c0 <Si468x_read_reply>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b42:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b52:	2101      	movs	r1, #1
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <Si468x_dab_tune_freq+0x15c>)
 8001b56:	f001 fd75 	bl	8003644 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e03a      	b.n	8001bd6 <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b60:	4929      	ldr	r1, [pc, #164]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff fdac 	bl	80016c0 <Si468x_read_reply>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b6e:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4824      	ldr	r0, [pc, #144]	; (8001c14 <Si468x_dab_tune_freq+0x160>)
 8001b82:	f001 fd5f 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b fa05 	bl	800cf9c <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fd54 	bl	8003644 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	481e      	ldr	r0, [pc, #120]	; (8001c18 <Si468x_dab_tune_freq+0x164>)
 8001ba0:	f001 fd50 	bl	8003644 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <Si468x_dab_tune_freq+0x168>)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <Si468x_dab_tune_freq+0x168>)
 8001bb4:	6093      	str	r3, [r2, #8]
			break;
 8001bb6:	e014      	b.n	8001be2 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4816      	ldr	r0, [pc, #88]	; (8001c20 <Si468x_dab_tune_freq+0x16c>)
 8001bc6:	f001 fd3d 	bl	8003644 <send_debug_msg>
		}
		HAL_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f005 f9f0 	bl	8006fb0 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d9bf      	bls.n	8001b60 <Si468x_dab_tune_freq+0xac>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800d680 	.word	0x0800d680
 8001bf0:	0800d6bc 	.word	0x0800d6bc
 8001bf4:	200019ec 	.word	0x200019ec
 8001bf8:	200019a8 	.word	0x200019a8
 8001bfc:	0800d63c 	.word	0x0800d63c
 8001c00:	200001a8 	.word	0x200001a8
 8001c04:	200019e8 	.word	0x200019e8
 8001c08:	200011a8 	.word	0x200011a8
 8001c0c:	20001ad4 	.word	0x20001ad4
 8001c10:	0800d280 	.word	0x0800d280
 8001c14:	0800d6c8 	.word	0x0800d6c8
 8001c18:	0800d6e4 	.word	0x0800d6e4
 8001c1c:	20003088 	.word	0x20003088
 8001c20:	0800d6ec 	.word	0x0800d6ec

08001c24 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <Si468x_dab_digrad_status+0x9c>)
 8001c2e:	22b2      	movs	r2, #178	; 0xb2
 8001c30:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <Si468x_dab_digrad_status+0x9c>)
 8001c34:	221a      	movs	r2, #26
 8001c36:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c38:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <Si468x_dab_digrad_status+0x9c>)
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7ff fd1e 	bl	800167c <Si468x_write_command>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <Si468x_dab_digrad_status+0xa0>)
 8001c46:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f005 f9b1 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c4e:	491e      	ldr	r1, [pc, #120]	; (8001cc8 <Si468x_dab_digrad_status+0xa4>)
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f7ff fd35 	bl	80016c0 <Si468x_read_reply>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <Si468x_dab_digrad_status+0xa0>)
 8001c5c:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <Si468x_dab_digrad_status+0xa8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d019      	beq.n	8001ca0 <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <Si468x_dab_digrad_status+0xa4>)
 8001c70:	4615      	mov	r5, r2
 8001c72:	1d1c      	adds	r4, r3, #4
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c80:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c86:	78db      	ldrb	r3, [r3, #3]
 8001c88:	2b14      	cmp	r3, #20
 8001c8a:	d902      	bls.n	8001c92 <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	2b36      	cmp	r3, #54	; 0x36
 8001c98:	d902      	bls.n	8001ca0 <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <Si468x_dab_digrad_status+0xac>)
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	4615      	mov	r5, r2
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cb4:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	200001a8 	.word	0x200001a8
 8001cc4:	200019e8 	.word	0x200019e8
 8001cc8:	200011a8 	.word	0x200011a8
 8001ccc:	20001ad4 	.word	0x20001ad4
 8001cd0:	20001aac 	.word	0x20001aac

08001cd4 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001cda:	2300      	movs	r3, #0
 8001cdc:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001cde:	2300      	movs	r3, #0
 8001ce0:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001cea:	4ba2      	ldr	r3, [pc, #648]	; (8001f74 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001cf0:	4ba0      	ldr	r3, [pc, #640]	; (8001f74 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001cf6:	499f      	ldr	r1, [pc, #636]	; (8001f74 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7ff fcbf 	bl	800167c <Si468x_write_command>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d04:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f005 f952 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d0c:	499b      	ldr	r1, [pc, #620]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d12:	f7ff fcd5 	bl	80016c0 <Si468x_read_reply>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d1c:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4897      	ldr	r0, [pc, #604]	; (8001f80 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d22:	f001 fc8f 	bl	8003644 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d34:	2101      	movs	r1, #1
 8001d36:	4894      	ldr	r0, [pc, #592]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d38:	f001 fc84 	bl	8003644 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d3e:	791b      	ldrb	r3, [r3, #4]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b8e      	ldr	r3, [pc, #568]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d50:	4b8a      	ldr	r3, [pc, #552]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d52:	7a1b      	ldrb	r3, [r3, #8]
 8001d54:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	773b      	strb	r3, [r7, #28]
 8001d5a:	e250      	b.n	80021fe <Si468x_dab_get_digital_service_list+0x52a>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001d5c:	7f3b      	ldrb	r3, [r7, #28]
 8001d5e:	4a8b      	ldr	r2, [pc, #556]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d60:	7892      	ldrb	r2, [r2, #2]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a89      	ldr	r2, [pc, #548]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d66:	6892      	ldr	r2, [r2, #8]
 8001d68:	4989      	ldr	r1, [pc, #548]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d6a:	2034      	movs	r0, #52	; 0x34
 8001d6c:	fb00 f303 	mul.w	r3, r0, r3
 8001d70:	440b      	add	r3, r1
 8001d72:	3324      	adds	r3, #36	; 0x24
 8001d74:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001d76:	7f3b      	ldrb	r3, [r7, #28]
 8001d78:	4a84      	ldr	r2, [pc, #528]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d7a:	7892      	ldrb	r2, [r2, #2]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a83      	ldr	r2, [pc, #524]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d80:	7b10      	ldrb	r0, [r2, #12]
 8001d82:	4a83      	ldr	r2, [pc, #524]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d84:	2134      	movs	r1, #52	; 0x34
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	4602      	mov	r2, r0
 8001d90:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001d92:	7fba      	ldrb	r2, [r7, #30]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	f103 0210 	add.w	r2, r3, #16
 8001da0:	7f7b      	ldrb	r3, [r7, #29]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001da8:	5cd2      	ldrb	r2, [r2, r3]
 8001daa:	7f3b      	ldrb	r3, [r7, #28]
 8001dac:	4977      	ldr	r1, [pc, #476]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dae:	7889      	ldrb	r1, [r1, #2]
 8001db0:	440b      	add	r3, r1
 8001db2:	f002 0201 	and.w	r2, r2, #1
 8001db6:	b2d0      	uxtb	r0, r2
 8001db8:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dba:	2134      	movs	r1, #52	; 0x34
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001dc8:	7fba      	ldrb	r2, [r7, #30]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	f103 0211 	add.w	r2, r3, #17
 8001dd6:	7f7b      	ldrb	r3, [r7, #29]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001dde:	5cd2      	ldrb	r2, [r2, r3]
 8001de0:	7f3b      	ldrb	r3, [r7, #28]
 8001de2:	496a      	ldr	r1, [pc, #424]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001de4:	7889      	ldrb	r1, [r1, #2]
 8001de6:	440b      	add	r3, r1
 8001de8:	f002 020f 	and.w	r2, r2, #15
 8001dec:	b2d0      	uxtb	r0, r2
 8001dee:	4a68      	ldr	r2, [pc, #416]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001df0:	2134      	movs	r1, #52	; 0x34
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3329      	adds	r3, #41	; 0x29
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001dfe:	7f3b      	ldrb	r3, [r7, #28]
 8001e00:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e02:	7892      	ldrb	r2, [r2, #2]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e08:	2134      	movs	r1, #52	; 0x34
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3314      	adds	r3, #20
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d017      	beq.n	8001e48 <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e18:	7fbb      	ldrb	r3, [r7, #30]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e1e:	7f3b      	ldrb	r3, [r7, #28]
 8001e20:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e22:	7892      	ldrb	r2, [r2, #2]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e28:	2134      	movs	r1, #52	; 0x34
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	3329      	adds	r3, #41	; 0x29
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	7f7b      	ldrb	r3, [r7, #29]
 8001e36:	4413      	add	r3, r2
 8001e38:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e3a:	7f3b      	ldrb	r3, [r7, #28]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	77fb      	strb	r3, [r7, #31]
			continue;
 8001e46:	e1d7      	b.n	80021f8 <Si468x_dab_get_digital_service_list+0x524>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e48:	7fba      	ldrb	r2, [r7, #30]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	f103 0210 	add.w	r2, r3, #16
 8001e56:	7f7b      	ldrb	r3, [r7, #29]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	105b      	asrs	r3, r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	7f3b      	ldrb	r3, [r7, #28]
 8001e66:	4949      	ldr	r1, [pc, #292]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e68:	7889      	ldrb	r1, [r1, #2]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	b2d0      	uxtb	r0, r2
 8001e72:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e74:	2134      	movs	r1, #52	; 0x34
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3315      	adds	r3, #21
 8001e7e:	4602      	mov	r2, r0
 8001e80:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e82:	7f3b      	ldrb	r3, [r7, #28]
 8001e84:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e86:	7892      	ldrb	r2, [r2, #2]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e8c:	2134      	movs	r1, #52	; 0x34
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3314      	adds	r3, #20
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <Si468x_dab_get_digital_service_list+0x1ce>
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d079      	beq.n	8001f94 <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001ea0:	e0ee      	b.n	8002080 <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001ea2:	7fba      	ldrb	r2, [r7, #30]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	f103 020c 	add.w	r2, r3, #12
 8001eb0:	7f7b      	ldrb	r3, [r7, #29]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	7fba      	ldrb	r2, [r7, #30]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	f103 020d 	add.w	r2, r3, #13
 8001eca:	7f7b      	ldrb	r3, [r7, #29]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001eda:	4419      	add	r1, r3
 8001edc:	7f3b      	ldrb	r3, [r7, #28]
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ee0:	7892      	ldrb	r2, [r2, #2]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ee8:	2134      	movs	r1, #52	; 0x34
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001ef4:	7fba      	ldrb	r2, [r7, #30]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	f103 020d 	add.w	r2, r3, #13
 8001f02:	7f7b      	ldrb	r3, [r7, #29]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f0a:	5cd2      	ldrb	r2, [r2, r3]
 8001f0c:	7f3b      	ldrb	r3, [r7, #28]
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f10:	7889      	ldrb	r1, [r1, #2]
 8001f12:	440b      	add	r3, r1
 8001f14:	0912      	lsrs	r2, r2, #4
 8001f16:	b2d0      	uxtb	r0, r2
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f1a:	2134      	movs	r1, #52	; 0x34
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	331c      	adds	r3, #28
 8001f24:	4602      	mov	r2, r0
 8001f26:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f28:	7f3b      	ldrb	r3, [r7, #28]
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f2c:	7892      	ldrb	r2, [r2, #2]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f32:	2134      	movs	r1, #52	; 0x34
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	331c      	adds	r3, #28
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	4618      	mov	r0, r3
 8001f42:	7f3b      	ldrb	r3, [r7, #28]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f46:	7892      	ldrb	r2, [r2, #2]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f4c:	2134      	movs	r1, #52	; 0x34
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3318      	adds	r3, #24
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	7f3b      	ldrb	r3, [r7, #28]
 8001f5a:	490c      	ldr	r1, [pc, #48]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5c:	7889      	ldrb	r1, [r1, #2]
 8001f5e:	440b      	add	r3, r1
 8001f60:	4402      	add	r2, r0
 8001f62:	490b      	ldr	r1, [pc, #44]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f64:	2034      	movs	r0, #52	; 0x34
 8001f66:	fb00 f303 	mul.w	r3, r0, r3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3320      	adds	r3, #32
 8001f6e:	601a      	str	r2, [r3, #0]
				break;
 8001f70:	e086      	b.n	8002080 <Si468x_dab_get_digital_service_list+0x3ac>
 8001f72:	bf00      	nop
 8001f74:	200001a8 	.word	0x200001a8
 8001f78:	200019e8 	.word	0x200019e8
 8001f7c:	200011a8 	.word	0x200011a8
 8001f80:	0800d74c 	.word	0x0800d74c
 8001f84:	20001ad4 	.word	0x20001ad4
 8001f88:	0800d280 	.word	0x0800d280
 8001f8c:	20003088 	.word	0x20003088
 8001f90:	20001c38 	.word	0x20001c38
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001f94:	7fba      	ldrb	r2, [r7, #30]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	f103 020c 	add.w	r2, r3, #12
 8001fa2:	7f7b      	ldrb	r3, [r7, #29]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4aa0      	ldr	r2, [pc, #640]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	4619      	mov	r1, r3
 8001fae:	7fba      	ldrb	r2, [r7, #30]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f103 020d 	add.w	r2, r3, #13
 8001fbc:	7f7b      	ldrb	r3, [r7, #29]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a9a      	ldr	r2, [pc, #616]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	4419      	add	r1, r3
 8001fca:	7fba      	ldrb	r2, [r7, #30]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	f103 020e 	add.w	r2, r3, #14
 8001fd8:	7f7b      	ldrb	r3, [r7, #29]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a93      	ldr	r2, [pc, #588]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fe8:	4419      	add	r1, r3
 8001fea:	7f3b      	ldrb	r3, [r7, #28]
 8001fec:	4a90      	ldr	r2, [pc, #576]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8001fee:	7892      	ldrb	r2, [r2, #2]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4a8f      	ldr	r2, [pc, #572]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8001ff6:	2134      	movs	r1, #52	; 0x34
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3318      	adds	r3, #24
 8002000:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002002:	7fba      	ldrb	r2, [r7, #30]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	f103 020e 	add.w	r2, r3, #14
 8002010:	7f7b      	ldrb	r3, [r7, #29]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	4a85      	ldr	r2, [pc, #532]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8002018:	5cd2      	ldrb	r2, [r2, r3]
 800201a:	7f3b      	ldrb	r3, [r7, #28]
 800201c:	4984      	ldr	r1, [pc, #528]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800201e:	7889      	ldrb	r1, [r1, #2]
 8002020:	440b      	add	r3, r1
 8002022:	0912      	lsrs	r2, r2, #4
 8002024:	b2d0      	uxtb	r0, r2
 8002026:	4a83      	ldr	r2, [pc, #524]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002028:	2134      	movs	r1, #52	; 0x34
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	331c      	adds	r3, #28
 8002032:	4602      	mov	r2, r0
 8002034:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 8002036:	7f3b      	ldrb	r3, [r7, #28]
 8002038:	4a7d      	ldr	r2, [pc, #500]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800203a:	7892      	ldrb	r2, [r2, #2]
 800203c:	4413      	add	r3, r2
 800203e:	4a7d      	ldr	r2, [pc, #500]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002040:	2134      	movs	r1, #52	; 0x34
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	331c      	adds	r3, #28
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	4618      	mov	r0, r3
 8002050:	7f3b      	ldrb	r3, [r7, #28]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002054:	7892      	ldrb	r2, [r2, #2]
 8002056:	4413      	add	r3, r2
 8002058:	4a76      	ldr	r2, [pc, #472]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 800205a:	2134      	movs	r1, #52	; 0x34
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3318      	adds	r3, #24
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	7f3b      	ldrb	r3, [r7, #28]
 8002068:	4971      	ldr	r1, [pc, #452]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800206a:	7889      	ldrb	r1, [r1, #2]
 800206c:	440b      	add	r3, r1
 800206e:	4402      	add	r2, r0
 8002070:	4970      	ldr	r1, [pc, #448]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002072:	2034      	movs	r0, #52	; 0x34
 8002074:	fb00 f303 	mul.w	r3, r0, r3
 8002078:	440b      	add	r3, r1
 800207a:	3320      	adds	r3, #32
 800207c:	601a      	str	r2, [r3, #0]
				break;
 800207e:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002080:	7fba      	ldrb	r2, [r7, #30]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	f103 0214 	add.w	r2, r3, #20
 800208e:	7f7b      	ldrb	r3, [r7, #29]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d03f      	beq.n	800211c <Si468x_dab_get_digital_service_list+0x448>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800209c:	2300      	movs	r3, #0
 800209e:	76fb      	strb	r3, [r7, #27]
 80020a0:	e038      	b.n	8002114 <Si468x_dab_get_digital_service_list+0x440>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020a2:	7efb      	ldrb	r3, [r7, #27]
 80020a4:	f103 0114 	add.w	r1, r3, #20
 80020a8:	7fba      	ldrb	r2, [r7, #30]
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	18ca      	adds	r2, r1, r3
 80020b4:	7f7b      	ldrb	r3, [r7, #29]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	18d1      	adds	r1, r2, r3
 80020ba:	7f3b      	ldrb	r3, [r7, #28]
 80020bc:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80020be:	7892      	ldrb	r2, [r2, #2]
 80020c0:	441a      	add	r2, r3
 80020c2:	7efb      	ldrb	r3, [r7, #27]
 80020c4:	4859      	ldr	r0, [pc, #356]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 80020c6:	5c44      	ldrb	r4, [r0, r1]
 80020c8:	495a      	ldr	r1, [pc, #360]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80020ca:	2034      	movs	r0, #52	; 0x34
 80020cc:	fb00 f202 	mul.w	r2, r0, r2
 80020d0:	440a      	add	r2, r1
 80020d2:	4413      	add	r3, r2
 80020d4:	4622      	mov	r2, r4
 80020d6:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80020d8:	7f3b      	ldrb	r3, [r7, #28]
 80020da:	4a55      	ldr	r2, [pc, #340]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80020dc:	7892      	ldrb	r2, [r2, #2]
 80020de:	441a      	add	r2, r3
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	4954      	ldr	r1, [pc, #336]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80020e4:	2034      	movs	r0, #52	; 0x34
 80020e6:	fb00 f202 	mul.w	r2, r0, r2
 80020ea:	440a      	add	r2, r1
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b86      	cmp	r3, #134	; 0x86
 80020f2:	d10c      	bne.n	800210e <Si468x_dab_get_digital_service_list+0x43a>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 80020f4:	7f3b      	ldrb	r3, [r7, #28]
 80020f6:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80020f8:	7892      	ldrb	r2, [r2, #2]
 80020fa:	441a      	add	r2, r3
 80020fc:	7efb      	ldrb	r3, [r7, #27]
 80020fe:	494d      	ldr	r1, [pc, #308]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002100:	2034      	movs	r0, #52	; 0x34
 8002102:	fb00 f202 	mul.w	r2, r0, r2
 8002106:	440a      	add	r2, r1
 8002108:	4413      	add	r3, r2
 800210a:	226f      	movs	r2, #111	; 0x6f
 800210c:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800210e:	7efb      	ldrb	r3, [r7, #27]
 8002110:	3301      	adds	r3, #1
 8002112:	76fb      	strb	r3, [r7, #27]
 8002114:	7efb      	ldrb	r3, [r7, #27]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d9c3      	bls.n	80020a2 <Si468x_dab_get_digital_service_list+0x3ce>
 800211a:	e026      	b.n	800216a <Si468x_dab_get_digital_service_list+0x496>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <Si468x_dab_get_digital_service_list+0x564>)
 800211e:	463c      	mov	r4, r7
 8002120:	461d      	mov	r5, r3
 8002122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	7023      	strb	r3, [r4, #0]
 800212a:	f107 0311 	add.w	r3, r7, #17
 800212e:	2200      	movs	r2, #0
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002134:	2300      	movs	r3, #0
 8002136:	76bb      	strb	r3, [r7, #26]
 8002138:	e014      	b.n	8002164 <Si468x_dab_get_digital_service_list+0x490>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 800213a:	7eb9      	ldrb	r1, [r7, #26]
 800213c:	7f3b      	ldrb	r3, [r7, #28]
 800213e:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002140:	7892      	ldrb	r2, [r2, #2]
 8002142:	441a      	add	r2, r3
 8002144:	7ebb      	ldrb	r3, [r7, #26]
 8002146:	3120      	adds	r1, #32
 8002148:	4439      	add	r1, r7
 800214a:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800214e:	4939      	ldr	r1, [pc, #228]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 8002150:	2034      	movs	r0, #52	; 0x34
 8002152:	fb00 f202 	mul.w	r2, r0, r2
 8002156:	440a      	add	r2, r1
 8002158:	4413      	add	r3, r2
 800215a:	4622      	mov	r2, r4
 800215c:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800215e:	7ebb      	ldrb	r3, [r7, #26]
 8002160:	3301      	adds	r3, #1
 8002162:	76bb      	strb	r3, [r7, #26]
 8002164:	7ebb      	ldrb	r3, [r7, #26]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	d9e7      	bls.n	800213a <Si468x_dab_get_digital_service_list+0x466>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 800216a:	2300      	movs	r3, #0
 800216c:	767b      	strb	r3, [r7, #25]
 800216e:	e032      	b.n	80021d6 <Si468x_dab_get_digital_service_list+0x502>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002170:	7f3b      	ldrb	r3, [r7, #28]
 8002172:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002174:	7892      	ldrb	r2, [r2, #2]
 8002176:	441a      	add	r2, r3
 8002178:	7e7b      	ldrb	r3, [r7, #25]
 800217a:	492e      	ldr	r1, [pc, #184]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 800217c:	201a      	movs	r0, #26
 800217e:	fb00 f202 	mul.w	r2, r0, r2
 8002182:	4413      	add	r3, r2
 8002184:	3314      	adds	r3, #20
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	440b      	add	r3, r1
 800218a:	2200      	movs	r2, #0
 800218c:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 800218e:	7fba      	ldrb	r2, [r7, #30]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800219c:	7f7b      	ldrb	r3, [r7, #29]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <Si468x_dab_get_digital_service_list+0x558>)
 80021a4:	5cd1      	ldrb	r1, [r2, r3]
 80021a6:	7f3b      	ldrb	r3, [r7, #28]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80021aa:	7892      	ldrb	r2, [r2, #2]
 80021ac:	441a      	add	r2, r3
 80021ae:	7e7b      	ldrb	r3, [r7, #25]
 80021b0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021b4:	b2cc      	uxtb	r4, r1
 80021b6:	491f      	ldr	r1, [pc, #124]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80021b8:	201a      	movs	r0, #26
 80021ba:	fb00 f202 	mul.w	r2, r0, r2
 80021be:	4413      	add	r3, r2
 80021c0:	3314      	adds	r3, #20
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	440b      	add	r3, r1
 80021c6:	4622      	mov	r2, r4
 80021c8:	709a      	strb	r2, [r3, #2]
			components_count++;
 80021ca:	7f7b      	ldrb	r3, [r7, #29]
 80021cc:	3301      	adds	r3, #1
 80021ce:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80021d0:	7e7b      	ldrb	r3, [r7, #25]
 80021d2:	3301      	adds	r3, #1
 80021d4:	767b      	strb	r3, [r7, #25]
 80021d6:	7f3b      	ldrb	r3, [r7, #28]
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 80021da:	7892      	ldrb	r2, [r2, #2]
 80021dc:	4413      	add	r3, r2
 80021de:	4a15      	ldr	r2, [pc, #84]	; (8002234 <Si468x_dab_get_digital_service_list+0x560>)
 80021e0:	2134      	movs	r1, #52	; 0x34
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3329      	adds	r3, #41	; 0x29
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	7e7a      	ldrb	r2, [r7, #25]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3be      	bcc.n	8002170 <Si468x_dab_get_digital_service_list+0x49c>
		}
		services_count++;
 80021f2:	7fbb      	ldrb	r3, [r7, #30]
 80021f4:	3301      	adds	r3, #1
 80021f6:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80021f8:	7f3b      	ldrb	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	773b      	strb	r3, [r7, #28]
 80021fe:	7f3a      	ldrb	r2, [r7, #28]
 8002200:	7ffb      	ldrb	r3, [r7, #31]
 8002202:	429a      	cmp	r2, r3
 8002204:	f4ff adaa 	bcc.w	8001d5c <Si468x_dab_get_digital_service_list+0x88>
	}

	dab_management.total_services += number_of_services;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	4413      	add	r3, r2
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002214:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002218:	789a      	ldrb	r2, [r3, #2]
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	4413      	add	r3, r2
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <Si468x_dab_get_digital_service_list+0x55c>)
 8002222:	709a      	strb	r2, [r3, #2]
}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	200011a8 	.word	0x200011a8
 8002230:	20003088 	.word	0x20003088
 8002234:	20001c38 	.word	0x20001c38
 8002238:	0800d788 	.word	0x0800d788

0800223c <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8002246:	2101      	movs	r1, #1
 8002248:	482d      	ldr	r0, [pc, #180]	; (8002300 <Si468x_dab_start_digital_service+0xc4>)
 800224a:	f001 f9fb 	bl	8003644 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002250:	2281      	movs	r2, #129	; 0x81
 8002252:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800225c:	2200      	movs	r2, #0
 800225e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002262:	2200      	movs	r2, #0
 8002264:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800226c:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002276:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002280:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0e1b      	lsrs	r3, r3, #24
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800228a:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 8002292:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 800229c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 80022a6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	0e1b      	lsrs	r3, r3, #24
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 80022b0:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80022b2:	4914      	ldr	r1, [pc, #80]	; (8002304 <Si468x_dab_start_digital_service+0xc8>)
 80022b4:	200c      	movs	r0, #12
 80022b6:	f7ff f9e1 	bl	800167c <Si468x_write_command>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <Si468x_dab_start_digital_service+0xcc>)
 80022c0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f004 fe74 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <Si468x_dab_start_digital_service+0xd0>)
 80022ca:	2005      	movs	r0, #5
 80022cc:	f7ff f9f8 	bl	80016c0 <Si468x_read_reply>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <Si468x_dab_start_digital_service+0xcc>)
 80022d6:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <Si468x_dab_start_digital_service+0xd4>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80022e6:	2101      	movs	r1, #1
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <Si468x_dab_start_digital_service+0xd8>)
 80022ea:	f001 f9ab 	bl	8003644 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 80022ee:	e003      	b.n	80022f8 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80022f0:	2101      	movs	r1, #1
 80022f2:	4809      	ldr	r0, [pc, #36]	; (8002318 <Si468x_dab_start_digital_service+0xdc>)
 80022f4:	f001 f9a6 	bl	8003644 <send_debug_msg>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	0800d79c 	.word	0x0800d79c
 8002304:	200001a8 	.word	0x200001a8
 8002308:	200019e8 	.word	0x200019e8
 800230c:	200011a8 	.word	0x200011a8
 8002310:	20001ad4 	.word	0x20001ad4
 8002314:	0800d280 	.word	0x0800d280
 8002318:	0800d7d8 	.word	0x0800d7d8

0800231c <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 8002326:	2101      	movs	r1, #1
 8002328:	484a      	ldr	r0, [pc, #296]	; (8002454 <Si468x_dab_get_ensemble_info+0x138>)
 800232a:	f001 f98b 	bl	8003644 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 800232e:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 8002330:	22b4      	movs	r2, #180	; 0xb4
 8002332:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002334:	4b48      	ldr	r3, [pc, #288]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800233a:	4947      	ldr	r1, [pc, #284]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 800233c:	2002      	movs	r0, #2
 800233e:	f7ff f99d 	bl	800167c <Si468x_write_command>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 8002348:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800234a:	2002      	movs	r0, #2
 800234c:	f004 fe30 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002350:	4943      	ldr	r1, [pc, #268]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 8002352:	2015      	movs	r0, #21
 8002354:	f7ff f9b4 	bl	80016c0 <Si468x_read_reply>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 800235e:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002360:	e012      	b.n	8002388 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002362:	493d      	ldr	r1, [pc, #244]	; (8002458 <Si468x_dab_get_ensemble_info+0x13c>)
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff f989 	bl	800167c <Si468x_write_command>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 8002370:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8002372:	2002      	movs	r0, #2
 8002374:	f004 fe1c 	bl	8006fb0 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002378:	4939      	ldr	r1, [pc, #228]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 800237a:	2015      	movs	r0, #21
 800237c:	f7ff f9a0 	bl	80016c0 <Si468x_read_reply>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <Si468x_dab_get_ensemble_info+0x140>)
 8002386:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 800238a:	799b      	ldrb	r3, [r3, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0e8      	beq.n	8002362 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <Si468x_dab_get_ensemble_info+0x148>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800239e:	2101      	movs	r1, #1
 80023a0:	4831      	ldr	r0, [pc, #196]	; (8002468 <Si468x_dab_get_ensemble_info+0x14c>)
 80023a2:	f001 f94f 	bl	8003644 <send_debug_msg>
		return 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e050      	b.n	800244c <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 80023ac:	795b      	ldrb	r3, [r3, #5]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 80023b2:	7912      	ldrb	r2, [r2, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d041      	beq.n	8002442 <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80023be:	2101      	movs	r1, #1
 80023c0:	482a      	ldr	r0, [pc, #168]	; (800246c <Si468x_dab_get_ensemble_info+0x150>)
 80023c2:	f001 f93f 	bl	8003644 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	b291      	uxth	r1, r2
 80023ce:	4a29      	ldr	r2, [pc, #164]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	4413      	add	r3, r2
 80023d4:	460a      	mov	r2, r1
 80023d6:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	4618      	mov	r0, r3
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	4924      	ldr	r1, [pc, #144]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 80023e4:	0143      	lsls	r3, r0, #5
 80023e6:	440b      	add	r3, r1
 80023e8:	3318      	adds	r3, #24
 80023ea:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	4618      	mov	r0, r3
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 80023f4:	7b19      	ldrb	r1, [r3, #12]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 80023f8:	0143      	lsls	r3, r0, #5
 80023fa:	4413      	add	r3, r2
 80023fc:	331c      	adds	r3, #28
 80023fe:	460a      	mov	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	71fb      	strb	r3, [r7, #7]
 8002406:	e011      	b.n	800242c <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	1d9a      	adds	r2, r3, #6
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	461c      	mov	r4, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4912      	ldr	r1, [pc, #72]	; (8002460 <Si468x_dab_get_ensemble_info+0x144>)
 8002416:	5c88      	ldrb	r0, [r1, r2]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <Si468x_dab_get_ensemble_info+0x158>)
 800241a:	0162      	lsls	r2, r4, #5
 800241c:	440a      	add	r2, r1
 800241e:	4413      	add	r3, r2
 8002420:	3302      	adds	r3, #2
 8002422:	4602      	mov	r2, r0
 8002424:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	3301      	adds	r3, #1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d9ea      	bls.n	8002408 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	3301      	adds	r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <Si468x_dab_get_ensemble_info+0x154>)
 800243c:	705a      	strb	r2, [r3, #1]
			return 1;
 800243e:	2301      	movs	r3, #1
 8002440:	e004      	b.n	800244c <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002442:	2101      	movs	r1, #1
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <Si468x_dab_get_ensemble_info+0x15c>)
 8002446:	f001 f8fd 	bl	8003644 <send_debug_msg>
			return 0;
 800244a:	2300      	movs	r3, #0
		}
	}
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	0800d7f8 	.word	0x0800d7f8
 8002458:	200001a8 	.word	0x200001a8
 800245c:	200019e8 	.word	0x200019e8
 8002460:	200011a8 	.word	0x200011a8
 8002464:	20001ad4 	.word	0x20001ad4
 8002468:	0800d280 	.word	0x0800d280
 800246c:	0800d834 	.word	0x0800d834
 8002470:	20003088 	.word	0x20003088
 8002474:	20001af8 	.word	0x20001af8
 8002478:	0800d844 	.word	0x0800d844

0800247c <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247e:	b099      	sub	sp, #100	; 0x64
 8002480:	af0a      	add	r7, sp, #40	; 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 8002482:	2101      	movs	r1, #1
 8002484:	4887      	ldr	r0, [pc, #540]	; (80026a4 <Si468x_dab_full_scan+0x228>)
 8002486:	f001 f8dd 	bl	8003644 <send_debug_msg>
	dab_management.total_services = 0;
 800248a:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 8002492:	2200      	movs	r2, #0
 8002494:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 8002496:	4b84      	ldr	r3, [pc, #528]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 8002498:	2200      	movs	r2, #0
 800249a:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t fic_q_timeout = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t _scan_cancel_flag = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024b4:	e09e      	b.n	80025f4 <Si468x_dab_full_scan+0x178>
	{
		_touch_coordinates = Touch_read();
 80024b6:	f004 f9d3 	bl	8006860 <Touch_read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80024be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d90c      	bls.n	80024de <Si468x_dab_full_scan+0x62>
 80024c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024c6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80024ca:	d808      	bhi.n	80024de <Si468x_dab_full_scan+0x62>
 80024cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ce:	2bc3      	cmp	r3, #195	; 0xc3
 80024d0:	d905      	bls.n	80024de <Si468x_dab_full_scan+0x62>
 80024d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024d4:	2bea      	cmp	r3, #234	; 0xea
 80024d6:	d802      	bhi.n	80024de <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		if(_scan_cancel_flag)
 80024de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 808e 	bne.w	8002604 <Si468x_dab_full_scan+0x188>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80024e8:	2306      	movs	r3, #6
 80024ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 80024ee:	2396      	movs	r3, #150	; 0x96
 80024f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		Si468x_dab_tune_freq(freq_index, 0);
 80024f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fada 	bl	8001ab4 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002500:	463b      	mov	r3, r7
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fb8e 	bl	8001c24 <Si468x_dab_digrad_status>
			valid_timeout--;
 8002508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800250c:	3b01      	subs	r3, #1
 800250e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(!valid_timeout)
 8002512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002516:	2b00      	cmp	r3, #0
 8002518:	d104      	bne.n	8002524 <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 800251a:	2101      	movs	r1, #1
 800251c:	4863      	ldr	r0, [pc, #396]	; (80026ac <Si468x_dab_full_scan+0x230>)
 800251e:	f001 f891 	bl	8003644 <send_debug_msg>
				break;
 8002522:	e010      	b.n	8002546 <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002524:	2032      	movs	r0, #50	; 0x32
 8002526:	f004 fd43 	bl	8006fb0 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 800252a:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <Si468x_dab_full_scan+0x234>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0e3      	beq.n	8002500 <Si468x_dab_full_scan+0x84>
 8002538:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <Si468x_dab_full_scan+0x234>)
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0dc      	beq.n	8002500 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 8002546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 800254e:	463b      	mov	r3, r7
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fb67 	bl	8001c24 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 8002556:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800255a:	3b01      	subs	r3, #1
 800255c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(!fic_q_timeout)
 8002560:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002568:	2101      	movs	r1, #1
 800256a:	4850      	ldr	r0, [pc, #320]	; (80026ac <Si468x_dab_full_scan+0x230>)
 800256c:	f001 f86a 	bl	8003644 <send_debug_msg>
					break;
 8002570:	e006      	b.n	8002580 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002572:	2032      	movs	r0, #50	; 0x32
 8002574:	f004 fd1c 	bl	8006fb0 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <Si468x_dab_full_scan+0x234>)
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	2b31      	cmp	r3, #49	; 0x31
 800257e:	d9e6      	bls.n	800254e <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01d      	beq.n	80025c4 <Si468x_dab_full_scan+0x148>
 8002588:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800258c:	2b00      	cmp	r3, #0
 800258e:	d019      	beq.n	80025c4 <Si468x_dab_full_scan+0x148>
		{
			do
			{
				Si468x_dab_get_event_status();
 8002590:	f000 fb12 	bl	8002bb8 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 8002594:	200a      	movs	r0, #10
 8002596:	f004 fd0b 	bl	8006fb0 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <Si468x_dab_full_scan+0x238>)
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f3      	beq.n	8002590 <Si468x_dab_full_scan+0x114>
 80025a8:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <Si468x_dab_full_scan+0x238>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ec      	bne.n	8002590 <Si468x_dab_full_scan+0x114>

			if(Si468x_dab_get_ensemble_info())
 80025b6:	f7ff feb1 	bl	800231c <Si468x_dab_get_ensemble_info>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <Si468x_dab_full_scan+0x148>
			{
				Si468x_dab_get_digital_service_list();
 80025c0:	f7ff fb88 	bl	8001cd4 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80025c4:	4e3a      	ldr	r6, [pc, #232]	; (80026b0 <Si468x_dab_full_scan+0x234>)
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 80025c8:	ac06      	add	r4, sp, #24
 80025ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025d0:	466d      	mov	r5, sp
 80025d2:	f106 0410 	add.w	r4, r6, #16
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025de:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025e6:	f001 fe6f 	bl	80042c8 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80025ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ee:	3301      	adds	r3, #1
 80025f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025f4:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 80025f6:	7b5b      	ldrb	r3, [r3, #13]
 80025f8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f4ff af5a 	bcc.w	80024b6 <Si468x_dab_full_scan+0x3a>
 8002602:	e000      	b.n	8002606 <Si468x_dab_full_scan+0x18a>
			break;
 8002604:	bf00      	nop
	}

	if(_scan_cancel_flag)
 8002606:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <Si468x_dab_full_scan+0x1a2>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 800260e:	2101      	movs	r1, #1
 8002610:	4829      	ldr	r0, [pc, #164]	; (80026b8 <Si468x_dab_full_scan+0x23c>)
 8002612:	f001 f817 	bl	8003644 <send_debug_msg>
		restore_from_eeprom();
 8002616:	f000 fcb9 	bl	8002f8c <restore_from_eeprom>
		return 0;
 800261a:	2300      	movs	r3, #0
 800261c:	e1e9      	b.n	80029f2 <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 800261e:	f002 feb7 	bl	8005390 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d013      	beq.n	8002652 <Si468x_dab_full_scan+0x1d6>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 800262c:	7819      	ldrb	r1, [r3, #0]
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <Si468x_dab_full_scan+0x240>)
 8002634:	4822      	ldr	r0, [pc, #136]	; (80026c0 <Si468x_dab_full_scan+0x244>)
 8002636:	f002 ff07 	bl	8005448 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 800263c:	2200      	movs	r2, #0
 800263e:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 8002642:	2200      	movs	r2, #0
 8002644:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002646:	2201      	movs	r2, #1
 8002648:	491e      	ldr	r1, [pc, #120]	; (80026c4 <Si468x_dab_full_scan+0x248>)
 800264a:	f240 1007 	movw	r0, #263	; 0x107
 800264e:	f002 fe77 	bl	8005340 <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002652:	2100      	movs	r1, #0
 8002654:	481c      	ldr	r0, [pc, #112]	; (80026c8 <Si468x_dab_full_scan+0x24c>)
 8002656:	f000 fff5 	bl	8003644 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <Si468x_dab_full_scan+0x22c>)
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	220a      	movs	r2, #10
 8002660:	491a      	ldr	r1, [pc, #104]	; (80026cc <Si468x_dab_full_scan+0x250>)
 8002662:	4618      	mov	r0, r3
 8002664:	f00a fc9a 	bl	800cf9c <itoa>
 8002668:	4603      	mov	r3, r0
 800266a:	2101      	movs	r1, #1
 800266c:	4618      	mov	r0, r3
 800266e:	f000 ffe9 	bl	8003644 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002672:	2101      	movs	r1, #1
 8002674:	4816      	ldr	r0, [pc, #88]	; (80026d0 <Si468x_dab_full_scan+0x254>)
 8002676:	f000 ffe5 	bl	8003644 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 800267a:	2100      	movs	r1, #0
 800267c:	4815      	ldr	r0, [pc, #84]	; (80026d4 <Si468x_dab_full_scan+0x258>)
 800267e:	f000 ffe1 	bl	8003644 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002682:	2100      	movs	r1, #0
 8002684:	4814      	ldr	r0, [pc, #80]	; (80026d8 <Si468x_dab_full_scan+0x25c>)
 8002686:	f000 ffdd 	bl	8003644 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 800268a:	2100      	movs	r1, #0
 800268c:	4813      	ldr	r0, [pc, #76]	; (80026dc <Si468x_dab_full_scan+0x260>)
 800268e:	f000 ffd9 	bl	8003644 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8002692:	2101      	movs	r1, #1
 8002694:	4812      	ldr	r0, [pc, #72]	; (80026e0 <Si468x_dab_full_scan+0x264>)
 8002696:	f000 ffd5 	bl	8003644 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80026a0:	e07d      	b.n	800279e <Si468x_dab_full_scan+0x322>
 80026a2:	bf00      	nop
 80026a4:	0800d858 	.word	0x0800d858
 80026a8:	20003088 	.word	0x20003088
 80026ac:	0800d844 	.word	0x0800d844
 80026b0:	20001aac 	.word	0x20001aac
 80026b4:	20001ad8 	.word	0x20001ad8
 80026b8:	0800d894 	.word	0x0800d894
 80026bc:	20001af8 	.word	0x20001af8
 80026c0:	20001c38 	.word	0x20001c38
 80026c4:	2000308c 	.word	0x2000308c
 80026c8:	0800d8a8 	.word	0x0800d8a8
 80026cc:	200019a8 	.word	0x200019a8
 80026d0:	0800d8bc 	.word	0x0800d8bc
 80026d4:	0800d8f0 	.word	0x0800d8f0
 80026d8:	0800d8fc 	.word	0x0800d8fc
 80026dc:	0800d910 	.word	0x0800d910
 80026e0:	0800d920 	.word	0x0800d920
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80026e4:	2100      	movs	r1, #0
 80026e6:	48c5      	ldr	r0, [pc, #788]	; (80029fc <Si468x_dab_full_scan+0x580>)
 80026e8:	f000 ffac 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80026ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026f0:	3301      	adds	r3, #1
 80026f2:	220a      	movs	r2, #10
 80026f4:	49c2      	ldr	r1, [pc, #776]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00a fc50 	bl	800cf9c <itoa>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f000 ff9f 	bl	8003644 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8002706:	2100      	movs	r1, #0
 8002708:	48be      	ldr	r0, [pc, #760]	; (8002a04 <Si468x_dab_full_scan+0x588>)
 800270a:	f000 ff9b 	bl	8003644 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800270e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	4abc      	ldr	r2, [pc, #752]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 8002716:	4413      	add	r3, r2
 8002718:	3302      	adds	r3, #2
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f000 ff91 	bl	8003644 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8002722:	2100      	movs	r1, #0
 8002724:	48b5      	ldr	r0, [pc, #724]	; (80029fc <Si468x_dab_full_scan+0x580>)
 8002726:	f000 ff8d 	bl	8003644 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800272a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800272e:	4ab6      	ldr	r2, [pc, #728]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 8002730:	015b      	lsls	r3, r3, #5
 8002732:	4413      	add	r3, r2
 8002734:	3318      	adds	r3, #24
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	220a      	movs	r2, #10
 800273a:	49b1      	ldr	r1, [pc, #708]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 800273c:	4618      	mov	r0, r3
 800273e:	f00a fc2d 	bl	800cf9c <itoa>
 8002742:	4603      	mov	r3, r0
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f000 ff7c 	bl	8003644 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800274c:	2100      	movs	r1, #0
 800274e:	48af      	ldr	r0, [pc, #700]	; (8002a0c <Si468x_dab_full_scan+0x590>)
 8002750:	f000 ff78 	bl	8003644 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002754:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002758:	4aab      	ldr	r2, [pc, #684]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	4413      	add	r3, r2
 800275e:	331c      	adds	r3, #28
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4baa      	ldr	r3, [pc, #680]	; (8002a10 <Si468x_dab_full_scan+0x594>)
 8002766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f000 ff69 	bl	8003644 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8002772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002776:	4aa4      	ldr	r2, [pc, #656]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 8002778:	015b      	lsls	r3, r3, #5
 800277a:	4413      	add	r3, r2
 800277c:	331c      	adds	r3, #28
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b13      	cmp	r3, #19
 8002782:	d803      	bhi.n	800278c <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002784:	2100      	movs	r1, #0
 8002786:	48a3      	ldr	r0, [pc, #652]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002788:	f000 ff5c 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 800278c:	2101      	movs	r1, #1
 800278e:	48a2      	ldr	r0, [pc, #648]	; (8002a18 <Si468x_dab_full_scan+0x59c>)
 8002790:	f000 ff58 	bl	8003644 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002798:	3301      	adds	r3, #1
 800279a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800279e:	4b9f      	ldr	r3, [pc, #636]	; (8002a1c <Si468x_dab_full_scan+0x5a0>)
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d39c      	bcc.n	80026e4 <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027aa:	2101      	movs	r1, #1
 80027ac:	489c      	ldr	r0, [pc, #624]	; (8002a20 <Si468x_dab_full_scan+0x5a4>)
 80027ae:	f000 ff49 	bl	8003644 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80027b2:	2100      	movs	r1, #0
 80027b4:	489b      	ldr	r0, [pc, #620]	; (8002a24 <Si468x_dab_full_scan+0x5a8>)
 80027b6:	f000 ff45 	bl	8003644 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80027ba:	4b98      	ldr	r3, [pc, #608]	; (8002a1c <Si468x_dab_full_scan+0x5a0>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	220a      	movs	r2, #10
 80027c0:	498f      	ldr	r1, [pc, #572]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00a fbea 	bl	800cf9c <itoa>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 ff39 	bl	8003644 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80027d2:	2101      	movs	r1, #1
 80027d4:	4894      	ldr	r0, [pc, #592]	; (8002a28 <Si468x_dab_full_scan+0x5ac>)
 80027d6:	f000 ff35 	bl	8003644 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80027da:	2101      	movs	r1, #1
 80027dc:	4893      	ldr	r0, [pc, #588]	; (8002a2c <Si468x_dab_full_scan+0x5b0>)
 80027de:	f000 ff31 	bl	8003644 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80027e8:	e0f7      	b.n	80029da <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80027ea:	2100      	movs	r1, #0
 80027ec:	4883      	ldr	r0, [pc, #524]	; (80029fc <Si468x_dab_full_scan+0x580>)
 80027ee:	f000 ff29 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80027f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80027f6:	3301      	adds	r3, #1
 80027f8:	220a      	movs	r2, #10
 80027fa:	4981      	ldr	r1, [pc, #516]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00a fbcd 	bl	800cf9c <itoa>
 8002802:	4603      	mov	r3, r0
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f000 ff1c 	bl	8003644 <send_debug_msg>
			if((services_index + 1) < 10)
 800280c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002810:	2b08      	cmp	r3, #8
 8002812:	d803      	bhi.n	800281c <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002814:	2100      	movs	r1, #0
 8002816:	487f      	ldr	r0, [pc, #508]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002818:	f000 ff14 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800281c:	2100      	movs	r1, #0
 800281e:	4884      	ldr	r0, [pc, #528]	; (8002a30 <Si468x_dab_full_scan+0x5b4>)
 8002820:	f000 ff10 	bl	8003644 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002824:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002828:	2234      	movs	r2, #52	; 0x34
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	4a81      	ldr	r2, [pc, #516]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 8002830:	4413      	add	r3, r2
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f000 ff05 	bl	8003644 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800283a:	2100      	movs	r1, #0
 800283c:	487e      	ldr	r0, [pc, #504]	; (8002a38 <Si468x_dab_full_scan+0x5bc>)
 800283e:	f000 ff01 	bl	8003644 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002848:	e021      	b.n	800288e <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800284a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	4413      	add	r3, r2
 8002854:	331c      	adds	r3, #28
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800285c:	4975      	ldr	r1, [pc, #468]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 800285e:	2034      	movs	r0, #52	; 0x34
 8002860:	fb00 f303 	mul.w	r3, r0, r3
 8002864:	440b      	add	r3, r1
 8002866:	3328      	adds	r3, #40	; 0x28
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d10a      	bne.n	8002884 <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800286e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002872:	015b      	lsls	r3, r3, #5
 8002874:	4a64      	ldr	r2, [pc, #400]	; (8002a08 <Si468x_dab_full_scan+0x58c>)
 8002876:	4413      	add	r3, r2
 8002878:	3302      	adds	r3, #2
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fee1 	bl	8003644 <send_debug_msg>
					break;
 8002882:	e00a      	b.n	800289a <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002884:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002888:	3301      	adds	r3, #1
 800288a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <Si468x_dab_full_scan+0x5a0>)
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8002896:	429a      	cmp	r2, r3
 8002898:	d3d7      	bcc.n	800284a <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800289a:	2100      	movs	r1, #0
 800289c:	4866      	ldr	r0, [pc, #408]	; (8002a38 <Si468x_dab_full_scan+0x5bc>)
 800289e:	f000 fed1 	bl	8003644 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80028a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028a6:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 80028a8:	2134      	movs	r1, #52	; 0x34
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3324      	adds	r3, #36	; 0x24
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	220a      	movs	r2, #10
 80028b6:	4952      	ldr	r1, [pc, #328]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f00a fb6f 	bl	800cf9c <itoa>
 80028be:	4603      	mov	r3, r0
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 febe 	bl	8003644 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80028c8:	2100      	movs	r1, #0
 80028ca:	4850      	ldr	r0, [pc, #320]	; (8002a0c <Si468x_dab_full_scan+0x590>)
 80028cc:	f000 feba 	bl	8003644 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80028d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 80028d6:	2134      	movs	r1, #52	; 0x34
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3328      	adds	r3, #40	; 0x28
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <Si468x_dab_full_scan+0x594>)
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fea9 	bl	8003644 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80028f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028f6:	4a4f      	ldr	r2, [pc, #316]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 80028f8:	2134      	movs	r1, #52	; 0x34
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3328      	adds	r3, #40	; 0x28
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b13      	cmp	r3, #19
 8002906:	d803      	bhi.n	8002910 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002908:	2100      	movs	r1, #0
 800290a:	4842      	ldr	r0, [pc, #264]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 800290c:	f000 fe9a 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002910:	2100      	movs	r1, #0
 8002912:	4847      	ldr	r0, [pc, #284]	; (8002a30 <Si468x_dab_full_scan+0x5b4>)
 8002914:	f000 fe96 	bl	8003644 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002918:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800291c:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 800291e:	2134      	movs	r1, #52	; 0x34
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3315      	adds	r3, #21
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	220a      	movs	r2, #10
 800292c:	4934      	ldr	r1, [pc, #208]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 800292e:	4618      	mov	r0, r3
 8002930:	f00a fb34 	bl	800cf9c <itoa>
 8002934:	4603      	mov	r3, r0
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fe83 	bl	8003644 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 800293e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002942:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 8002944:	2134      	movs	r1, #52	; 0x34
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3315      	adds	r3, #21
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d803      	bhi.n	800295c <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002954:	2100      	movs	r1, #0
 8002956:	482f      	ldr	r0, [pc, #188]	; (8002a14 <Si468x_dab_full_scan+0x598>)
 8002958:	f000 fe74 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 800295c:	2100      	movs	r1, #0
 800295e:	4837      	ldr	r0, [pc, #220]	; (8002a3c <Si468x_dab_full_scan+0x5c0>)
 8002960:	f000 fe70 	bl	8003644 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002964:	2100      	movs	r1, #0
 8002966:	4836      	ldr	r0, [pc, #216]	; (8002a40 <Si468x_dab_full_scan+0x5c4>)
 8002968:	f000 fe6c 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 800296c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002970:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 8002972:	2134      	movs	r1, #52	; 0x34
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3320      	adds	r3, #32
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2210      	movs	r2, #16
 8002980:	491f      	ldr	r1, [pc, #124]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 8002982:	4618      	mov	r0, r3
 8002984:	f00a fb0a 	bl	800cf9c <itoa>
 8002988:	4603      	mov	r3, r0
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fe59 	bl	8003644 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002992:	2100      	movs	r1, #0
 8002994:	4826      	ldr	r0, [pc, #152]	; (8002a30 <Si468x_dab_full_scan+0x5b4>)
 8002996:	f000 fe55 	bl	8003644 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800299a:	2100      	movs	r1, #0
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <Si468x_dab_full_scan+0x5c4>)
 800299e:	f000 fe51 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029a6:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <Si468x_dab_full_scan+0x5b8>)
 80029a8:	2134      	movs	r1, #52	; 0x34
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	332a      	adds	r3, #42	; 0x2a
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2210      	movs	r2, #16
 80029b6:	4912      	ldr	r1, [pc, #72]	; (8002a00 <Si468x_dab_full_scan+0x584>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f00a faef 	bl	800cf9c <itoa>
 80029be:	4603      	mov	r3, r0
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fe3e 	bl	8003644 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80029c8:	2101      	movs	r1, #1
 80029ca:	481e      	ldr	r0, [pc, #120]	; (8002a44 <Si468x_dab_full_scan+0x5c8>)
 80029cc:	f000 fe3a 	bl	8003644 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80029d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029d4:	3301      	adds	r3, #1
 80029d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <Si468x_dab_full_scan+0x5a0>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80029e2:	429a      	cmp	r2, r3
 80029e4:	f4ff af01 	bcc.w	80027ea <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80029e8:	2101      	movs	r1, #1
 80029ea:	480f      	ldr	r0, [pc, #60]	; (8002a28 <Si468x_dab_full_scan+0x5ac>)
 80029ec:	f000 fe2a 	bl	8003644 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 80029f0:	2301      	movs	r3, #1
	}
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	373c      	adds	r7, #60	; 0x3c
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	0800d930 	.word	0x0800d930
 8002a00:	200019a8 	.word	0x200019a8
 8002a04:	0800d934 	.word	0x0800d934
 8002a08:	20001af8 	.word	0x20001af8
 8002a0c:	0800d940 	.word	0x0800d940
 8002a10:	20000008 	.word	0x20000008
 8002a14:	0800d948 	.word	0x0800d948
 8002a18:	0800d94c 	.word	0x0800d94c
 8002a1c:	20003088 	.word	0x20003088
 8002a20:	0800d8bc 	.word	0x0800d8bc
 8002a24:	0800d954 	.word	0x0800d954
 8002a28:	0800d968 	.word	0x0800d968
 8002a2c:	0800d9d4 	.word	0x0800d9d4
 8002a30:	0800da40 	.word	0x0800da40
 8002a34:	20001c38 	.word	0x20001c38
 8002a38:	0800da48 	.word	0x0800da48
 8002a3c:	0800da4c 	.word	0x0800da4c
 8002a40:	0800da54 	.word	0x0800da54
 8002a44:	0800da58 	.word	0x0800da58

08002a48 <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002a50:	2101      	movs	r1, #1
 8002a52:	484d      	ldr	r0, [pc, #308]	; (8002b88 <Si468x_dab_get_audio_info+0x140>)
 8002a54:	f000 fdf6 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <Si468x_dab_get_audio_info+0x144>)
 8002a5a:	22bd      	movs	r2, #189	; 0xbd
 8002a5c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <Si468x_dab_get_audio_info+0x144>)
 8002a60:	2203      	movs	r2, #3
 8002a62:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002a64:	4949      	ldr	r1, [pc, #292]	; (8002b8c <Si468x_dab_get_audio_info+0x144>)
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fe fe08 	bl	800167c <Si468x_write_command>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <Si468x_dab_get_audio_info+0x148>)
 8002a72:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f004 fa9b 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002a7a:	4946      	ldr	r1, [pc, #280]	; (8002b94 <Si468x_dab_get_audio_info+0x14c>)
 8002a7c:	2014      	movs	r0, #20
 8002a7e:	f7fe fe1f 	bl	80016c0 <Si468x_read_reply>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <Si468x_dab_get_audio_info+0x148>)
 8002a88:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002a8a:	4a43      	ldr	r2, [pc, #268]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <Si468x_dab_get_audio_info+0x14c>)
 8002a8e:	4614      	mov	r4, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4840      	ldr	r0, [pc, #256]	; (8002b9c <Si468x_dab_get_audio_info+0x154>)
 8002a9c:	f000 fdd2 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	220a      	movs	r2, #10
 8002aa6:	493e      	ldr	r1, [pc, #248]	; (8002ba0 <Si468x_dab_get_audio_info+0x158>)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00a fa77 	bl	800cf9c <itoa>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fdc6 	bl	8003644 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	483a      	ldr	r0, [pc, #232]	; (8002ba4 <Si468x_dab_get_audio_info+0x15c>)
 8002abc:	f000 fdc2 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002ac2:	885b      	ldrh	r3, [r3, #2]
 8002ac4:	220a      	movs	r2, #10
 8002ac6:	4936      	ldr	r1, [pc, #216]	; (8002ba0 <Si468x_dab_get_audio_info+0x158>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f00a fa67 	bl	800cf9c <itoa>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fdb6 	bl	8003644 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4833      	ldr	r0, [pc, #204]	; (8002ba8 <Si468x_dab_get_audio_info+0x160>)
 8002adc:	f000 fdb2 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	220a      	movs	r2, #10
 8002aec:	492c      	ldr	r1, [pc, #176]	; (8002ba0 <Si468x_dab_get_audio_info+0x158>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a fa54 	bl	800cf9c <itoa>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fda3 	bl	8003644 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002afe:	2100      	movs	r1, #0
 8002b00:	482a      	ldr	r0, [pc, #168]	; (8002bac <Si468x_dab_get_audio_info+0x164>)
 8002b02:	f000 fd9f 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002b08:	791b      	ldrb	r3, [r3, #4]
 8002b0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	220a      	movs	r2, #10
 8002b12:	4923      	ldr	r1, [pc, #140]	; (8002ba0 <Si468x_dab_get_audio_info+0x158>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00a fa41 	bl	800cf9c <itoa>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fd90 	bl	8003644 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b24:	2100      	movs	r1, #0
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <Si468x_dab_get_audio_info+0x168>)
 8002b28:	f000 fd8c 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002b2e:	791b      	ldrb	r3, [r3, #4]
 8002b30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	220a      	movs	r2, #10
 8002b38:	4919      	ldr	r1, [pc, #100]	; (8002ba0 <Si468x_dab_get_audio_info+0x158>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00a fa2e 	bl	800cf9c <itoa>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fd7d 	bl	8003644 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4819      	ldr	r0, [pc, #100]	; (8002bb4 <Si468x_dab_get_audio_info+0x16c>)
 8002b4e:	f000 fd79 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	220a      	movs	r2, #10
 8002b5e:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <Si468x_dab_get_audio_info+0x158>)
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00a fa1b 	bl	800cf9c <itoa>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fd6a 	bl	8003644 <send_debug_msg>

	return dab_audio_info;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <Si468x_dab_get_audio_info+0x150>)
 8002b74:	461c      	mov	r4, r3
 8002b76:	4613      	mov	r3, r2
 8002b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800da64 	.word	0x0800da64
 8002b8c:	200001a8 	.word	0x200001a8
 8002b90:	200019e8 	.word	0x200019e8
 8002b94:	200011a8 	.word	0x200011a8
 8002b98:	20001ae8 	.word	0x20001ae8
 8002b9c:	0800daa0 	.word	0x0800daa0
 8002ba0:	200019a8 	.word	0x200019a8
 8002ba4:	0800daac 	.word	0x0800daac
 8002ba8:	0800dabc 	.word	0x0800dabc
 8002bac:	0800dad0 	.word	0x0800dad0
 8002bb0:	0800dadc 	.word	0x0800dadc
 8002bb4:	0800dae8 	.word	0x0800dae8

08002bb8 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4811      	ldr	r0, [pc, #68]	; (8002c04 <Si468x_dab_get_event_status+0x4c>)
 8002bc0:	f000 fd40 	bl	8003644 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <Si468x_dab_get_event_status+0x50>)
 8002bc6:	22b3      	movs	r2, #179	; 0xb3
 8002bc8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <Si468x_dab_get_event_status+0x50>)
 8002bcc:	2203      	movs	r2, #3
 8002bce:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002bd0:	490d      	ldr	r1, [pc, #52]	; (8002c08 <Si468x_dab_get_event_status+0x50>)
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	f7fe fd52 	bl	800167c <Si468x_write_command>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <Si468x_dab_get_event_status+0x54>)
 8002bde:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f004 f9e5 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <Si468x_dab_get_event_status+0x58>)
 8002be8:	2009      	movs	r0, #9
 8002bea:	f7fe fd69 	bl	80016c0 <Si468x_read_reply>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <Si468x_dab_get_event_status+0x54>)
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <Si468x_dab_get_event_status+0x58>)
 8002bf8:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002bfa:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <Si468x_dab_get_event_status+0x5c>)
 8002bfc:	6013      	str	r3, [r2, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	0800daf8 	.word	0x0800daf8
 8002c08:	200001a8 	.word	0x200001a8
 8002c0c:	200019e8 	.word	0x200019e8
 8002c10:	200011a8 	.word	0x200011a8
 8002c14:	20001ad8 	.word	0x20001ad8

08002c18 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c24:	2101      	movs	r1, #1
 8002c26:	484a      	ldr	r0, [pc, #296]	; (8002d50 <Si468x_dab_get_component_info+0x138>)
 8002c28:	f000 fd0c 	bl	8003644 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c2c:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c2e:	22bb      	movs	r2, #187	; 0xbb
 8002c30:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c32:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c3e:	4b45      	ldr	r3, [pc, #276]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c4a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c54:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c5e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0e1b      	lsrs	r3, r3, #24
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c68:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	121b      	asrs	r3, r3, #8
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c78:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	141b      	asrs	r3, r3, #16
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c82:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	161b      	asrs	r3, r3, #24
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c8c:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002c8e:	4931      	ldr	r1, [pc, #196]	; (8002d54 <Si468x_dab_get_component_info+0x13c>)
 8002c90:	200c      	movs	r0, #12
 8002c92:	f7fe fcf3 	bl	800167c <Si468x_write_command>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <Si468x_dab_get_component_info+0x140>)
 8002c9c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002c9e:	2005      	movs	r0, #5
 8002ca0:	f004 f986 	bl	8006fb0 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002ca4:	492d      	ldr	r1, [pc, #180]	; (8002d5c <Si468x_dab_get_component_info+0x144>)
 8002ca6:	201a      	movs	r0, #26
 8002ca8:	f7fe fd0a 	bl	80016c0 <Si468x_read_reply>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <Si468x_dab_get_component_info+0x140>)
 8002cb2:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <Si468x_dab_get_component_info+0x144>)
 8002cb6:	799b      	ldrb	r3, [r3, #6]
 8002cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbc:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	77fb      	strb	r3, [r7, #31]
 8002cc2:	e00c      	b.n	8002cde <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
 8002cc6:	f103 0208 	add.w	r2, r3, #8
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	4923      	ldr	r1, [pc, #140]	; (8002d5c <Si468x_dab_get_component_info+0x144>)
 8002cce:	5c8a      	ldrb	r2, [r1, r2]
 8002cd0:	3320      	adds	r3, #32
 8002cd2:	443b      	add	r3, r7
 8002cd4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	2b0f      	cmp	r3, #15
 8002ce2:	d9ef      	bls.n	8002cc4 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <Si468x_dab_get_component_info+0x144>)
 8002ce6:	7e1b      	ldrb	r3, [r3, #24]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <Si468x_dab_get_component_info+0x144>)
 8002cec:	7e5b      	ldrb	r3, [r3, #25]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4819      	ldr	r0, [pc, #100]	; (8002d60 <Si468x_dab_get_component_info+0x148>)
 8002cfc:	f000 fca2 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d00:	7fbb      	ldrb	r3, [r7, #30]
 8002d02:	220a      	movs	r2, #10
 8002d04:	4917      	ldr	r1, [pc, #92]	; (8002d64 <Si468x_dab_get_component_info+0x14c>)
 8002d06:	4618      	mov	r0, r3
 8002d08:	f00a f948 	bl	800cf9c <itoa>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fc97 	bl	8003644 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d16:	2100      	movs	r1, #0
 8002d18:	4813      	ldr	r0, [pc, #76]	; (8002d68 <Si468x_dab_get_component_info+0x150>)
 8002d1a:	f000 fc93 	bl	8003644 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fc8d 	bl	8003644 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	480f      	ldr	r0, [pc, #60]	; (8002d6c <Si468x_dab_get_component_info+0x154>)
 8002d2e:	f000 fc89 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d32:	8bbb      	ldrh	r3, [r7, #28]
 8002d34:	2202      	movs	r2, #2
 8002d36:	490b      	ldr	r1, [pc, #44]	; (8002d64 <Si468x_dab_get_component_info+0x14c>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f00a f92f 	bl	800cf9c <itoa>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fc7e 	bl	8003644 <send_debug_msg>

}
 8002d48:	bf00      	nop
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	0800db38 	.word	0x0800db38
 8002d54:	200001a8 	.word	0x200001a8
 8002d58:	200019e8 	.word	0x200019e8
 8002d5c:	200011a8 	.word	0x200011a8
 8002d60:	0800db6c 	.word	0x0800db6c
 8002d64:	200019a8 	.word	0x200019a8
 8002d68:	0800db78 	.word	0x0800db78
 8002d6c:	0800db8c 	.word	0x0800db8c

08002d70 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <Si468x_dab_get_time+0x78>)
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d02f      	beq.n	8002de2 <Si468x_dab_get_time+0x72>
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <Si468x_dab_get_time+0x78>)
 8002d84:	785b      	ldrb	r3, [r3, #1]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d028      	beq.n	8002de2 <Si468x_dab_get_time+0x72>
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <Si468x_dab_get_time+0x78>)
 8002d92:	791b      	ldrb	r3, [r3, #4]
 8002d94:	2b5a      	cmp	r3, #90	; 0x5a
 8002d96:	d924      	bls.n	8002de2 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <Si468x_dab_get_time+0x7c>)
 8002d9a:	22bc      	movs	r2, #188	; 0xbc
 8002d9c:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <Si468x_dab_get_time+0x7c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002da4:	4911      	ldr	r1, [pc, #68]	; (8002dec <Si468x_dab_get_time+0x7c>)
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fe fc68 	bl	800167c <Si468x_write_command>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <Si468x_dab_get_time+0x80>)
 8002db2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f004 f8fb 	bl	8006fb0 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002dba:	490e      	ldr	r1, [pc, #56]	; (8002df4 <Si468x_dab_get_time+0x84>)
 8002dbc:	200b      	movs	r0, #11
 8002dbe:	f7fe fc7f 	bl	80016c0 <Si468x_read_reply>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <Si468x_dab_get_time+0x80>)
 8002dc8:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <Si468x_dab_get_time+0x88>)
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <Si468x_dab_get_time+0x84>)
 8002dce:	3304      	adds	r3, #4
 8002dd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dd4:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <Si468x_dab_get_time+0x88>)
 8002dda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dde:	f002 f9d7 	bl	8005190 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001aac 	.word	0x20001aac
 8002dec:	200001a8 	.word	0x200001a8
 8002df0:	200019e8 	.word	0x200019e8
 8002df4:	200011a8 	.word	0x200011a8
 8002df8:	20001ae0 	.word	0x20001ae0

08002dfc <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002e10:	f7fe fd64 	bl	80018dc <Si468x_set_property>
	dab_management.audio_volume = _volume;
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <Si468x_set_audio_volume+0x5c>)
 8002e18:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	480f      	ldr	r0, [pc, #60]	; (8002e5c <Si468x_set_audio_volume+0x60>)
 8002e1e:	f000 fc11 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <Si468x_set_audio_volume+0x5c>)
 8002e24:	7b9b      	ldrb	r3, [r3, #14]
 8002e26:	220a      	movs	r2, #10
 8002e28:	490d      	ldr	r1, [pc, #52]	; (8002e60 <Si468x_set_audio_volume+0x64>)
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f00a f8b6 	bl	800cf9c <itoa>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fc05 	bl	8003644 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4809      	ldr	r0, [pc, #36]	; (8002e64 <Si468x_set_audio_volume+0x68>)
 8002e3e:	f000 fc01 	bl	8003644 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	2201      	movs	r2, #1
 8002e46:	4619      	mov	r1, r3
 8002e48:	200b      	movs	r0, #11
 8002e4a:	f002 fa79 	bl	8005340 <eeprom_write>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20003088 	.word	0x20003088
 8002e5c:	0800dbdc 	.word	0x0800dbdc
 8002e60:	200019a8 	.word	0x200019a8
 8002e64:	0800dbe8 	.word	0x0800dbe8

08002e68 <play_station>:

void play_station(uint8_t station_id)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dab_management.actual_station = station_id;
 8002e74:	4a3e      	ldr	r2, [pc, #248]	; (8002f70 <play_station+0x108>)
 8002e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e7a:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 8002e7c:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <play_station+0x108>)
 8002e7e:	78da      	ldrb	r2, [r3, #3]
 8002e80:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <play_station+0x108>)
 8002e82:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002e84:	2201      	movs	r2, #1
 8002e86:	493b      	ldr	r1, [pc, #236]	; (8002f74 <play_station+0x10c>)
 8002e88:	f240 1007 	movw	r0, #263	; 0x107
 8002e8c:	f002 fa58 	bl	8005340 <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 8002e90:	2101      	movs	r1, #1
 8002e92:	4839      	ldr	r0, [pc, #228]	; (8002f78 <play_station+0x110>)
 8002e94:	f000 fbd6 	bl	8003644 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4838      	ldr	r0, [pc, #224]	; (8002f7c <play_station+0x114>)
 8002e9c:	f000 fbd2 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <play_station+0x108>)
 8002ea2:	78db      	ldrb	r3, [r3, #3]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	220a      	movs	r2, #10
 8002ea8:	4935      	ldr	r1, [pc, #212]	; (8002f80 <play_station+0x118>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f00a f876 	bl	800cf9c <itoa>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fbc5 	bl	8003644 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4831      	ldr	r0, [pc, #196]	; (8002f84 <play_station+0x11c>)
 8002ebe:	f000 fbc1 	bl	8003644 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <play_station+0x108>)
 8002ec4:	78db      	ldrb	r3, [r3, #3]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2334      	movs	r3, #52	; 0x34
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a2e      	ldr	r2, [pc, #184]	; (8002f88 <play_station+0x120>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fbb5 	bl	8003644 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <play_station+0x108>)
 8002edc:	78db      	ldrb	r3, [r3, #3]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <play_station+0x120>)
 8002ee2:	2334      	movs	r3, #52	; 0x34
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3328      	adds	r3, #40	; 0x28
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fddf 	bl	8001ab4 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <play_station+0x108>)
 8002ef8:	78db      	ldrb	r3, [r3, #3]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <play_station+0x120>)
 8002efe:	2334      	movs	r3, #52	; 0x34
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3320      	adds	r3, #32
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <play_station+0x108>)
 8002f0c:	78db      	ldrb	r3, [r3, #3]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	491d      	ldr	r1, [pc, #116]	; (8002f88 <play_station+0x120>)
 8002f12:	2334      	movs	r3, #52	; 0x34
 8002f14:	fb00 f303 	mul.w	r3, r0, r3
 8002f18:	440b      	add	r3, r1
 8002f1a:	332a      	adds	r3, #42	; 0x2a
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f7ff fe79 	bl	8002c18 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <play_station+0x108>)
 8002f28:	78db      	ldrb	r3, [r3, #3]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <play_station+0x120>)
 8002f2e:	2334      	movs	r3, #52	; 0x34
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3320      	adds	r3, #32
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <play_station+0x108>)
 8002f3c:	78db      	ldrb	r3, [r3, #3]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4911      	ldr	r1, [pc, #68]	; (8002f88 <play_station+0x120>)
 8002f42:	2334      	movs	r3, #52	; 0x34
 8002f44:	fb00 f303 	mul.w	r3, r0, r3
 8002f48:	440b      	add	r3, r1
 8002f4a:	332a      	adds	r3, #42	; 0x2a
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7ff f973 	bl	800223c <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 8002f56:	463b      	mov	r3, r7
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fe63 	bl	8001c24 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8002f5e:	463b      	mov	r3, r7
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fd71 	bl	8002a48 <Si468x_dab_get_audio_info>
}
 8002f66:	bf00      	nop
 8002f68:	3730      	adds	r7, #48	; 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20003088 	.word	0x20003088
 8002f74:	2000308c 	.word	0x2000308c
 8002f78:	0800dbec 	.word	0x0800dbec
 8002f7c:	0800dc10 	.word	0x0800dc10
 8002f80:	200019a8 	.word	0x200019a8
 8002f84:	0800dc24 	.word	0x0800dc24
 8002f88:	20001c38 	.word	0x20001c38

08002f8c <restore_from_eeprom>:

void restore_from_eeprom()
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 8002f92:	2101      	movs	r1, #1
 8002f94:	4895      	ldr	r0, [pc, #596]	; (80031ec <restore_from_eeprom+0x260>)
 8002f96:	f000 fb55 	bl	8003644 <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4994      	ldr	r1, [pc, #592]	; (80031f0 <restore_from_eeprom+0x264>)
 8002f9e:	203f      	movs	r0, #63	; 0x3f
 8002fa0:	f002 f9b0 	bl	8005304 <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
 8002fa8:	e012      	b.n	8002fd0 <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	3301      	adds	r3, #1
 8002fae:	019b      	lsls	r3, r3, #6
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4a8e      	ldr	r2, [pc, #568]	; (80031f4 <restore_from_eeprom+0x268>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f002 f9a0 	bl	8005304 <eeprom_read>
		HAL_Delay(5);
 8002fc4:	2005      	movs	r0, #5
 8002fc6:	f003 fff3 	bl	8006fb0 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d9e9      	bls.n	8002faa <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4887      	ldr	r0, [pc, #540]	; (80031f8 <restore_from_eeprom+0x26c>)
 8002fda:	f000 fb33 	bl	8003644 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8002fde:	4b87      	ldr	r3, [pc, #540]	; (80031fc <restore_from_eeprom+0x270>)
 8002fe0:	7b5b      	ldrb	r3, [r3, #13]
 8002fe2:	220a      	movs	r2, #10
 8002fe4:	4986      	ldr	r1, [pc, #536]	; (8003200 <restore_from_eeprom+0x274>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f009 ffd8 	bl	800cf9c <itoa>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fb27 	bl	8003644 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4882      	ldr	r0, [pc, #520]	; (8003204 <restore_from_eeprom+0x278>)
 8002ffa:	f000 fb23 	bl	8003644 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e022      	b.n	800304a <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003004:	220a      	movs	r2, #10
 8003006:	497e      	ldr	r1, [pc, #504]	; (8003200 <restore_from_eeprom+0x274>)
 8003008:	6938      	ldr	r0, [r7, #16]
 800300a:	f009 ffc7 	bl	800cf9c <itoa>
 800300e:	4603      	mov	r3, r0
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb16 	bl	8003644 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003018:	2100      	movs	r1, #0
 800301a:	487b      	ldr	r0, [pc, #492]	; (8003208 <restore_from_eeprom+0x27c>)
 800301c:	f000 fb12 	bl	8003644 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003020:	4a74      	ldr	r2, [pc, #464]	; (80031f4 <restore_from_eeprom+0x268>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	220a      	movs	r2, #10
 800302a:	4975      	ldr	r1, [pc, #468]	; (8003200 <restore_from_eeprom+0x274>)
 800302c:	4618      	mov	r0, r3
 800302e:	f009 ffb5 	bl	800cf9c <itoa>
 8003032:	4603      	mov	r3, r0
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fb04 	bl	8003644 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 800303c:	2101      	movs	r1, #1
 800303e:	4873      	ldr	r0, [pc, #460]	; (800320c <restore_from_eeprom+0x280>)
 8003040:	f000 fb00 	bl	8003644 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3301      	adds	r3, #1
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <restore_from_eeprom+0x270>)
 800304c:	7b5b      	ldrb	r3, [r3, #13]
 800304e:	461a      	mov	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4293      	cmp	r3, r2
 8003054:	dbd6      	blt.n	8003004 <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 8003056:	2201      	movs	r2, #1
 8003058:	496d      	ldr	r1, [pc, #436]	; (8003210 <restore_from_eeprom+0x284>)
 800305a:	f240 1005 	movw	r0, #261	; 0x105
 800305e:	f002 f951 	bl	8005304 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 8003062:	2201      	movs	r2, #1
 8003064:	4965      	ldr	r1, [pc, #404]	; (80031fc <restore_from_eeprom+0x270>)
 8003066:	f44f 7083 	mov.w	r0, #262	; 0x106
 800306a:	f002 f94b 	bl	8005304 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <restore_from_eeprom+0x270>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2bff      	cmp	r3, #255	; 0xff
 8003074:	f000 828b 	beq.w	800358e <restore_from_eeprom+0x602>
 8003078:	4b60      	ldr	r3, [pc, #384]	; (80031fc <restore_from_eeprom+0x270>)
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	2bff      	cmp	r3, #255	; 0xff
 800307e:	f000 8286 	beq.w	800358e <restore_from_eeprom+0x602>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 8003082:	2204      	movs	r2, #4
 8003084:	4963      	ldr	r1, [pc, #396]	; (8003214 <restore_from_eeprom+0x288>)
 8003086:	f44f 7080 	mov.w	r0, #256	; 0x100
 800308a:	f002 f93b 	bl	8005304 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 800308e:	2201      	movs	r2, #1
 8003090:	4961      	ldr	r1, [pc, #388]	; (8003218 <restore_from_eeprom+0x28c>)
 8003092:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003096:	f002 f935 	bl	8005304 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 800309a:	2201      	movs	r2, #1
 800309c:	495f      	ldr	r1, [pc, #380]	; (800321c <restore_from_eeprom+0x290>)
 800309e:	f240 1007 	movw	r0, #263	; 0x107
 80030a2:	f002 f92f 	bl	8005304 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 80030a6:	4b55      	ldr	r3, [pc, #340]	; (80031fc <restore_from_eeprom+0x270>)
 80030a8:	791b      	ldrb	r3, [r3, #4]
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d102      	bne.n	80030b4 <restore_from_eeprom+0x128>
		{
			dab_management.last_station_index = 0;
 80030ae:	4b53      	ldr	r3, [pc, #332]	; (80031fc <restore_from_eeprom+0x270>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 80030b4:	4b51      	ldr	r3, [pc, #324]	; (80031fc <restore_from_eeprom+0x270>)
 80030b6:	791a      	ldrb	r2, [r3, #4]
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <restore_from_eeprom+0x270>)
 80030ba:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e00e      	b.n	80030e0 <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	3305      	adds	r3, #5
 80030c6:	019b      	lsls	r3, r3, #6
 80030c8:	4618      	mov	r0, r3
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	015b      	lsls	r3, r3, #5
 80030ce:	4a54      	ldr	r2, [pc, #336]	; (8003220 <restore_from_eeprom+0x294>)
 80030d0:	4413      	add	r3, r2
 80030d2:	2220      	movs	r2, #32
 80030d4:	4619      	mov	r1, r3
 80030d6:	f002 f915 	bl	8005304 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	3301      	adds	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <restore_from_eeprom+0x270>)
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3eb      	bcc.n	80030c2 <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < dab_management.total_services; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	73bb      	strb	r3, [r7, #14]
 80030ee:	e010      	b.n	8003112 <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
 80030f2:	330f      	adds	r3, #15
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	4618      	mov	r0, r3
 80030f8:	7bbb      	ldrb	r3, [r7, #14]
 80030fa:	2234      	movs	r2, #52	; 0x34
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	4a48      	ldr	r2, [pc, #288]	; (8003224 <restore_from_eeprom+0x298>)
 8003102:	4413      	add	r3, r2
 8003104:	2234      	movs	r2, #52	; 0x34
 8003106:	4619      	mov	r1, r3
 8003108:	f002 f8fc 	bl	8005304 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_services; i++)
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	3301      	adds	r3, #1
 8003110:	73bb      	strb	r3, [r7, #14]
 8003112:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <restore_from_eeprom+0x270>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	7bba      	ldrb	r2, [r7, #14]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3e9      	bcc.n	80030f0 <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 800311c:	2100      	movs	r1, #0
 800311e:	4836      	ldr	r0, [pc, #216]	; (80031f8 <restore_from_eeprom+0x26c>)
 8003120:	f000 fa90 	bl	8003644 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003124:	4b35      	ldr	r3, [pc, #212]	; (80031fc <restore_from_eeprom+0x270>)
 8003126:	7b5b      	ldrb	r3, [r3, #13]
 8003128:	220a      	movs	r2, #10
 800312a:	4935      	ldr	r1, [pc, #212]	; (8003200 <restore_from_eeprom+0x274>)
 800312c:	4618      	mov	r0, r3
 800312e:	f009 ff35 	bl	800cf9c <itoa>
 8003132:	4603      	mov	r3, r0
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fa84 	bl	8003644 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 800313c:	2101      	movs	r1, #1
 800313e:	4831      	ldr	r0, [pc, #196]	; (8003204 <restore_from_eeprom+0x278>)
 8003140:	f000 fa80 	bl	8003644 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	e022      	b.n	8003190 <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800314a:	220a      	movs	r2, #10
 800314c:	492c      	ldr	r1, [pc, #176]	; (8003200 <restore_from_eeprom+0x274>)
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f009 ff24 	bl	800cf9c <itoa>
 8003154:	4603      	mov	r3, r0
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fa73 	bl	8003644 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 800315e:	2100      	movs	r1, #0
 8003160:	4829      	ldr	r0, [pc, #164]	; (8003208 <restore_from_eeprom+0x27c>)
 8003162:	f000 fa6f 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003166:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <restore_from_eeprom+0x268>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316e:	220a      	movs	r2, #10
 8003170:	4923      	ldr	r1, [pc, #140]	; (8003200 <restore_from_eeprom+0x274>)
 8003172:	4618      	mov	r0, r3
 8003174:	f009 ff12 	bl	800cf9c <itoa>
 8003178:	4603      	mov	r3, r0
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa61 	bl	8003644 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 8003182:	2101      	movs	r1, #1
 8003184:	4821      	ldr	r0, [pc, #132]	; (800320c <restore_from_eeprom+0x280>)
 8003186:	f000 fa5d 	bl	8003644 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <restore_from_eeprom+0x270>)
 8003192:	7b5b      	ldrb	r3, [r3, #13]
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4293      	cmp	r3, r2
 800319a:	dbd6      	blt.n	800314a <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800319c:	2100      	movs	r1, #0
 800319e:	4822      	ldr	r0, [pc, #136]	; (8003228 <restore_from_eeprom+0x29c>)
 80031a0:	f000 fa50 	bl	8003644 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <restore_from_eeprom+0x270>)
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	220a      	movs	r2, #10
 80031aa:	4915      	ldr	r1, [pc, #84]	; (8003200 <restore_from_eeprom+0x274>)
 80031ac:	4618      	mov	r0, r3
 80031ae:	f009 fef5 	bl	800cf9c <itoa>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2101      	movs	r1, #1
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa44 	bl	8003644 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80031bc:	2101      	movs	r1, #1
 80031be:	481b      	ldr	r0, [pc, #108]	; (800322c <restore_from_eeprom+0x2a0>)
 80031c0:	f000 fa40 	bl	8003644 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80031c4:	2100      	movs	r1, #0
 80031c6:	481a      	ldr	r0, [pc, #104]	; (8003230 <restore_from_eeprom+0x2a4>)
 80031c8:	f000 fa3c 	bl	8003644 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80031cc:	2100      	movs	r1, #0
 80031ce:	4819      	ldr	r0, [pc, #100]	; (8003234 <restore_from_eeprom+0x2a8>)
 80031d0:	f000 fa38 	bl	8003644 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80031d4:	2100      	movs	r1, #0
 80031d6:	4818      	ldr	r0, [pc, #96]	; (8003238 <restore_from_eeprom+0x2ac>)
 80031d8:	f000 fa34 	bl	8003644 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80031dc:	2101      	movs	r1, #1
 80031de:	4817      	ldr	r0, [pc, #92]	; (800323c <restore_from_eeprom+0x2b0>)
 80031e0:	f000 fa30 	bl	8003644 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	71fb      	strb	r3, [r7, #7]
 80031e8:	e080      	b.n	80032ec <restore_from_eeprom+0x360>
 80031ea:	bf00      	nop
 80031ec:	0800dc2c 	.word	0x0800dc2c
 80031f0:	20003095 	.word	0x20003095
 80031f4:	200019ec 	.word	0x200019ec
 80031f8:	0800d618 	.word	0x0800d618
 80031fc:	20003088 	.word	0x20003088
 8003200:	200019a8 	.word	0x200019a8
 8003204:	0800d620 	.word	0x0800d620
 8003208:	0800d638 	.word	0x0800d638
 800320c:	0800d63c 	.word	0x0800d63c
 8003210:	20003089 	.word	0x20003089
 8003214:	20003090 	.word	0x20003090
 8003218:	20003094 	.word	0x20003094
 800321c:	2000308c 	.word	0x2000308c
 8003220:	20001af8 	.word	0x20001af8
 8003224:	20001c38 	.word	0x20001c38
 8003228:	0800d8a8 	.word	0x0800d8a8
 800322c:	0800d8bc 	.word	0x0800d8bc
 8003230:	0800d8f0 	.word	0x0800d8f0
 8003234:	0800d8fc 	.word	0x0800d8fc
 8003238:	0800d910 	.word	0x0800d910
 800323c:	0800d920 	.word	0x0800d920
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003240:	2100      	movs	r1, #0
 8003242:	485f      	ldr	r0, [pc, #380]	; (80033c0 <restore_from_eeprom+0x434>)
 8003244:	f000 f9fe 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	3301      	adds	r3, #1
 800324c:	220a      	movs	r2, #10
 800324e:	495d      	ldr	r1, [pc, #372]	; (80033c4 <restore_from_eeprom+0x438>)
 8003250:	4618      	mov	r0, r3
 8003252:	f009 fea3 	bl	800cf9c <itoa>
 8003256:	4603      	mov	r3, r0
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f9f2 	bl	8003644 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003260:	2100      	movs	r1, #0
 8003262:	4859      	ldr	r0, [pc, #356]	; (80033c8 <restore_from_eeprom+0x43c>)
 8003264:	f000 f9ee 	bl	8003644 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	015b      	lsls	r3, r3, #5
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <restore_from_eeprom+0x440>)
 800326e:	4413      	add	r3, r2
 8003270:	3302      	adds	r3, #2
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f9e5 	bl	8003644 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800327a:	2100      	movs	r1, #0
 800327c:	4850      	ldr	r0, [pc, #320]	; (80033c0 <restore_from_eeprom+0x434>)
 800327e:	f000 f9e1 	bl	8003644 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	4a51      	ldr	r2, [pc, #324]	; (80033cc <restore_from_eeprom+0x440>)
 8003286:	015b      	lsls	r3, r3, #5
 8003288:	4413      	add	r3, r2
 800328a:	3318      	adds	r3, #24
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	220a      	movs	r2, #10
 8003290:	494c      	ldr	r1, [pc, #304]	; (80033c4 <restore_from_eeprom+0x438>)
 8003292:	4618      	mov	r0, r3
 8003294:	f009 fe82 	bl	800cf9c <itoa>
 8003298:	4603      	mov	r3, r0
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f9d1 	bl	8003644 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80032a2:	2100      	movs	r1, #0
 80032a4:	484a      	ldr	r0, [pc, #296]	; (80033d0 <restore_from_eeprom+0x444>)
 80032a6:	f000 f9cd 	bl	8003644 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	4a47      	ldr	r2, [pc, #284]	; (80033cc <restore_from_eeprom+0x440>)
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	4413      	add	r3, r2
 80032b2:	331c      	adds	r3, #28
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <restore_from_eeprom+0x448>)
 80032ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f9bf 	bl	8003644 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	4a40      	ldr	r2, [pc, #256]	; (80033cc <restore_from_eeprom+0x440>)
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	4413      	add	r3, r2
 80032ce:	331c      	adds	r3, #28
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b13      	cmp	r3, #19
 80032d4:	d803      	bhi.n	80032de <restore_from_eeprom+0x352>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80032d6:	2100      	movs	r1, #0
 80032d8:	483f      	ldr	r0, [pc, #252]	; (80033d8 <restore_from_eeprom+0x44c>)
 80032da:	f000 f9b3 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80032de:	2101      	movs	r1, #1
 80032e0:	483e      	ldr	r0, [pc, #248]	; (80033dc <restore_from_eeprom+0x450>)
 80032e2:	f000 f9af 	bl	8003644 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	3301      	adds	r3, #1
 80032ea:	71fb      	strb	r3, [r7, #7]
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <restore_from_eeprom+0x454>)
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	79fa      	ldrb	r2, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d3a4      	bcc.n	8003240 <restore_from_eeprom+0x2b4>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80032f6:	2101      	movs	r1, #1
 80032f8:	483a      	ldr	r0, [pc, #232]	; (80033e4 <restore_from_eeprom+0x458>)
 80032fa:	f000 f9a3 	bl	8003644 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80032fe:	2100      	movs	r1, #0
 8003300:	4839      	ldr	r0, [pc, #228]	; (80033e8 <restore_from_eeprom+0x45c>)
 8003302:	f000 f99f 	bl	8003644 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <restore_from_eeprom+0x454>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	220a      	movs	r2, #10
 800330c:	492d      	ldr	r1, [pc, #180]	; (80033c4 <restore_from_eeprom+0x438>)
 800330e:	4618      	mov	r0, r3
 8003310:	f009 fe44 	bl	800cf9c <itoa>
 8003314:	4603      	mov	r3, r0
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f993 	bl	8003644 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800331e:	2101      	movs	r1, #1
 8003320:	4832      	ldr	r0, [pc, #200]	; (80033ec <restore_from_eeprom+0x460>)
 8003322:	f000 f98f 	bl	8003644 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8003326:	2101      	movs	r1, #1
 8003328:	4831      	ldr	r0, [pc, #196]	; (80033f0 <restore_from_eeprom+0x464>)
 800332a:	f000 f98b 	bl	8003644 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 800332e:	2300      	movs	r3, #0
 8003330:	71bb      	strb	r3, [r7, #6]
 8003332:	e104      	b.n	800353e <restore_from_eeprom+0x5b2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 8003334:	2100      	movs	r1, #0
 8003336:	4822      	ldr	r0, [pc, #136]	; (80033c0 <restore_from_eeprom+0x434>)
 8003338:	f000 f984 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 800333c:	79bb      	ldrb	r3, [r7, #6]
 800333e:	3301      	adds	r3, #1
 8003340:	220a      	movs	r2, #10
 8003342:	4920      	ldr	r1, [pc, #128]	; (80033c4 <restore_from_eeprom+0x438>)
 8003344:	4618      	mov	r0, r3
 8003346:	f009 fe29 	bl	800cf9c <itoa>
 800334a:	4603      	mov	r3, r0
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f978 	bl	8003644 <send_debug_msg>
			if((services_index +1) < 10)
 8003354:	79bb      	ldrb	r3, [r7, #6]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d803      	bhi.n	8003362 <restore_from_eeprom+0x3d6>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800335a:	2100      	movs	r1, #0
 800335c:	481e      	ldr	r0, [pc, #120]	; (80033d8 <restore_from_eeprom+0x44c>)
 800335e:	f000 f971 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003362:	2100      	movs	r1, #0
 8003364:	4823      	ldr	r0, [pc, #140]	; (80033f4 <restore_from_eeprom+0x468>)
 8003366:	f000 f96d 	bl	8003644 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 800336a:	79bb      	ldrb	r3, [r7, #6]
 800336c:	2234      	movs	r2, #52	; 0x34
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <restore_from_eeprom+0x46c>)
 8003374:	4413      	add	r3, r2
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f963 	bl	8003644 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800337e:	2100      	movs	r1, #0
 8003380:	481e      	ldr	r0, [pc, #120]	; (80033fc <restore_from_eeprom+0x470>)
 8003382:	f000 f95f 	bl	8003644 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	717b      	strb	r3, [r7, #5]
 800338a:	e03c      	b.n	8003406 <restore_from_eeprom+0x47a>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800338c:	797b      	ldrb	r3, [r7, #5]
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <restore_from_eeprom+0x440>)
 8003390:	015b      	lsls	r3, r3, #5
 8003392:	4413      	add	r3, r2
 8003394:	331c      	adds	r3, #28
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	79bb      	ldrb	r3, [r7, #6]
 800339a:	4917      	ldr	r1, [pc, #92]	; (80033f8 <restore_from_eeprom+0x46c>)
 800339c:	2034      	movs	r0, #52	; 0x34
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	440b      	add	r3, r1
 80033a4:	3328      	adds	r3, #40	; 0x28
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d129      	bne.n	8003400 <restore_from_eeprom+0x474>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80033ac:	797b      	ldrb	r3, [r7, #5]
 80033ae:	015b      	lsls	r3, r3, #5
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <restore_from_eeprom+0x440>)
 80033b2:	4413      	add	r3, r2
 80033b4:	3302      	adds	r3, #2
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f943 	bl	8003644 <send_debug_msg>
					break;
 80033be:	e027      	b.n	8003410 <restore_from_eeprom+0x484>
 80033c0:	0800d930 	.word	0x0800d930
 80033c4:	200019a8 	.word	0x200019a8
 80033c8:	0800d934 	.word	0x0800d934
 80033cc:	20001af8 	.word	0x20001af8
 80033d0:	0800d940 	.word	0x0800d940
 80033d4:	20000008 	.word	0x20000008
 80033d8:	0800d948 	.word	0x0800d948
 80033dc:	0800d94c 	.word	0x0800d94c
 80033e0:	20003088 	.word	0x20003088
 80033e4:	0800d8bc 	.word	0x0800d8bc
 80033e8:	0800d954 	.word	0x0800d954
 80033ec:	0800d968 	.word	0x0800d968
 80033f0:	0800d9d4 	.word	0x0800d9d4
 80033f4:	0800da40 	.word	0x0800da40
 80033f8:	20001c38 	.word	0x20001c38
 80033fc:	0800da48 	.word	0x0800da48
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003400:	797b      	ldrb	r3, [r7, #5]
 8003402:	3301      	adds	r3, #1
 8003404:	717b      	strb	r3, [r7, #5]
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <restore_from_eeprom+0x634>)
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	797a      	ldrb	r2, [r7, #5]
 800340c:	429a      	cmp	r2, r3
 800340e:	d3bd      	bcc.n	800338c <restore_from_eeprom+0x400>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003410:	2100      	movs	r1, #0
 8003412:	486c      	ldr	r0, [pc, #432]	; (80035c4 <restore_from_eeprom+0x638>)
 8003414:	f000 f916 	bl	8003644 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003418:	79bb      	ldrb	r3, [r7, #6]
 800341a:	4a6b      	ldr	r2, [pc, #428]	; (80035c8 <restore_from_eeprom+0x63c>)
 800341c:	2134      	movs	r1, #52	; 0x34
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3324      	adds	r3, #36	; 0x24
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	220a      	movs	r2, #10
 800342a:	4968      	ldr	r1, [pc, #416]	; (80035cc <restore_from_eeprom+0x640>)
 800342c:	4618      	mov	r0, r3
 800342e:	f009 fdb5 	bl	800cf9c <itoa>
 8003432:	4603      	mov	r3, r0
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f904 	bl	8003644 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800343c:	2100      	movs	r1, #0
 800343e:	4864      	ldr	r0, [pc, #400]	; (80035d0 <restore_from_eeprom+0x644>)
 8003440:	f000 f900 	bl	8003644 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	4a60      	ldr	r2, [pc, #384]	; (80035c8 <restore_from_eeprom+0x63c>)
 8003448:	2134      	movs	r1, #52	; 0x34
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3328      	adds	r3, #40	; 0x28
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <restore_from_eeprom+0x648>)
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f8f0 	bl	8003644 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	4a58      	ldr	r2, [pc, #352]	; (80035c8 <restore_from_eeprom+0x63c>)
 8003468:	2134      	movs	r1, #52	; 0x34
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3328      	adds	r3, #40	; 0x28
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b13      	cmp	r3, #19
 8003476:	d803      	bhi.n	8003480 <restore_from_eeprom+0x4f4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003478:	2100      	movs	r1, #0
 800347a:	4857      	ldr	r0, [pc, #348]	; (80035d8 <restore_from_eeprom+0x64c>)
 800347c:	f000 f8e2 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003480:	2100      	movs	r1, #0
 8003482:	4856      	ldr	r0, [pc, #344]	; (80035dc <restore_from_eeprom+0x650>)
 8003484:	f000 f8de 	bl	8003644 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8003488:	79bb      	ldrb	r3, [r7, #6]
 800348a:	4a4f      	ldr	r2, [pc, #316]	; (80035c8 <restore_from_eeprom+0x63c>)
 800348c:	2134      	movs	r1, #52	; 0x34
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3315      	adds	r3, #21
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	220a      	movs	r2, #10
 800349a:	494c      	ldr	r1, [pc, #304]	; (80035cc <restore_from_eeprom+0x640>)
 800349c:	4618      	mov	r0, r3
 800349e:	f009 fd7d 	bl	800cf9c <itoa>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f8cc 	bl	8003644 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	4a46      	ldr	r2, [pc, #280]	; (80035c8 <restore_from_eeprom+0x63c>)
 80034b0:	2134      	movs	r1, #52	; 0x34
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3315      	adds	r3, #21
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d803      	bhi.n	80034c8 <restore_from_eeprom+0x53c>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80034c0:	2100      	movs	r1, #0
 80034c2:	4845      	ldr	r0, [pc, #276]	; (80035d8 <restore_from_eeprom+0x64c>)
 80034c4:	f000 f8be 	bl	8003644 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80034c8:	2100      	movs	r1, #0
 80034ca:	4845      	ldr	r0, [pc, #276]	; (80035e0 <restore_from_eeprom+0x654>)
 80034cc:	f000 f8ba 	bl	8003644 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80034d0:	2100      	movs	r1, #0
 80034d2:	4844      	ldr	r0, [pc, #272]	; (80035e4 <restore_from_eeprom+0x658>)
 80034d4:	f000 f8b6 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80034d8:	79bb      	ldrb	r3, [r7, #6]
 80034da:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <restore_from_eeprom+0x63c>)
 80034dc:	2134      	movs	r1, #52	; 0x34
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3320      	adds	r3, #32
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2210      	movs	r2, #16
 80034ea:	4938      	ldr	r1, [pc, #224]	; (80035cc <restore_from_eeprom+0x640>)
 80034ec:	4618      	mov	r0, r3
 80034ee:	f009 fd55 	bl	800cf9c <itoa>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f8a4 	bl	8003644 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80034fc:	2100      	movs	r1, #0
 80034fe:	4837      	ldr	r0, [pc, #220]	; (80035dc <restore_from_eeprom+0x650>)
 8003500:	f000 f8a0 	bl	8003644 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003504:	2100      	movs	r1, #0
 8003506:	4837      	ldr	r0, [pc, #220]	; (80035e4 <restore_from_eeprom+0x658>)
 8003508:	f000 f89c 	bl	8003644 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 800350c:	79bb      	ldrb	r3, [r7, #6]
 800350e:	4a2e      	ldr	r2, [pc, #184]	; (80035c8 <restore_from_eeprom+0x63c>)
 8003510:	2134      	movs	r1, #52	; 0x34
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	332a      	adds	r3, #42	; 0x2a
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2210      	movs	r2, #16
 800351e:	492b      	ldr	r1, [pc, #172]	; (80035cc <restore_from_eeprom+0x640>)
 8003520:	4618      	mov	r0, r3
 8003522:	f009 fd3b 	bl	800cf9c <itoa>
 8003526:	4603      	mov	r3, r0
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f88a 	bl	8003644 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003530:	2101      	movs	r1, #1
 8003532:	482d      	ldr	r0, [pc, #180]	; (80035e8 <restore_from_eeprom+0x65c>)
 8003534:	f000 f886 	bl	8003644 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003538:	79bb      	ldrb	r3, [r7, #6]
 800353a:	3301      	adds	r3, #1
 800353c:	71bb      	strb	r3, [r7, #6]
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <restore_from_eeprom+0x634>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	79ba      	ldrb	r2, [r7, #6]
 8003544:	429a      	cmp	r2, r3
 8003546:	f4ff aef5 	bcc.w	8003334 <restore_from_eeprom+0x3a8>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800354a:	2101      	movs	r1, #1
 800354c:	4827      	ldr	r0, [pc, #156]	; (80035ec <restore_from_eeprom+0x660>)
 800354e:	f000 f879 	bl	8003644 <send_debug_msg>

		//restore volume level
		eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003552:	2201      	movs	r2, #1
 8003554:	4926      	ldr	r1, [pc, #152]	; (80035f0 <restore_from_eeprom+0x664>)
 8003556:	200b      	movs	r0, #11
 8003558:	f001 fed4 	bl	8005304 <eeprom_read>
		Si468x_set_audio_volume(dab_management.audio_volume);
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <restore_from_eeprom+0x634>)
 800355e:	7b9b      	ldrb	r3, [r3, #14]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fc4b 	bl	8002dfc <Si468x_set_audio_volume>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, 0);
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <restore_from_eeprom+0x634>)
 8003568:	791b      	ldrb	r3, [r3, #4]
 800356a:	4619      	mov	r1, r3
 800356c:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <restore_from_eeprom+0x63c>)
 800356e:	2334      	movs	r3, #52	; 0x34
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3328      	adds	r3, #40	; 0x28
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fa99 	bl	8001ab4 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <restore_from_eeprom+0x634>)
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fc6e 	bl	8002e68 <play_station>
 800358c:	e013      	b.n	80035b6 <restore_from_eeprom+0x62a>

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 800358e:	2101      	movs	r1, #1
 8003590:	4818      	ldr	r0, [pc, #96]	; (80035f4 <restore_from_eeprom+0x668>)
 8003592:	f000 f857 	bl	8003644 <send_debug_msg>
		dab_management.actual_freq = 0;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <restore_from_eeprom+0x634>)
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <restore_from_eeprom+0x634>)
 800359e:	2200      	movs	r2, #0
 80035a0:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <restore_from_eeprom+0x634>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <restore_from_eeprom+0x634>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <restore_from_eeprom+0x634>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	70da      	strb	r2, [r3, #3]
	}
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20003088 	.word	0x20003088
 80035c4:	0800da48 	.word	0x0800da48
 80035c8:	20001c38 	.word	0x20001c38
 80035cc:	200019a8 	.word	0x200019a8
 80035d0:	0800d940 	.word	0x0800d940
 80035d4:	20000008 	.word	0x20000008
 80035d8:	0800d948 	.word	0x0800d948
 80035dc:	0800da40 	.word	0x0800da40
 80035e0:	0800da4c 	.word	0x0800da4c
 80035e4:	0800da54 	.word	0x0800da54
 80035e8:	0800da58 	.word	0x0800da58
 80035ec:	0800d968 	.word	0x0800d968
 80035f0:	20003096 	.word	0x20003096
 80035f4:	0800dc68 	.word	0x0800dc68

080035f8 <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
	return services_list;
 80035fc:	4b02      	ldr	r3, [pc, #8]	; (8003608 <get_dab_service_list+0x10>)
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20001c38 	.word	0x20001c38

0800360c <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
	return ensembles_list;
 8003610:	4b02      	ldr	r3, [pc, #8]	; (800361c <get_dab_ensemble_list+0x10>)
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20001af8 	.word	0x20001af8

08003620 <get_dab_management>:

dab_management_t get_dab_management()
{
 8003620:	b490      	push	{r4, r7}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	return dab_management;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <get_dab_management+0x20>)
 800362c:	461c      	mov	r4, r3
 800362e:	4613      	mov	r3, r2
 8003630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bc90      	pop	{r4, r7}
 800363e:	4770      	bx	lr
 8003640:	20003088 	.word	0x20003088

08003644 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fc fdb9 	bl	80001c8 <strlen>
 8003656:	4603      	mov	r3, r0
 8003658:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	b29a      	uxth	r2, r3
 800365e:	2364      	movs	r3, #100	; 0x64
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	480a      	ldr	r0, [pc, #40]	; (800368c <send_debug_msg+0x48>)
 8003664:	f009 f8e9 	bl	800c83a <HAL_UART_Transmit>

	if(is_crlf)
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 800366e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003672:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003674:	f107 010c 	add.w	r1, r7, #12
 8003678:	2364      	movs	r3, #100	; 0x64
 800367a:	2202      	movs	r2, #2
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <send_debug_msg+0x48>)
 800367e:	f009 f8dc 	bl	800c83a <HAL_UART_Transmit>
	}
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20003418 	.word	0x20003418

08003690 <Display_clear_screen>:

static uint8_t display_freeze = 0;


void Display_clear_screen()
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003696:	2000      	movs	r0, #0
 8003698:	f7fd f90a 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 800369c:	2311      	movs	r3, #17
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80036a4:	2211      	movs	r2, #17
 80036a6:	2100      	movs	r1, #0
 80036a8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80036ac:	f7fd f98b 	bl	80009c6 <ILI9341_Draw_Line>
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <Display_booting_screen>:

void Display_booting_screen()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fd f8f6 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 80036c4:	2302      	movs	r3, #2
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <Display_booting_screen+0xc4>)
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d2:	2128      	movs	r1, #40	; 0x28
 80036d4:	205f      	movs	r0, #95	; 0x5f
 80036d6:	f7fd f9f7 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 80036da:	2302      	movs	r3, #2
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	4b28      	ldr	r3, [pc, #160]	; (8003780 <Display_booting_screen+0xc8>)
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e8:	213c      	movs	r1, #60	; 0x3c
 80036ea:	2046      	movs	r0, #70	; 0x46
 80036ec:	f7fd f9ec 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 80036f0:	2302      	movs	r3, #2
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	4b23      	ldr	r3, [pc, #140]	; (8003784 <Display_booting_screen+0xcc>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fe:	2150      	movs	r1, #80	; 0x50
 8003700:	2082      	movs	r0, #130	; 0x82
 8003702:	f7fd f9e1 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003706:	2302      	movs	r3, #2
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <Display_booting_screen+0xd0>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2300      	movs	r3, #0
 8003710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003714:	2164      	movs	r1, #100	; 0x64
 8003716:	2064      	movs	r0, #100	; 0x64
 8003718:	f7fd f9d6 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 800371c:	2302      	movs	r3, #2
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <Display_booting_screen+0xd4>)
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372a:	2178      	movs	r1, #120	; 0x78
 800372c:	205a      	movs	r0, #90	; 0x5a
 800372e:	f7fd f9cb 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003732:	2302      	movs	r3, #2
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <Display_booting_screen+0xd8>)
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003740:	218c      	movs	r1, #140	; 0x8c
 8003742:	2032      	movs	r0, #50	; 0x32
 8003744:	f7fd f9c0 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003748:	2302      	movs	r3, #2
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <Display_booting_screen+0xdc>)
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003756:	21a0      	movs	r1, #160	; 0xa0
 8003758:	205a      	movs	r0, #90	; 0x5a
 800375a:	f7fd f9b5 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 800375e:	2302      	movs	r3, #2
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <Display_booting_screen+0xe0>)
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800376c:	21b4      	movs	r1, #180	; 0xb4
 800376e:	2078      	movs	r0, #120	; 0x78
 8003770:	f7fd f9aa 	bl	8000ac8 <ILI9341_Draw_String>
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	0800dd30 	.word	0x0800dd30
 8003780:	0800dd40 	.word	0x0800dd40
 8003784:	0800dd58 	.word	0x0800dd58
 8003788:	0800dd60 	.word	0x0800dd60
 800378c:	0800dd70 	.word	0x0800dd70
 8003790:	0800dd84 	.word	0x0800dd84
 8003794:	0800dda0 	.word	0x0800dda0
 8003798:	0800ddb4 	.word	0x0800ddb4

0800379c <Display_main_screen_background>:

void Display_main_screen_background()
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80037a2:	f7ff ff75 	bl	8003690 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2); //Naglowek
 80037a6:	2302      	movs	r3, #2
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	4b40      	ldr	r3, [pc, #256]	; (80038ac <Display_main_screen_background+0x110>)
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b4:	2101      	movs	r1, #1
 80037b6:	2005      	movs	r0, #5
 80037b8:	f7fd f986 	bl	8000ac8 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 80037bc:	2328      	movs	r3, #40	; 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	238c      	movs	r3, #140	; 0x8c
 80037c2:	2214      	movs	r2, #20
 80037c4:	2105      	movs	r1, #5
 80037c6:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80037ca:	f7fd f8db 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 80037ce:	2341      	movs	r3, #65	; 0x41
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	238c      	movs	r3, #140	; 0x8c
 80037d4:	222d      	movs	r2, #45	; 0x2d
 80037d6:	2105      	movs	r1, #5
 80037d8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80037dc:	f7fd f8d2 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 80037e0:	235a      	movs	r3, #90	; 0x5a
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	238c      	movs	r3, #140	; 0x8c
 80037e6:	2246      	movs	r2, #70	; 0x46
 80037e8:	2105      	movs	r1, #5
 80037ea:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80037ee:	f7fd f8c9 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 80037f2:	2373      	movs	r3, #115	; 0x73
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	238c      	movs	r3, #140	; 0x8c
 80037f8:	225f      	movs	r2, #95	; 0x5f
 80037fa:	2105      	movs	r1, #5
 80037fc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003800:	f7fd f8c0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003804:	238c      	movs	r3, #140	; 0x8c
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	238c      	movs	r3, #140	; 0x8c
 800380a:	2278      	movs	r2, #120	; 0x78
 800380c:	2105      	movs	r1, #5
 800380e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003812:	f7fd f8b7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003816:	23a5      	movs	r3, #165	; 0xa5
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	238c      	movs	r3, #140	; 0x8c
 800381c:	2291      	movs	r2, #145	; 0x91
 800381e:	2105      	movs	r1, #5
 8003820:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003824:	f7fd f8ae 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003828:	23be      	movs	r3, #190	; 0xbe
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	238c      	movs	r3, #140	; 0x8c
 800382e:	22aa      	movs	r2, #170	; 0xaa
 8003830:	2105      	movs	r1, #5
 8003832:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003836:	f7fd f8a5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 800383a:	23be      	movs	r3, #190	; 0xbe
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	f240 133b 	movw	r3, #315	; 0x13b
 8003842:	2214      	movs	r2, #20
 8003844:	2191      	movs	r1, #145	; 0x91
 8003846:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800384a:	f7fd f89b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 800384e:	23eb      	movs	r3, #235	; 0xeb
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	239d      	movs	r3, #157	; 0x9d
 8003854:	22c3      	movs	r2, #195	; 0xc3
 8003856:	2105      	movs	r1, #5
 8003858:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800385c:	f7fd f892 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003860:	23eb      	movs	r3, #235	; 0xeb
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f240 133b 	movw	r3, #315	; 0x13b
 8003868:	22c3      	movs	r2, #195	; 0xc3
 800386a:	21a3      	movs	r1, #163	; 0xa3
 800386c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003870:	f7fd f888 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003874:	2302      	movs	r3, #2
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <Display_main_screen_background+0x114>)
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003884:	21cf      	movs	r1, #207	; 0xcf
 8003886:	2032      	movs	r0, #50	; 0x32
 8003888:	f7fd f91e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 800388c:	2302      	movs	r3, #2
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <Display_main_screen_background+0x118>)
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800389c:	21cf      	movs	r1, #207	; 0xcf
 800389e:	20c0      	movs	r0, #192	; 0xc0
 80038a0:	f7fd f912 	bl	8000ac8 <ILI9341_Draw_String>
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	0800ddc0 	.word	0x0800ddc0
 80038b0:	0800ddd0 	.word	0x0800ddd0
 80038b4:	0800dddc 	.word	0x0800dddc

080038b8 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 80038b8:	b082      	sub	sp, #8
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af02      	add	r7, sp, #8
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
 80038c4:	f107 0118 	add.w	r1, r7, #24
 80038c8:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 80038cc:	7efb      	ldrb	r3, [r7, #27]
 80038ce:	461a      	mov	r2, r3
 80038d0:	2334      	movs	r3, #52	; 0x34
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	461a      	mov	r2, r3
 80038dc:	2302      	movs	r3, #2
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	9200      	str	r2, [sp, #0]
 80038e2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ea:	2117      	movs	r1, #23
 80038ec:	2008      	movs	r0, #8
 80038ee:	f7fd f8eb 	bl	8000ac8 <ILI9341_Draw_String>

	//Bar1
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "", 2);
 80038f2:	2302      	movs	r3, #2
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	4b96      	ldr	r3, [pc, #600]	; (8003b50 <Display_main_screen_data+0x298>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80038fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003902:	2130      	movs	r1, #48	; 0x30
 8003904:	2008      	movs	r0, #8
 8003906:	f7fd f8df 	bl	8000ac8 <ILI9341_Draw_String>

	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "", 2);
 800390a:	2302      	movs	r3, #2
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	4b90      	ldr	r3, [pc, #576]	; (8003b50 <Display_main_screen_data+0x298>)
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800391a:	2149      	movs	r1, #73	; 0x49
 800391c:	2008      	movs	r0, #8
 800391e:	f7fd f8d3 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);
 8003922:	2302      	movs	r3, #2
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	4b8a      	ldr	r3, [pc, #552]	; (8003b50 <Display_main_screen_data+0x298>)
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800392e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003932:	2162      	movs	r1, #98	; 0x62
 8003934:	2008      	movs	r0, #8
 8003936:	f7fd f8c7 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 800393a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800393c:	2b63      	cmp	r3, #99	; 0x63
 800393e:	d81e      	bhi.n	800397e <Display_main_screen_data+0xc6>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003940:	2302      	movs	r3, #2
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	4b83      	ldr	r3, [pc, #524]	; (8003b54 <Display_main_screen_data+0x29c>)
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800394c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003950:	217b      	movs	r1, #123	; 0x7b
 8003952:	2008      	movs	r0, #8
 8003954:	f7fd f8b8 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003958:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800395a:	220a      	movs	r2, #10
 800395c:	497e      	ldr	r1, [pc, #504]	; (8003b58 <Display_main_screen_data+0x2a0>)
 800395e:	4618      	mov	r0, r3
 8003960:	f009 fb1c 	bl	800cf9c <itoa>
 8003964:	4603      	mov	r3, r0
 8003966:	2202      	movs	r2, #2
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003974:	217b      	movs	r1, #123	; 0x7b
 8003976:	2011      	movs	r0, #17
 8003978:	f7fd f8a6 	bl	8000ac8 <ILI9341_Draw_String>
 800397c:	e011      	b.n	80039a2 <Display_main_screen_data+0xea>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 800397e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003980:	220a      	movs	r2, #10
 8003982:	4975      	ldr	r1, [pc, #468]	; (8003b58 <Display_main_screen_data+0x2a0>)
 8003984:	4618      	mov	r0, r3
 8003986:	f009 fb09 	bl	800cf9c <itoa>
 800398a:	4603      	mov	r3, r0
 800398c:	2202      	movs	r2, #2
 800398e:	9201      	str	r2, [sp, #4]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399a:	217b      	movs	r1, #123	; 0x7b
 800399c:	2008      	movs	r0, #8
 800399e:	f7fd f893 	bl	8000ac8 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 80039a2:	2302      	movs	r3, #2
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <Display_main_screen_data+0x2a4>)
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b2:	217b      	movs	r1, #123	; 0x7b
 80039b4:	2024      	movs	r0, #36	; 0x24
 80039b6:	f7fd f887 	bl	8000ac8 <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 80039ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039bc:	220a      	movs	r2, #10
 80039be:	4966      	ldr	r1, [pc, #408]	; (8003b58 <Display_main_screen_data+0x2a0>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f009 faeb 	bl	800cf9c <itoa>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2202      	movs	r2, #2
 80039ca:	9201      	str	r2, [sp, #4]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d6:	217b      	movs	r1, #123	; 0x7b
 80039d8:	204e      	movs	r0, #78	; 0x4e
 80039da:	f7fd f875 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 80039de:	2302      	movs	r3, #2
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	4b5f      	ldr	r3, [pc, #380]	; (8003b60 <Display_main_screen_data+0x2a8>)
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80039ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ee:	217b      	movs	r1, #123	; 0x7b
 80039f0:	207a      	movs	r0, #122	; 0x7a
 80039f2:	f7fd f869 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e022      	b.n	8003a42 <Display_main_screen_data+0x18a>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	015b      	lsls	r3, r3, #5
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	7f1a      	ldrb	r2, [r3, #28]
 8003a06:	7efb      	ldrb	r3, [r7, #27]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2334      	movs	r3, #52	; 0x34
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	440b      	add	r3, r1
 8003a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d10f      	bne.n	8003a3c <Display_main_screen_data+0x184>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	015b      	lsls	r3, r3, #5
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	3302      	adds	r3, #2
 8003a26:	2202      	movs	r2, #2
 8003a28:	9201      	str	r2, [sp, #4]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a34:	2194      	movs	r1, #148	; 0x94
 8003a36:	2008      	movs	r0, #8
 8003a38:	f7fd f846 	bl	8000ac8 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	7e7b      	ldrb	r3, [r7, #25]
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3d8      	bcc.n	80039fc <Display_main_screen_data+0x144>
		}
	}

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003a4a:	7efb      	ldrb	r3, [r7, #27]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2334      	movs	r3, #52	; 0x34
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <Display_main_screen_data+0x2ac>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	220a      	movs	r2, #10
 8003a64:	493c      	ldr	r1, [pc, #240]	; (8003b58 <Display_main_screen_data+0x2a0>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f009 fa98 	bl	800cf9c <itoa>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2202      	movs	r2, #2
 8003a70:	9201      	str	r2, [sp, #4]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7c:	21ad      	movs	r1, #173	; 0xad
 8003a7e:	2008      	movs	r0, #8
 8003a80:	f7fd f822 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003a84:	2302      	movs	r3, #2
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <Display_main_screen_data+0x2b0>)
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a94:	21ad      	movs	r1, #173	; 0xad
 8003a96:	201f      	movs	r0, #31
 8003a98:	f7fd f816 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003a9c:	7efb      	ldrb	r3, [r7, #27]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2334      	movs	r3, #52	; 0x34
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aac:	4b2d      	ldr	r3, [pc, #180]	; (8003b64 <Display_main_screen_data+0x2ac>)
 8003aae:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab2:	099b      	lsrs	r3, r3, #6
 8003ab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	220a      	movs	r2, #10
 8003ac0:	4925      	ldr	r1, [pc, #148]	; (8003b58 <Display_main_screen_data+0x2a0>)
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f009 fa6a 	bl	800cf9c <itoa>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2202      	movs	r2, #2
 8003acc:	9201      	str	r2, [sp, #4]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad8:	21ad      	movs	r1, #173	; 0xad
 8003ada:	2026      	movs	r0, #38	; 0x26
 8003adc:	f7fc fff4 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <Display_main_screen_data+0x2b4>)
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af0:	21ad      	movs	r1, #173	; 0xad
 8003af2:	2041      	movs	r0, #65	; 0x41
 8003af4:	f7fc ffe8 	bl	8000ac8 <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003af8:	2302      	movs	r3, #2
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <Display_main_screen_data+0x2b8>)
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b08:	21ad      	movs	r1, #173	; 0xad
 8003b0a:	205f      	movs	r0, #95	; 0x5f
 8003b0c:	f7fc ffdc 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003b10:	7efb      	ldrb	r3, [r7, #27]
 8003b12:	461a      	mov	r2, r3
 8003b14:	2334      	movs	r3, #52	; 0x34
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <Display_main_screen_data+0x2bc>)
 8003b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	9201      	str	r2, [sp, #4]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b38:	21ad      	movs	r1, #173	; 0xad
 8003b3a:	2073      	movs	r0, #115	; 0x73
 8003b3c:	f7fc ffc4 	bl	8000ac8 <ILI9341_Draw_String>

	//Station picture

}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b4a:	b002      	add	sp, #8
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	0800ddec 	.word	0x0800ddec
 8003b54:	0800ddf0 	.word	0x0800ddf0
 8003b58:	20003098 	.word	0x20003098
 8003b5c:	0800ddf4 	.word	0x0800ddf4
 8003b60:	0800ddfc 	.word	0x0800ddfc
 8003b64:	10624dd3 	.word	0x10624dd3
 8003b68:	0800de00 	.word	0x0800de00
 8003b6c:	0800de04 	.word	0x0800de04
 8003b70:	0800de08 	.word	0x0800de08
 8003b74:	200000ac 	.word	0x200000ac

08003b78 <Display_main_screen_empty>:

void Display_main_screen_empty()
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af02      	add	r7, sp, #8
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003b7e:	2302      	movs	r3, #2
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <Display_main_screen_empty+0xb4>)
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b8e:	2117      	movs	r1, #23
 8003b90:	2008      	movs	r0, #8
 8003b92:	f7fc ff99 	bl	8000ac8 <ILI9341_Draw_String>

	//Bar1
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003b96:	2302      	movs	r3, #2
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <Display_main_screen_empty+0xb8>)
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba6:	2130      	movs	r1, #48	; 0x30
 8003ba8:	2008      	movs	r0, #8
 8003baa:	f7fc ff8d 	bl	8000ac8 <ILI9341_Draw_String>

	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003bae:	2302      	movs	r3, #2
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <Display_main_screen_empty+0xbc>)
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bbe:	2149      	movs	r1, #73	; 0x49
 8003bc0:	2008      	movs	r0, #8
 8003bc2:	f7fc ff81 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <Display_main_screen_empty+0xc0>)
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd6:	2162      	movs	r1, #98	; 0x62
 8003bd8:	2008      	movs	r0, #8
 8003bda:	f7fc ff75 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr4
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003bde:	2302      	movs	r3, #2
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <Display_main_screen_empty+0xc4>)
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bee:	217b      	movs	r1, #123	; 0x7b
 8003bf0:	2008      	movs	r0, #8
 8003bf2:	f7fc ff69 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)

	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <Display_main_screen_empty+0xc8>)
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c06:	2194      	movs	r1, #148	; 0x94
 8003c08:	2008      	movs	r0, #8
 8003c0a:	f7fc ff5d 	bl	8000ac8 <ILI9341_Draw_String>

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8003c0e:	2302      	movs	r3, #2
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <Display_main_screen_empty+0xc8>)
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1e:	21ad      	movs	r1, #173	; 0xad
 8003c20:	2008      	movs	r0, #8
 8003c22:	f7fc ff51 	bl	8000ac8 <ILI9341_Draw_String>

	//Station picture

}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	0800de0c 	.word	0x0800de0c
 8003c30:	0800de20 	.word	0x0800de20
 8003c34:	0800de34 	.word	0x0800de34
 8003c38:	0800de48 	.word	0x0800de48
 8003c3c:	0800de5c 	.word	0x0800de5c
 8003c40:	0800de70 	.word	0x0800de70

08003c44 <Display_stations_list_background>:


void Display_stations_list_background()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003c4a:	f7ff fd21 	bl	8003690 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2); //Naglowek
 8003c4e:	2302      	movs	r3, #2
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <Display_stations_list_background+0x174>)
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	2005      	movs	r0, #5
 8003c60:	f7fc ff32 	bl	8000ac8 <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8003c64:	2332      	movs	r3, #50	; 0x32
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	f240 131d 	movw	r3, #285	; 0x11d
 8003c6c:	2214      	movs	r2, #20
 8003c6e:	2105      	movs	r1, #5
 8003c70:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003c74:	f7fc fe86 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8003c78:	2355      	movs	r3, #85	; 0x55
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	f240 131d 	movw	r3, #285	; 0x11d
 8003c80:	2237      	movs	r2, #55	; 0x37
 8003c82:	2105      	movs	r1, #5
 8003c84:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003c88:	f7fc fe7c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8003c8c:	2378      	movs	r3, #120	; 0x78
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	f240 131d 	movw	r3, #285	; 0x11d
 8003c94:	225a      	movs	r2, #90	; 0x5a
 8003c96:	2105      	movs	r1, #5
 8003c98:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003c9c:	f7fc fe72 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8003ca0:	239b      	movs	r3, #155	; 0x9b
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	f240 131d 	movw	r3, #285	; 0x11d
 8003ca8:	227d      	movs	r2, #125	; 0x7d
 8003caa:	2105      	movs	r1, #5
 8003cac:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003cb0:	f7fc fe68 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8003cb4:	23be      	movs	r3, #190	; 0xbe
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f240 131d 	movw	r3, #285	; 0x11d
 8003cbc:	22a0      	movs	r2, #160	; 0xa0
 8003cbe:	2105      	movs	r1, #5
 8003cc0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003cc4:	f7fc fe5e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8003cc8:	2366      	movs	r3, #102	; 0x66
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f240 133b 	movw	r3, #315	; 0x13b
 8003cd0:	2214      	movs	r2, #20
 8003cd2:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003cd6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003cda:	f7fc fe53 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8003cde:	2302      	movs	r3, #2
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <Display_stations_list_background+0x178>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cee:	2138      	movs	r1, #56	; 0x38
 8003cf0:	f240 1027 	movw	r0, #295	; 0x127
 8003cf4:	f7fc fee8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <Display_stations_list_background+0x17c>)
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d08:	2138      	movs	r1, #56	; 0x38
 8003d0a:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8003d0e:	f7fc fedb 	bl	8000ac8 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8003d12:	23be      	movs	r3, #190	; 0xbe
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f240 133b 	movw	r3, #315	; 0x13b
 8003d1a:	226c      	movs	r2, #108	; 0x6c
 8003d1c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003d20:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003d24:	f7fc fe2e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8003d28:	2302      	movs	r3, #2
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <Display_stations_list_background+0x17c>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d38:	2192      	movs	r1, #146	; 0x92
 8003d3a:	f240 1027 	movw	r0, #295	; 0x127
 8003d3e:	f7fc fec3 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 8003d42:	2302      	movs	r3, #2
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <Display_stations_list_background+0x178>)
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d52:	2192      	movs	r1, #146	; 0x92
 8003d54:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8003d58:	f7fc feb6 	bl	8000ac8 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003d5c:	23eb      	movs	r3, #235	; 0xeb
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	239d      	movs	r3, #157	; 0x9d
 8003d62:	22c3      	movs	r2, #195	; 0xc3
 8003d64:	2105      	movs	r1, #5
 8003d66:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003d6a:	f7fc fe0b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003d6e:	23eb      	movs	r3, #235	; 0xeb
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	f240 133b 	movw	r3, #315	; 0x13b
 8003d76:	22c3      	movs	r2, #195	; 0xc3
 8003d78:	21a3      	movs	r1, #163	; 0xa3
 8003d7a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003d7e:	f7fc fe01 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8003d82:	2302      	movs	r3, #2
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <Display_stations_list_background+0x180>)
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d92:	21cf      	movs	r1, #207	; 0xcf
 8003d94:	2025      	movs	r0, #37	; 0x25
 8003d96:	f7fc fe97 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <Display_stations_list_background+0x184>)
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003daa:	21cf      	movs	r1, #207	; 0xcf
 8003dac:	20c3      	movs	r0, #195	; 0xc3
 8003dae:	f7fc fe8b 	bl	8000ac8 <ILI9341_Draw_String>

}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	0800de84 	.word	0x0800de84
 8003dbc:	0800de98 	.word	0x0800de98
 8003dc0:	0800de9c 	.word	0x0800de9c
 8003dc4:	0800dea0 	.word	0x0800dea0
 8003dc8:	0800deac 	.word	0x0800deac

08003dcc <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8003dcc:	b084      	sub	sp, #16
 8003dce:	b590      	push	{r4, r7, lr}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af02      	add	r7, sp, #8
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(_dab_management.total_services)
 8003dde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8133 	beq.w	800404e <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e12a      	b.n	8004044 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 8003dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003df2:	4619      	mov	r1, r3
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	4299      	cmp	r1, r3
 8003dfc:	dc02      	bgt.n	8003e04 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	425b      	negs	r3, r3
 8003e02:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	dc30      	bgt.n	8003e70 <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00da      	lsls	r2, r3, #3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	331c      	adds	r3, #28
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	2302      	movs	r3, #2
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	4bac      	ldr	r3, [pc, #688]	; (80040d4 <Display_stations_list_data+0x308>)
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e2e:	2008      	movs	r0, #8
 8003e30:	f7fc fe4a 	bl	8000ac8 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00da      	lsls	r2, r3, #3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	331c      	adds	r3, #28
 8003e42:	461c      	mov	r4, r3
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	220a      	movs	r2, #10
 8003e4e:	49a2      	ldr	r1, [pc, #648]	; (80040d8 <Display_stations_list_data+0x30c>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f009 f8a3 	bl	800cf9c <itoa>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2202      	movs	r2, #2
 8003e5a:	9201      	str	r2, [sp, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e66:	4621      	mov	r1, r4
 8003e68:	2011      	movs	r0, #17
 8003e6a:	f7fc fe2d 	bl	8000ac8 <ILI9341_Draw_String>
 8003e6e:	e01c      	b.n	8003eaa <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	00da      	lsls	r2, r3, #3
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	331c      	adds	r3, #28
 8003e7e:	461c      	mov	r4, r3
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	3301      	adds	r3, #1
 8003e88:	220a      	movs	r2, #10
 8003e8a:	4993      	ldr	r1, [pc, #588]	; (80040d8 <Display_stations_list_data+0x30c>)
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f009 f885 	bl	800cf9c <itoa>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2202      	movs	r2, #2
 8003e96:	9201      	str	r2, [sp, #4]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	2008      	movs	r0, #8
 8003ea6:	f7fc fe0f 	bl	8000ac8 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00da      	lsls	r2, r3, #3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	331c      	adds	r3, #28
 8003eb8:	4619      	mov	r1, r3
 8003eba:	2302      	movs	r3, #2
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	4b87      	ldr	r3, [pc, #540]	; (80040dc <Display_stations_list_data+0x310>)
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eca:	2018      	movs	r0, #24
 8003ecc:	f7fc fdfc 	bl	8000ac8 <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00da      	lsls	r2, r3, #3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	331c      	adds	r3, #28
 8003ede:	4619      	mov	r1, r3
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2334      	movs	r3, #52	; 0x34
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef0:	4413      	add	r3, r2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	9200      	str	r2, [sp, #0]
 8003efa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f02:	2022      	movs	r0, #34	; 0x22
 8003f04:	f7fc fde0 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00da      	lsls	r2, r3, #3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	331c      	adds	r3, #28
 8003f16:	4619      	mov	r1, r3
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2334      	movs	r3, #52	; 0x34
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f28:	4413      	add	r3, r2
 8003f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b6b      	ldr	r3, [pc, #428]	; (80040e0 <Display_stations_list_data+0x314>)
 8003f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f36:	2202      	movs	r2, #2
 8003f38:	9201      	str	r2, [sp, #4]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f44:	20ab      	movs	r0, #171	; 0xab
 8003f46:	f7fc fdbf 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00da      	lsls	r2, r3, #3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	331c      	adds	r3, #28
 8003f58:	461c      	mov	r4, r3
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4413      	add	r3, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	2334      	movs	r3, #52	; 0x34
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6a:	4413      	add	r3, r2
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <Display_stations_list_data+0x318>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	220a      	movs	r2, #10
 8003f78:	4957      	ldr	r1, [pc, #348]	; (80040d8 <Display_stations_list_data+0x30c>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f009 f80e 	bl	800cf9c <itoa>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2202      	movs	r2, #2
 8003f84:	9201      	str	r2, [sp, #4]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f90:	4621      	mov	r1, r4
 8003f92:	20ca      	movs	r0, #202	; 0xca
 8003f94:	f7fc fd98 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00da      	lsls	r2, r3, #3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	331c      	adds	r3, #28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	2302      	movs	r3, #2
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <Display_stations_list_data+0x310>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fb8:	20e1      	movs	r0, #225	; 0xe1
 8003fba:	f7fc fd85 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00da      	lsls	r2, r3, #3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	331c      	adds	r3, #28
 8003fcc:	461c      	mov	r4, r3
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2334      	movs	r3, #52	; 0x34
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fde:	4413      	add	r3, r2
 8003fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fe2:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <Display_stations_list_data+0x318>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	220a      	movs	r2, #10
 8003ff6:	4938      	ldr	r1, [pc, #224]	; (80040d8 <Display_stations_list_data+0x30c>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f008 ffcf 	bl	800cf9c <itoa>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2202      	movs	r2, #2
 8004002:	9201      	str	r2, [sp, #4]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800400a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400e:	4621      	mov	r1, r4
 8004010:	20e8      	movs	r0, #232	; 0xe8
 8004012:	f7fc fd59 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00da      	lsls	r2, r3, #3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	331c      	adds	r3, #28
 8004024:	4619      	mov	r1, r3
 8004026:	2302      	movs	r3, #2
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <Display_stations_list_data+0x31c>)
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004036:	f240 1003 	movw	r0, #259	; 0x103
 800403a:	f7fc fd45 	bl	8000ac8 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	3301      	adds	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b04      	cmp	r3, #4
 8004048:	f67f aed1 	bls.w	8003dee <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 800404c:	e03b      	b.n	80040c6 <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 800404e:	2302      	movs	r3, #2
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	4b26      	ldr	r3, [pc, #152]	; (80040ec <Display_stations_list_data+0x320>)
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800405a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800405e:	211c      	movs	r1, #28
 8004060:	2008      	movs	r0, #8
 8004062:	f7fc fd31 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 8004066:	2302      	movs	r3, #2
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <Display_stations_list_data+0x324>)
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004076:	213f      	movs	r1, #63	; 0x3f
 8004078:	2008      	movs	r0, #8
 800407a:	f7fc fd25 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 800407e:	2302      	movs	r3, #2
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <Display_stations_list_data+0x328>)
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800408a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800408e:	2162      	movs	r1, #98	; 0x62
 8004090:	2008      	movs	r0, #8
 8004092:	f7fc fd19 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 8004096:	2302      	movs	r3, #2
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <Display_stations_list_data+0x32c>)
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a6:	2185      	movs	r1, #133	; 0x85
 80040a8:	2008      	movs	r0, #8
 80040aa:	f7fc fd0d 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 80040ae:	2302      	movs	r3, #2
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <Display_stations_list_data+0x330>)
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040be:	21a8      	movs	r1, #168	; 0xa8
 80040c0:	2008      	movs	r0, #8
 80040c2:	f7fc fd01 	bl	8000ac8 <ILI9341_Draw_String>
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040d0:	b004      	add	sp, #16
 80040d2:	4770      	bx	lr
 80040d4:	0800ddf0 	.word	0x0800ddf0
 80040d8:	20003098 	.word	0x20003098
 80040dc:	0800de00 	.word	0x0800de00
 80040e0:	200000ac 	.word	0x200000ac
 80040e4:	10624dd3 	.word	0x10624dd3
 80040e8:	0800de04 	.word	0x0800de04
 80040ec:	0800deb8 	.word	0x0800deb8
 80040f0:	0800ded0 	.word	0x0800ded0
 80040f4:	0800dee8 	.word	0x0800dee8
 80040f8:	0800df00 	.word	0x0800df00
 80040fc:	0800df1c 	.word	0x0800df1c

08004100 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8004106:	f7ff fac3 	bl	8003690 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2); //Naglowek
 800410a:	2302      	movs	r3, #2
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	4b64      	ldr	r3, [pc, #400]	; (80042a0 <Display_scanning_screen_background+0x1a0>)
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004118:	2101      	movs	r1, #1
 800411a:	2005      	movs	r0, #5
 800411c:	f7fc fcd4 	bl	8000ac8 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004120:	2328      	movs	r3, #40	; 0x28
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	f240 133b 	movw	r3, #315	; 0x13b
 8004128:	2214      	movs	r2, #20
 800412a:	2105      	movs	r1, #5
 800412c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004130:	f7fc fc28 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 8004134:	2302      	movs	r3, #2
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	4b5a      	ldr	r3, [pc, #360]	; (80042a4 <Display_scanning_screen_background+0x1a4>)
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004144:	2117      	movs	r1, #23
 8004146:	2050      	movs	r0, #80	; 0x50
 8004148:	f7fc fcbe 	bl	8000ac8 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 800414c:	2341      	movs	r3, #65	; 0x41
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	f240 133b 	movw	r3, #315	; 0x13b
 8004154:	222d      	movs	r2, #45	; 0x2d
 8004156:	2105      	movs	r1, #5
 8004158:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800415c:	f7fc fc12 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004160:	235a      	movs	r3, #90	; 0x5a
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	f240 133b 	movw	r3, #315	; 0x13b
 8004168:	2246      	movs	r2, #70	; 0x46
 800416a:	2105      	movs	r1, #5
 800416c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004170:	f7fc fc08 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8004174:	2302      	movs	r3, #2
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	4b4b      	ldr	r3, [pc, #300]	; (80042a8 <Display_scanning_screen_background+0x1a8>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004184:	2149      	movs	r1, #73	; 0x49
 8004186:	200a      	movs	r0, #10
 8004188:	f7fc fc9e 	bl	8000ac8 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 800418c:	2373      	movs	r3, #115	; 0x73
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f240 133b 	movw	r3, #315	; 0x13b
 8004194:	225f      	movs	r2, #95	; 0x5f
 8004196:	2105      	movs	r1, #5
 8004198:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800419c:	f7fc fbf2 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 80041a0:	2302      	movs	r3, #2
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	4b41      	ldr	r3, [pc, #260]	; (80042ac <Display_scanning_screen_background+0x1ac>)
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041b0:	2162      	movs	r1, #98	; 0x62
 80041b2:	200a      	movs	r0, #10
 80041b4:	f7fc fc88 	bl	8000ac8 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80041b8:	238c      	movs	r3, #140	; 0x8c
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	f240 133b 	movw	r3, #315	; 0x13b
 80041c0:	2278      	movs	r2, #120	; 0x78
 80041c2:	2105      	movs	r1, #5
 80041c4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041c8:	f7fc fbdc 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 80041cc:	2302      	movs	r3, #2
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <Display_scanning_screen_background+0x1b0>)
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041dc:	217b      	movs	r1, #123	; 0x7b
 80041de:	200a      	movs	r0, #10
 80041e0:	f7fc fc72 	bl	8000ac8 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 80041e4:	23a5      	movs	r3, #165	; 0xa5
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	f240 133b 	movw	r3, #315	; 0x13b
 80041ec:	2291      	movs	r2, #145	; 0x91
 80041ee:	2105      	movs	r1, #5
 80041f0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80041f4:	f7fc fbc6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 80041f8:	2302      	movs	r3, #2
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <Display_scanning_screen_background+0x1b4>)
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004208:	2194      	movs	r1, #148	; 0x94
 800420a:	200a      	movs	r0, #10
 800420c:	f7fc fc5c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8004210:	2302      	movs	r3, #2
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <Display_scanning_screen_background+0x1b8>)
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800421c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004220:	2194      	movs	r1, #148	; 0x94
 8004222:	2078      	movs	r0, #120	; 0x78
 8004224:	f7fc fc50 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8004228:	2302      	movs	r3, #2
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <Display_scanning_screen_background+0x1bc>)
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004238:	2194      	movs	r1, #148	; 0x94
 800423a:	209e      	movs	r0, #158	; 0x9e
 800423c:	f7fc fc44 	bl	8000ac8 <ILI9341_Draw_String>


	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004240:	23be      	movs	r3, #190	; 0xbe
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f240 133b 	movw	r3, #315	; 0x13b
 8004248:	22aa      	movs	r2, #170	; 0xaa
 800424a:	2105      	movs	r1, #5
 800424c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004250:	f7fc fb98 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 8004254:	2302      	movs	r3, #2
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <Display_scanning_screen_background+0x1c0>)
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004264:	21ad      	movs	r1, #173	; 0xad
 8004266:	200a      	movs	r0, #10
 8004268:	f7fc fc2e 	bl	8000ac8 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 800426c:	23eb      	movs	r3, #235	; 0xeb
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	f240 133b 	movw	r3, #315	; 0x13b
 8004274:	22c3      	movs	r2, #195	; 0xc3
 8004276:	2105      	movs	r1, #5
 8004278:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800427c:	f7fc fb82 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 8004280:	2302      	movs	r3, #2
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <Display_scanning_screen_background+0x1c4>)
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800428c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004290:	21cf      	movs	r1, #207	; 0xcf
 8004292:	2082      	movs	r0, #130	; 0x82
 8004294:	f7fc fc18 	bl	8000ac8 <ILI9341_Draw_String>

}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	0800df34 	.word	0x0800df34
 80042a4:	0800df44 	.word	0x0800df44
 80042a8:	0800df5c 	.word	0x0800df5c
 80042ac:	0800df70 	.word	0x0800df70
 80042b0:	0800df80 	.word	0x0800df80
 80042b4:	0800df90 	.word	0x0800df90
 80042b8:	0800de00 	.word	0x0800de00
 80042bc:	0800de04 	.word	0x0800de04
 80042c0:	0800df9c 	.word	0x0800df9c
 80042c4:	0800dfa8 	.word	0x0800dfa8

080042c8 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 80042c8:	b084      	sub	sp, #16
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	f107 0c08 	add.w	ip, r7, #8
 80042d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 80042d8:	7d3b      	ldrb	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80042ec:	330a      	adds	r3, #10
 80042ee:	461a      	mov	r2, r3
 80042f0:	233c      	movs	r3, #60	; 0x3c
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	2232      	movs	r2, #50	; 0x32
 80042f8:	210a      	movs	r1, #10
 80042fa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80042fe:	f7fc fb41 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 8004302:	7d3b      	ldrb	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004312:	fb93 f3f2 	sdiv	r3, r3, r2
 8004316:	330a      	adds	r3, #10
 8004318:	4619      	mov	r1, r3
 800431a:	233c      	movs	r3, #60	; 0x3c
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004322:	2232      	movs	r2, #50	; 0x32
 8004324:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004328:	f7fc fb2c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 800432c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004330:	220a      	movs	r2, #10
 8004332:	4954      	ldr	r1, [pc, #336]	; (8004484 <Display_scanning_screen_data+0x1bc>)
 8004334:	4618      	mov	r0, r3
 8004336:	f008 fe31 	bl	800cf9c <itoa>
 800433a:	4603      	mov	r3, r0
 800433c:	2202      	movs	r2, #2
 800433e:	9201      	str	r2, [sp, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434a:	2149      	movs	r1, #73	; 0x49
 800434c:	2091      	movs	r0, #145	; 0x91
 800434e:	f7fc fbbb 	bl	8000ac8 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 8004352:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004356:	220a      	movs	r2, #10
 8004358:	494a      	ldr	r1, [pc, #296]	; (8004484 <Display_scanning_screen_data+0x1bc>)
 800435a:	4618      	mov	r0, r3
 800435c:	f008 fe1e 	bl	800cf9c <itoa>
 8004360:	4603      	mov	r3, r0
 8004362:	2202      	movs	r2, #2
 8004364:	9201      	str	r2, [sp, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800436c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004370:	2162      	movs	r1, #98	; 0x62
 8004372:	2087      	movs	r0, #135	; 0x87
 8004374:	f7fc fba8 	bl	8000ac8 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 8004378:	7d3b      	ldrb	r3, [r7, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	220a      	movs	r2, #10
 800437e:	4941      	ldr	r1, [pc, #260]	; (8004484 <Display_scanning_screen_data+0x1bc>)
 8004380:	4618      	mov	r0, r3
 8004382:	f008 fe0b 	bl	800cf9c <itoa>
 8004386:	4603      	mov	r3, r0
 8004388:	2202      	movs	r2, #2
 800438a:	9201      	str	r2, [sp, #4]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004396:	217b      	movs	r1, #123	; 0x7b
 8004398:	2076      	movs	r0, #118	; 0x76
 800439a:	f7fc fb95 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 800439e:	2302      	movs	r3, #2
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	4b39      	ldr	r3, [pc, #228]	; (8004488 <Display_scanning_screen_data+0x1c0>)
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ae:	217b      	movs	r1, #123	; 0x7b
 80043b0:	2089      	movs	r0, #137	; 0x89
 80043b2:	f7fc fb89 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 80043b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80043ba:	220a      	movs	r2, #10
 80043bc:	4931      	ldr	r1, [pc, #196]	; (8004484 <Display_scanning_screen_data+0x1bc>)
 80043be:	4618      	mov	r0, r3
 80043c0:	f008 fdec 	bl	800cf9c <itoa>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2202      	movs	r2, #2
 80043c8:	9201      	str	r2, [sp, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d4:	217b      	movs	r1, #123	; 0x7b
 80043d6:	2093      	movs	r0, #147	; 0x93
 80043d8:	f7fc fb76 	bl	8000ac8 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4a2b      	ldr	r2, [pc, #172]	; (800448c <Display_scanning_screen_data+0x1c4>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	220a      	movs	r2, #10
 80043e8:	4926      	ldr	r1, [pc, #152]	; (8004484 <Display_scanning_screen_data+0x1bc>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	f008 fdd6 	bl	800cf9c <itoa>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2202      	movs	r2, #2
 80043f4:	9201      	str	r2, [sp, #4]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004400:	2194      	movs	r1, #148	; 0x94
 8004402:	205f      	movs	r0, #95	; 0x5f
 8004404:	f7fc fb60 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <Display_scanning_screen_data+0x1c4>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	220a      	movs	r2, #10
 800441e:	4919      	ldr	r1, [pc, #100]	; (8004484 <Display_scanning_screen_data+0x1bc>)
 8004420:	4618      	mov	r0, r3
 8004422:	f008 fdbb 	bl	800cf9c <itoa>
 8004426:	4603      	mov	r3, r0
 8004428:	2202      	movs	r2, #2
 800442a:	9201      	str	r2, [sp, #4]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004436:	2194      	movs	r1, #148	; 0x94
 8004438:	2081      	movs	r0, #129	; 0x81
 800443a:	f7fc fb45 	bl	8000ac8 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 800443e:	2302      	movs	r3, #2
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <Display_scanning_screen_data+0x1c8>)
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800444a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444e:	21ad      	movs	r1, #173	; 0xad
 8004450:	2050      	movs	r0, #80	; 0x50
 8004452:	f7fc fb39 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 8004456:	7d3b      	ldrb	r3, [r7, #20]
 8004458:	461a      	mov	r2, r3
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <Display_scanning_screen_data+0x1cc>)
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	2202      	movs	r2, #2
 8004462:	9201      	str	r2, [sp, #4]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800446a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800446e:	21ad      	movs	r1, #173	; 0xad
 8004470:	2050      	movs	r0, #80	; 0x50
 8004472:	f7fc fb29 	bl	8000ac8 <ILI9341_Draw_String>


}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800447e:	b004      	add	sp, #16
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20003098 	.word	0x20003098
 8004488:	0800de98 	.word	0x0800de98
 800448c:	10624dd3 	.word	0x10624dd3
 8004490:	0800dfb0 	.word	0x0800dfb0
 8004494:	200000ac 	.word	0x200000ac

08004498 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 800449e:	2328      	movs	r3, #40	; 0x28
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	f240 133b 	movw	r3, #315	; 0x13b
 80044a6:	2214      	movs	r2, #20
 80044a8:	2105      	movs	r1, #5
 80044aa:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044ae:	f7fc fa69 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 80044b2:	2302      	movs	r3, #2
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <Display_scanning_screen_complete+0x64>)
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c2:	2117      	movs	r1, #23
 80044c4:	2050      	movs	r0, #80	; 0x50
 80044c6:	f7fc faff 	bl	8000ac8 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80044ca:	23eb      	movs	r3, #235	; 0xeb
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	f240 133b 	movw	r3, #315	; 0x13b
 80044d2:	22c3      	movs	r2, #195	; 0xc3
 80044d4:	2105      	movs	r1, #5
 80044d6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80044da:	f7fc fa53 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 80044de:	2302      	movs	r3, #2
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <Display_scanning_screen_complete+0x68>)
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80044ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ee:	21cf      	movs	r1, #207	; 0xcf
 80044f0:	2082      	movs	r0, #130	; 0x82
 80044f2:	f7fc fae9 	bl	8000ac8 <ILI9341_Draw_String>

}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	0800dfb8 	.word	0x0800dfb8
 8004500:	0800dfd0 	.word	0x0800dfd0

08004504 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af02      	add	r7, sp, #8
	Display_clear_screen();
 800450a:	f7ff f8c1 	bl	8003690 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 800450e:	2302      	movs	r3, #2
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	4bb4      	ldr	r3, [pc, #720]	; (80047e4 <Display_dab_digrad_status_background+0x2e0>)
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800451c:	2101      	movs	r1, #1
 800451e:	2005      	movs	r0, #5
 8004520:	f7fc fad2 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8004524:	2328      	movs	r3, #40	; 0x28
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2369      	movs	r3, #105	; 0x69
 800452a:	2214      	movs	r2, #20
 800452c:	2105      	movs	r1, #5
 800452e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004532:	f7fc fa27 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 8004536:	2328      	movs	r3, #40	; 0x28
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	23d2      	movs	r3, #210	; 0xd2
 800453c:	2214      	movs	r2, #20
 800453e:	216e      	movs	r1, #110	; 0x6e
 8004540:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004544:	f7fc fa1e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 8004548:	2328      	movs	r3, #40	; 0x28
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f240 133b 	movw	r3, #315	; 0x13b
 8004550:	2214      	movs	r2, #20
 8004552:	21d7      	movs	r1, #215	; 0xd7
 8004554:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004558:	f7fc fa14 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 800455c:	2341      	movs	r3, #65	; 0x41
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f240 133b 	movw	r3, #315	; 0x13b
 8004564:	222d      	movs	r2, #45	; 0x2d
 8004566:	2105      	movs	r1, #5
 8004568:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800456c:	f7fc fa0a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 8004570:	2302      	movs	r3, #2
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	4b9c      	ldr	r3, [pc, #624]	; (80047e8 <Display_dab_digrad_status_background+0x2e4>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800457c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004580:	2130      	movs	r1, #48	; 0x30
 8004582:	200a      	movs	r0, #10
 8004584:	f7fc faa0 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8004588:	2302      	movs	r3, #2
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	4b97      	ldr	r3, [pc, #604]	; (80047ec <Display_dab_digrad_status_background+0x2e8>)
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004598:	2130      	movs	r1, #48	; 0x30
 800459a:	205a      	movs	r0, #90	; 0x5a
 800459c:	f7fc fa94 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80045a0:	235a      	movs	r3, #90	; 0x5a
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	f240 133b 	movw	r3, #315	; 0x13b
 80045a8:	2246      	movs	r2, #70	; 0x46
 80045aa:	2105      	movs	r1, #5
 80045ac:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045b0:	f7fc f9e8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 80045b4:	2302      	movs	r3, #2
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	4b8d      	ldr	r3, [pc, #564]	; (80047f0 <Display_dab_digrad_status_background+0x2ec>)
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c4:	2149      	movs	r1, #73	; 0x49
 80045c6:	200a      	movs	r0, #10
 80045c8:	f7fc fa7e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80045cc:	2302      	movs	r3, #2
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <Display_dab_digrad_status_background+0x2f0>)
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045dc:	2149      	movs	r1, #73	; 0x49
 80045de:	2069      	movs	r0, #105	; 0x69
 80045e0:	f7fc fa72 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80045e4:	2373      	movs	r3, #115	; 0x73
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	f240 133b 	movw	r3, #315	; 0x13b
 80045ec:	225f      	movs	r2, #95	; 0x5f
 80045ee:	2105      	movs	r1, #5
 80045f0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045f4:	f7fc f9c6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80045f8:	2302      	movs	r3, #2
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <Display_dab_digrad_status_background+0x2f4>)
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004608:	2162      	movs	r1, #98	; 0x62
 800460a:	200a      	movs	r0, #10
 800460c:	f7fc fa5c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8004610:	2302      	movs	r3, #2
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	4b77      	ldr	r3, [pc, #476]	; (80047f4 <Display_dab_digrad_status_background+0x2f0>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800461c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004620:	2162      	movs	r1, #98	; 0x62
 8004622:	2069      	movs	r0, #105	; 0x69
 8004624:	f7fc fa50 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004628:	238c      	movs	r3, #140	; 0x8c
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f240 133b 	movw	r3, #315	; 0x13b
 8004630:	2278      	movs	r2, #120	; 0x78
 8004632:	2105      	movs	r1, #5
 8004634:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004638:	f7fc f9a4 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 800463c:	2302      	movs	r3, #2
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b6e      	ldr	r3, [pc, #440]	; (80047fc <Display_dab_digrad_status_background+0x2f8>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464c:	217b      	movs	r1, #123	; 0x7b
 800464e:	200a      	movs	r0, #10
 8004650:	f7fc fa3a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004654:	2302      	movs	r3, #2
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	4b69      	ldr	r3, [pc, #420]	; (8004800 <Display_dab_digrad_status_background+0x2fc>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004664:	217b      	movs	r1, #123	; 0x7b
 8004666:	206e      	movs	r0, #110	; 0x6e
 8004668:	f7fc fa2e 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 800466c:	23a5      	movs	r3, #165	; 0xa5
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	f240 133b 	movw	r3, #315	; 0x13b
 8004674:	2291      	movs	r2, #145	; 0x91
 8004676:	2105      	movs	r1, #5
 8004678:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800467c:	f7fc f982 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004680:	2302      	movs	r3, #2
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	4b5f      	ldr	r3, [pc, #380]	; (8004804 <Display_dab_digrad_status_background+0x300>)
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800468c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004690:	2194      	movs	r1, #148	; 0x94
 8004692:	200a      	movs	r0, #10
 8004694:	f7fc fa18 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004698:	2302      	movs	r3, #2
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	4b5a      	ldr	r3, [pc, #360]	; (8004808 <Display_dab_digrad_status_background+0x304>)
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a8:	2194      	movs	r1, #148	; 0x94
 80046aa:	2071      	movs	r0, #113	; 0x71
 80046ac:	f7fc fa0c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 80046b0:	2302      	movs	r3, #2
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	4b55      	ldr	r3, [pc, #340]	; (800480c <Display_dab_digrad_status_background+0x308>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c0:	2194      	movs	r1, #148	; 0x94
 80046c2:	2094      	movs	r0, #148	; 0x94
 80046c4:	f7fc fa00 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 80046c8:	2302      	movs	r3, #2
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	4b50      	ldr	r3, [pc, #320]	; (8004810 <Display_dab_digrad_status_background+0x30c>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d8:	2194      	movs	r1, #148	; 0x94
 80046da:	20b7      	movs	r0, #183	; 0xb7
 80046dc:	f7fc f9f4 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 80046e0:	2302      	movs	r3, #2
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <Display_dab_digrad_status_background+0x310>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f0:	2194      	movs	r1, #148	; 0x94
 80046f2:	20db      	movs	r0, #219	; 0xdb
 80046f4:	f7fc f9e8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 80046f8:	2302      	movs	r3, #2
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	4b46      	ldr	r3, [pc, #280]	; (8004818 <Display_dab_digrad_status_background+0x314>)
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004708:	2194      	movs	r1, #148	; 0x94
 800470a:	f240 101b 	movw	r0, #283	; 0x11b
 800470e:	f7fc f9db 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004712:	2302      	movs	r3, #2
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	4b41      	ldr	r3, [pc, #260]	; (800481c <Display_dab_digrad_status_background+0x318>)
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800471e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004722:	2194      	movs	r1, #148	; 0x94
 8004724:	f240 1025 	movw	r0, #293	; 0x125
 8004728:	f7fc f9ce 	bl	8000ac8 <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 800472c:	23be      	movs	r3, #190	; 0xbe
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f240 133b 	movw	r3, #315	; 0x13b
 8004734:	22aa      	movs	r2, #170	; 0xaa
 8004736:	2105      	movs	r1, #5
 8004738:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800473c:	f7fc f922 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004740:	2302      	movs	r3, #2
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	4b36      	ldr	r3, [pc, #216]	; (8004820 <Display_dab_digrad_status_background+0x31c>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800474c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004750:	21ad      	movs	r1, #173	; 0xad
 8004752:	200a      	movs	r0, #10
 8004754:	f7fc f9b8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004758:	2302      	movs	r3, #2
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <Display_dab_digrad_status_background+0x320>)
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004768:	21ad      	movs	r1, #173	; 0xad
 800476a:	207d      	movs	r0, #125	; 0x7d
 800476c:	f7fc f9ac 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004770:	2302      	movs	r3, #2
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <Display_dab_digrad_status_background+0x324>)
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800477c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004780:	21ad      	movs	r1, #173	; 0xad
 8004782:	20b4      	movs	r0, #180	; 0xb4
 8004784:	f7fc f9a0 	bl	8000ac8 <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004788:	23eb      	movs	r3, #235	; 0xeb
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	239d      	movs	r3, #157	; 0x9d
 800478e:	22c3      	movs	r2, #195	; 0xc3
 8004790:	2105      	movs	r1, #5
 8004792:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004796:	f7fc f8f5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 800479a:	23eb      	movs	r3, #235	; 0xeb
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	f240 133b 	movw	r3, #315	; 0x13b
 80047a2:	22c3      	movs	r2, #195	; 0xc3
 80047a4:	21a3      	movs	r1, #163	; 0xa3
 80047a6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80047aa:	f7fc f8eb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 80047ae:	2302      	movs	r3, #2
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	4b1e      	ldr	r3, [pc, #120]	; (800482c <Display_dab_digrad_status_background+0x328>)
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80047ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047be:	21cf      	movs	r1, #207	; 0xcf
 80047c0:	2023      	movs	r0, #35	; 0x23
 80047c2:	f7fc f981 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 80047c6:	2302      	movs	r3, #2
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	4b19      	ldr	r3, [pc, #100]	; (8004830 <Display_dab_digrad_status_background+0x32c>)
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80047d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047d6:	21cf      	movs	r1, #207	; 0xcf
 80047d8:	20cd      	movs	r0, #205	; 0xcd
 80047da:	f7fc f975 	bl	8000ac8 <ILI9341_Draw_String>
}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	0800dfd8 	.word	0x0800dfd8
 80047e8:	0800dfec 	.word	0x0800dfec
 80047ec:	0800dff4 	.word	0x0800dff4
 80047f0:	0800dffc 	.word	0x0800dffc
 80047f4:	0800e000 	.word	0x0800e000
 80047f8:	0800e004 	.word	0x0800e004
 80047fc:	0800e008 	.word	0x0800e008
 8004800:	0800e010 	.word	0x0800e010
 8004804:	0800e014 	.word	0x0800e014
 8004808:	0800de00 	.word	0x0800de00
 800480c:	0800de04 	.word	0x0800de04
 8004810:	0800e020 	.word	0x0800e020
 8004814:	0800e028 	.word	0x0800e028
 8004818:	0800de98 	.word	0x0800de98
 800481c:	0800e030 	.word	0x0800e030
 8004820:	0800e034 	.word	0x0800e034
 8004824:	0800e040 	.word	0x0800e040
 8004828:	0800e044 	.word	0x0800e044
 800482c:	0800dddc 	.word	0x0800dddc
 8004830:	0800ddd0 	.word	0x0800ddd0

08004834 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af02      	add	r7, sp, #8
 800483c:	f107 0c18 	add.w	ip, r7, #24
 8004840:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004846:	461a      	mov	r2, r3
 8004848:	23fa      	movs	r3, #250	; 0xfa
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a33      	ldr	r2, [pc, #204]	; (8004920 <Display_dab_digrad_status_data+0xec>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	4b30      	ldr	r3, [pc, #192]	; (8004920 <Display_dab_digrad_status_data+0xec>)
 8004860:	fba3 1302 	umull	r1, r3, r3, r2
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <Display_dab_digrad_status_data+0xf0>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8331 	bne.w	8004ede <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 800487c:	7e7b      	ldrb	r3, [r7, #25]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004888:	2302      	movs	r3, #2
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	4b26      	ldr	r3, [pc, #152]	; (8004928 <Display_dab_digrad_status_data+0xf4>)
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004894:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004898:	2117      	movs	r1, #23
 800489a:	2023      	movs	r0, #35	; 0x23
 800489c:	f7fc f914 	bl	8000ac8 <ILI9341_Draw_String>
 80048a0:	e00b      	b.n	80048ba <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 80048a2:	2302      	movs	r3, #2
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <Display_dab_digrad_status_data+0xf4>)
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80048b2:	2117      	movs	r1, #23
 80048b4:	2023      	movs	r0, #35	; 0x23
 80048b6:	f7fc f907 	bl	8000ac8 <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 80048ba:	7e7b      	ldrb	r3, [r7, #25]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 80048c6:	2302      	movs	r3, #2
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <Display_dab_digrad_status_data+0xf8>)
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80048d6:	2117      	movs	r1, #23
 80048d8:	2085      	movs	r0, #133	; 0x85
 80048da:	f7fc f8f5 	bl	8000ac8 <ILI9341_Draw_String>
 80048de:	e00b      	b.n	80048f8 <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 80048e0:	2302      	movs	r3, #2
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <Display_dab_digrad_status_data+0xf8>)
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80048ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80048f0:	2117      	movs	r1, #23
 80048f2:	2085      	movs	r0, #133	; 0x85
 80048f4:	f7fc f8e8 	bl	8000ac8 <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 80048f8:	7e7b      	ldrb	r3, [r7, #25]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d017      	beq.n	8004934 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004904:	2302      	movs	r3, #2
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <Display_dab_digrad_status_data+0xfc>)
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004910:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004914:	2117      	movs	r1, #23
 8004916:	20e4      	movs	r0, #228	; 0xe4
 8004918:	f7fc f8d6 	bl	8000ac8 <ILI9341_Draw_String>
 800491c:	e016      	b.n	800494c <Display_dab_digrad_status_data+0x118>
 800491e:	bf00      	nop
 8004920:	10624dd3 	.word	0x10624dd3
 8004924:	200030d8 	.word	0x200030d8
 8004928:	0800e048 	.word	0x0800e048
 800492c:	0800e050 	.word	0x0800e050
 8004930:	0800e058 	.word	0x0800e058
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004934:	2302      	movs	r3, #2
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	4bb6      	ldr	r3, [pc, #728]	; (8004c14 <Display_dab_digrad_status_data+0x3e0>)
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004940:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004944:	2117      	movs	r1, #23
 8004946:	20e4      	movs	r0, #228	; 0xe4
 8004948:	f7fc f8be 	bl	8000ac8 <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 800494c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004950:	2b0d      	cmp	r3, #13
 8004952:	dc02      	bgt.n	800495a <Display_dab_digrad_status_data+0x126>
 8004954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004958:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 800495a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800495e:	2b1a      	cmp	r3, #26
 8004960:	dc06      	bgt.n	8004970 <Display_dab_digrad_status_data+0x13c>
 8004962:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004966:	2b0d      	cmp	r3, #13
 8004968:	dd02      	ble.n	8004970 <Display_dab_digrad_status_data+0x13c>
 800496a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800496e:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004970:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004974:	2b27      	cmp	r3, #39	; 0x27
 8004976:	dc06      	bgt.n	8004986 <Display_dab_digrad_status_data+0x152>
 8004978:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800497c:	2b1a      	cmp	r3, #26
 800497e:	dd02      	ble.n	8004986 <Display_dab_digrad_status_data+0x152>
 8004980:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004984:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004986:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800498a:	2b34      	cmp	r3, #52	; 0x34
 800498c:	dc06      	bgt.n	800499c <Display_dab_digrad_status_data+0x168>
 800498e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004992:	2b27      	cmp	r3, #39	; 0x27
 8004994:	dd02      	ble.n	800499c <Display_dab_digrad_status_data+0x168>
 8004996:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800499a:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 800499c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80049a0:	2b34      	cmp	r3, #52	; 0x34
 80049a2:	dd02      	ble.n	80049aa <Display_dab_digrad_status_data+0x176>
 80049a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80049a8:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 80049aa:	2302      	movs	r3, #2
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	4b9a      	ldr	r3, [pc, #616]	; (8004c18 <Display_dab_digrad_status_data+0x3e4>)
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ba:	2130      	movs	r1, #48	; 0x30
 80049bc:	2032      	movs	r0, #50	; 0x32
 80049be:	f7fc f883 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 80049c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80049c6:	220a      	movs	r2, #10
 80049c8:	4994      	ldr	r1, [pc, #592]	; (8004c1c <Display_dab_digrad_status_data+0x3e8>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f008 fae6 	bl	800cf9c <itoa>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2202      	movs	r2, #2
 80049d4:	9201      	str	r2, [sp, #4]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e0:	2130      	movs	r1, #48	; 0x30
 80049e2:	2032      	movs	r0, #50	; 0x32
 80049e4:	f7fc f870 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 80049e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80049ec:	461a      	mov	r2, r3
 80049ee:	23b4      	movs	r3, #180	; 0xb4
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	da00      	bge.n	80049fa <Display_dab_digrad_status_data+0x1c6>
 80049f8:	333f      	adds	r3, #63	; 0x3f
 80049fa:	119b      	asrs	r3, r3, #6
 80049fc:	3382      	adds	r3, #130	; 0x82
 80049fe:	461a      	mov	r2, r3
 8004a00:	233c      	movs	r3, #60	; 0x3c
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	2232      	movs	r2, #50	; 0x32
 8004a08:	2182      	movs	r1, #130	; 0x82
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7fb ffba 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004a10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004a14:	461a      	mov	r2, r3
 8004a16:	23b4      	movs	r3, #180	; 0xb4
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da00      	bge.n	8004a22 <Display_dab_digrad_status_data+0x1ee>
 8004a20:	333f      	adds	r3, #63	; 0x3f
 8004a22:	119b      	asrs	r3, r3, #6
 8004a24:	3382      	adds	r3, #130	; 0x82
 8004a26:	4619      	mov	r1, r3
 8004a28:	233c      	movs	r3, #60	; 0x3c
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004a30:	2232      	movs	r2, #50	; 0x32
 8004a32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a36:	f7fb ffa5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d802      	bhi.n	8004a46 <Display_dab_digrad_status_data+0x212>
 8004a40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a44:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004a46:	7efb      	ldrb	r3, [r7, #27]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d805      	bhi.n	8004a58 <Display_dab_digrad_status_data+0x224>
 8004a4c:	7efb      	ldrb	r3, [r7, #27]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d902      	bls.n	8004a58 <Display_dab_digrad_status_data+0x224>
 8004a52:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a56:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004a58:	7efb      	ldrb	r3, [r7, #27]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d805      	bhi.n	8004a6a <Display_dab_digrad_status_data+0x236>
 8004a5e:	7efb      	ldrb	r3, [r7, #27]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d902      	bls.n	8004a6a <Display_dab_digrad_status_data+0x236>
 8004a64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a68:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004a6a:	7efb      	ldrb	r3, [r7, #27]
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d805      	bhi.n	8004a7c <Display_dab_digrad_status_data+0x248>
 8004a70:	7efb      	ldrb	r3, [r7, #27]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d902      	bls.n	8004a7c <Display_dab_digrad_status_data+0x248>
 8004a76:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a7a:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8004a7c:	7efb      	ldrb	r3, [r7, #27]
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d902      	bls.n	8004a88 <Display_dab_digrad_status_data+0x254>
 8004a82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a86:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004a88:	2302      	movs	r3, #2
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	4b62      	ldr	r3, [pc, #392]	; (8004c18 <Display_dab_digrad_status_data+0x3e4>)
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a98:	2149      	movs	r1, #73	; 0x49
 8004a9a:	2032      	movs	r0, #50	; 0x32
 8004a9c:	f7fc f814 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004aa0:	7efb      	ldrb	r3, [r7, #27]
 8004aa2:	220a      	movs	r2, #10
 8004aa4:	495d      	ldr	r1, [pc, #372]	; (8004c1c <Display_dab_digrad_status_data+0x3e8>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f008 fa78 	bl	800cf9c <itoa>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2202      	movs	r2, #2
 8004ab0:	9201      	str	r2, [sp, #4]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004abc:	2149      	movs	r1, #73	; 0x49
 8004abe:	2032      	movs	r0, #50	; 0x32
 8004ac0:	f7fc f802 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004ac4:	7efb      	ldrb	r3, [r7, #27]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	3382      	adds	r3, #130	; 0x82
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2355      	movs	r3, #85	; 0x55
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	224b      	movs	r2, #75	; 0x4b
 8004ada:	2182      	movs	r1, #130	; 0x82
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7fb ff51 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004ae2:	7efb      	ldrb	r3, [r7, #27]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	3382      	adds	r3, #130	; 0x82
 8004aee:	4619      	mov	r1, r3
 8004af0:	2355      	movs	r3, #85	; 0x55
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004af8:	224b      	movs	r2, #75	; 0x4b
 8004afa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004afe:	f7fb ff41 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 8004b02:	7f7b      	ldrb	r3, [r7, #29]
 8004b04:	2b0b      	cmp	r3, #11
 8004b06:	d802      	bhi.n	8004b0e <Display_dab_digrad_status_data+0x2da>
 8004b08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b0c:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004b0e:	7f7b      	ldrb	r3, [r7, #29]
 8004b10:	2b16      	cmp	r3, #22
 8004b12:	d805      	bhi.n	8004b20 <Display_dab_digrad_status_data+0x2ec>
 8004b14:	7f7b      	ldrb	r3, [r7, #29]
 8004b16:	2b0b      	cmp	r3, #11
 8004b18:	d902      	bls.n	8004b20 <Display_dab_digrad_status_data+0x2ec>
 8004b1a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b1e:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004b20:	7f7b      	ldrb	r3, [r7, #29]
 8004b22:	2b21      	cmp	r3, #33	; 0x21
 8004b24:	d805      	bhi.n	8004b32 <Display_dab_digrad_status_data+0x2fe>
 8004b26:	7f7b      	ldrb	r3, [r7, #29]
 8004b28:	2b16      	cmp	r3, #22
 8004b2a:	d902      	bls.n	8004b32 <Display_dab_digrad_status_data+0x2fe>
 8004b2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004b30:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004b32:	7f7b      	ldrb	r3, [r7, #29]
 8004b34:	2b2c      	cmp	r3, #44	; 0x2c
 8004b36:	d805      	bhi.n	8004b44 <Display_dab_digrad_status_data+0x310>
 8004b38:	7f7b      	ldrb	r3, [r7, #29]
 8004b3a:	2b21      	cmp	r3, #33	; 0x21
 8004b3c:	d902      	bls.n	8004b44 <Display_dab_digrad_status_data+0x310>
 8004b3e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004b42:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 8004b44:	7f7b      	ldrb	r3, [r7, #29]
 8004b46:	2b2c      	cmp	r3, #44	; 0x2c
 8004b48:	d902      	bls.n	8004b50 <Display_dab_digrad_status_data+0x31c>
 8004b4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b4e:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004b50:	2302      	movs	r3, #2
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <Display_dab_digrad_status_data+0x3e4>)
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b60:	2162      	movs	r1, #98	; 0x62
 8004b62:	2032      	movs	r0, #50	; 0x32
 8004b64:	f7fb ffb0 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004b68:	7f7b      	ldrb	r3, [r7, #29]
 8004b6a:	220a      	movs	r2, #10
 8004b6c:	492b      	ldr	r1, [pc, #172]	; (8004c1c <Display_dab_digrad_status_data+0x3e8>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f008 fa14 	bl	800cf9c <itoa>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2202      	movs	r2, #2
 8004b78:	9201      	str	r2, [sp, #4]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b84:	2162      	movs	r1, #98	; 0x62
 8004b86:	2032      	movs	r0, #50	; 0x32
 8004b88:	f7fb ff9e 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004b8c:	7f7b      	ldrb	r3, [r7, #29]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	23b4      	movs	r3, #180	; 0xb4
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <Display_dab_digrad_status_data+0x3ec>)
 8004b98:	fb82 1203 	smull	r1, r2, r2, r3
 8004b9c:	1112      	asrs	r2, r2, #4
 8004b9e:	17db      	asrs	r3, r3, #31
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	3382      	adds	r3, #130	; 0x82
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	236e      	movs	r3, #110	; 0x6e
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	2264      	movs	r2, #100	; 0x64
 8004bae:	2182      	movs	r1, #130	; 0x82
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7fb fee7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004bb6:	7f7b      	ldrb	r3, [r7, #29]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	23b4      	movs	r3, #180	; 0xb4
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <Display_dab_digrad_status_data+0x3ec>)
 8004bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8004bc6:	1112      	asrs	r2, r2, #4
 8004bc8:	17db      	asrs	r3, r3, #31
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	3382      	adds	r3, #130	; 0x82
 8004bce:	4619      	mov	r1, r3
 8004bd0:	236e      	movs	r3, #110	; 0x6e
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004bde:	f7fb fed1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 8004be2:	7f3b      	ldrb	r3, [r7, #28]
 8004be4:	2b14      	cmp	r3, #20
 8004be6:	d802      	bhi.n	8004bee <Display_dab_digrad_status_data+0x3ba>
 8004be8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bec:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004bee:	7f3b      	ldrb	r3, [r7, #28]
 8004bf0:	2b28      	cmp	r3, #40	; 0x28
 8004bf2:	d805      	bhi.n	8004c00 <Display_dab_digrad_status_data+0x3cc>
 8004bf4:	7f3b      	ldrb	r3, [r7, #28]
 8004bf6:	2b14      	cmp	r3, #20
 8004bf8:	d902      	bls.n	8004c00 <Display_dab_digrad_status_data+0x3cc>
 8004bfa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bfe:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004c00:	7f3b      	ldrb	r3, [r7, #28]
 8004c02:	2b3c      	cmp	r3, #60	; 0x3c
 8004c04:	d80e      	bhi.n	8004c24 <Display_dab_digrad_status_data+0x3f0>
 8004c06:	7f3b      	ldrb	r3, [r7, #28]
 8004c08:	2b28      	cmp	r3, #40	; 0x28
 8004c0a:	d90b      	bls.n	8004c24 <Display_dab_digrad_status_data+0x3f0>
 8004c0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e007      	b.n	8004c24 <Display_dab_digrad_status_data+0x3f0>
 8004c14:	0800e058 	.word	0x0800e058
 8004c18:	0800e064 	.word	0x0800e064
 8004c1c:	20003098 	.word	0x20003098
 8004c20:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8004c24:	7f3b      	ldrb	r3, [r7, #28]
 8004c26:	2b50      	cmp	r3, #80	; 0x50
 8004c28:	d805      	bhi.n	8004c36 <Display_dab_digrad_status_data+0x402>
 8004c2a:	7f3b      	ldrb	r3, [r7, #28]
 8004c2c:	2b3c      	cmp	r3, #60	; 0x3c
 8004c2e:	d902      	bls.n	8004c36 <Display_dab_digrad_status_data+0x402>
 8004c30:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c34:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 8004c36:	7f3b      	ldrb	r3, [r7, #28]
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d902      	bls.n	8004c42 <Display_dab_digrad_status_data+0x40e>
 8004c3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c40:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8004c42:	2302      	movs	r3, #2
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	4ba9      	ldr	r3, [pc, #676]	; (8004eec <Display_dab_digrad_status_data+0x6b8>)
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c52:	217b      	movs	r1, #123	; 0x7b
 8004c54:	204b      	movs	r0, #75	; 0x4b
 8004c56:	f7fb ff37 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8004c5a:	7f3b      	ldrb	r3, [r7, #28]
 8004c5c:	220a      	movs	r2, #10
 8004c5e:	49a4      	ldr	r1, [pc, #656]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004c60:	4618      	mov	r0, r3
 8004c62:	f008 f99b 	bl	800cf9c <itoa>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2202      	movs	r2, #2
 8004c6a:	9201      	str	r2, [sp, #4]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c76:	217b      	movs	r1, #123	; 0x7b
 8004c78:	204b      	movs	r0, #75	; 0x4b
 8004c7a:	f7fb ff25 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8004c7e:	7f3b      	ldrb	r3, [r7, #28]
 8004c80:	461a      	mov	r2, r3
 8004c82:	23b4      	movs	r3, #180	; 0xb4
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	4a9a      	ldr	r2, [pc, #616]	; (8004ef4 <Display_dab_digrad_status_data+0x6c0>)
 8004c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8004c8e:	1152      	asrs	r2, r2, #5
 8004c90:	17db      	asrs	r3, r3, #31
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	3382      	adds	r3, #130	; 0x82
 8004c96:	461a      	mov	r2, r3
 8004c98:	2387      	movs	r3, #135	; 0x87
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	227d      	movs	r2, #125	; 0x7d
 8004ca0:	2182      	movs	r1, #130	; 0x82
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7fb fe6e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8004ca8:	7f3b      	ldrb	r3, [r7, #28]
 8004caa:	461a      	mov	r2, r3
 8004cac:	23b4      	movs	r3, #180	; 0xb4
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	4a90      	ldr	r2, [pc, #576]	; (8004ef4 <Display_dab_digrad_status_data+0x6c0>)
 8004cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8004cb8:	1152      	asrs	r2, r2, #5
 8004cba:	17db      	asrs	r3, r3, #31
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	3382      	adds	r3, #130	; 0x82
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	2387      	movs	r3, #135	; 0x87
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004cca:	227d      	movs	r2, #125	; 0x7d
 8004ccc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004cd0:	f7fb fe58 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	4a88      	ldr	r2, [pc, #544]	; (8004ef8 <Display_dab_digrad_status_data+0x6c4>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	220a      	movs	r2, #10
 8004ce0:	4983      	ldr	r1, [pc, #524]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f008 f95a 	bl	800cf9c <itoa>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2202      	movs	r2, #2
 8004cec:	9201      	str	r2, [sp, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf8:	2194      	movs	r1, #148	; 0x94
 8004cfa:	205b      	movs	r0, #91	; 0x5b
 8004cfc:	f7fb fee4 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	4b7d      	ldr	r3, [pc, #500]	; (8004ef8 <Display_dab_digrad_status_data+0x6c4>)
 8004d04:	fba3 1302 	umull	r1, r3, r3, r2
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	220a      	movs	r2, #10
 8004d16:	4976      	ldr	r1, [pc, #472]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f008 f93f 	bl	800cf9c <itoa>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2202      	movs	r2, #2
 8004d22:	9201      	str	r2, [sp, #4]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d2e:	2194      	movs	r1, #148	; 0x94
 8004d30:	2078      	movs	r0, #120	; 0x78
 8004d32:	f7fb fec9 	bl	8000ac8 <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 8004d36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d821      	bhi.n	8004d82 <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 8004d3e:	2302      	movs	r3, #2
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	4b6e      	ldr	r3, [pc, #440]	; (8004efc <Display_dab_digrad_status_data+0x6c8>)
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d4e:	2194      	movs	r1, #148	; 0x94
 8004d50:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004d54:	f7fb feb8 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8004d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d5c:	220a      	movs	r2, #10
 8004d5e:	4964      	ldr	r1, [pc, #400]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004d60:	4618      	mov	r0, r3
 8004d62:	f008 f91b 	bl	800cf9c <itoa>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2202      	movs	r2, #2
 8004d6a:	9201      	str	r2, [sp, #4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d76:	2194      	movs	r1, #148	; 0x94
 8004d78:	f240 1011 	movw	r0, #273	; 0x111
 8004d7c:	f7fb fea4 	bl	8000ac8 <ILI9341_Draw_String>
 8004d80:	e013      	b.n	8004daa <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8004d82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d86:	220a      	movs	r2, #10
 8004d88:	4959      	ldr	r1, [pc, #356]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f008 f906 	bl	800cf9c <itoa>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2202      	movs	r2, #2
 8004d94:	9201      	str	r2, [sp, #4]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da0:	2194      	movs	r1, #148	; 0x94
 8004da2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004da6:	f7fb fe8f 	bl	8000ac8 <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d81d      	bhi.n	8004dec <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8004db0:	2302      	movs	r3, #2
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <Display_dab_digrad_status_data+0x6cc>)
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc0:	21ad      	movs	r1, #173	; 0xad
 8004dc2:	204f      	movs	r0, #79	; 0x4f
 8004dc4:	f7fb fe80 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	220a      	movs	r2, #10
 8004dcc:	4948      	ldr	r1, [pc, #288]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f008 f8e4 	bl	800cf9c <itoa>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	9201      	str	r2, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004de4:	21ad      	movs	r1, #173	; 0xad
 8004de6:	2057      	movs	r0, #87	; 0x57
 8004de8:	f7fb fe6e 	bl	8000ac8 <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d911      	bls.n	8004e16 <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	220a      	movs	r2, #10
 8004df6:	493e      	ldr	r1, [pc, #248]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f008 f8cf 	bl	800cf9c <itoa>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2202      	movs	r2, #2
 8004e02:	9201      	str	r2, [sp, #4]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e0e:	21ad      	movs	r1, #173	; 0xad
 8004e10:	204f      	movs	r0, #79	; 0x4f
 8004e12:	f7fb fe59 	bl	8000ac8 <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 8004e16:	2302      	movs	r3, #2
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	4b3a      	ldr	r3, [pc, #232]	; (8004f04 <Display_dab_digrad_status_data+0x6d0>)
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e26:	21ad      	movs	r1, #173	; 0xad
 8004e28:	205f      	movs	r0, #95	; 0x5f
 8004e2a:	f7fb fe4d 	bl	8000ac8 <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 8004e2e:	88bb      	ldrh	r3, [r7, #4]
 8004e30:	f240 22ee 	movw	r2, #750	; 0x2ee
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d023      	beq.n	8004e80 <Display_dab_digrad_status_data+0x64c>
 8004e38:	f240 22ee 	movw	r2, #750	; 0x2ee
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	dc2c      	bgt.n	8004e9a <Display_dab_digrad_status_data+0x666>
 8004e40:	2bfa      	cmp	r3, #250	; 0xfa
 8004e42:	d003      	beq.n	8004e4c <Display_dab_digrad_status_data+0x618>
 8004e44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e48:	d00d      	beq.n	8004e66 <Display_dab_digrad_status_data+0x632>
 8004e4a:	e026      	b.n	8004e9a <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <Display_dab_digrad_status_data+0x6d4>)
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e5c:	21ad      	movs	r1, #173	; 0xad
 8004e5e:	2067      	movs	r0, #103	; 0x67
 8004e60:	f7fb fe32 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004e64:	e026      	b.n	8004eb4 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8004e66:	2302      	movs	r3, #2
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <Display_dab_digrad_status_data+0x6d8>)
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e76:	21ad      	movs	r1, #173	; 0xad
 8004e78:	2067      	movs	r0, #103	; 0x67
 8004e7a:	f7fb fe25 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004e7e:	e019      	b.n	8004eb4 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8004e80:	2302      	movs	r3, #2
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <Display_dab_digrad_status_data+0x6dc>)
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e90:	21ad      	movs	r1, #173	; 0xad
 8004e92:	2067      	movs	r0, #103	; 0x67
 8004e94:	f7fb fe18 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004e98:	e00c      	b.n	8004eb4 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <Display_dab_digrad_status_data+0x6e0>)
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eaa:	21ad      	movs	r1, #173	; 0xad
 8004eac:	2067      	movs	r0, #103	; 0x67
 8004eae:	f7fb fe0b 	bl	8000ac8 <ILI9341_Draw_String>
			break;
 8004eb2:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8004eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	220a      	movs	r2, #10
 8004ebe:	490c      	ldr	r1, [pc, #48]	; (8004ef0 <Display_dab_digrad_status_data+0x6bc>)
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f008 f86b 	bl	800cf9c <itoa>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2202      	movs	r2, #2
 8004eca:	9201      	str	r2, [sp, #4]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed6:	21ad      	movs	r1, #173	; 0xad
 8004ed8:	20d7      	movs	r0, #215	; 0xd7
 8004eda:	f7fb fdf5 	bl	8000ac8 <ILI9341_Draw_String>
	}
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee8:	b004      	add	sp, #16
 8004eea:	4770      	bx	lr
 8004eec:	0800e064 	.word	0x0800e064
 8004ef0:	20003098 	.word	0x20003098
 8004ef4:	51eb851f 	.word	0x51eb851f
 8004ef8:	10624dd3 	.word	0x10624dd3
 8004efc:	0800e068 	.word	0x0800e068
 8004f00:	0800ddf0 	.word	0x0800ddf0
 8004f04:	0800de00 	.word	0x0800de00
 8004f08:	0800e06c 	.word	0x0800e06c
 8004f0c:	0800e070 	.word	0x0800e070
 8004f10:	0800e074 	.word	0x0800e074
 8004f14:	0800e078 	.word	0x0800e078

08004f18 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8004f1e:	f7fe fbb7 	bl	8003690 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 8004f22:	2302      	movs	r3, #2
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	4b6d      	ldr	r3, [pc, #436]	; (80050dc <Display_settings_screen_background+0x1c4>)
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f30:	2101      	movs	r1, #1
 8004f32:	2005      	movs	r0, #5
 8004f34:	f7fb fdc8 	bl	8000ac8 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8004f38:	2337      	movs	r3, #55	; 0x37
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	f240 133b 	movw	r3, #315	; 0x13b
 8004f40:	2214      	movs	r2, #20
 8004f42:	2105      	movs	r1, #5
 8004f44:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004f48:	f7fb fd1c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <Display_settings_screen_background+0x1c8>)
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f5c:	2116      	movs	r1, #22
 8004f5e:	2037      	movs	r0, #55	; 0x37
 8004f60:	f7fb fdb2 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 8004f64:	2302      	movs	r3, #2
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	4b5e      	ldr	r3, [pc, #376]	; (80050e4 <Display_settings_screen_background+0x1cc>)
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f74:	2116      	movs	r1, #22
 8004f76:	20ce      	movs	r0, #206	; 0xce
 8004f78:	f7fb fda6 	bl	8000ac8 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8004f7c:	2364      	movs	r3, #100	; 0x64
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	239d      	movs	r3, #157	; 0x9d
 8004f82:	223c      	movs	r2, #60	; 0x3c
 8004f84:	2105      	movs	r1, #5
 8004f86:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004f8a:	f7fb fcfb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 8004f8e:	2364      	movs	r3, #100	; 0x64
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	f240 133b 	movw	r3, #315	; 0x13b
 8004f96:	223c      	movs	r2, #60	; 0x3c
 8004f98:	21a3      	movs	r1, #163	; 0xa3
 8004f9a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004f9e:	f7fb fcf1 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	4b50      	ldr	r3, [pc, #320]	; (80050e8 <Display_settings_screen_background+0x1d0>)
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fb2:	2148      	movs	r1, #72	; 0x48
 8004fb4:	2036      	movs	r0, #54	; 0x36
 8004fb6:	f7fb fd87 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8004fba:	2302      	movs	r3, #2
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	4b4b      	ldr	r3, [pc, #300]	; (80050ec <Display_settings_screen_background+0x1d4>)
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fca:	2148      	movs	r1, #72	; 0x48
 8004fcc:	20d3      	movs	r0, #211	; 0xd3
 8004fce:	f7fb fd7b 	bl	8000ac8 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 8004fd2:	2391      	movs	r3, #145	; 0x91
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	239d      	movs	r3, #157	; 0x9d
 8004fd8:	2269      	movs	r2, #105	; 0x69
 8004fda:	2105      	movs	r1, #5
 8004fdc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004fe0:	f7fb fcd0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8004fe4:	2391      	movs	r3, #145	; 0x91
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	f240 133b 	movw	r3, #315	; 0x13b
 8004fec:	2269      	movs	r2, #105	; 0x69
 8004fee:	21a3      	movs	r1, #163	; 0xa3
 8004ff0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004ff4:	f7fb fcc6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <Display_settings_screen_background+0x1d8>)
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005008:	2175      	movs	r1, #117	; 0x75
 800500a:	2023      	movs	r0, #35	; 0x23
 800500c:	f7fb fd5c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8005010:	2302      	movs	r3, #2
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <Display_settings_screen_background+0x1dc>)
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800501c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005020:	2175      	movs	r1, #117	; 0x75
 8005022:	20c1      	movs	r0, #193	; 0xc1
 8005024:	f7fb fd50 	bl	8000ac8 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8005028:	23be      	movs	r3, #190	; 0xbe
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	239d      	movs	r3, #157	; 0x9d
 800502e:	2296      	movs	r2, #150	; 0x96
 8005030:	2105      	movs	r1, #5
 8005032:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005036:	f7fb fca5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 800503a:	23be      	movs	r3, #190	; 0xbe
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	f240 133b 	movw	r3, #315	; 0x13b
 8005042:	2296      	movs	r2, #150	; 0x96
 8005044:	21a3      	movs	r1, #163	; 0xa3
 8005046:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800504a:	f7fb fc9b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 800504e:	2302      	movs	r3, #2
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <Display_settings_screen_background+0x1e0>)
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800505a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800505e:	21a2      	movs	r1, #162	; 0xa2
 8005060:	2020      	movs	r0, #32
 8005062:	f7fb fd31 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 8005066:	2302      	movs	r3, #2
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <Display_settings_screen_background+0x1e4>)
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005076:	21a2      	movs	r1, #162	; 0xa2
 8005078:	20a8      	movs	r0, #168	; 0xa8
 800507a:	f7fb fd25 	bl	8000ac8 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 800507e:	23eb      	movs	r3, #235	; 0xeb
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	239d      	movs	r3, #157	; 0x9d
 8005084:	22c3      	movs	r2, #195	; 0xc3
 8005086:	2105      	movs	r1, #5
 8005088:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800508c:	f7fb fc7a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8005090:	23eb      	movs	r3, #235	; 0xeb
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	f240 133b 	movw	r3, #315	; 0x13b
 8005098:	22c3      	movs	r2, #195	; 0xc3
 800509a:	21a3      	movs	r1, #163	; 0xa3
 800509c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80050a0:	f7fb fc70 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 80050a4:	2302      	movs	r3, #2
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	4b15      	ldr	r3, [pc, #84]	; (8005100 <Display_settings_screen_background+0x1e8>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80050b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b4:	21cf      	movs	r1, #207	; 0xcf
 80050b6:	2025      	movs	r0, #37	; 0x25
 80050b8:	f7fb fd06 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80050bc:	2302      	movs	r3, #2
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	4b10      	ldr	r3, [pc, #64]	; (8005104 <Display_settings_screen_background+0x1ec>)
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80050c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050cc:	21cf      	movs	r1, #207	; 0xcf
 80050ce:	20c3      	movs	r0, #195	; 0xc3
 80050d0:	f7fb fcfa 	bl	8000ac8 <ILI9341_Draw_String>

}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	0800e07c 	.word	0x0800e07c
 80050e0:	0800e08c 	.word	0x0800e08c
 80050e4:	0800e094 	.word	0x0800e094
 80050e8:	0800e0a0 	.word	0x0800e0a0
 80050ec:	0800e0ac 	.word	0x0800e0ac
 80050f0:	0800e0b8 	.word	0x0800e0b8
 80050f4:	0800e0c4 	.word	0x0800e0c4
 80050f8:	0800e0d0 	.word	0x0800e0d0
 80050fc:	0800e0e0 	.word	0x0800e0e0
 8005100:	0800deac 	.word	0x0800deac
 8005104:	0800dea0 	.word	0x0800dea0

08005108 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b087      	sub	sp, #28
 800510c:	af02      	add	r7, sp, #8
 800510e:	463c      	mov	r4, r7
 8005110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	461a      	mov	r2, r3
 8005118:	238c      	movs	r3, #140	; 0x8c
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <Display_settings_screen_data+0x84>)
 8005120:	fb82 1203 	smull	r1, r2, r2, r3
 8005124:	441a      	add	r2, r3
 8005126:	1152      	asrs	r2, r2, #5
 8005128:	17db      	asrs	r3, r3, #31
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	330c      	adds	r3, #12
 800512e:	4619      	mov	r1, r3
 8005130:	2332      	movs	r3, #50	; 0x32
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	2398      	movs	r3, #152	; 0x98
 8005136:	2228      	movs	r2, #40	; 0x28
 8005138:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800513c:	f7fb fc22 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	461a      	mov	r2, r3
 8005144:	238c      	movs	r3, #140	; 0x8c
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	4a10      	ldr	r2, [pc, #64]	; (800518c <Display_settings_screen_data+0x84>)
 800514c:	fb82 1203 	smull	r1, r2, r2, r3
 8005150:	441a      	add	r2, r3
 8005152:	1152      	asrs	r2, r2, #5
 8005154:	17db      	asrs	r3, r3, #31
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	330c      	adds	r3, #12
 800515a:	461a      	mov	r2, r3
 800515c:	2332      	movs	r3, #50	; 0x32
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	2228      	movs	r2, #40	; 0x28
 8005164:	210c      	movs	r1, #12
 8005166:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800516a:	f7fb fc0b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 800516e:	2332      	movs	r3, #50	; 0x32
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	f44f 739a 	mov.w	r3, #308	; 0x134
 8005176:	2228      	movs	r2, #40	; 0x28
 8005178:	21a8      	movs	r1, #168	; 0xa8
 800517a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800517e:	f7fb fc01 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}
 800518a:	bf00      	nop
 800518c:	82082083 	.word	0x82082083

08005190 <Display_time>:

void Display_time(time_t time_val)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af02      	add	r7, sp, #8
 8005196:	463b      	mov	r3, r7
 8005198:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 800519c:	883b      	ldrh	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d076      	beq.n	8005290 <Display_time+0x100>
 80051a2:	78bb      	ldrb	r3, [r7, #2]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d073      	beq.n	8005290 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 80051a8:	793b      	ldrb	r3, [r7, #4]
 80051aa:	2b09      	cmp	r3, #9
 80051ac:	d81e      	bhi.n	80051ec <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 80051ae:	2302      	movs	r3, #2
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	4b39      	ldr	r3, [pc, #228]	; (8005298 <Display_time+0x108>)
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2300      	movs	r3, #0
 80051b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051bc:	2101      	movs	r1, #1
 80051be:	f240 100f 	movw	r0, #271	; 0x10f
 80051c2:	f7fb fc81 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80051c6:	793b      	ldrb	r3, [r7, #4]
 80051c8:	220a      	movs	r2, #10
 80051ca:	4934      	ldr	r1, [pc, #208]	; (800529c <Display_time+0x10c>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f007 fee5 	bl	800cf9c <itoa>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2202      	movs	r2, #2
 80051d6:	9201      	str	r2, [sp, #4]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e0:	2101      	movs	r1, #1
 80051e2:	f44f 708c 	mov.w	r0, #280	; 0x118
 80051e6:	f7fb fc6f 	bl	8000ac8 <ILI9341_Draw_String>
 80051ea:	e011      	b.n	8005210 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80051ec:	793b      	ldrb	r3, [r7, #4]
 80051ee:	220a      	movs	r2, #10
 80051f0:	492a      	ldr	r1, [pc, #168]	; (800529c <Display_time+0x10c>)
 80051f2:	4618      	mov	r0, r3
 80051f4:	f007 fed2 	bl	800cf9c <itoa>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2202      	movs	r2, #2
 80051fc:	9201      	str	r2, [sp, #4]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2300      	movs	r3, #0
 8005202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005206:	2101      	movs	r1, #1
 8005208:	f240 100f 	movw	r0, #271	; 0x10f
 800520c:	f7fb fc5c 	bl	8000ac8 <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 8005210:	2302      	movs	r3, #2
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <Display_time+0x110>)
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2300      	movs	r3, #0
 800521a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800521e:	2101      	movs	r1, #1
 8005220:	f240 101f 	movw	r0, #287	; 0x11f
 8005224:	f7fb fc50 	bl	8000ac8 <ILI9341_Draw_String>

		if(time_val.minute < 10)
 8005228:	797b      	ldrb	r3, [r7, #5]
 800522a:	2b09      	cmp	r3, #9
 800522c:	d81e      	bhi.n	800526c <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 800522e:	2302      	movs	r3, #2
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <Display_time+0x108>)
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523c:	2101      	movs	r1, #1
 800523e:	f240 1027 	movw	r0, #295	; 0x127
 8005242:	f7fb fc41 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005246:	797b      	ldrb	r3, [r7, #5]
 8005248:	220a      	movs	r2, #10
 800524a:	4914      	ldr	r1, [pc, #80]	; (800529c <Display_time+0x10c>)
 800524c:	4618      	mov	r0, r3
 800524e:	f007 fea5 	bl	800cf9c <itoa>
 8005252:	4603      	mov	r3, r0
 8005254:	2202      	movs	r2, #2
 8005256:	9201      	str	r2, [sp, #4]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005260:	2101      	movs	r1, #1
 8005262:	f44f 7098 	mov.w	r0, #304	; 0x130
 8005266:	f7fb fc2f 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 800526a:	e011      	b.n	8005290 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 800526c:	797b      	ldrb	r3, [r7, #5]
 800526e:	220a      	movs	r2, #10
 8005270:	490a      	ldr	r1, [pc, #40]	; (800529c <Display_time+0x10c>)
 8005272:	4618      	mov	r0, r3
 8005274:	f007 fe92 	bl	800cf9c <itoa>
 8005278:	4603      	mov	r3, r0
 800527a:	2202      	movs	r2, #2
 800527c:	9201      	str	r2, [sp, #4]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005286:	2101      	movs	r1, #1
 8005288:	f240 1027 	movw	r0, #295	; 0x127
 800528c:	f7fb fc1c 	bl	8000ac8 <ILI9341_Draw_String>
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0800e068 	.word	0x0800e068
 800529c:	20003098 	.word	0x20003098
 80052a0:	0800e0f4 	.word	0x0800e0f4

080052a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <MX_DMA_Init+0x3c>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <MX_DMA_Init+0x3c>)
 80052b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052b8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <MX_DMA_Init+0x3c>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80052c6:	2200      	movs	r2, #0
 80052c8:	2100      	movs	r1, #0
 80052ca:	200f      	movs	r0, #15
 80052cc:	f001 ff6f 	bl	80071ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80052d0:	200f      	movs	r0, #15
 80052d2:	f001 ff88 	bl	80071e6 <HAL_NVIC_EnableIRQ>

}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800

080052e4 <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 80052e8:	bf00      	nop
 80052ea:	f001 fe55 	bl	8006f98 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <eeprom_wait+0x1c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b14      	cmp	r3, #20
 80052f8:	d9f7      	bls.n	80052ea <eeprom_wait+0x6>
}
 80052fa:	bf00      	nop
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200030dc 	.word	0x200030dc

08005304 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af04      	add	r7, sp, #16
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8005310:	f7ff ffe8 	bl	80052e4 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005320:	9102      	str	r1, [sp, #8]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2302      	movs	r3, #2
 800532a:	21a0      	movs	r1, #160	; 0xa0
 800532c:	4803      	ldr	r0, [pc, #12]	; (800533c <eeprom_read+0x38>)
 800532e:	f002 fe9b 	bl	8008068 <HAL_I2C_Mem_Read>
 8005332:	4603      	mov	r3, r0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	200030e0 	.word	0x200030e0

08005340 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af04      	add	r7, sp, #16
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 800534c:	f7ff ffca 	bl	80052e4 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800535c:	9102      	str	r1, [sp, #8]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2302      	movs	r3, #2
 8005366:	21a0      	movs	r1, #160	; 0xa0
 8005368:	4807      	ldr	r0, [pc, #28]	; (8005388 <eeprom_write+0x48>)
 800536a:	f002 fd83 	bl	8007e74 <HAL_I2C_Mem_Write>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8005372:	f001 fe11 	bl	8006f98 <HAL_GetTick>
 8005376:	4603      	mov	r3, r0
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <eeprom_write+0x4c>)
 800537a:	6013      	str	r3, [r2, #0]

    return rc;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200030e0 	.word	0x200030e0
 800538c:	200030dc 	.word	0x200030dc

08005390 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b092      	sub	sp, #72	; 0x48
 8005394:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 8005396:	2101      	movs	r1, #1
 8005398:	4829      	ldr	r0, [pc, #164]	; (8005440 <eeprom_clear_scanning_data+0xb0>)
 800539a:	f7fe f953 	bl	8003644 <send_debug_msg>

	 uint8_t clear_page_sequence[64];

	 for (uint8_t i = 0; i < 64; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80053a4:	e00b      	b.n	80053be <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 80053a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053aa:	3348      	adds	r3, #72	; 0x48
 80053ac:	443b      	add	r3, r7
 80053ae:	22ff      	movs	r2, #255	; 0xff
 80053b0:	f803 2c44 	strb.w	r2, [r3, #-68]
	 for (uint8_t i = 0; i < 64; i++)
 80053b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053b8:	3301      	adds	r3, #1
 80053ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80053be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053c2:	2b3f      	cmp	r3, #63	; 0x3f
 80053c4:	d9ef      	bls.n	80053a6 <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	2240      	movs	r2, #64	; 0x40
 80053ca:	4619      	mov	r1, r3
 80053cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053d0:	f7ff ffb6 	bl	8005340 <eeprom_write>


	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80053da:	e00e      	b.n	80053fa <eeprom_clear_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80053dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80053e0:	3305      	adds	r3, #5
 80053e2:	019b      	lsls	r3, r3, #6
 80053e4:	4618      	mov	r0, r3
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	2240      	movs	r2, #64	; 0x40
 80053ea:	4619      	mov	r1, r3
 80053ec:	f7ff ffa8 	bl	8005340 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80053f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80053f4:	3301      	adds	r3, #1
 80053f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80053fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80053fe:	2b09      	cmp	r3, #9
 8005400:	d9ec      	bls.n	80053dc <eeprom_clear_scanning_data+0x4c>
	}

	//clear services list
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005408:	e00e      	b.n	8005428 <eeprom_clear_scanning_data+0x98>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 800540a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800540e:	330f      	adds	r3, #15
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	4618      	mov	r0, r3
 8005414:	1d3b      	adds	r3, r7, #4
 8005416:	2240      	movs	r2, #64	; 0x40
 8005418:	4619      	mov	r1, r3
 800541a:	f7ff ff91 	bl	8005340 <eeprom_write>
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 800541e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005422:	3301      	adds	r3, #1
 8005424:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005428:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800542c:	2b63      	cmp	r3, #99	; 0x63
 800542e:	d9ec      	bls.n	800540a <eeprom_clear_scanning_data+0x7a>
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8005430:	2101      	movs	r1, #1
 8005432:	4804      	ldr	r0, [pc, #16]	; (8005444 <eeprom_clear_scanning_data+0xb4>)
 8005434:	f7fe f906 	bl	8003644 <send_debug_msg>
}
 8005438:	bf00      	nop
 800543a:	3748      	adds	r7, #72	; 0x48
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	0800e1b8 	.word	0x0800e1b8
 8005444:	0800e1d8 	.word	0x0800e1d8

08005448 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	461a      	mov	r2, r3
 8005454:	460b      	mov	r3, r1
 8005456:	72fb      	strb	r3, [r7, #11]
 8005458:	4613      	mov	r3, r2
 800545a:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 800545c:	2101      	movs	r1, #1
 800545e:	4824      	ldr	r0, [pc, #144]	; (80054f0 <eeprom_save_scanning_data+0xa8>)
 8005460:	f7fe f8f0 	bl	8003644 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8005464:	f107 030a 	add.w	r3, r7, #10
 8005468:	2201      	movs	r2, #1
 800546a:	4619      	mov	r1, r3
 800546c:	f240 1005 	movw	r0, #261	; 0x105
 8005470:	f7ff ff66 	bl	8005340 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8005474:	f107 030b 	add.w	r3, r7, #11
 8005478:	2201      	movs	r2, #1
 800547a:	4619      	mov	r1, r3
 800547c:	f44f 7083 	mov.w	r0, #262	; 0x106
 8005480:	f7ff ff5e 	bl	8005340 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005484:	2300      	movs	r3, #0
 8005486:	75fb      	strb	r3, [r7, #23]
 8005488:	e00e      	b.n	80054a8 <eeprom_save_scanning_data+0x60>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 800548a:	7dfb      	ldrb	r3, [r7, #23]
 800548c:	3305      	adds	r3, #5
 800548e:	019b      	lsls	r3, r3, #6
 8005490:	4618      	mov	r0, r3
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	015b      	lsls	r3, r3, #5
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	2220      	movs	r2, #32
 800549c:	4619      	mov	r1, r3
 800549e:	f7ff ff4f 	bl	8005340 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	3301      	adds	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
 80054a8:	7abb      	ldrb	r3, [r7, #10]
 80054aa:	7dfa      	ldrb	r2, [r7, #23]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d3ec      	bcc.n	800548a <eeprom_save_scanning_data+0x42>
	}

	//save services
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80054b0:	2300      	movs	r3, #0
 80054b2:	75bb      	strb	r3, [r7, #22]
 80054b4:	e010      	b.n	80054d8 <eeprom_save_scanning_data+0x90>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE, &_services_list[services_index], sizeof(dab_service_t));
 80054b6:	7dbb      	ldrb	r3, [r7, #22]
 80054b8:	330f      	adds	r3, #15
 80054ba:	019b      	lsls	r3, r3, #6
 80054bc:	4618      	mov	r0, r3
 80054be:	7dbb      	ldrb	r3, [r7, #22]
 80054c0:	2234      	movs	r2, #52	; 0x34
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	2234      	movs	r2, #52	; 0x34
 80054cc:	4619      	mov	r1, r3
 80054ce:	f7ff ff37 	bl	8005340 <eeprom_write>
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80054d2:	7dbb      	ldrb	r3, [r7, #22]
 80054d4:	3301      	adds	r3, #1
 80054d6:	75bb      	strb	r3, [r7, #22]
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	7dba      	ldrb	r2, [r7, #22]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d3ea      	bcc.n	80054b6 <eeprom_save_scanning_data+0x6e>
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 80054e0:	2101      	movs	r1, #1
 80054e2:	4804      	ldr	r0, [pc, #16]	; (80054f4 <eeprom_save_scanning_data+0xac>)
 80054e4:	f7fe f8ae 	bl	8003644 <send_debug_msg>
}
 80054e8:	bf00      	nop
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	0800e1e4 	.word	0x0800e1e4
 80054f4:	0800e200 	.word	0x0800e200

080054f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054fe:	f107 031c 	add.w	r3, r7, #28
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	60da      	str	r2, [r3, #12]
 800550c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	4b6c      	ldr	r3, [pc, #432]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	4a6b      	ldr	r2, [pc, #428]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	6313      	str	r3, [r2, #48]	; 0x30
 800551e:	4b69      	ldr	r3, [pc, #420]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4a64      	ldr	r2, [pc, #400]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6313      	str	r3, [r2, #48]	; 0x30
 800553a:	4b62      	ldr	r3, [pc, #392]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	4b5e      	ldr	r3, [pc, #376]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	4a5d      	ldr	r2, [pc, #372]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005550:	f043 0304 	orr.w	r3, r3, #4
 8005554:	6313      	str	r3, [r2, #48]	; 0x30
 8005556:	4b5b      	ldr	r3, [pc, #364]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	4b57      	ldr	r3, [pc, #348]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	4a56      	ldr	r2, [pc, #344]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	6313      	str	r3, [r2, #48]	; 0x30
 8005572:	4b54      	ldr	r3, [pc, #336]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	4b50      	ldr	r3, [pc, #320]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	4a4f      	ldr	r2, [pc, #316]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005588:	f043 0310 	orr.w	r3, r3, #16
 800558c:	6313      	str	r3, [r2, #48]	; 0x30
 800558e:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	607b      	str	r3, [r7, #4]
 800559e:	4b49      	ldr	r3, [pc, #292]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	4a48      	ldr	r2, [pc, #288]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 80055a4:	f043 0308 	orr.w	r3, r3, #8
 80055a8:	6313      	str	r3, [r2, #48]	; 0x30
 80055aa:	4b46      	ldr	r3, [pc, #280]	; (80056c4 <MX_GPIO_Init+0x1cc>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80055b6:	2200      	movs	r2, #0
 80055b8:	2130      	movs	r1, #48	; 0x30
 80055ba:	4843      	ldr	r0, [pc, #268]	; (80056c8 <MX_GPIO_Init+0x1d0>)
 80055bc:	f002 fafc 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055c6:	4841      	ldr	r0, [pc, #260]	; (80056cc <MX_GPIO_Init+0x1d4>)
 80055c8:	f002 faf6 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80055cc:	2200      	movs	r2, #0
 80055ce:	f24f 7180 	movw	r1, #63360	; 0xf780
 80055d2:	483f      	ldr	r0, [pc, #252]	; (80056d0 <MX_GPIO_Init+0x1d8>)
 80055d4:	f002 faf0 	bl	8007bb8 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80055d8:	2200      	movs	r2, #0
 80055da:	2128      	movs	r1, #40	; 0x28
 80055dc:	483d      	ldr	r0, [pc, #244]	; (80056d4 <MX_GPIO_Init+0x1dc>)
 80055de:	f002 faeb 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80055e2:	2310      	movs	r3, #16
 80055e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055e6:	2300      	movs	r3, #0
 80055e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80055ee:	f107 031c 	add.w	r3, r7, #28
 80055f2:	4619      	mov	r1, r3
 80055f4:	4838      	ldr	r0, [pc, #224]	; (80056d8 <MX_GPIO_Init+0x1e0>)
 80055f6:	f002 f92b 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 80055fa:	2330      	movs	r3, #48	; 0x30
 80055fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fe:	2301      	movs	r3, #1
 8005600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005606:	2302      	movs	r3, #2
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800560a:	f107 031c 	add.w	r3, r7, #28
 800560e:	4619      	mov	r1, r3
 8005610:	482d      	ldr	r0, [pc, #180]	; (80056c8 <MX_GPIO_Init+0x1d0>)
 8005612:	f002 f91d 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8005616:	2311      	movs	r3, #17
 8005618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800561a:	2300      	movs	r3, #0
 800561c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005622:	f107 031c 	add.w	r3, r7, #28
 8005626:	4619      	mov	r1, r3
 8005628:	482a      	ldr	r0, [pc, #168]	; (80056d4 <MX_GPIO_Init+0x1dc>)
 800562a:	f002 f911 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800562e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005634:	2301      	movs	r3, #1
 8005636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8005640:	f107 031c 	add.w	r3, r7, #28
 8005644:	4619      	mov	r1, r3
 8005646:	4821      	ldr	r0, [pc, #132]	; (80056cc <MX_GPIO_Init+0x1d4>)
 8005648:	f002 f902 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 800564c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8005650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005652:	2301      	movs	r3, #1
 8005654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800565a:	2302      	movs	r3, #2
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	4619      	mov	r1, r3
 8005664:	481a      	ldr	r0, [pc, #104]	; (80056d0 <MX_GPIO_Init+0x1d8>)
 8005666:	f002 f8f3 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800566a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800566e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005670:	2301      	movs	r3, #1
 8005672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800567c:	f107 031c 	add.w	r3, r7, #28
 8005680:	4619      	mov	r1, r3
 8005682:	4813      	ldr	r0, [pc, #76]	; (80056d0 <MX_GPIO_Init+0x1d8>)
 8005684:	f002 f8e4 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800568c:	2300      	movs	r3, #0
 800568e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005694:	f107 031c 	add.w	r3, r7, #28
 8005698:	4619      	mov	r1, r3
 800569a:	480d      	ldr	r0, [pc, #52]	; (80056d0 <MX_GPIO_Init+0x1d8>)
 800569c:	f002 f8d8 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80056a0:	2328      	movs	r3, #40	; 0x28
 80056a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056a4:	2301      	movs	r3, #1
 80056a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ac:	2302      	movs	r3, #2
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b0:	f107 031c 	add.w	r3, r7, #28
 80056b4:	4619      	mov	r1, r3
 80056b6:	4807      	ldr	r0, [pc, #28]	; (80056d4 <MX_GPIO_Init+0x1dc>)
 80056b8:	f002 f8ca 	bl	8007850 <HAL_GPIO_Init>

}
 80056bc:	bf00      	nop
 80056be:	3730      	adds	r7, #48	; 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40020800 	.word	0x40020800
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40020c00 	.word	0x40020c00
 80056d4:	40020400 	.word	0x40020400
 80056d8:	40020000 	.word	0x40020000

080056dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056e0:	4b12      	ldr	r3, [pc, #72]	; (800572c <MX_I2C1_Init+0x50>)
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <MX_I2C1_Init+0x54>)
 80056e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <MX_I2C1_Init+0x50>)
 80056e8:	4a12      	ldr	r2, [pc, #72]	; (8005734 <MX_I2C1_Init+0x58>)
 80056ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <MX_I2C1_Init+0x50>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <MX_I2C1_Init+0x50>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <MX_I2C1_Init+0x50>)
 80056fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <MX_I2C1_Init+0x50>)
 8005702:	2200      	movs	r2, #0
 8005704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <MX_I2C1_Init+0x50>)
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <MX_I2C1_Init+0x50>)
 800570e:	2200      	movs	r2, #0
 8005710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <MX_I2C1_Init+0x50>)
 8005714:	2200      	movs	r2, #0
 8005716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005718:	4804      	ldr	r0, [pc, #16]	; (800572c <MX_I2C1_Init+0x50>)
 800571a:	f002 fa67 	bl	8007bec <HAL_I2C_Init>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005724:	f000 f982 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200030e0 	.word	0x200030e0
 8005730:	40005400 	.word	0x40005400
 8005734:	000186a0 	.word	0x000186a0

08005738 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <MX_I2C3_Init+0x50>)
 800573e:	4a13      	ldr	r2, [pc, #76]	; (800578c <MX_I2C3_Init+0x54>)
 8005740:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005742:	4b11      	ldr	r3, [pc, #68]	; (8005788 <MX_I2C3_Init+0x50>)
 8005744:	4a12      	ldr	r2, [pc, #72]	; (8005790 <MX_I2C3_Init+0x58>)
 8005746:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <MX_I2C3_Init+0x50>)
 800574a:	2200      	movs	r2, #0
 800574c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <MX_I2C3_Init+0x50>)
 8005750:	2200      	movs	r2, #0
 8005752:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <MX_I2C3_Init+0x50>)
 8005756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800575a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <MX_I2C3_Init+0x50>)
 800575e:	2200      	movs	r2, #0
 8005760:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <MX_I2C3_Init+0x50>)
 8005764:	2200      	movs	r2, #0
 8005766:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <MX_I2C3_Init+0x50>)
 800576a:	2200      	movs	r2, #0
 800576c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <MX_I2C3_Init+0x50>)
 8005770:	2200      	movs	r2, #0
 8005772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005774:	4804      	ldr	r0, [pc, #16]	; (8005788 <MX_I2C3_Init+0x50>)
 8005776:	f002 fa39 	bl	8007bec <HAL_I2C_Init>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005780:	f000 f954 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20003134 	.word	0x20003134
 800578c:	40005c00 	.word	0x40005c00
 8005790:	000186a0 	.word	0x000186a0

08005794 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	; 0x30
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <HAL_I2C_MspInit+0x148>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d12c      	bne.n	8005810 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	4b49      	ldr	r3, [pc, #292]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	4a48      	ldr	r2, [pc, #288]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6313      	str	r3, [r2, #48]	; 0x30
 80057c6:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80057d2:	23c0      	movs	r3, #192	; 0xc0
 80057d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057d6:	2312      	movs	r3, #18
 80057d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057de:	2303      	movs	r3, #3
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057e2:	2304      	movs	r3, #4
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e6:	f107 031c 	add.w	r3, r7, #28
 80057ea:	4619      	mov	r1, r3
 80057ec:	483d      	ldr	r0, [pc, #244]	; (80058e4 <HAL_I2C_MspInit+0x150>)
 80057ee:	f002 f82f 	bl	8007850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	4b3a      	ldr	r3, [pc, #232]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	4a39      	ldr	r2, [pc, #228]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80057fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005800:	6413      	str	r3, [r2, #64]	; 0x40
 8005802:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800580e:	e060      	b.n	80058d2 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <HAL_I2C_MspInit+0x154>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d15b      	bne.n	80058d2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	4b30      	ldr	r3, [pc, #192]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	4a2f      	ldr	r2, [pc, #188]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 8005824:	f043 0304 	orr.w	r3, r3, #4
 8005828:	6313      	str	r3, [r2, #48]	; 0x30
 800582a:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4a28      	ldr	r2, [pc, #160]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6313      	str	r3, [r2, #48]	; 0x30
 8005846:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005858:	2312      	movs	r3, #18
 800585a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005860:	2303      	movs	r3, #3
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005864:	2304      	movs	r3, #4
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005868:	f107 031c 	add.w	r3, r7, #28
 800586c:	4619      	mov	r1, r3
 800586e:	481f      	ldr	r0, [pc, #124]	; (80058ec <HAL_I2C_MspInit+0x158>)
 8005870:	f001 ffee 	bl	8007850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800587a:	2312      	movs	r3, #18
 800587c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587e:	2300      	movs	r3, #0
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005882:	2303      	movs	r3, #3
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005886:	2304      	movs	r3, #4
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800588a:	f107 031c 	add.w	r3, r7, #28
 800588e:	4619      	mov	r1, r3
 8005890:	4817      	ldr	r0, [pc, #92]	; (80058f0 <HAL_I2C_MspInit+0x15c>)
 8005892:	f001 ffdd 	bl	8007850 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80058a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058a4:	6413      	str	r3, [r2, #64]	; 0x40
 80058a6:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <HAL_I2C_MspInit+0x14c>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	2048      	movs	r0, #72	; 0x48
 80058b8:	f001 fc79 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80058bc:	2048      	movs	r0, #72	; 0x48
 80058be:	f001 fc92 	bl	80071e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2100      	movs	r1, #0
 80058c6:	2049      	movs	r0, #73	; 0x49
 80058c8:	f001 fc71 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80058cc:	2049      	movs	r0, #73	; 0x49
 80058ce:	f001 fc8a 	bl	80071e6 <HAL_NVIC_EnableIRQ>
}
 80058d2:	bf00      	nop
 80058d4:	3730      	adds	r7, #48	; 0x30
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40005400 	.word	0x40005400
 80058e0:	40023800 	.word	0x40023800
 80058e4:	40020400 	.word	0x40020400
 80058e8:	40005c00 	.word	0x40005c00
 80058ec:	40020800 	.word	0x40020800
 80058f0:	40020000 	.word	0x40020000

080058f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058f8:	f001 fae8 	bl	8006ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058fc:	f000 f82c 	bl	8005958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005900:	f7ff fdfa 	bl	80054f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005904:	f7ff fcce 	bl	80052a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8005908:	f7ff fee8 	bl	80056dc <MX_I2C1_Init>
  MX_I2C3_Init();
 800590c:	f7ff ff14 	bl	8005738 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005910:	f000 f892 	bl	8005a38 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005914:	f000 f8c6 	bl	8005aa4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005918:	f000 fe5e 	bl	80065d8 <MX_TIM3_Init>
  MX_UART5_Init();
 800591c:	f001 f9b8 	bl	8006c90 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005920:	f001 f9e0 	bl	8006ce4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005924:	f000 feb2 	bl	800668c <MX_TIM10_Init>
  MX_TIM11_Init();
 8005928:	f000 fed4 	bl	80066d4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 800592c:	2101      	movs	r1, #1
 800592e:	4808      	ldr	r0, [pc, #32]	; (8005950 <main+0x5c>)
 8005930:	f7fd fe88 	bl	8003644 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005934:	4807      	ldr	r0, [pc, #28]	; (8005954 <main+0x60>)
 8005936:	f006 f9a1 	bl	800bc7c <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 800593a:	f7fa fdcf 	bl	80004dc <ILI9341_Init>

  Display_booting_screen();
 800593e:	f7fd febb 	bl	80036b8 <Display_booting_screen>


  Si468x_dab_init();
 8005942:	f7fb fb8b 	bl	800105c <Si468x_dab_init>
  restore_from_eeprom();
 8005946:	f7fd fb21 	bl	8002f8c <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 800594a:	f000 f999 	bl	8005c80 <state_machine>
 800594e:	e7fc      	b.n	800594a <main+0x56>
 8005950:	0800e428 	.word	0x0800e428
 8005954:	20003388 	.word	0x20003388

08005958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b094      	sub	sp, #80	; 0x50
 800595c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800595e:	f107 0320 	add.w	r3, r7, #32
 8005962:	2230      	movs	r2, #48	; 0x30
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f007 fb1a 	bl	800cfa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <SystemClock_Config+0xcc>)
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <SystemClock_Config+0xcc>)
 8005986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598a:	6413      	str	r3, [r2, #64]	; 0x40
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <SystemClock_Config+0xcc>)
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005998:	2300      	movs	r3, #0
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	4b22      	ldr	r3, [pc, #136]	; (8005a28 <SystemClock_Config+0xd0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a21      	ldr	r2, [pc, #132]	; (8005a28 <SystemClock_Config+0xd0>)
 80059a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b1f      	ldr	r3, [pc, #124]	; (8005a28 <SystemClock_Config+0xd0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059be:	2302      	movs	r3, #2
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80059c8:	2304      	movs	r3, #4
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 80059cc:	23f0      	movs	r3, #240	; 0xf0
 80059ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059d0:	2302      	movs	r3, #2
 80059d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80059d4:	2304      	movs	r3, #4
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059d8:	f107 0320 	add.w	r3, r7, #32
 80059dc:	4618      	mov	r0, r3
 80059de:	f004 fd9f 	bl	800a520 <HAL_RCC_OscConfig>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80059e8:	f000 f820 	bl	8005a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059ec:	230f      	movs	r3, #15
 80059ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059f0:	2302      	movs	r3, #2
 80059f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80059f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80059fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a04:	f107 030c 	add.w	r3, r7, #12
 8005a08:	2105      	movs	r1, #5
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f005 f800 	bl	800aa10 <HAL_RCC_ClockConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005a16:	f000 f809 	bl	8005a2c <Error_Handler>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3750      	adds	r7, #80	; 0x50
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40007000 	.word	0x40007000

08005a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a30:	b672      	cpsid	i
}
 8005a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a34:	e7fe      	b.n	8005a34 <Error_Handler+0x8>
	...

08005a38 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a3e:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <MX_SPI1_Init+0x68>)
 8005a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a42:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a62:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a84:	220a      	movs	r2, #10
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a88:	4804      	ldr	r0, [pc, #16]	; (8005a9c <MX_SPI1_Init+0x64>)
 8005a8a:	f005 f9e1 	bl	800ae50 <HAL_SPI_Init>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005a94:	f7ff ffca 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20003188 	.word	0x20003188
 8005aa0:	40013000 	.word	0x40013000

08005aa4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005aa8:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <MX_SPI2_Init+0x68>)
 8005aac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ab4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005abc:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005af0:	220a      	movs	r2, #10
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005af4:	4804      	ldr	r0, [pc, #16]	; (8005b08 <MX_SPI2_Init+0x64>)
 8005af6:	f005 f9ab 	bl	800ae50 <HAL_SPI_Init>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005b00:	f7ff ff94 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b04:	bf00      	nop
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	200031e0 	.word	0x200031e0
 8005b0c:	40003800 	.word	0x40003800

08005b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	; 0x30
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b18:	f107 031c 	add.w	r3, r7, #28
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a4d      	ldr	r2, [pc, #308]	; (8005c64 <HAL_SPI_MspInit+0x154>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d12c      	bne.n	8005b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	4a4b      	ldr	r2, [pc, #300]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b40:	6453      	str	r3, [r2, #68]	; 0x44
 8005b42:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	4b45      	ldr	r3, [pc, #276]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	4a44      	ldr	r2, [pc, #272]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5e:	4b42      	ldr	r3, [pc, #264]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005b6a:	23e0      	movs	r3, #224	; 0xe0
 8005b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b76:	2303      	movs	r3, #3
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b7a:	2305      	movs	r3, #5
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b7e:	f107 031c 	add.w	r3, r7, #28
 8005b82:	4619      	mov	r1, r3
 8005b84:	4839      	ldr	r0, [pc, #228]	; (8005c6c <HAL_SPI_MspInit+0x15c>)
 8005b86:	f001 fe63 	bl	8007850 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005b8a:	e066      	b.n	8005c5a <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <HAL_SPI_MspInit+0x160>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d161      	bne.n	8005c5a <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a32      	ldr	r2, [pc, #200]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	4b30      	ldr	r3, [pc, #192]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005bbc:	f043 0302 	orr.w	r3, r3, #2
 8005bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <HAL_SPI_MspInit+0x158>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8005bce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005be0:	2305      	movs	r3, #5
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be4:	f107 031c 	add.w	r3, r7, #28
 8005be8:	4619      	mov	r1, r3
 8005bea:	4822      	ldr	r0, [pc, #136]	; (8005c74 <HAL_SPI_MspInit+0x164>)
 8005bec:	f001 fe30 	bl	8007850 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005bf0:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005bf2:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <HAL_SPI_MspInit+0x16c>)
 8005bf4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c02:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c08:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005c1c:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c28:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005c2e:	4812      	ldr	r0, [pc, #72]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c30:	f001 faf4 	bl	800721c <HAL_DMA_Init>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8005c3a:	f7ff fef7 	bl	8005a2c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a0d      	ldr	r2, [pc, #52]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c42:	649a      	str	r2, [r3, #72]	; 0x48
 8005c44:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <HAL_SPI_MspInit+0x168>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	2024      	movs	r0, #36	; 0x24
 8005c50:	f001 faad 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005c54:	2024      	movs	r0, #36	; 0x24
 8005c56:	f001 fac6 	bl	80071e6 <HAL_NVIC_EnableIRQ>
}
 8005c5a:	bf00      	nop
 8005c5c:	3730      	adds	r7, #48	; 0x30
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40013000 	.word	0x40013000
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	40020000 	.word	0x40020000
 8005c70:	40003800 	.word	0x40003800
 8005c74:	40020400 	.word	0x40020400
 8005c78:	20003238 	.word	0x20003238
 8005c7c:	40026070 	.word	0x40026070

08005c80 <state_machine>:
uint8_t scan_cancel_flag = 0;

uint8_t scan_complete_flag = 0;

void state_machine()
{
 8005c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c82:	b097      	sub	sp, #92	; 0x5c
 8005c84:	af06      	add	r7, sp, #24
	if(state_change_done)
 8005c86:	4b5c      	ldr	r3, [pc, #368]	; (8005df8 <state_machine+0x178>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 8005c8e:	f000 fde7 	bl	8006860 <Touch_read>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4a59      	ldr	r2, [pc, #356]	; (8005dfc <state_machine+0x17c>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e005      	b.n	8005ca6 <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 8005c9a:	4b58      	ldr	r3, [pc, #352]	; (8005dfc <state_machine+0x17c>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8005ca0:	4b56      	ldr	r3, [pc, #344]	; (8005dfc <state_machine+0x17c>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 8005ca6:	4c56      	ldr	r4, [pc, #344]	; (8005e00 <state_machine+0x180>)
 8005ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fd fcb7 	bl	8003620 <get_dab_management>
 8005cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8005cbc:	4c51      	ldr	r4, [pc, #324]	; (8005e04 <state_machine+0x184>)
 8005cbe:	f107 0308 	add.w	r3, r7, #8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fb ffae 	bl	8001c24 <Si468x_dab_digrad_status>
 8005cc8:	4625      	mov	r5, r4
 8005cca:	f107 0408 	add.w	r4, r7, #8
 8005cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cda:	e885 0003 	stmia.w	r5, {r0, r1}

	services_list_to_display = get_dab_service_list();
 8005cde:	f7fd fc8b 	bl	80035f8 <get_dab_service_list>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4a48      	ldr	r2, [pc, #288]	; (8005e08 <state_machine+0x188>)
 8005ce6:	6013      	str	r3, [r2, #0]
	ensembles_list_to_display = get_dab_ensemble_list();
 8005ce8:	f7fd fc90 	bl	800360c <get_dab_ensemble_list>
 8005cec:	4603      	mov	r3, r0
 8005cee:	4a47      	ldr	r2, [pc, #284]	; (8005e0c <state_machine+0x18c>)
 8005cf0:	6013      	str	r3, [r2, #0]
//	dab_audio_info_to_display = Si468x_dab_get_audio_info();
	Si468x_dab_get_time();
 8005cf2:	f7fd f83d 	bl	8002d70 <Si468x_dab_get_time>

	switch(system_state)
 8005cf6:	4b46      	ldr	r3, [pc, #280]	; (8005e10 <state_machine+0x190>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	f200 83a4 	bhi.w	8006448 <state_machine+0x7c8>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <state_machine+0x88>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d1d 	.word	0x08005d1d
 8005d0c:	08005e1d 	.word	0x08005e1d
 8005d10:	0800625d 	.word	0x0800625d
 8005d14:	080061ad 	.word	0x080061ad
 8005d18:	080062d1 	.word	0x080062d1
	{
	case main_screen:

		if(!state_change_done)
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <state_machine+0x178>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d117      	bne.n	8005d54 <state_machine+0xd4>
		{
			if(!dab_management_to_display.total_services)
 8005d24:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <state_machine+0x180>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <state_machine+0xb2>
			{
				playing_state = not_playing;
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <state_machine+0x194>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
			}
			Display_main_screen_background();
 8005d32:	f7fd fd33 	bl	800379c <Display_main_screen_background>
			dab_audio_info_to_display = Si468x_dab_get_audio_info();
 8005d36:	4c38      	ldr	r4, [pc, #224]	; (8005e18 <state_machine+0x198>)
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fc fe83 	bl	8002a48 <Si468x_dab_get_audio_info>
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			state_change_done = 1;
 8005d4c:	4b2a      	ldr	r3, [pc, #168]	; (8005df8 <state_machine+0x178>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e01e      	b.n	8005d92 <state_machine+0x112>
		}

		else
		{
			if(playing_state == playing)
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <state_machine+0x194>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d118      	bne.n	8005d8e <state_machine+0x10e>
			{
				Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <state_machine+0x188>)
 8005d5e:	681e      	ldr	r6, [r3, #0]
 8005d60:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <state_machine+0x18c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	4c26      	ldr	r4, [pc, #152]	; (8005e00 <state_machine+0x180>)
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <state_machine+0x198>)
 8005d6a:	ad02      	add	r5, sp, #8
 8005d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005d72:	466a      	mov	r2, sp
 8005d74:	f104 0308 	add.w	r3, r4, #8
 8005d78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d80:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4630      	mov	r0, r6
 8005d88:	f7fd fd96 	bl	80038b8 <Display_main_screen_data>
 8005d8c:	e001      	b.n	8005d92 <state_machine+0x112>
			}
			else
			{
				Display_main_screen_empty();
 8005d8e:	f7fd fef3 	bl	8003b78 <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005d92:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <state_machine+0x17c>)
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d911      	bls.n	8005dbe <state_machine+0x13e>
 8005d9a:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <state_machine+0x17c>)
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	2b9c      	cmp	r3, #156	; 0x9c
 8005da0:	d80d      	bhi.n	8005dbe <state_machine+0x13e>
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <state_machine+0x17c>)
 8005da4:	885b      	ldrh	r3, [r3, #2]
 8005da6:	2bc3      	cmp	r3, #195	; 0xc3
 8005da8:	d909      	bls.n	8005dbe <state_machine+0x13e>
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <state_machine+0x17c>)
 8005dac:	885b      	ldrh	r3, [r3, #2]
 8005dae:	2bea      	cmp	r3, #234	; 0xea
 8005db0:	d805      	bhi.n	8005dbe <state_machine+0x13e>
		{
			state_change_done = 0;
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <state_machine+0x178>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <state_machine+0x190>)
 8005dba:	2204      	movs	r2, #4
 8005dbc:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <state_machine+0x17c>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	2ba3      	cmp	r3, #163	; 0xa3
 8005dc4:	f240 8342 	bls.w	800644c <state_machine+0x7cc>
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <state_machine+0x17c>)
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005dd0:	f200 833c 	bhi.w	800644c <state_machine+0x7cc>
 8005dd4:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <state_machine+0x17c>)
 8005dd6:	885b      	ldrh	r3, [r3, #2]
 8005dd8:	2bc3      	cmp	r3, #195	; 0xc3
 8005dda:	f240 8337 	bls.w	800644c <state_machine+0x7cc>
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <state_machine+0x17c>)
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	2bea      	cmp	r3, #234	; 0xea
 8005de4:	f200 8332 	bhi.w	800644c <state_machine+0x7cc>
		{
			state_change_done = 0;
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <state_machine+0x178>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <state_machine+0x190>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
		}

		break;
 8005df4:	e32a      	b.n	800644c <state_machine+0x7cc>
 8005df6:	bf00      	nop
 8005df8:	20003299 	.word	0x20003299
 8005dfc:	200032a0 	.word	0x200032a0
 8005e00:	200032cc 	.word	0x200032cc
 8005e04:	200032a4 	.word	0x200032a4
 8005e08:	200032dc 	.word	0x200032dc
 8005e0c:	200032e0 	.word	0x200032e0
 8005e10:	20003298 	.word	0x20003298
 8005e14:	20000150 	.word	0x20000150
 8005e18:	200032e4 	.word	0x200032e4

	case services_list_screen:
		if(!state_change_done)
 8005e1c:	4b7b      	ldr	r3, [pc, #492]	; (800600c <state_machine+0x38c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10f      	bne.n	8005e44 <state_machine+0x1c4>
		{
//			srv_list_start_index = 0;
			Display_stations_list_background();
 8005e24:	f7fd ff0e 	bl	8003c44 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8005e28:	4b79      	ldr	r3, [pc, #484]	; (8006010 <state_machine+0x390>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	4b79      	ldr	r3, [pc, #484]	; (8006014 <state_machine+0x394>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b79      	ldr	r3, [pc, #484]	; (8006018 <state_machine+0x398>)
 8005e32:	9201      	str	r2, [sp, #4]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	9200      	str	r2, [sp, #0]
 8005e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e3a:	f7fd ffc7 	bl	8003dcc <Display_stations_list_data>
			state_change_done = 1;
 8005e3e:	4b73      	ldr	r3, [pc, #460]	; (800600c <state_machine+0x38c>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005e44:	4b75      	ldr	r3, [pc, #468]	; (800601c <state_machine+0x39c>)
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d911      	bls.n	8005e70 <state_machine+0x1f0>
 8005e4c:	4b73      	ldr	r3, [pc, #460]	; (800601c <state_machine+0x39c>)
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	2b9c      	cmp	r3, #156	; 0x9c
 8005e52:	d80d      	bhi.n	8005e70 <state_machine+0x1f0>
 8005e54:	4b71      	ldr	r3, [pc, #452]	; (800601c <state_machine+0x39c>)
 8005e56:	885b      	ldrh	r3, [r3, #2]
 8005e58:	2bc3      	cmp	r3, #195	; 0xc3
 8005e5a:	d909      	bls.n	8005e70 <state_machine+0x1f0>
 8005e5c:	4b6f      	ldr	r3, [pc, #444]	; (800601c <state_machine+0x39c>)
 8005e5e:	885b      	ldrh	r3, [r3, #2]
 8005e60:	2bea      	cmp	r3, #234	; 0xea
 8005e62:	d805      	bhi.n	8005e70 <state_machine+0x1f0>
		{
			state_change_done = 0;
 8005e64:	4b69      	ldr	r3, [pc, #420]	; (800600c <state_machine+0x38c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	; (8006020 <state_machine+0x3a0>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8005e70:	4b6a      	ldr	r3, [pc, #424]	; (800601c <state_machine+0x39c>)
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	2ba3      	cmp	r3, #163	; 0xa3
 8005e76:	d912      	bls.n	8005e9e <state_machine+0x21e>
 8005e78:	4b68      	ldr	r3, [pc, #416]	; (800601c <state_machine+0x39c>)
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005e80:	d80d      	bhi.n	8005e9e <state_machine+0x21e>
 8005e82:	4b66      	ldr	r3, [pc, #408]	; (800601c <state_machine+0x39c>)
 8005e84:	885b      	ldrh	r3, [r3, #2]
 8005e86:	2bc3      	cmp	r3, #195	; 0xc3
 8005e88:	d909      	bls.n	8005e9e <state_machine+0x21e>
 8005e8a:	4b64      	ldr	r3, [pc, #400]	; (800601c <state_machine+0x39c>)
 8005e8c:	885b      	ldrh	r3, [r3, #2]
 8005e8e:	2bea      	cmp	r3, #234	; 0xea
 8005e90:	d805      	bhi.n	8005e9e <state_machine+0x21e>
		{
			state_change_done = 0;
 8005e92:	4b5e      	ldr	r3, [pc, #376]	; (800600c <state_machine+0x38c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8005e98:	4b61      	ldr	r3, [pc, #388]	; (8006020 <state_machine+0x3a0>)
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8005e9e:	4b5f      	ldr	r3, [pc, #380]	; (800601c <state_machine+0x39c>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8005ea6:	d930      	bls.n	8005f0a <state_machine+0x28a>
 8005ea8:	4b5c      	ldr	r3, [pc, #368]	; (800601c <state_machine+0x39c>)
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005eb0:	d82b      	bhi.n	8005f0a <state_machine+0x28a>
 8005eb2:	4b5a      	ldr	r3, [pc, #360]	; (800601c <state_machine+0x39c>)
 8005eb4:	885b      	ldrh	r3, [r3, #2]
 8005eb6:	2b14      	cmp	r3, #20
 8005eb8:	d927      	bls.n	8005f0a <state_machine+0x28a>
 8005eba:	4b58      	ldr	r3, [pc, #352]	; (800601c <state_machine+0x39c>)
 8005ebc:	885b      	ldrh	r3, [r3, #2]
 8005ebe:	2b65      	cmp	r3, #101	; 0x65
 8005ec0:	d823      	bhi.n	8005f0a <state_machine+0x28a>
		{
			if(dab_management_to_display.total_services)
 8005ec2:	4b55      	ldr	r3, [pc, #340]	; (8006018 <state_machine+0x398>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01f      	beq.n	8005f0a <state_machine+0x28a>
			{
				srv_list_start_index--;
 8005eca:	4b51      	ldr	r3, [pc, #324]	; (8006010 <state_machine+0x390>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	4a4f      	ldr	r2, [pc, #316]	; (8006010 <state_machine+0x390>)
 8005ed2:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 8005ed4:	4b50      	ldr	r3, [pc, #320]	; (8006018 <state_machine+0x398>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <state_machine+0x390>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	db03      	blt.n	8005eea <state_machine+0x26a>
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <state_machine+0x390>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da04      	bge.n	8005ef4 <state_machine+0x274>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 8005eea:	4b4b      	ldr	r3, [pc, #300]	; (8006018 <state_machine+0x398>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a47      	ldr	r2, [pc, #284]	; (8006010 <state_machine+0x390>)
 8005ef2:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8005ef4:	4b46      	ldr	r3, [pc, #280]	; (8006010 <state_machine+0x390>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4b46      	ldr	r3, [pc, #280]	; (8006014 <state_machine+0x394>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b46      	ldr	r3, [pc, #280]	; (8006018 <state_machine+0x398>)
 8005efe:	9201      	str	r2, [sp, #4]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f06:	f7fd ff61 	bl	8003dcc <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 8005f0a:	4b44      	ldr	r3, [pc, #272]	; (800601c <state_machine+0x39c>)
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8005f12:	d92a      	bls.n	8005f6a <state_machine+0x2ea>
 8005f14:	4b41      	ldr	r3, [pc, #260]	; (800601c <state_machine+0x39c>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8005f1c:	d825      	bhi.n	8005f6a <state_machine+0x2ea>
 8005f1e:	4b3f      	ldr	r3, [pc, #252]	; (800601c <state_machine+0x39c>)
 8005f20:	885b      	ldrh	r3, [r3, #2]
 8005f22:	2b6c      	cmp	r3, #108	; 0x6c
 8005f24:	d921      	bls.n	8005f6a <state_machine+0x2ea>
 8005f26:	4b3d      	ldr	r3, [pc, #244]	; (800601c <state_machine+0x39c>)
 8005f28:	885b      	ldrh	r3, [r3, #2]
 8005f2a:	2bbd      	cmp	r3, #189	; 0xbd
 8005f2c:	d81d      	bhi.n	8005f6a <state_machine+0x2ea>
		{
			if(dab_management_to_display.total_services)
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <state_machine+0x398>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <state_machine+0x2ea>
			{
				srv_list_start_index++;
 8005f36:	4b36      	ldr	r3, [pc, #216]	; (8006010 <state_machine+0x390>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a34      	ldr	r2, [pc, #208]	; (8006010 <state_machine+0x390>)
 8005f3e:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 8005f40:	4b35      	ldr	r3, [pc, #212]	; (8006018 <state_machine+0x398>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	4b32      	ldr	r3, [pc, #200]	; (8006010 <state_machine+0x390>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	dc02      	bgt.n	8005f54 <state_machine+0x2d4>
				{
					srv_list_start_index = 0;
 8005f4e:	4b30      	ldr	r3, [pc, #192]	; (8006010 <state_machine+0x390>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8005f54:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <state_machine+0x390>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <state_machine+0x394>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <state_machine+0x398>)
 8005f5e:	9201      	str	r2, [sp, #4]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	9200      	str	r2, [sp, #0]
 8005f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f66:	f7fd ff31 	bl	8003dcc <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 8005f6a:	4b2c      	ldr	r3, [pc, #176]	; (800601c <state_machine+0x39c>)
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d91f      	bls.n	8005fb2 <state_machine+0x332>
 8005f72:	4b2a      	ldr	r3, [pc, #168]	; (800601c <state_machine+0x39c>)
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005f7a:	d81a      	bhi.n	8005fb2 <state_machine+0x332>
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <state_machine+0x39c>)
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	2b14      	cmp	r3, #20
 8005f82:	d916      	bls.n	8005fb2 <state_machine+0x332>
 8005f84:	4b25      	ldr	r3, [pc, #148]	; (800601c <state_machine+0x39c>)
 8005f86:	885b      	ldrh	r3, [r3, #2]
 8005f88:	2b31      	cmp	r3, #49	; 0x31
 8005f8a:	d812      	bhi.n	8005fb2 <state_machine+0x332>
		{
			if(dab_management_to_display.total_services)
 8005f8c:	4b22      	ldr	r3, [pc, #136]	; (8006018 <state_machine+0x398>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00e      	beq.n	8005fb2 <state_machine+0x332>
			{
				state_change_done = 0;
 8005f94:	4b1d      	ldr	r3, [pc, #116]	; (800600c <state_machine+0x38c>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8005f9a:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <state_machine+0x390>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fc ff61 	bl	8002e68 <play_station>
				playing_state = playing;
 8005fa6:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <state_machine+0x3a4>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <state_machine+0x3a0>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <state_machine+0x39c>)
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d944      	bls.n	8006044 <state_machine+0x3c4>
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <state_machine+0x39c>)
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005fc2:	d83f      	bhi.n	8006044 <state_machine+0x3c4>
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <state_machine+0x39c>)
 8005fc6:	885b      	ldrh	r3, [r3, #2]
 8005fc8:	2b37      	cmp	r3, #55	; 0x37
 8005fca:	d93b      	bls.n	8006044 <state_machine+0x3c4>
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <state_machine+0x39c>)
 8005fce:	885b      	ldrh	r3, [r3, #2]
 8005fd0:	2b54      	cmp	r3, #84	; 0x54
 8005fd2:	d837      	bhi.n	8006044 <state_machine+0x3c4>
		{
			if(dab_management_to_display.total_services)
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <state_machine+0x398>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d033      	beq.n	8006044 <state_machine+0x3c4>
			{
				state_change_done = 0;
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	; (800600c <state_machine+0x38c>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <state_machine+0x390>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <state_machine+0x398>)
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	4293      	cmp	r3, r2
 8005fee:	db1b      	blt.n	8006028 <state_machine+0x3a8>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <state_machine+0x390>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <state_machine+0x398>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	3301      	adds	r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4618      	mov	r0, r3
 8006004:	f7fc ff30 	bl	8002e68 <play_station>
 8006008:	e016      	b.n	8006038 <state_machine+0x3b8>
 800600a:	bf00      	nop
 800600c:	20003299 	.word	0x20003299
 8006010:	2000329c 	.word	0x2000329c
 8006014:	200032dc 	.word	0x200032dc
 8006018:	200032cc 	.word	0x200032cc
 800601c:	200032a0 	.word	0x200032a0
 8006020:	20003298 	.word	0x20003298
 8006024:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 8006028:	4b85      	ldr	r3, [pc, #532]	; (8006240 <state_machine+0x5c0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	3301      	adds	r3, #1
 8006030:	b2db      	uxtb	r3, r3
 8006032:	4618      	mov	r0, r3
 8006034:	f7fc ff18 	bl	8002e68 <play_station>
				}

				playing_state = playing;
 8006038:	4b82      	ldr	r3, [pc, #520]	; (8006244 <state_machine+0x5c4>)
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800603e:	4b82      	ldr	r3, [pc, #520]	; (8006248 <state_machine+0x5c8>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 8006044:	4b81      	ldr	r3, [pc, #516]	; (800624c <state_machine+0x5cc>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	2b05      	cmp	r3, #5
 800604a:	d935      	bls.n	80060b8 <state_machine+0x438>
 800604c:	4b7f      	ldr	r3, [pc, #508]	; (800624c <state_machine+0x5cc>)
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006054:	d830      	bhi.n	80060b8 <state_machine+0x438>
 8006056:	4b7d      	ldr	r3, [pc, #500]	; (800624c <state_machine+0x5cc>)
 8006058:	885b      	ldrh	r3, [r3, #2]
 800605a:	2b5a      	cmp	r3, #90	; 0x5a
 800605c:	d92c      	bls.n	80060b8 <state_machine+0x438>
 800605e:	4b7b      	ldr	r3, [pc, #492]	; (800624c <state_machine+0x5cc>)
 8006060:	885b      	ldrh	r3, [r3, #2]
 8006062:	2b77      	cmp	r3, #119	; 0x77
 8006064:	d828      	bhi.n	80060b8 <state_machine+0x438>
		{
			if(dab_management_to_display.total_services)
 8006066:	4b7a      	ldr	r3, [pc, #488]	; (8006250 <state_machine+0x5d0>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d024      	beq.n	80060b8 <state_machine+0x438>
			{
				state_change_done = 0;
 800606e:	4b79      	ldr	r3, [pc, #484]	; (8006254 <state_machine+0x5d4>)
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 8006074:	4b72      	ldr	r3, [pc, #456]	; (8006240 <state_machine+0x5c0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3302      	adds	r3, #2
 800607a:	4a75      	ldr	r2, [pc, #468]	; (8006250 <state_machine+0x5d0>)
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	4293      	cmp	r3, r2
 8006080:	db0c      	blt.n	800609c <state_machine+0x41c>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 8006082:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <state_machine+0x5c0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	4b71      	ldr	r3, [pc, #452]	; (8006250 <state_machine+0x5d0>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	b2db      	uxtb	r3, r3
 8006090:	3302      	adds	r3, #2
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4618      	mov	r0, r3
 8006096:	f7fc fee7 	bl	8002e68 <play_station>
 800609a:	e007      	b.n	80060ac <state_machine+0x42c>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 800609c:	4b68      	ldr	r3, [pc, #416]	; (8006240 <state_machine+0x5c0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3302      	adds	r3, #2
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fc fede 	bl	8002e68 <play_station>
				}

				playing_state = playing;
 80060ac:	4b65      	ldr	r3, [pc, #404]	; (8006244 <state_machine+0x5c4>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80060b2:	4b65      	ldr	r3, [pc, #404]	; (8006248 <state_machine+0x5c8>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 80060b8:	4b64      	ldr	r3, [pc, #400]	; (800624c <state_machine+0x5cc>)
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	2b05      	cmp	r3, #5
 80060be:	d935      	bls.n	800612c <state_machine+0x4ac>
 80060c0:	4b62      	ldr	r3, [pc, #392]	; (800624c <state_machine+0x5cc>)
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80060c8:	d830      	bhi.n	800612c <state_machine+0x4ac>
 80060ca:	4b60      	ldr	r3, [pc, #384]	; (800624c <state_machine+0x5cc>)
 80060cc:	885b      	ldrh	r3, [r3, #2]
 80060ce:	2b7d      	cmp	r3, #125	; 0x7d
 80060d0:	d92c      	bls.n	800612c <state_machine+0x4ac>
 80060d2:	4b5e      	ldr	r3, [pc, #376]	; (800624c <state_machine+0x5cc>)
 80060d4:	885b      	ldrh	r3, [r3, #2]
 80060d6:	2b9a      	cmp	r3, #154	; 0x9a
 80060d8:	d828      	bhi.n	800612c <state_machine+0x4ac>
		{
			if(dab_management_to_display.total_services)
 80060da:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <state_machine+0x5d0>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d024      	beq.n	800612c <state_machine+0x4ac>
			{
				state_change_done = 0;
 80060e2:	4b5c      	ldr	r3, [pc, #368]	; (8006254 <state_machine+0x5d4>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 80060e8:	4b55      	ldr	r3, [pc, #340]	; (8006240 <state_machine+0x5c0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3303      	adds	r3, #3
 80060ee:	4a58      	ldr	r2, [pc, #352]	; (8006250 <state_machine+0x5d0>)
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4293      	cmp	r3, r2
 80060f4:	db0c      	blt.n	8006110 <state_machine+0x490>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 80060f6:	4b52      	ldr	r3, [pc, #328]	; (8006240 <state_machine+0x5c0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	4b54      	ldr	r3, [pc, #336]	; (8006250 <state_machine+0x5d0>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	b2db      	uxtb	r3, r3
 8006104:	3303      	adds	r3, #3
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4618      	mov	r0, r3
 800610a:	f7fc fead 	bl	8002e68 <play_station>
 800610e:	e007      	b.n	8006120 <state_machine+0x4a0>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 8006110:	4b4b      	ldr	r3, [pc, #300]	; (8006240 <state_machine+0x5c0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	3303      	adds	r3, #3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc fea4 	bl	8002e68 <play_station>
				}

				playing_state = playing;
 8006120:	4b48      	ldr	r3, [pc, #288]	; (8006244 <state_machine+0x5c4>)
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006126:	4b48      	ldr	r3, [pc, #288]	; (8006248 <state_machine+0x5c8>)
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 800612c:	4b47      	ldr	r3, [pc, #284]	; (800624c <state_machine+0x5cc>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	2b05      	cmp	r3, #5
 8006132:	f240 818d 	bls.w	8006450 <state_machine+0x7d0>
 8006136:	4b45      	ldr	r3, [pc, #276]	; (800624c <state_machine+0x5cc>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800613e:	f200 8187 	bhi.w	8006450 <state_machine+0x7d0>
 8006142:	4b42      	ldr	r3, [pc, #264]	; (800624c <state_machine+0x5cc>)
 8006144:	885b      	ldrh	r3, [r3, #2]
 8006146:	2ba0      	cmp	r3, #160	; 0xa0
 8006148:	f240 8182 	bls.w	8006450 <state_machine+0x7d0>
 800614c:	4b3f      	ldr	r3, [pc, #252]	; (800624c <state_machine+0x5cc>)
 800614e:	885b      	ldrh	r3, [r3, #2]
 8006150:	2bbd      	cmp	r3, #189	; 0xbd
 8006152:	f200 817d 	bhi.w	8006450 <state_machine+0x7d0>
		{
			if(dab_management_to_display.total_services)
 8006156:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <state_machine+0x5d0>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8178 	beq.w	8006450 <state_machine+0x7d0>
			{
				state_change_done = 0;
 8006160:	4b3c      	ldr	r3, [pc, #240]	; (8006254 <state_machine+0x5d4>)
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 8006166:	4b36      	ldr	r3, [pc, #216]	; (8006240 <state_machine+0x5c0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3304      	adds	r3, #4
 800616c:	4a38      	ldr	r2, [pc, #224]	; (8006250 <state_machine+0x5d0>)
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	4293      	cmp	r3, r2
 8006172:	db0c      	blt.n	800618e <state_machine+0x50e>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 8006174:	4b32      	ldr	r3, [pc, #200]	; (8006240 <state_machine+0x5c0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	b2da      	uxtb	r2, r3
 800617a:	4b35      	ldr	r3, [pc, #212]	; (8006250 <state_machine+0x5d0>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	b2db      	uxtb	r3, r3
 8006182:	3304      	adds	r3, #4
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4618      	mov	r0, r3
 8006188:	f7fc fe6e 	bl	8002e68 <play_station>
 800618c:	e007      	b.n	800619e <state_machine+0x51e>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 800618e:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <state_machine+0x5c0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	3304      	adds	r3, #4
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4618      	mov	r0, r3
 800619a:	f7fc fe65 	bl	8002e68 <play_station>
				}

				playing_state = playing;
 800619e:	4b29      	ldr	r3, [pc, #164]	; (8006244 <state_machine+0x5c4>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80061a4:	4b28      	ldr	r3, [pc, #160]	; (8006248 <state_machine+0x5c8>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 80061aa:	e151      	b.n	8006450 <state_machine+0x7d0>

	case signal_info:
		if(!state_change_done)
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <state_machine+0x5d4>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <state_machine+0x53e>
		{
			Display_dab_digrad_status_background();
 80061b4:	f7fe f9a6 	bl	8004504 <Display_dab_digrad_status_background>
			state_change_done = 1;
 80061b8:	4b26      	ldr	r3, [pc, #152]	; (8006254 <state_machine+0x5d4>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
		}

		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 80061be:	4e26      	ldr	r6, [pc, #152]	; (8006258 <state_machine+0x5d8>)
 80061c0:	466d      	mov	r5, sp
 80061c2:	f106 0410 	add.w	r4, r6, #16
 80061c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80061d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80061d6:	f7fe fb2d 	bl	8004834 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80061da:	4b1c      	ldr	r3, [pc, #112]	; (800624c <state_machine+0x5cc>)
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d911      	bls.n	8006206 <state_machine+0x586>
 80061e2:	4b1a      	ldr	r3, [pc, #104]	; (800624c <state_machine+0x5cc>)
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	2b9c      	cmp	r3, #156	; 0x9c
 80061e8:	d80d      	bhi.n	8006206 <state_machine+0x586>
 80061ea:	4b18      	ldr	r3, [pc, #96]	; (800624c <state_machine+0x5cc>)
 80061ec:	885b      	ldrh	r3, [r3, #2]
 80061ee:	2bc3      	cmp	r3, #195	; 0xc3
 80061f0:	d909      	bls.n	8006206 <state_machine+0x586>
 80061f2:	4b16      	ldr	r3, [pc, #88]	; (800624c <state_machine+0x5cc>)
 80061f4:	885b      	ldrh	r3, [r3, #2]
 80061f6:	2bea      	cmp	r3, #234	; 0xea
 80061f8:	d805      	bhi.n	8006206 <state_machine+0x586>
		{
			state_change_done = 0;
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <state_machine+0x5d4>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <state_machine+0x5c8>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <state_machine+0x5cc>)
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	2ba3      	cmp	r3, #163	; 0xa3
 800620c:	f240 8122 	bls.w	8006454 <state_machine+0x7d4>
 8006210:	4b0e      	ldr	r3, [pc, #56]	; (800624c <state_machine+0x5cc>)
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006218:	f200 811c 	bhi.w	8006454 <state_machine+0x7d4>
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <state_machine+0x5cc>)
 800621e:	885b      	ldrh	r3, [r3, #2]
 8006220:	2bc3      	cmp	r3, #195	; 0xc3
 8006222:	f240 8117 	bls.w	8006454 <state_machine+0x7d4>
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <state_machine+0x5cc>)
 8006228:	885b      	ldrh	r3, [r3, #2]
 800622a:	2bea      	cmp	r3, #234	; 0xea
 800622c:	f200 8112 	bhi.w	8006454 <state_machine+0x7d4>
		{
			state_change_done = 0;
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <state_machine+0x5d4>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006236:	4b04      	ldr	r3, [pc, #16]	; (8006248 <state_machine+0x5c8>)
 8006238:	2204      	movs	r2, #4
 800623a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800623c:	e10a      	b.n	8006454 <state_machine+0x7d4>
 800623e:	bf00      	nop
 8006240:	2000329c 	.word	0x2000329c
 8006244:	20000150 	.word	0x20000150
 8006248:	20003298 	.word	0x20003298
 800624c:	200032a0 	.word	0x200032a0
 8006250:	200032cc 	.word	0x200032cc
 8006254:	20003299 	.word	0x20003299
 8006258:	200032a4 	.word	0x200032a4

	case scanning:
		if(!state_change_done)
 800625c:	4b82      	ldr	r3, [pc, #520]	; (8006468 <state_machine+0x7e8>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d116      	bne.n	8006292 <state_machine+0x612>
		{
			playing_state = not_playing;
 8006264:	4b81      	ldr	r3, [pc, #516]	; (800646c <state_machine+0x7ec>)
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 800626a:	f7fd ff49 	bl	8004100 <Display_scanning_screen_background>
			state_change_done = 1;
 800626e:	4b7e      	ldr	r3, [pc, #504]	; (8006468 <state_machine+0x7e8>)
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 8006274:	f7fc f902 	bl	800247c <Si468x_dab_full_scan>
 8006278:	4603      	mov	r3, r0
 800627a:	461a      	mov	r2, r3
 800627c:	4b7c      	ldr	r3, [pc, #496]	; (8006470 <state_machine+0x7f0>)
 800627e:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006280:	4b7b      	ldr	r3, [pc, #492]	; (8006470 <state_machine+0x7f0>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <state_machine+0x612>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006288:	f7fe f906 	bl	8004498 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 800628c:	4b78      	ldr	r3, [pc, #480]	; (8006470 <state_machine+0x7f0>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006292:	4b78      	ldr	r3, [pc, #480]	; (8006474 <state_machine+0x7f4>)
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	2b05      	cmp	r3, #5
 8006298:	f240 80de 	bls.w	8006458 <state_machine+0x7d8>
 800629c:	4b75      	ldr	r3, [pc, #468]	; (8006474 <state_machine+0x7f4>)
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80062a4:	f200 80d8 	bhi.w	8006458 <state_machine+0x7d8>
 80062a8:	4b72      	ldr	r3, [pc, #456]	; (8006474 <state_machine+0x7f4>)
 80062aa:	885b      	ldrh	r3, [r3, #2]
 80062ac:	2bc3      	cmp	r3, #195	; 0xc3
 80062ae:	f240 80d3 	bls.w	8006458 <state_machine+0x7d8>
 80062b2:	4b70      	ldr	r3, [pc, #448]	; (8006474 <state_machine+0x7f4>)
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	2bea      	cmp	r3, #234	; 0xea
 80062b8:	f200 80ce 	bhi.w	8006458 <state_machine+0x7d8>
		{
			scan_cancel_flag = 1;
 80062bc:	4b6e      	ldr	r3, [pc, #440]	; (8006478 <state_machine+0x7f8>)
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 80062c2:	4b69      	ldr	r3, [pc, #420]	; (8006468 <state_machine+0x7e8>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80062c8:	4b6c      	ldr	r3, [pc, #432]	; (800647c <state_machine+0x7fc>)
 80062ca:	2204      	movs	r2, #4
 80062cc:	701a      	strb	r2, [r3, #0]
		}

		break;
 80062ce:	e0c3      	b.n	8006458 <state_machine+0x7d8>

	case settings:
		if(!state_change_done)
 80062d0:	4b65      	ldr	r3, [pc, #404]	; (8006468 <state_machine+0x7e8>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d107      	bne.n	80062e8 <state_machine+0x668>
		{
			Display_settings_screen_background();
 80062d8:	f7fe fe1e 	bl	8004f18 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 80062dc:	4b66      	ldr	r3, [pc, #408]	; (8006478 <state_machine+0x7f8>)
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 80062e2:	4b61      	ldr	r3, [pc, #388]	; (8006468 <state_machine+0x7e8>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 80062e8:	4b65      	ldr	r3, [pc, #404]	; (8006480 <state_machine+0x800>)
 80062ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062ec:	f7fe ff0c 	bl	8005108 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80062f0:	4b60      	ldr	r3, [pc, #384]	; (8006474 <state_machine+0x7f4>)
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	2ba3      	cmp	r3, #163	; 0xa3
 80062f6:	d91e      	bls.n	8006336 <state_machine+0x6b6>
 80062f8:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <state_machine+0x7f4>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006300:	d819      	bhi.n	8006336 <state_machine+0x6b6>
 8006302:	4b5c      	ldr	r3, [pc, #368]	; (8006474 <state_machine+0x7f4>)
 8006304:	885b      	ldrh	r3, [r3, #2]
 8006306:	2b3c      	cmp	r3, #60	; 0x3c
 8006308:	d915      	bls.n	8006336 <state_machine+0x6b6>
 800630a:	4b5a      	ldr	r3, [pc, #360]	; (8006474 <state_machine+0x7f4>)
 800630c:	885b      	ldrh	r3, [r3, #2]
 800630e:	2b63      	cmp	r3, #99	; 0x63
 8006310:	d811      	bhi.n	8006336 <state_machine+0x6b6>
		{
			dab_management_to_display.audio_volume += 2;
 8006312:	4b5b      	ldr	r3, [pc, #364]	; (8006480 <state_machine+0x800>)
 8006314:	7b9b      	ldrb	r3, [r3, #14]
 8006316:	3302      	adds	r3, #2
 8006318:	b2da      	uxtb	r2, r3
 800631a:	4b59      	ldr	r3, [pc, #356]	; (8006480 <state_machine+0x800>)
 800631c:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 800631e:	4b58      	ldr	r3, [pc, #352]	; (8006480 <state_machine+0x800>)
 8006320:	7b9b      	ldrb	r3, [r3, #14]
 8006322:	2b3f      	cmp	r3, #63	; 0x3f
 8006324:	d902      	bls.n	800632c <state_machine+0x6ac>
			{
				dab_management_to_display.audio_volume = 63;
 8006326:	4b56      	ldr	r3, [pc, #344]	; (8006480 <state_machine+0x800>)
 8006328:	223f      	movs	r2, #63	; 0x3f
 800632a:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 800632c:	4b54      	ldr	r3, [pc, #336]	; (8006480 <state_machine+0x800>)
 800632e:	7b9b      	ldrb	r3, [r3, #14]
 8006330:	4618      	mov	r0, r3
 8006332:	f7fc fd63 	bl	8002dfc <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006336:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <state_machine+0x7f4>)
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d91d      	bls.n	800637a <state_machine+0x6fa>
 800633e:	4b4d      	ldr	r3, [pc, #308]	; (8006474 <state_machine+0x7f4>)
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	2b9c      	cmp	r3, #156	; 0x9c
 8006344:	d819      	bhi.n	800637a <state_machine+0x6fa>
 8006346:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <state_machine+0x7f4>)
 8006348:	885b      	ldrh	r3, [r3, #2]
 800634a:	2b3c      	cmp	r3, #60	; 0x3c
 800634c:	d915      	bls.n	800637a <state_machine+0x6fa>
 800634e:	4b49      	ldr	r3, [pc, #292]	; (8006474 <state_machine+0x7f4>)
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	2b63      	cmp	r3, #99	; 0x63
 8006354:	d811      	bhi.n	800637a <state_machine+0x6fa>
		{
			dab_management_to_display.audio_volume -= 2;
 8006356:	4b4a      	ldr	r3, [pc, #296]	; (8006480 <state_machine+0x800>)
 8006358:	7b9b      	ldrb	r3, [r3, #14]
 800635a:	3b02      	subs	r3, #2
 800635c:	b2da      	uxtb	r2, r3
 800635e:	4b48      	ldr	r3, [pc, #288]	; (8006480 <state_machine+0x800>)
 8006360:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 8006362:	4b47      	ldr	r3, [pc, #284]	; (8006480 <state_machine+0x800>)
 8006364:	7b9b      	ldrb	r3, [r3, #14]
 8006366:	2b3f      	cmp	r3, #63	; 0x3f
 8006368:	d902      	bls.n	8006370 <state_machine+0x6f0>
			{
				dab_management_to_display.audio_volume = 0;
 800636a:	4b45      	ldr	r3, [pc, #276]	; (8006480 <state_machine+0x800>)
 800636c:	2200      	movs	r2, #0
 800636e:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006370:	4b43      	ldr	r3, [pc, #268]	; (8006480 <state_machine+0x800>)
 8006372:	7b9b      	ldrb	r3, [r3, #14]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fc fd41 	bl	8002dfc <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800637a:	4b3e      	ldr	r3, [pc, #248]	; (8006474 <state_machine+0x7f4>)
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	2ba3      	cmp	r3, #163	; 0xa3
 8006380:	d907      	bls.n	8006392 <state_machine+0x712>
 8006382:	4b3c      	ldr	r3, [pc, #240]	; (8006474 <state_machine+0x7f4>)
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800638a:	d802      	bhi.n	8006392 <state_machine+0x712>
 800638c:	4b39      	ldr	r3, [pc, #228]	; (8006474 <state_machine+0x7f4>)
 800638e:	885b      	ldrh	r3, [r3, #2]
 8006390:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006392:	4b38      	ldr	r3, [pc, #224]	; (8006474 <state_machine+0x7f4>)
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	2b05      	cmp	r3, #5
 8006398:	d906      	bls.n	80063a8 <state_machine+0x728>
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <state_machine+0x7f4>)
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	2b9c      	cmp	r3, #156	; 0x9c
 80063a0:	d802      	bhi.n	80063a8 <state_machine+0x728>
 80063a2:	4b34      	ldr	r3, [pc, #208]	; (8006474 <state_machine+0x7f4>)
 80063a4:	885b      	ldrh	r3, [r3, #2]
 80063a6:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 80063a8:	4b32      	ldr	r3, [pc, #200]	; (8006474 <state_machine+0x7f4>)
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d911      	bls.n	80063d4 <state_machine+0x754>
 80063b0:	4b30      	ldr	r3, [pc, #192]	; (8006474 <state_machine+0x7f4>)
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	2b9c      	cmp	r3, #156	; 0x9c
 80063b6:	d80d      	bhi.n	80063d4 <state_machine+0x754>
 80063b8:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <state_machine+0x7f4>)
 80063ba:	885b      	ldrh	r3, [r3, #2]
 80063bc:	2b96      	cmp	r3, #150	; 0x96
 80063be:	d909      	bls.n	80063d4 <state_machine+0x754>
 80063c0:	4b2c      	ldr	r3, [pc, #176]	; (8006474 <state_machine+0x7f4>)
 80063c2:	885b      	ldrh	r3, [r3, #2]
 80063c4:	2bbd      	cmp	r3, #189	; 0xbd
 80063c6:	d805      	bhi.n	80063d4 <state_machine+0x754>
		{
			state_change_done = 0;
 80063c8:	4b27      	ldr	r3, [pc, #156]	; (8006468 <state_machine+0x7e8>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 80063ce:	4b2b      	ldr	r3, [pc, #172]	; (800647c <state_machine+0x7fc>)
 80063d0:	2202      	movs	r2, #2
 80063d2:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <state_machine+0x7f4>)
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	2ba3      	cmp	r3, #163	; 0xa3
 80063da:	d907      	bls.n	80063ec <state_machine+0x76c>
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <state_machine+0x7f4>)
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80063e4:	d802      	bhi.n	80063ec <state_machine+0x76c>
 80063e6:	4b23      	ldr	r3, [pc, #140]	; (8006474 <state_machine+0x7f4>)
 80063e8:	885b      	ldrh	r3, [r3, #2]
 80063ea:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80063ec:	4b21      	ldr	r3, [pc, #132]	; (8006474 <state_machine+0x7f4>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	2b05      	cmp	r3, #5
 80063f2:	d911      	bls.n	8006418 <state_machine+0x798>
 80063f4:	4b1f      	ldr	r3, [pc, #124]	; (8006474 <state_machine+0x7f4>)
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2b9c      	cmp	r3, #156	; 0x9c
 80063fa:	d80d      	bhi.n	8006418 <state_machine+0x798>
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <state_machine+0x7f4>)
 80063fe:	885b      	ldrh	r3, [r3, #2]
 8006400:	2bc3      	cmp	r3, #195	; 0xc3
 8006402:	d909      	bls.n	8006418 <state_machine+0x798>
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <state_machine+0x7f4>)
 8006406:	885b      	ldrh	r3, [r3, #2]
 8006408:	2bea      	cmp	r3, #234	; 0xea
 800640a:	d805      	bhi.n	8006418 <state_machine+0x798>
		{
			state_change_done = 0;
 800640c:	4b16      	ldr	r3, [pc, #88]	; (8006468 <state_machine+0x7e8>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8006412:	4b1a      	ldr	r3, [pc, #104]	; (800647c <state_machine+0x7fc>)
 8006414:	2203      	movs	r2, #3
 8006416:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <state_machine+0x7f4>)
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	2ba3      	cmp	r3, #163	; 0xa3
 800641e:	d91d      	bls.n	800645c <state_machine+0x7dc>
 8006420:	4b14      	ldr	r3, [pc, #80]	; (8006474 <state_machine+0x7f4>)
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006428:	d818      	bhi.n	800645c <state_machine+0x7dc>
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <state_machine+0x7f4>)
 800642c:	885b      	ldrh	r3, [r3, #2]
 800642e:	2bc3      	cmp	r3, #195	; 0xc3
 8006430:	d914      	bls.n	800645c <state_machine+0x7dc>
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <state_machine+0x7f4>)
 8006434:	885b      	ldrh	r3, [r3, #2]
 8006436:	2bea      	cmp	r3, #234	; 0xea
 8006438:	d810      	bhi.n	800645c <state_machine+0x7dc>
		{
			state_change_done = 0;
 800643a:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <state_machine+0x7e8>)
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006440:	4b0e      	ldr	r3, [pc, #56]	; (800647c <state_machine+0x7fc>)
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
		}


		break;
 8006446:	e009      	b.n	800645c <state_machine+0x7dc>

	default:
		break;
 8006448:	bf00      	nop
 800644a:	e008      	b.n	800645e <state_machine+0x7de>
		break;
 800644c:	bf00      	nop
 800644e:	e006      	b.n	800645e <state_machine+0x7de>
		break;
 8006450:	bf00      	nop
 8006452:	e004      	b.n	800645e <state_machine+0x7de>
		break;
 8006454:	bf00      	nop
 8006456:	e002      	b.n	800645e <state_machine+0x7de>
		break;
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <state_machine+0x7de>
		break;
 800645c:	bf00      	nop
	}
}
 800645e:	bf00      	nop
 8006460:	3744      	adds	r7, #68	; 0x44
 8006462:	46bd      	mov	sp, r7
 8006464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006466:	bf00      	nop
 8006468:	20003299 	.word	0x20003299
 800646c:	20000150 	.word	0x20000150
 8006470:	200032f5 	.word	0x200032f5
 8006474:	200032a0 	.word	0x200032a0
 8006478:	200032f4 	.word	0x200032f4
 800647c:	20003298 	.word	0x20003298
 8006480:	200032cc 	.word	0x200032cc

08006484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <HAL_MspInit+0x4c>)
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <HAL_MspInit+0x4c>)
 8006494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006498:	6453      	str	r3, [r2, #68]	; 0x44
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <HAL_MspInit+0x4c>)
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a2:	607b      	str	r3, [r7, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064a6:	2300      	movs	r3, #0
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_MspInit+0x4c>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <HAL_MspInit+0x4c>)
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6413      	str	r3, [r2, #64]	; 0x40
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_MspInit+0x4c>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800

080064d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064d8:	e7fe      	b.n	80064d8 <NMI_Handler+0x4>

080064da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064da:	b480      	push	{r7}
 80064dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064de:	e7fe      	b.n	80064de <HardFault_Handler+0x4>

080064e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064e4:	e7fe      	b.n	80064e4 <MemManage_Handler+0x4>

080064e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064e6:	b480      	push	{r7}
 80064e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064ea:	e7fe      	b.n	80064ea <BusFault_Handler+0x4>

080064ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064f0:	e7fe      	b.n	80064f0 <UsageFault_Handler+0x4>

080064f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064f2:	b480      	push	{r7}
 80064f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064f6:	bf00      	nop
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800650e:	b480      	push	{r7}
 8006510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006512:	bf00      	nop
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006520:	f000 fd26 	bl	8006f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006524:	bf00      	nop
 8006526:	bd80      	pop	{r7, pc}

08006528 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800652c:	4802      	ldr	r0, [pc, #8]	; (8006538 <DMA1_Stream4_IRQHandler+0x10>)
 800652e:	f000 ff45 	bl	80073bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20003238 	.word	0x20003238

0800653c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006540:	4802      	ldr	r0, [pc, #8]	; (800654c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006542:	f005 fc5a 	bl	800bdfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20003340 	.word	0x20003340

08006550 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006554:	4802      	ldr	r0, [pc, #8]	; (8006560 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006556:	f005 fc50 	bl	800bdfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800655a:	bf00      	nop
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20003388 	.word	0x20003388

08006564 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006568:	4802      	ldr	r0, [pc, #8]	; (8006574 <SPI2_IRQHandler+0x10>)
 800656a:	f005 f8e9 	bl	800b740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200031e0 	.word	0x200031e0

08006578 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800657c:	4802      	ldr	r0, [pc, #8]	; (8006588 <I2C3_EV_IRQHandler+0x10>)
 800657e:	f001 ff99 	bl	80084b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20003134 	.word	0x20003134

0800658c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006590:	4802      	ldr	r0, [pc, #8]	; (800659c <I2C3_ER_IRQHandler+0x10>)
 8006592:	f002 f900 	bl	8008796 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20003134 	.word	0x20003134

080065a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065b8:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <SystemInit+0x20>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	4a05      	ldr	r2, [pc, #20]	; (80065d4 <SystemInit+0x20>)
 80065c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065de:	f107 0320 	add.w	r3, r7, #32
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	605a      	str	r2, [r3, #4]
 80065f0:	609a      	str	r2, [r3, #8]
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	615a      	str	r2, [r3, #20]
 80065f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065fa:	4b22      	ldr	r3, [pc, #136]	; (8006684 <MX_TIM3_Init+0xac>)
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <MX_TIM3_Init+0xb0>)
 80065fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <MX_TIM3_Init+0xac>)
 8006602:	2200      	movs	r2, #0
 8006604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <MX_TIM3_Init+0xac>)
 8006608:	2200      	movs	r2, #0
 800660a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <MX_TIM3_Init+0xac>)
 800660e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006614:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <MX_TIM3_Init+0xac>)
 8006616:	2200      	movs	r2, #0
 8006618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <MX_TIM3_Init+0xac>)
 800661c:	2200      	movs	r2, #0
 800661e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006620:	4818      	ldr	r0, [pc, #96]	; (8006684 <MX_TIM3_Init+0xac>)
 8006622:	f005 fb9b 	bl	800bd5c <HAL_TIM_PWM_Init>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800662c:	f7ff f9fe 	bl	8005a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006630:	2300      	movs	r3, #0
 8006632:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006634:	2300      	movs	r3, #0
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006638:	f107 0320 	add.w	r3, r7, #32
 800663c:	4619      	mov	r1, r3
 800663e:	4811      	ldr	r0, [pc, #68]	; (8006684 <MX_TIM3_Init+0xac>)
 8006640:	f006 f81e 	bl	800c680 <HAL_TIMEx_MasterConfigSynchronization>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800664a:	f7ff f9ef 	bl	8005a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800664e:	2360      	movs	r3, #96	; 0x60
 8006650:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	2208      	movs	r2, #8
 8006662:	4619      	mov	r1, r3
 8006664:	4807      	ldr	r0, [pc, #28]	; (8006684 <MX_TIM3_Init+0xac>)
 8006666:	f005 fcd1 	bl	800c00c <HAL_TIM_PWM_ConfigChannel>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006670:	f7ff f9dc 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006674:	4803      	ldr	r0, [pc, #12]	; (8006684 <MX_TIM3_Init+0xac>)
 8006676:	f000 f8b9 	bl	80067ec <HAL_TIM_MspPostInit>

}
 800667a:	bf00      	nop
 800667c:	3728      	adds	r7, #40	; 0x28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	200032f8 	.word	0x200032f8
 8006688:	40000400 	.word	0x40000400

0800668c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006690:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <MX_TIM10_Init+0x40>)
 8006692:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <MX_TIM10_Init+0x44>)
 8006694:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <MX_TIM10_Init+0x40>)
 8006698:	f643 2297 	movw	r2, #14999	; 0x3a97
 800669c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <MX_TIM10_Init+0x40>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <MX_TIM10_Init+0x40>)
 80066a6:	f240 2257 	movw	r2, #599	; 0x257
 80066aa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <MX_TIM10_Init+0x40>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <MX_TIM10_Init+0x40>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80066b8:	4804      	ldr	r0, [pc, #16]	; (80066cc <MX_TIM10_Init+0x40>)
 80066ba:	f005 fa8f 	bl	800bbdc <HAL_TIM_Base_Init>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80066c4:	f7ff f9b2 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80066c8:	bf00      	nop
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20003340 	.word	0x20003340
 80066d0:	40014400 	.word	0x40014400

080066d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <MX_TIM11_Init+0x40>)
 80066da:	4a0f      	ldr	r2, [pc, #60]	; (8006718 <MX_TIM11_Init+0x44>)
 80066dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <MX_TIM11_Init+0x40>)
 80066e0:	f643 2297 	movw	r2, #14999	; 0x3a97
 80066e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <MX_TIM11_Init+0x40>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <MX_TIM11_Init+0x40>)
 80066ee:	f240 5213 	movw	r2, #1299	; 0x513
 80066f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <MX_TIM11_Init+0x40>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <MX_TIM11_Init+0x40>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006700:	4804      	ldr	r0, [pc, #16]	; (8006714 <MX_TIM11_Init+0x40>)
 8006702:	f005 fa6b 	bl	800bbdc <HAL_TIM_Base_Init>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800670c:	f7ff f98e 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006710:	bf00      	nop
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20003388 	.word	0x20003388
 8006718:	40014800 	.word	0x40014800

0800671c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <HAL_TIM_PWM_MspInit+0x3c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10d      	bne.n	800674a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <HAL_TIM_PWM_MspInit+0x40>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	4a09      	ldr	r2, [pc, #36]	; (800675c <HAL_TIM_PWM_MspInit+0x40>)
 8006738:	f043 0302 	orr.w	r3, r3, #2
 800673c:	6413      	str	r3, [r2, #64]	; 0x40
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <HAL_TIM_PWM_MspInit+0x40>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40000400 	.word	0x40000400
 800675c:	40023800 	.word	0x40023800

08006760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <HAL_TIM_Base_MspInit+0x80>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d116      	bne.n	80067a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <HAL_TIM_Base_MspInit+0x84>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <HAL_TIM_Base_MspInit+0x84>)
 800677c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006780:	6453      	str	r3, [r2, #68]	; 0x44
 8006782:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <HAL_TIM_Base_MspInit+0x84>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	2019      	movs	r0, #25
 8006794:	f000 fd0b 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006798:	2019      	movs	r0, #25
 800679a:	f000 fd24 	bl	80071e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800679e:	e01a      	b.n	80067d6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a10      	ldr	r2, [pc, #64]	; (80067e8 <HAL_TIM_Base_MspInit+0x88>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d115      	bne.n	80067d6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80067aa:	2300      	movs	r3, #0
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <HAL_TIM_Base_MspInit+0x84>)
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <HAL_TIM_Base_MspInit+0x84>)
 80067b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b8:	6453      	str	r3, [r2, #68]	; 0x44
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <HAL_TIM_Base_MspInit+0x84>)
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c2:	60bb      	str	r3, [r7, #8]
 80067c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80067c6:	2200      	movs	r2, #0
 80067c8:	2100      	movs	r1, #0
 80067ca:	201a      	movs	r0, #26
 80067cc:	f000 fcef 	bl	80071ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80067d0:	201a      	movs	r0, #26
 80067d2:	f000 fd08 	bl	80071e6 <HAL_NVIC_EnableIRQ>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40023800 	.word	0x40023800
 80067e8:	40014800 	.word	0x40014800

080067ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	f107 030c 	add.w	r3, r7, #12
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <HAL_TIM_MspPostInit+0x68>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d11e      	bne.n	800684c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	4b11      	ldr	r3, [pc, #68]	; (8006858 <HAL_TIM_MspPostInit+0x6c>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	4a10      	ldr	r2, [pc, #64]	; (8006858 <HAL_TIM_MspPostInit+0x6c>)
 8006818:	f043 0304 	orr.w	r3, r3, #4
 800681c:	6313      	str	r3, [r2, #48]	; 0x30
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_TIM_MspPostInit+0x6c>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 800682a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800682e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006830:	2302      	movs	r3, #2
 8006832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006838:	2300      	movs	r3, #0
 800683a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800683c:	2302      	movs	r3, #2
 800683e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	4619      	mov	r1, r3
 8006846:	4805      	ldr	r0, [pc, #20]	; (800685c <HAL_TIM_MspPostInit+0x70>)
 8006848:	f001 f802 	bl	8007850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800684c:	bf00      	nop
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	40000400 	.word	0x40000400
 8006858:	40023800 	.word	0x40023800
 800685c:	40020800 	.word	0x40020800

08006860 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8006866:	4b26      	ldr	r3, [pc, #152]	; (8006900 <Touch_read+0xa0>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2000      	movs	r0, #0
 800686c:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 800686e:	4b24      	ldr	r3, [pc, #144]	; (8006900 <Touch_read+0xa0>)
 8006870:	7c1b      	ldrb	r3, [r3, #16]
 8006872:	b25b      	sxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	da32      	bge.n	80068de <Touch_read+0x7e>
	{
		xtemp = TP_Read_XOY(0xD0);
 8006878:	20d0      	movs	r0, #208	; 0xd0
 800687a:	f000 f8e9 	bl	8006a50 <TP_Read_XOY>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <Touch_read+0xa4>)
 8006884:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8006886:	2090      	movs	r0, #144	; 0x90
 8006888:	f000 f8e2 	bl	8006a50 <TP_Read_XOY>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <Touch_read+0xa8>)
 8006892:	801a      	strh	r2, [r3, #0]

		touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
 8006894:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <Touch_read+0xa8>)
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	019b      	lsls	r3, r3, #6
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <Touch_read+0xac>)
 80068a6:	fb82 1203 	smull	r1, r2, r2, r3
 80068aa:	441a      	add	r2, r3
 80068ac:	12d2      	asrs	r2, r2, #11
 80068ae:	17db      	asrs	r3, r3, #31
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <Touch_read+0xa4>)
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	3bf0      	subs	r3, #240	; 0xf0
 80068c2:	22e6      	movs	r2, #230	; 0xe6
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	4a11      	ldr	r2, [pc, #68]	; (8006910 <Touch_read+0xb0>)
 80068ca:	fb82 1203 	smull	r1, r2, r2, r3
 80068ce:	1252      	asrs	r2, r2, #9
 80068d0:	17db      	asrs	r3, r3, #31
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	33f0      	adds	r3, #240	; 0xf0
 80068d8:	b29b      	uxth	r3, r3
 80068da:	807b      	strh	r3, [r7, #2]
 80068dc:	e003      	b.n	80068e6 <Touch_read+0x86>

	}

	else
	{
		touch_coordinates.x = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	2300      	movs	r3, #0
 80068ec:	88ba      	ldrh	r2, [r7, #4]
 80068ee:	f362 030f 	bfi	r3, r2, #0, #16
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	f362 431f 	bfi	r3, r2, #16, #16
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20000158 	.word	0x20000158
 8006904:	200033d0 	.word	0x200033d0
 8006908:	200033d2 	.word	0x200033d2
 800690c:	93afcf8b 	.word	0x93afcf8b
 8006910:	24b70025 	.word	0x24b70025

08006914 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
 8006926:	e021      	b.n	800696c <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8006928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da05      	bge.n	800693c <TP_Write_Byte+0x28>
			T_DIN_ON;
 8006930:	2201      	movs	r2, #1
 8006932:	2120      	movs	r1, #32
 8006934:	4811      	ldr	r0, [pc, #68]	; (800697c <TP_Write_Byte+0x68>)
 8006936:	f001 f93f 	bl	8007bb8 <HAL_GPIO_WritePin>
 800693a:	e004      	b.n	8006946 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 800693c:	2200      	movs	r2, #0
 800693e:	2120      	movs	r1, #32
 8006940:	480e      	ldr	r0, [pc, #56]	; (800697c <TP_Write_Byte+0x68>)
 8006942:	f001 f939 	bl	8007bb8 <HAL_GPIO_WritePin>

		num <<= 1;
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 800694c:	2200      	movs	r2, #0
 800694e:	2108      	movs	r1, #8
 8006950:	480a      	ldr	r0, [pc, #40]	; (800697c <TP_Write_Byte+0x68>)
 8006952:	f001 f931 	bl	8007bb8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006956:	2001      	movs	r0, #1
 8006958:	f000 fb2a 	bl	8006fb0 <HAL_Delay>
		T_CLK_ON;
 800695c:	2201      	movs	r2, #1
 800695e:	2108      	movs	r1, #8
 8006960:	4806      	ldr	r0, [pc, #24]	; (800697c <TP_Write_Byte+0x68>)
 8006962:	f001 f929 	bl	8007bb8 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	3301      	adds	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	2b07      	cmp	r3, #7
 8006970:	d9da      	bls.n	8006928 <TP_Write_Byte+0x14>
	}
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40020400 	.word	0x40020400

08006980 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8006992:	2200      	movs	r2, #0
 8006994:	2108      	movs	r1, #8
 8006996:	482c      	ldr	r0, [pc, #176]	; (8006a48 <TP_Read_AD+0xc8>)
 8006998:	f001 f90e 	bl	8007bb8 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 800699c:	2200      	movs	r2, #0
 800699e:	2120      	movs	r1, #32
 80069a0:	4829      	ldr	r0, [pc, #164]	; (8006a48 <TP_Read_AD+0xc8>)
 80069a2:	f001 f909 	bl	8007bb8 <HAL_GPIO_WritePin>
	T_CS_OFF;
 80069a6:	2200      	movs	r2, #0
 80069a8:	2180      	movs	r1, #128	; 0x80
 80069aa:	4828      	ldr	r0, [pc, #160]	; (8006a4c <TP_Read_AD+0xcc>)
 80069ac:	f001 f904 	bl	8007bb8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff ffae 	bl	8006914 <TP_Write_Byte>
	HAL_Delay(1);
 80069b8:	2001      	movs	r0, #1
 80069ba:	f000 faf9 	bl	8006fb0 <HAL_Delay>
	T_CLK_OFF;
 80069be:	2200      	movs	r2, #0
 80069c0:	2108      	movs	r1, #8
 80069c2:	4821      	ldr	r0, [pc, #132]	; (8006a48 <TP_Read_AD+0xc8>)
 80069c4:	f001 f8f8 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80069c8:	2001      	movs	r0, #1
 80069ca:	f000 faf1 	bl	8006fb0 <HAL_Delay>
	T_CLK_ON;
 80069ce:	2201      	movs	r2, #1
 80069d0:	2108      	movs	r1, #8
 80069d2:	481d      	ldr	r0, [pc, #116]	; (8006a48 <TP_Read_AD+0xc8>)
 80069d4:	f001 f8f0 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80069d8:	2001      	movs	r0, #1
 80069da:	f000 fae9 	bl	8006fb0 <HAL_Delay>
	T_CLK_OFF;
 80069de:	2200      	movs	r2, #0
 80069e0:	2108      	movs	r1, #8
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <TP_Read_AD+0xc8>)
 80069e4:	f001 f8e8 	bl	8007bb8 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e01c      	b.n	8006a28 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 80069ee:	89bb      	ldrh	r3, [r7, #12]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 80069f4:	2200      	movs	r2, #0
 80069f6:	2108      	movs	r1, #8
 80069f8:	4813      	ldr	r0, [pc, #76]	; (8006a48 <TP_Read_AD+0xc8>)
 80069fa:	f001 f8dd 	bl	8007bb8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80069fe:	2001      	movs	r0, #1
 8006a00:	f000 fad6 	bl	8006fb0 <HAL_Delay>
		T_CLK_ON;
 8006a04:	2201      	movs	r2, #1
 8006a06:	2108      	movs	r1, #8
 8006a08:	480f      	ldr	r0, [pc, #60]	; (8006a48 <TP_Read_AD+0xc8>)
 8006a0a:	f001 f8d5 	bl	8007bb8 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8006a0e:	2110      	movs	r1, #16
 8006a10:	480d      	ldr	r0, [pc, #52]	; (8006a48 <TP_Read_AD+0xc8>)
 8006a12:	f001 f8b9 	bl	8007b88 <HAL_GPIO_ReadPin>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <TP_Read_AD+0xa2>
 8006a1c:	89bb      	ldrh	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	3301      	adds	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	d9df      	bls.n	80069ee <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8006a2e:	89bb      	ldrh	r3, [r7, #12]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8006a34:	2201      	movs	r2, #1
 8006a36:	2180      	movs	r1, #128	; 0x80
 8006a38:	4804      	ldr	r0, [pc, #16]	; (8006a4c <TP_Read_AD+0xcc>)
 8006a3a:	f001 f8bd 	bl	8007bb8 <HAL_GPIO_WritePin>
	return(Num);
 8006a3e:	89bb      	ldrh	r3, [r7, #12]

}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40020400 	.word	0x40020400
 8006a4c:	40020c00 	.word	0x40020c00

08006a50 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff ff8f 	bl	8006980 <TP_Read_AD>
}
 8006a62:	bf00      	nop
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <TP_Read_XY+0x3c>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff ffe8 	bl	8006a50 <TP_Read_XOY>
 8006a80:	4603      	mov	r3, r0
 8006a82:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <TP_Read_XY+0x40>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff ffe1 	bl	8006a50 <TP_Read_XOY>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	89fa      	ldrh	r2, [r7, #14]
 8006a96:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	89ba      	ldrh	r2, [r7, #12]
 8006a9c:	801a      	strh	r2, [r3, #0]
	return 1;
 8006a9e:	2301      	movs	r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	2000017c 	.word	0x2000017c
 8006aac:	2000017d 	.word	0x2000017d

08006ab0 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006aba:	f107 0212 	add.w	r2, r7, #18
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff ffd1 	bl	8006a6c <TP_Read_XY>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <TP_Read_XY2+0x28>
    	return(0);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e049      	b.n	8006b6c <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8006ad8:	f107 020e 	add.w	r2, r7, #14
 8006adc:	f107 0310 	add.w	r3, r7, #16
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff ffc2 	bl	8006a6c <TP_Read_XY>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <TP_Read_XY2+0x46>
    	return(0);
 8006af2:	2300      	movs	r3, #0
 8006af4:	e03a      	b.n	8006b6c <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8006af6:	8a3a      	ldrh	r2, [r7, #16]
 8006af8:	8abb      	ldrh	r3, [r7, #20]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d804      	bhi.n	8006b08 <TP_Read_XY2+0x58>
 8006afe:	8a3b      	ldrh	r3, [r7, #16]
 8006b00:	3331      	adds	r3, #49	; 0x31
 8006b02:	8aba      	ldrh	r2, [r7, #20]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	da08      	bge.n	8006b1a <TP_Read_XY2+0x6a>
 8006b08:	8aba      	ldrh	r2, [r7, #20]
 8006b0a:	8a3b      	ldrh	r3, [r7, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d82c      	bhi.n	8006b6a <TP_Read_XY2+0xba>
 8006b10:	8abb      	ldrh	r3, [r7, #20]
 8006b12:	3331      	adds	r3, #49	; 0x31
 8006b14:	8a3a      	ldrh	r2, [r7, #16]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	db27      	blt.n	8006b6a <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8006b1a:	89fa      	ldrh	r2, [r7, #14]
 8006b1c:	8a7b      	ldrh	r3, [r7, #18]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d804      	bhi.n	8006b2c <TP_Read_XY2+0x7c>
 8006b22:	89fb      	ldrh	r3, [r7, #14]
 8006b24:	3331      	adds	r3, #49	; 0x31
 8006b26:	8a7a      	ldrh	r2, [r7, #18]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	da08      	bge.n	8006b3e <TP_Read_XY2+0x8e>
 8006b2c:	8a7a      	ldrh	r2, [r7, #18]
 8006b2e:	89fb      	ldrh	r3, [r7, #14]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d81a      	bhi.n	8006b6a <TP_Read_XY2+0xba>
 8006b34:	8a7b      	ldrh	r3, [r7, #18]
 8006b36:	3331      	adds	r3, #49	; 0x31
 8006b38:	89fa      	ldrh	r2, [r7, #14]
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	db15      	blt.n	8006b6a <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006b3e:	8abb      	ldrh	r3, [r7, #20]
 8006b40:	461a      	mov	r2, r3
 8006b42:	8a3b      	ldrh	r3, [r7, #16]
 8006b44:	4413      	add	r3, r2
 8006b46:	0fda      	lsrs	r2, r3, #31
 8006b48:	4413      	add	r3, r2
 8006b4a:	105b      	asrs	r3, r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8006b52:	8a7b      	ldrh	r3, [r7, #18]
 8006b54:	461a      	mov	r2, r3
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	4413      	add	r3, r2
 8006b5a:	0fda      	lsrs	r2, r3, #31
 8006b5c:	4413      	add	r3, r2
 8006b5e:	105b      	asrs	r3, r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	801a      	strh	r2, [r3, #0]
        return 1;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8006b7e:	2140      	movs	r1, #64	; 0x40
 8006b80:	483f      	ldr	r0, [pc, #252]	; (8006c80 <TP_Scan+0x10c>)
 8006b82:	f001 f801 	bl	8007b88 <HAL_GPIO_ReadPin>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d155      	bne.n	8006c38 <TP_Scan+0xc4>
	{
		if(tp)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8006b92:	493c      	ldr	r1, [pc, #240]	; (8006c84 <TP_Scan+0x110>)
 8006b94:	483c      	ldr	r0, [pc, #240]	; (8006c88 <TP_Scan+0x114>)
 8006b96:	f7ff ff8b 	bl	8006ab0 <TP_Read_XY2>
 8006b9a:	e03c      	b.n	8006c16 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8006b9c:	4939      	ldr	r1, [pc, #228]	; (8006c84 <TP_Scan+0x110>)
 8006b9e:	483a      	ldr	r0, [pc, #232]	; (8006c88 <TP_Scan+0x114>)
 8006ba0:	f7ff ff86 	bl	8006ab0 <TP_Read_XY2>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d035      	beq.n	8006c16 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8006baa:	4b38      	ldr	r3, [pc, #224]	; (8006c8c <TP_Scan+0x118>)
 8006bac:	ed93 7a05 	vldr	s14, [r3, #20]
 8006bb0:	4b36      	ldr	r3, [pc, #216]	; (8006c8c <TP_Scan+0x118>)
 8006bb2:	899b      	ldrh	r3, [r3, #12]
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bc0:	4b32      	ldr	r3, [pc, #200]	; (8006c8c <TP_Scan+0x118>)
 8006bc2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd6:	ee17 3a90 	vmov	r3, s15
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	4b2b      	ldr	r3, [pc, #172]	; (8006c8c <TP_Scan+0x118>)
 8006bde:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8006be0:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <TP_Scan+0x118>)
 8006be2:	ed93 7a06 	vldr	s14, [r3, #24]
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <TP_Scan+0x118>)
 8006be8:	89db      	ldrh	r3, [r3, #14]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bf6:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <TP_Scan+0x118>)
 8006bf8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006bfc:	ee07 3a90 	vmov	s15, r3
 8006c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0c:	ee17 3a90 	vmov	r3, s15
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <TP_Scan+0x118>)
 8006c14:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8006c16:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <TP_Scan+0x118>)
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	db26      	blt.n	8006c6e <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <TP_Scan+0x118>)
 8006c22:	22c0      	movs	r2, #192	; 0xc0
 8006c24:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8006c26:	4b19      	ldr	r3, [pc, #100]	; (8006c8c <TP_Scan+0x118>)
 8006c28:	899a      	ldrh	r2, [r3, #12]
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <TP_Scan+0x118>)
 8006c2c:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8006c2e:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <TP_Scan+0x118>)
 8006c30:	89da      	ldrh	r2, [r3, #14]
 8006c32:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <TP_Scan+0x118>)
 8006c34:	815a      	strh	r2, [r3, #10]
 8006c36:	e01a      	b.n	8006c6e <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8006c38:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <TP_Scan+0x118>)
 8006c3a:	7c1b      	ldrb	r3, [r3, #16]
 8006c3c:	b25b      	sxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da07      	bge.n	8006c52 <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8006c42:	4b12      	ldr	r3, [pc, #72]	; (8006c8c <TP_Scan+0x118>)
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <TP_Scan+0x118>)
 8006c4e:	741a      	strb	r2, [r3, #16]
 8006c50:	e00d      	b.n	8006c6e <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8006c52:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <TP_Scan+0x118>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <TP_Scan+0x118>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <TP_Scan+0x118>)
 8006c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c64:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8006c66:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <TP_Scan+0x118>)
 8006c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c6c:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8006c6e:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <TP_Scan+0x118>)
 8006c70:	7c1b      	ldrb	r3, [r3, #16]
 8006c72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c76:	b2db      	uxtb	r3, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40020c00 	.word	0x40020c00
 8006c84:	20000166 	.word	0x20000166
 8006c88:	20000164 	.word	0x20000164
 8006c8c:	20000158 	.word	0x20000158

08006c90 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006c94:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <MX_UART5_Init+0x50>)
 8006c98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006c9a:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ca0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006cb6:	220c      	movs	r2, #12
 8006cb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cba:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006cc0:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006cc6:	4805      	ldr	r0, [pc, #20]	; (8006cdc <MX_UART5_Init+0x4c>)
 8006cc8:	f005 fd6a 	bl	800c7a0 <HAL_UART_Init>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006cd2:	f7fe feab 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006cd6:	bf00      	nop
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200033d4 	.word	0x200033d4
 8006ce0:	40005000 	.word	0x40005000

08006ce4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <MX_USART3_UART_Init+0x50>)
 8006cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006cee:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006d08:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006d0a:	220c      	movs	r2, #12
 8006d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006d1a:	4805      	ldr	r0, [pc, #20]	; (8006d30 <MX_USART3_UART_Init+0x4c>)
 8006d1c:	f005 fd40 	bl	800c7a0 <HAL_UART_Init>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006d26:	f7fe fe81 	bl	8005a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006d2a:	bf00      	nop
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20003418 	.word	0x20003418
 8006d34:	40004800 	.word	0x40004800

08006d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d40:	f107 031c 	add.w	r3, r7, #28
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a42      	ldr	r2, [pc, #264]	; (8006e60 <HAL_UART_MspInit+0x128>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d14b      	bne.n	8006df2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	4b41      	ldr	r3, [pc, #260]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	4a40      	ldr	r2, [pc, #256]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d68:	6413      	str	r3, [r2, #64]	; 0x40
 8006d6a:	4b3e      	ldr	r3, [pc, #248]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	4b3a      	ldr	r3, [pc, #232]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	4a39      	ldr	r2, [pc, #228]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d80:	f043 0304 	orr.w	r3, r3, #4
 8006d84:	6313      	str	r3, [r2, #48]	; 0x30
 8006d86:	4b37      	ldr	r3, [pc, #220]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	4b33      	ldr	r3, [pc, #204]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	4a32      	ldr	r2, [pc, #200]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006d9c:	f043 0308 	orr.w	r3, r3, #8
 8006da0:	6313      	str	r3, [r2, #48]	; 0x30
 8006da2:	4b30      	ldr	r3, [pc, #192]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db4:	2302      	movs	r3, #2
 8006db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dc4:	f107 031c 	add.w	r3, r7, #28
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4827      	ldr	r0, [pc, #156]	; (8006e68 <HAL_UART_MspInit+0x130>)
 8006dcc:	f000 fd40 	bl	8007850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006de0:	2308      	movs	r3, #8
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006de4:	f107 031c 	add.w	r3, r7, #28
 8006de8:	4619      	mov	r1, r3
 8006dea:	4820      	ldr	r0, [pc, #128]	; (8006e6c <HAL_UART_MspInit+0x134>)
 8006dec:	f000 fd30 	bl	8007850 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006df0:	e031      	b.n	8006e56 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1e      	ldr	r2, [pc, #120]	; (8006e70 <HAL_UART_MspInit+0x138>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d12c      	bne.n	8006e56 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0c:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e20:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006e22:	f043 0302 	orr.w	r3, r3, #2
 8006e26:	6313      	str	r3, [r2, #48]	; 0x30
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <HAL_UART_MspInit+0x12c>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	60bb      	str	r3, [r7, #8]
 8006e32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8006e34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e42:	2303      	movs	r3, #3
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e46:	2307      	movs	r3, #7
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4808      	ldr	r0, [pc, #32]	; (8006e74 <HAL_UART_MspInit+0x13c>)
 8006e52:	f000 fcfd 	bl	8007850 <HAL_GPIO_Init>
}
 8006e56:	bf00      	nop
 8006e58:	3730      	adds	r7, #48	; 0x30
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40005000 	.word	0x40005000
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40020800 	.word	0x40020800
 8006e6c:	40020c00 	.word	0x40020c00
 8006e70:	40004800 	.word	0x40004800
 8006e74:	40020400 	.word	0x40020400

08006e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e7c:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006e7e:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006e80:	4a0e      	ldr	r2, [pc, #56]	; (8006ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e84:	e002      	b.n	8006e8c <LoopCopyDataInit>

08006e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e8a:	3304      	adds	r3, #4

08006e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e90:	d3f9      	bcc.n	8006e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e92:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006e94:	4c0b      	ldr	r4, [pc, #44]	; (8006ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e98:	e001      	b.n	8006e9e <LoopFillZerobss>

08006e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e9c:	3204      	adds	r2, #4

08006e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ea0:	d3fb      	bcc.n	8006e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ea2:	f7ff fb87 	bl	80065b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ea6:	f006 f83d 	bl	800cf24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006eaa:	f7fe fd23 	bl	80058f4 <main>
  bx  lr    
 8006eae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006eb8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8006ebc:	080103fc 	.word	0x080103fc
  ldr r2, =_sbss
 8006ec0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8006ec4:	20003460 	.word	0x20003460

08006ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ec8:	e7fe      	b.n	8006ec8 <ADC_IRQHandler>
	...

08006ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	; (8006f0c <HAL_Init+0x40>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <HAL_Init+0x40>)
 8006ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <HAL_Init+0x40>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_Init+0x40>)
 8006ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <HAL_Init+0x40>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <HAL_Init+0x40>)
 8006eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ef4:	2003      	movs	r0, #3
 8006ef6:	f000 f94f 	bl	8007198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006efa:	200f      	movs	r0, #15
 8006efc:	f000 f808 	bl	8006f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f00:	f7ff fac0 	bl	8006484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023c00 	.word	0x40023c00

08006f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f18:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <HAL_InitTick+0x54>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <HAL_InitTick+0x58>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f967 	bl	8007202 <HAL_SYSTICK_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e00e      	b.n	8006f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	d80a      	bhi.n	8006f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f44:	2200      	movs	r2, #0
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	f000 f92f 	bl	80071ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f50:	4a06      	ldr	r2, [pc, #24]	; (8006f6c <HAL_InitTick+0x5c>)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e000      	b.n	8006f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000154 	.word	0x20000154
 8006f68:	20000184 	.word	0x20000184
 8006f6c:	20000180 	.word	0x20000180

08006f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_IncTick+0x20>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_IncTick+0x24>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <HAL_IncTick+0x24>)
 8006f82:	6013      	str	r3, [r2, #0]
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20000184 	.word	0x20000184
 8006f94:	2000345c 	.word	0x2000345c

08006f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f9c:	4b03      	ldr	r3, [pc, #12]	; (8006fac <HAL_GetTick+0x14>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	2000345c 	.word	0x2000345c

08006fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fb8:	f7ff ffee 	bl	8006f98 <HAL_GetTick>
 8006fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d005      	beq.n	8006fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fca:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <HAL_Delay+0x44>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006fd6:	bf00      	nop
 8006fd8:	f7ff ffde 	bl	8006f98 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d8f7      	bhi.n	8006fd8 <HAL_Delay+0x28>
  {
  }
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000184 	.word	0x20000184

08006ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <__NVIC_SetPriorityGrouping+0x44>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007014:	4013      	ands	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800702a:	4a04      	ldr	r2, [pc, #16]	; (800703c <__NVIC_SetPriorityGrouping+0x44>)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	60d3      	str	r3, [r2, #12]
}
 8007030:	bf00      	nop
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <__NVIC_GetPriorityGrouping+0x18>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	0a1b      	lsrs	r3, r3, #8
 800704a:	f003 0307 	and.w	r3, r3, #7
}
 800704e:	4618      	mov	r0, r3
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	e000ed00 	.word	0xe000ed00

0800705c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706a:	2b00      	cmp	r3, #0
 800706c:	db0b      	blt.n	8007086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	f003 021f 	and.w	r2, r3, #31
 8007074:	4907      	ldr	r1, [pc, #28]	; (8007094 <__NVIC_EnableIRQ+0x38>)
 8007076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	2001      	movs	r0, #1
 800707e:	fa00 f202 	lsl.w	r2, r0, r2
 8007082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	e000e100 	.word	0xe000e100

08007098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	db0a      	blt.n	80070c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	490c      	ldr	r1, [pc, #48]	; (80070e4 <__NVIC_SetPriority+0x4c>)
 80070b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b6:	0112      	lsls	r2, r2, #4
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	440b      	add	r3, r1
 80070bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070c0:	e00a      	b.n	80070d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4908      	ldr	r1, [pc, #32]	; (80070e8 <__NVIC_SetPriority+0x50>)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	3b04      	subs	r3, #4
 80070d0:	0112      	lsls	r2, r2, #4
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	440b      	add	r3, r1
 80070d6:	761a      	strb	r2, [r3, #24]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000e100 	.word	0xe000e100
 80070e8:	e000ed00 	.word	0xe000ed00

080070ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b089      	sub	sp, #36	; 0x24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f1c3 0307 	rsb	r3, r3, #7
 8007106:	2b04      	cmp	r3, #4
 8007108:	bf28      	it	cs
 800710a:	2304      	movcs	r3, #4
 800710c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3304      	adds	r3, #4
 8007112:	2b06      	cmp	r3, #6
 8007114:	d902      	bls.n	800711c <NVIC_EncodePriority+0x30>
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3b03      	subs	r3, #3
 800711a:	e000      	b.n	800711e <NVIC_EncodePriority+0x32>
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007120:	f04f 32ff 	mov.w	r2, #4294967295
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	43da      	mvns	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	401a      	ands	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007134:	f04f 31ff 	mov.w	r1, #4294967295
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	fa01 f303 	lsl.w	r3, r1, r3
 800713e:	43d9      	mvns	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007144:	4313      	orrs	r3, r2
         );
}
 8007146:	4618      	mov	r0, r3
 8007148:	3724      	adds	r7, #36	; 0x24
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007164:	d301      	bcc.n	800716a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007166:	2301      	movs	r3, #1
 8007168:	e00f      	b.n	800718a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800716a:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <SysTick_Config+0x40>)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3b01      	subs	r3, #1
 8007170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007172:	210f      	movs	r1, #15
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	f7ff ff8e 	bl	8007098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <SysTick_Config+0x40>)
 800717e:	2200      	movs	r2, #0
 8007180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <SysTick_Config+0x40>)
 8007184:	2207      	movs	r2, #7
 8007186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000e010 	.word	0xe000e010

08007198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff29 	bl	8006ff8 <__NVIC_SetPriorityGrouping>
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b086      	sub	sp, #24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	4603      	mov	r3, r0
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071c0:	f7ff ff3e 	bl	8007040 <__NVIC_GetPriorityGrouping>
 80071c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	6978      	ldr	r0, [r7, #20]
 80071cc:	f7ff ff8e 	bl	80070ec <NVIC_EncodePriority>
 80071d0:	4602      	mov	r2, r0
 80071d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d6:	4611      	mov	r1, r2
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff ff5d 	bl	8007098 <__NVIC_SetPriority>
}
 80071de:	bf00      	nop
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	4603      	mov	r3, r0
 80071ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff ff31 	bl	800705c <__NVIC_EnableIRQ>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff ffa2 	bl	8007154 <SysTick_Config>
 8007210:	4603      	mov	r3, r0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007228:	f7ff feb6 	bl	8006f98 <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e099      	b.n	800736c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007258:	e00f      	b.n	800727a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800725a:	f7ff fe9d 	bl	8006f98 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b05      	cmp	r3, #5
 8007266:	d908      	bls.n	800727a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2203      	movs	r2, #3
 8007272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e078      	b.n	800736c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e8      	bne.n	800725a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4b38      	ldr	r3, [pc, #224]	; (8007374 <HAL_DMA_Init+0x158>)
 8007294:	4013      	ands	r3, r2
 8007296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d107      	bne.n	80072e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	4313      	orrs	r3, r2
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b04      	cmp	r3, #4
 800730c:	d117      	bne.n	800733e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa19 	bl	8007758 <DMA_CheckFifoParam>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800733a:	2301      	movs	r3, #1
 800733c:	e016      	b.n	800736c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f9d0 	bl	80076ec <DMA_CalcBaseAndBitshift>
 800734c:	4603      	mov	r3, r0
 800734e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007354:	223f      	movs	r2, #63	; 0x3f
 8007356:	409a      	lsls	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	f010803f 	.word	0xf010803f

08007378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d004      	beq.n	8007396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2280      	movs	r2, #128	; 0x80
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e00c      	b.n	80073b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2205      	movs	r2, #5
 800739a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0201 	bic.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073c8:	4b8e      	ldr	r3, [pc, #568]	; (8007604 <HAL_DMA_IRQHandler+0x248>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a8e      	ldr	r2, [pc, #568]	; (8007608 <HAL_DMA_IRQHandler+0x24c>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	0a9b      	lsrs	r3, r3, #10
 80073d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e6:	2208      	movs	r2, #8
 80073e8:	409a      	lsls	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01a      	beq.n	8007428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d013      	beq.n	8007428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0204 	bic.w	r2, r2, #4
 800740e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007414:	2208      	movs	r2, #8
 8007416:	409a      	lsls	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f043 0201 	orr.w	r2, r3, #1
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742c:	2201      	movs	r2, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d012      	beq.n	800745e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	2201      	movs	r2, #1
 800744c:	409a      	lsls	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007462:	2204      	movs	r2, #4
 8007464:	409a      	lsls	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d012      	beq.n	8007494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	2204      	movs	r2, #4
 8007482:	409a      	lsls	r2, r3
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748c:	f043 0204 	orr.w	r2, r3, #4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	2210      	movs	r2, #16
 800749a:	409a      	lsls	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4013      	ands	r3, r2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d043      	beq.n	800752c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d03c      	beq.n	800752c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b6:	2210      	movs	r2, #16
 80074b8:	409a      	lsls	r2, r3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d018      	beq.n	80074fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d108      	bne.n	80074ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d024      	beq.n	800752c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
 80074ea:	e01f      	b.n	800752c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
 80074fc:	e016      	b.n	800752c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d107      	bne.n	800751c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0208 	bic.w	r2, r2, #8
 800751a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007530:	2220      	movs	r2, #32
 8007532:	409a      	lsls	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 808f 	beq.w	800765c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8087 	beq.w	800765c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007552:	2220      	movs	r2, #32
 8007554:	409a      	lsls	r2, r3
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b05      	cmp	r3, #5
 8007564:	d136      	bne.n	80075d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0216 	bic.w	r2, r2, #22
 8007574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <HAL_DMA_IRQHandler+0x1da>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0208 	bic.w	r2, r2, #8
 80075a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075aa:	223f      	movs	r2, #63	; 0x3f
 80075ac:	409a      	lsls	r2, r3
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d07e      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
        }
        return;
 80075d2:	e079      	b.n	80076c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01d      	beq.n	800761e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10d      	bne.n	800760c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d031      	beq.n	800765c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
 8007600:	e02c      	b.n	800765c <HAL_DMA_IRQHandler+0x2a0>
 8007602:	bf00      	nop
 8007604:	20000154 	.word	0x20000154
 8007608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d023      	beq.n	800765c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
 800761c:	e01e      	b.n	800765c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10f      	bne.n	800764c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0210 	bic.w	r2, r2, #16
 800763a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	2b00      	cmp	r3, #0
 8007662:	d032      	beq.n	80076ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d022      	beq.n	80076b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2205      	movs	r2, #5
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3301      	adds	r3, #1
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	429a      	cmp	r2, r3
 8007692:	d307      	bcc.n	80076a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f2      	bne.n	8007688 <HAL_DMA_IRQHandler+0x2cc>
 80076a2:	e000      	b.n	80076a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80076a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
 80076c6:	e000      	b.n	80076ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80076c8:	bf00      	nop
    }
  }
}
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076de:	b2db      	uxtb	r3, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	3b10      	subs	r3, #16
 80076fc:	4a14      	ldr	r2, [pc, #80]	; (8007750 <DMA_CalcBaseAndBitshift+0x64>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	091b      	lsrs	r3, r3, #4
 8007704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007706:	4a13      	ldr	r2, [pc, #76]	; (8007754 <DMA_CalcBaseAndBitshift+0x68>)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d909      	bls.n	800772e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	1d1a      	adds	r2, r3, #4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	659a      	str	r2, [r3, #88]	; 0x58
 800772c:	e007      	b.n	800773e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	aaaaaaab 	.word	0xaaaaaaab
 8007754:	080103bc 	.word	0x080103bc

08007758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d11f      	bne.n	80077b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d856      	bhi.n	8007826 <DMA_CheckFifoParam+0xce>
 8007778:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <DMA_CheckFifoParam+0x28>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	08007791 	.word	0x08007791
 8007784:	080077a3 	.word	0x080077a3
 8007788:	08007791 	.word	0x08007791
 800778c:	08007827 	.word	0x08007827
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d046      	beq.n	800782a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a0:	e043      	b.n	800782a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077aa:	d140      	bne.n	800782e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b0:	e03d      	b.n	800782e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	d121      	bne.n	8007800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d837      	bhi.n	8007832 <DMA_CheckFifoParam+0xda>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <DMA_CheckFifoParam+0x70>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077df 	.word	0x080077df
 80077d0:	080077d9 	.word	0x080077d9
 80077d4:	080077f1 	.word	0x080077f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e030      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d025      	beq.n	8007836 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077ee:	e022      	b.n	8007836 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077f8:	d11f      	bne.n	800783a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077fe:	e01c      	b.n	800783a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d903      	bls.n	800780e <DMA_CheckFifoParam+0xb6>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d003      	beq.n	8007814 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800780c:	e018      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	73fb      	strb	r3, [r7, #15]
      break;
 8007812:	e015      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00e      	beq.n	800783e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
      break;
 8007824:	e00b      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;
 8007826:	bf00      	nop
 8007828:	e00a      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      break;
 800782a:	bf00      	nop
 800782c:	e008      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      break;
 800782e:	bf00      	nop
 8007830:	e006      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      break;
 8007832:	bf00      	nop
 8007834:	e004      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      break;
 8007836:	bf00      	nop
 8007838:	e002      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      break;   
 800783a:	bf00      	nop
 800783c:	e000      	b.n	8007840 <DMA_CheckFifoParam+0xe8>
      break;
 800783e:	bf00      	nop
    }
  } 
  
  return status; 
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop

08007850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007850:	b480      	push	{r7}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800785e:	2300      	movs	r3, #0
 8007860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e16b      	b.n	8007b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800786c:	2201      	movs	r2, #1
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4013      	ands	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	429a      	cmp	r2, r3
 8007886:	f040 815a 	bne.w	8007b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d005      	beq.n	80078a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d130      	bne.n	8007904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	2203      	movs	r2, #3
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4013      	ands	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078d8:	2201      	movs	r2, #1
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	43db      	mvns	r3, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	4013      	ands	r3, r2
 80078e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 0201 	and.w	r2, r3, #1
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	2b03      	cmp	r3, #3
 800790e:	d017      	beq.n	8007940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	2203      	movs	r2, #3
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	43db      	mvns	r3, r3
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	4013      	ands	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4313      	orrs	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d123      	bne.n	8007994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	08da      	lsrs	r2, r3, #3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3208      	adds	r2, #8
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	220f      	movs	r2, #15
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	4313      	orrs	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	08da      	lsrs	r2, r3, #3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3208      	adds	r2, #8
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	2203      	movs	r2, #3
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	43db      	mvns	r3, r3
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	4013      	ands	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f003 0203 	and.w	r2, r3, #3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	4313      	orrs	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80b4 	beq.w	8007b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <HAL_GPIO_Init+0x30c>)
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	4a5f      	ldr	r2, [pc, #380]	; (8007b5c <HAL_GPIO_Init+0x30c>)
 80079e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079e4:	6453      	str	r3, [r2, #68]	; 0x44
 80079e6:	4b5d      	ldr	r3, [pc, #372]	; (8007b5c <HAL_GPIO_Init+0x30c>)
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079f2:	4a5b      	ldr	r2, [pc, #364]	; (8007b60 <HAL_GPIO_Init+0x310>)
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	3302      	adds	r3, #2
 80079fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	220f      	movs	r2, #15
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a52      	ldr	r2, [pc, #328]	; (8007b64 <HAL_GPIO_Init+0x314>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02b      	beq.n	8007a76 <HAL_GPIO_Init+0x226>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a51      	ldr	r2, [pc, #324]	; (8007b68 <HAL_GPIO_Init+0x318>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d025      	beq.n	8007a72 <HAL_GPIO_Init+0x222>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a50      	ldr	r2, [pc, #320]	; (8007b6c <HAL_GPIO_Init+0x31c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01f      	beq.n	8007a6e <HAL_GPIO_Init+0x21e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a4f      	ldr	r2, [pc, #316]	; (8007b70 <HAL_GPIO_Init+0x320>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d019      	beq.n	8007a6a <HAL_GPIO_Init+0x21a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a4e      	ldr	r2, [pc, #312]	; (8007b74 <HAL_GPIO_Init+0x324>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d013      	beq.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a4d      	ldr	r2, [pc, #308]	; (8007b78 <HAL_GPIO_Init+0x328>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00d      	beq.n	8007a62 <HAL_GPIO_Init+0x212>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a4c      	ldr	r2, [pc, #304]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d007      	beq.n	8007a5e <HAL_GPIO_Init+0x20e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a4b      	ldr	r2, [pc, #300]	; (8007b80 <HAL_GPIO_Init+0x330>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d101      	bne.n	8007a5a <HAL_GPIO_Init+0x20a>
 8007a56:	2307      	movs	r3, #7
 8007a58:	e00e      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	e00c      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a5e:	2306      	movs	r3, #6
 8007a60:	e00a      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a62:	2305      	movs	r3, #5
 8007a64:	e008      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a66:	2304      	movs	r3, #4
 8007a68:	e006      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e004      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e002      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e000      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a76:	2300      	movs	r3, #0
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	f002 0203 	and.w	r2, r2, #3
 8007a7e:	0092      	lsls	r2, r2, #2
 8007a80:	4093      	lsls	r3, r2
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a88:	4935      	ldr	r1, [pc, #212]	; (8007b60 <HAL_GPIO_Init+0x310>)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	089b      	lsrs	r3, r3, #2
 8007a8e:	3302      	adds	r3, #2
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a96:	4b3b      	ldr	r3, [pc, #236]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007aba:	4a32      	ldr	r2, [pc, #200]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ac0:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4013      	ands	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ae4:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007aea:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b0e:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4013      	ands	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b38:	4a12      	ldr	r2, [pc, #72]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	f67f ae90 	bls.w	800786c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	3724      	adds	r7, #36	; 0x24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40013800 	.word	0x40013800
 8007b64:	40020000 	.word	0x40020000
 8007b68:	40020400 	.word	0x40020400
 8007b6c:	40020800 	.word	0x40020800
 8007b70:	40020c00 	.word	0x40020c00
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40021400 	.word	0x40021400
 8007b7c:	40021800 	.word	0x40021800
 8007b80:	40021c00 	.word	0x40021c00
 8007b84:	40013c00 	.word	0x40013c00

08007b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	887b      	ldrh	r3, [r7, #2]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e001      	b.n	8007baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bc8:	787b      	ldrb	r3, [r7, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bd4:	e003      	b.n	8007bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bd6:	887b      	ldrh	r3, [r7, #2]
 8007bd8:	041a      	lsls	r2, r3, #16
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	619a      	str	r2, [r3, #24]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e12b      	b.n	8007e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fd fdbe 	bl	8005794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2224      	movs	r2, #36	; 0x24
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c50:	f003 f8d6 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 8007c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	4a81      	ldr	r2, [pc, #516]	; (8007e60 <HAL_I2C_Init+0x274>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d807      	bhi.n	8007c70 <HAL_I2C_Init+0x84>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a80      	ldr	r2, [pc, #512]	; (8007e64 <HAL_I2C_Init+0x278>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	bf94      	ite	ls
 8007c68:	2301      	movls	r3, #1
 8007c6a:	2300      	movhi	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	e006      	b.n	8007c7e <HAL_I2C_Init+0x92>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a7d      	ldr	r2, [pc, #500]	; (8007e68 <HAL_I2C_Init+0x27c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bf94      	ite	ls
 8007c78:	2301      	movls	r3, #1
 8007c7a:	2300      	movhi	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e0e7      	b.n	8007e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a78      	ldr	r2, [pc, #480]	; (8007e6c <HAL_I2C_Init+0x280>)
 8007c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8e:	0c9b      	lsrs	r3, r3, #18
 8007c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4a6a      	ldr	r2, [pc, #424]	; (8007e60 <HAL_I2C_Init+0x274>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d802      	bhi.n	8007cc0 <HAL_I2C_Init+0xd4>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	e009      	b.n	8007cd4 <HAL_I2C_Init+0xe8>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	4a69      	ldr	r2, [pc, #420]	; (8007e70 <HAL_I2C_Init+0x284>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	099b      	lsrs	r3, r3, #6
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	495c      	ldr	r1, [pc, #368]	; (8007e60 <HAL_I2C_Init+0x274>)
 8007cf0:	428b      	cmp	r3, r1
 8007cf2:	d819      	bhi.n	8007d28 <HAL_I2C_Init+0x13c>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	1e59      	subs	r1, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d02:	1c59      	adds	r1, r3, #1
 8007d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d08:	400b      	ands	r3, r1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_I2C_Init+0x138>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	1e59      	subs	r1, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d22:	e051      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007d24:	2304      	movs	r3, #4
 8007d26:	e04f      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d111      	bne.n	8007d54 <HAL_I2C_Init+0x168>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	1e58      	subs	r0, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6859      	ldr	r1, [r3, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	440b      	add	r3, r1
 8007d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d42:	3301      	adds	r3, #1
 8007d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf0c      	ite	eq
 8007d4c:	2301      	moveq	r3, #1
 8007d4e:	2300      	movne	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	e012      	b.n	8007d7a <HAL_I2C_Init+0x18e>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	1e58      	subs	r0, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6859      	ldr	r1, [r3, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	0099      	lsls	r1, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_I2C_Init+0x196>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e022      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10e      	bne.n	8007da8 <HAL_I2C_Init+0x1bc>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1e58      	subs	r0, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6859      	ldr	r1, [r3, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	440b      	add	r3, r1
 8007d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da6:	e00f      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1e58      	subs	r0, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6859      	ldr	r1, [r3, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	0099      	lsls	r1, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	6809      	ldr	r1, [r1, #0]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6911      	ldr	r1, [r2, #16]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68d2      	ldr	r2, [r2, #12]
 8007e02:	4311      	orrs	r1, r2
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	000186a0 	.word	0x000186a0
 8007e64:	001e847f 	.word	0x001e847f
 8007e68:	003d08ff 	.word	0x003d08ff
 8007e6c:	431bde83 	.word	0x431bde83
 8007e70:	10624dd3 	.word	0x10624dd3

08007e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	817b      	strh	r3, [r7, #10]
 8007e86:	460b      	mov	r3, r1
 8007e88:	813b      	strh	r3, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e8e:	f7ff f883 	bl	8006f98 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	f040 80d9 	bne.w	8008054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	2319      	movs	r3, #25
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	496d      	ldr	r1, [pc, #436]	; (8008060 <HAL_I2C_Mem_Write+0x1ec>)
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f002 f90d 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e0cc      	b.n	8008056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d101      	bne.n	8007eca <HAL_I2C_Mem_Write+0x56>
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e0c5      	b.n	8008056 <HAL_I2C_Mem_Write+0x1e2>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d007      	beq.n	8007ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2221      	movs	r2, #33	; 0x21
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2240      	movs	r2, #64	; 0x40
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a3a      	ldr	r2, [r7, #32]
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a4d      	ldr	r2, [pc, #308]	; (8008064 <HAL_I2C_Mem_Write+0x1f0>)
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f32:	88f8      	ldrh	r0, [r7, #6]
 8007f34:	893a      	ldrh	r2, [r7, #8]
 8007f36:	8979      	ldrh	r1, [r7, #10]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4603      	mov	r3, r0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f001 fe9c 	bl	8009c80 <I2C_RequestMemoryWrite>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d052      	beq.n	8007ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e081      	b.n	8008056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f002 f98e 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d107      	bne.n	8007f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e06b      	b.n	8008056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d11b      	bne.n	8007ff4 <HAL_I2C_Mem_Write+0x180>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d017      	beq.n	8007ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1aa      	bne.n	8007f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f002 f97a 	bl	800a2fa <I2C_WaitOnBTFFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00d      	beq.n	8008028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	2b04      	cmp	r3, #4
 8008012:	d107      	bne.n	8008024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e016      	b.n	8008056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	00100002 	.word	0x00100002
 8008064:	ffff0000 	.word	0xffff0000

08008068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08c      	sub	sp, #48	; 0x30
 800806c:	af02      	add	r7, sp, #8
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	461a      	mov	r2, r3
 8008076:	4603      	mov	r3, r0
 8008078:	817b      	strh	r3, [r7, #10]
 800807a:	460b      	mov	r3, r1
 800807c:	813b      	strh	r3, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008082:	f7fe ff89 	bl	8006f98 <HAL_GetTick>
 8008086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b20      	cmp	r3, #32
 8008092:	f040 8208 	bne.w	80084a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2319      	movs	r3, #25
 800809c:	2201      	movs	r2, #1
 800809e:	497b      	ldr	r1, [pc, #492]	; (800828c <HAL_I2C_Mem_Read+0x224>)
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f002 f813 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80080ac:	2302      	movs	r3, #2
 80080ae:	e1fb      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_I2C_Mem_Read+0x56>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e1f4      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d007      	beq.n	80080e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2222      	movs	r2, #34	; 0x22
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2240      	movs	r2, #64	; 0x40
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a5b      	ldr	r2, [pc, #364]	; (8008290 <HAL_I2C_Mem_Read+0x228>)
 8008124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008126:	88f8      	ldrh	r0, [r7, #6]
 8008128:	893a      	ldrh	r2, [r7, #8]
 800812a:	8979      	ldrh	r1, [r7, #10]
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4603      	mov	r3, r0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f001 fe38 	bl	8009dac <I2C_RequestMemoryRead>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e1b0      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d113      	bne.n	8008176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800814e:	2300      	movs	r3, #0
 8008150:	623b      	str	r3, [r7, #32]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	623b      	str	r3, [r7, #32]
 8008162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	e184      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817a:	2b01      	cmp	r3, #1
 800817c:	d11b      	bne.n	80081b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800818c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	61fb      	str	r3, [r7, #28]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	61fb      	str	r3, [r7, #28]
 80081a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e164      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d11b      	bne.n	80081f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	61bb      	str	r3, [r7, #24]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	61bb      	str	r3, [r7, #24]
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	e144      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800820c:	e138      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008212:	2b03      	cmp	r3, #3
 8008214:	f200 80f1 	bhi.w	80083fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821c:	2b01      	cmp	r3, #1
 800821e:	d123      	bne.n	8008268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f002 f8db 	bl	800a3e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e139      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008266:	e10b      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826c:	2b02      	cmp	r3, #2
 800826e:	d14e      	bne.n	800830e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	2200      	movs	r2, #0
 8008278:	4906      	ldr	r1, [pc, #24]	; (8008294 <HAL_I2C_Mem_Read+0x22c>)
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f001 ff26 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d008      	beq.n	8008298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e10e      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
 800828a:	bf00      	nop
 800828c:	00100002 	.word	0x00100002
 8008290:	ffff0000 	.word	0xffff0000
 8008294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691a      	ldr	r2, [r3, #16]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	b2d2      	uxtb	r2, r2
 80082e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008302:	b29b      	uxth	r3, r3
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800830c:	e0b8      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	2200      	movs	r2, #0
 8008316:	4966      	ldr	r1, [pc, #408]	; (80084b0 <HAL_I2C_Mem_Read+0x448>)
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f001 fed7 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e0bf      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	2200      	movs	r2, #0
 8008372:	494f      	ldr	r1, [pc, #316]	; (80084b0 <HAL_I2C_Mem_Read+0x448>)
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f001 fea9 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e091      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083f8:	e042      	b.n	8008480 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f001 ffee 	bl	800a3e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e04c      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842a:	3b01      	subs	r3, #1
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b04      	cmp	r3, #4
 800844c:	d118      	bne.n	8008480 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008484:	2b00      	cmp	r3, #0
 8008486:	f47f aec2 	bne.w	800820e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e000      	b.n	80084a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80084a6:	2302      	movs	r3, #2
  }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3728      	adds	r7, #40	; 0x28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	00010004 	.word	0x00010004

080084b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b10      	cmp	r3, #16
 80084e2:	d003      	beq.n	80084ec <HAL_I2C_EV_IRQHandler+0x38>
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	f040 80c1 	bne.w	800866e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10d      	bne.n	8008522 <HAL_I2C_EV_IRQHandler+0x6e>
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800850c:	d003      	beq.n	8008516 <HAL_I2C_EV_IRQHandler+0x62>
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008514:	d101      	bne.n	800851a <HAL_I2C_EV_IRQHandler+0x66>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <HAL_I2C_EV_IRQHandler+0x68>
 800851a:	2300      	movs	r3, #0
 800851c:	2b01      	cmp	r3, #1
 800851e:	f000 8132 	beq.w	8008786 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00c      	beq.n	8008546 <HAL_I2C_EV_IRQHandler+0x92>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	0a5b      	lsrs	r3, r3, #9
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 ffd6 	bl	800a4ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fd83 	bl	800904a <I2C_Master_SB>
 8008544:	e092      	b.n	800866c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	08db      	lsrs	r3, r3, #3
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <HAL_I2C_EV_IRQHandler+0xb2>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	0a5b      	lsrs	r3, r3, #9
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fdf9 	bl	8009156 <I2C_Master_ADD10>
 8008564:	e082      	b.n	800866c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <HAL_I2C_EV_IRQHandler+0xd2>
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	0a5b      	lsrs	r3, r3, #9
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fe13 	bl	80091aa <I2C_Master_ADDR>
 8008584:	e072      	b.n	800866c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	089b      	lsrs	r3, r3, #2
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d03b      	beq.n	800860a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a0:	f000 80f3 	beq.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	09db      	lsrs	r3, r3, #7
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00f      	beq.n	80085d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	0a9b      	lsrs	r3, r3, #10
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	089b      	lsrs	r3, r3, #2
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9f3 	bl	80089b4 <I2C_MasterTransmit_TXE>
 80085ce:	e04d      	b.n	800866c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80d6 	beq.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	0a5b      	lsrs	r3, r3, #9
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 80cf 	beq.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b21      	cmp	r3, #33	; 0x21
 80085f0:	d103      	bne.n	80085fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa7a 	bl	8008aec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085f8:	e0c7      	b.n	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	f040 80c4 	bne.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fae8 	bl	8008bd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008608:	e0bf      	b.n	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008618:	f000 80b7 	beq.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	099b      	lsrs	r3, r3, #6
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00f      	beq.n	8008648 <HAL_I2C_EV_IRQHandler+0x194>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	0a9b      	lsrs	r3, r3, #10
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <HAL_I2C_EV_IRQHandler+0x194>
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	089b      	lsrs	r3, r3, #2
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d103      	bne.n	8008648 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fb5d 	bl	8008d00 <I2C_MasterReceive_RXNE>
 8008646:	e011      	b.n	800866c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 809a 	beq.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	0a5b      	lsrs	r3, r3, #9
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8093 	beq.w	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc06 	bl	8008e76 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800866a:	e08e      	b.n	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
 800866c:	e08d      	b.n	800878a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	e007      	b.n	8008690 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d012      	beq.n	80086c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	0a5b      	lsrs	r3, r3, #9
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00c      	beq.n	80086c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80086b8:	69b9      	ldr	r1, [r7, #24]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 ffc4 	bl	8009648 <I2C_Slave_ADDR>
 80086c0:	e066      	b.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	091b      	lsrs	r3, r3, #4
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	0a5b      	lsrs	r3, r3, #9
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fffe 	bl	80096dc <I2C_Slave_STOPF>
 80086e0:	e056      	b.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b21      	cmp	r3, #33	; 0x21
 80086e6:	d002      	beq.n	80086ee <HAL_I2C_EV_IRQHandler+0x23a>
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b29      	cmp	r3, #41	; 0x29
 80086ec:	d125      	bne.n	800873a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	09db      	lsrs	r3, r3, #7
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00f      	beq.n	800871a <HAL_I2C_EV_IRQHandler+0x266>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	0a9b      	lsrs	r3, r3, #10
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d009      	beq.n	800871a <HAL_I2C_EV_IRQHandler+0x266>
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	089b      	lsrs	r3, r3, #2
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 feda 	bl	80094cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008718:	e039      	b.n	800878e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	089b      	lsrs	r3, r3, #2
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d033      	beq.n	800878e <HAL_I2C_EV_IRQHandler+0x2da>
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	0a5b      	lsrs	r3, r3, #9
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d02d      	beq.n	800878e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 ff07 	bl	8009546 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008738:	e029      	b.n	800878e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	099b      	lsrs	r3, r3, #6
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00f      	beq.n	8008766 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	0a9b      	lsrs	r3, r3, #10
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	089b      	lsrs	r3, r3, #2
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 ff12 	bl	8009588 <I2C_SlaveReceive_RXNE>
 8008764:	e014      	b.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	089b      	lsrs	r3, r3, #2
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00e      	beq.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	0a5b      	lsrs	r3, r3, #9
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 ff40 	bl	8009604 <I2C_SlaveReceive_BTF>
 8008784:	e004      	b.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800878e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008790:	3720      	adds	r7, #32
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b08a      	sub	sp, #40	; 0x28
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	0a1b      	lsrs	r3, r3, #8
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00e      	beq.n	80087e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	0a1b      	lsrs	r3, r3, #8
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	0a5b      	lsrs	r3, r3, #9
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00e      	beq.n	800880e <HAL_I2C_ER_IRQHandler+0x78>
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	0a1b      	lsrs	r3, r3, #8
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d008      	beq.n	800880e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	f043 0302 	orr.w	r3, r3, #2
 8008802:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800880c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	0a9b      	lsrs	r3, r3, #10
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d03f      	beq.n	800889a <HAL_I2C_ER_IRQHandler+0x104>
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	0a1b      	lsrs	r3, r3, #8
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d039      	beq.n	800889a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008826:	7efb      	ldrb	r3, [r7, #27]
 8008828:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008838:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008840:	7ebb      	ldrb	r3, [r7, #26]
 8008842:	2b20      	cmp	r3, #32
 8008844:	d112      	bne.n	800886c <HAL_I2C_ER_IRQHandler+0xd6>
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10f      	bne.n	800886c <HAL_I2C_ER_IRQHandler+0xd6>
 800884c:	7cfb      	ldrb	r3, [r7, #19]
 800884e:	2b21      	cmp	r3, #33	; 0x21
 8008850:	d008      	beq.n	8008864 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008852:	7cfb      	ldrb	r3, [r7, #19]
 8008854:	2b29      	cmp	r3, #41	; 0x29
 8008856:	d005      	beq.n	8008864 <HAL_I2C_ER_IRQHandler+0xce>
 8008858:	7cfb      	ldrb	r3, [r7, #19]
 800885a:	2b28      	cmp	r3, #40	; 0x28
 800885c:	d106      	bne.n	800886c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b21      	cmp	r3, #33	; 0x21
 8008862:	d103      	bne.n	800886c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f001 f869 	bl	800993c <I2C_Slave_AF>
 800886a:	e016      	b.n	800889a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008874:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	f043 0304 	orr.w	r3, r3, #4
 800887c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800887e:	7efb      	ldrb	r3, [r7, #27]
 8008880:	2b10      	cmp	r3, #16
 8008882:	d002      	beq.n	800888a <HAL_I2C_ER_IRQHandler+0xf4>
 8008884:	7efb      	ldrb	r3, [r7, #27]
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d107      	bne.n	800889a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008898:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	0adb      	lsrs	r3, r3, #11
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00e      	beq.n	80088c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	0a1b      	lsrs	r3, r3, #8
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d008      	beq.n	80088c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	f043 0308 	orr.w	r3, r3, #8
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80088c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f8a0 	bl	8009a1c <I2C_ITError>
  }
}
 80088dc:	bf00      	nop
 80088de:	3728      	adds	r7, #40	; 0x28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
 8008940:	4613      	mov	r3, r2
 8008942:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d150      	bne.n	8008a7c <I2C_MasterTransmit_TXE+0xc8>
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b21      	cmp	r3, #33	; 0x21
 80089de:	d14d      	bne.n	8008a7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d01d      	beq.n	8008a22 <I2C_MasterTransmit_TXE+0x6e>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d01a      	beq.n	8008a22 <I2C_MasterTransmit_TXE+0x6e>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089f2:	d016      	beq.n	8008a22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2211      	movs	r2, #17
 8008a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff ff62 	bl	80088e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a20:	e060      	b.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	d107      	bne.n	8008a6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff ff7d 	bl	8008964 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a6a:	e03b      	b.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff ff35 	bl	80088e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a7a:	e033      	b.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b21      	cmp	r3, #33	; 0x21
 8008a80:	d005      	beq.n	8008a8e <I2C_MasterTransmit_TXE+0xda>
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d12d      	bne.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b22      	cmp	r3, #34	; 0x22
 8008a8c:	d12a      	bne.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d108      	bne.n	8008aaa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008aa8:	e01c      	b.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d103      	bne.n	8008abe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f88e 	bl	8008bd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8008abc:	e012      	b.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	781a      	ldrb	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008ae2:	e7ff      	b.n	8008ae4 <I2C_MasterTransmit_TXE+0x130>
 8008ae4:	bf00      	nop
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b21      	cmp	r3, #33	; 0x21
 8008b04:	d164      	bne.n	8008bd0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d012      	beq.n	8008b36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008b34:	e04c      	b.n	8008bd0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d01d      	beq.n	8008b78 <I2C_MasterTransmit_BTF+0x8c>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d01a      	beq.n	8008b78 <I2C_MasterTransmit_BTF+0x8c>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b48:	d016      	beq.n	8008b78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2211      	movs	r2, #17
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff feb7 	bl	80088e4 <HAL_I2C_MasterTxCpltCallback>
}
 8008b76:	e02b      	b.n	8008bd0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b40      	cmp	r3, #64	; 0x40
 8008bb0:	d107      	bne.n	8008bc2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff fed2 	bl	8008964 <HAL_I2C_MemTxCpltCallback>
}
 8008bc0:	e006      	b.n	8008bd0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff fe8a 	bl	80088e4 <HAL_I2C_MasterTxCpltCallback>
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d11d      	bne.n	8008c2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d10b      	bne.n	8008c10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	1c9a      	adds	r2, r3, #2
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008c0e:	e073      	b.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	121b      	asrs	r3, r3, #8
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c2a:	e065      	b.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d10b      	bne.n	8008c4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c4a:	e055      	b.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d151      	bne.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	2b22      	cmp	r3, #34	; 0x22
 8008c58:	d10d      	bne.n	8008c76 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c68:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c74:	e040      	b.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d015      	beq.n	8008cac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b21      	cmp	r3, #33	; 0x21
 8008c84:	d112      	bne.n	8008cac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	781a      	ldrb	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008caa:	e025      	b.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d120      	bne.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	2b21      	cmp	r3, #33	; 0x21
 8008cba:	d11d      	bne.n	8008cf8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fe36 	bl	8008964 <HAL_I2C_MemTxCpltCallback>
}
 8008cf8:	bf00      	nop
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b22      	cmp	r3, #34	; 0x22
 8008d12:	f040 80ac 	bne.w	8008e6e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d921      	bls.n	8008d68 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691a      	ldr	r2, [r3, #16]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	f040 808c 	bne.w	8008e6e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d64:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008d66:	e082      	b.n	8008e6e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d075      	beq.n	8008e5c <I2C_MasterReceive_RXNE+0x15c>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d002      	beq.n	8008d7c <I2C_MasterReceive_RXNE+0x7c>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d16f      	bne.n	8008e5c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fafd 	bl	800a37c <I2C_WaitOnSTOPRequestThroughIT>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d142      	bne.n	8008e0e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d96:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008da6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691a      	ldr	r2, [r3, #16]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d10a      	bne.n	8008df8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff fdc1 	bl	8008978 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008df6:	e03a      	b.n	8008e6e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2212      	movs	r2, #18
 8008e04:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fd76 	bl	80088f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008e0c:	e02f      	b.n	8008e6e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	b2d2      	uxtb	r2, r2
 8008e2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fd99 	bl	800898c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008e5a:	e008      	b.n	8008e6e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6a:	605a      	str	r2, [r3, #4]
}
 8008e6c:	e7ff      	b.n	8008e6e <I2C_MasterReceive_RXNE+0x16e>
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d11b      	bne.n	8008ec6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e9c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	b2d2      	uxtb	r2, r2
 8008eaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008ec4:	e0bd      	b.n	8009042 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d129      	bne.n	8008f24 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ede:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d00a      	beq.n	8008efc <I2C_MasterReceive_BTF+0x86>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d007      	beq.n	8008efc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008efa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f22:	e08e      	b.n	8009042 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d176      	bne.n	800901c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d002      	beq.n	8008f3a <I2C_MasterReceive_BTF+0xc4>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b10      	cmp	r3, #16
 8008f38:	d108      	bne.n	8008f4c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	e019      	b.n	8008f80 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d002      	beq.n	8008f58 <I2C_MasterReceive_BTF+0xe2>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d108      	bne.n	8008f6a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e00a      	b.n	8008f80 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b10      	cmp	r3, #16
 8008f6e:	d007      	beq.n	8008f80 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	b2d2      	uxtb	r2, r2
 8008fb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008fda:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d10a      	bne.n	8009006 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fcba 	bl	8008978 <HAL_I2C_MemRxCpltCallback>
}
 8009004:	e01d      	b.n	8009042 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2212      	movs	r2, #18
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fc6f 	bl	80088f8 <HAL_I2C_MasterRxCpltCallback>
}
 800901a:	e012      	b.n	8009042 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691a      	ldr	r2, [r3, #16]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009038:	b29b      	uxth	r3, r3
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b40      	cmp	r3, #64	; 0x40
 800905c:	d117      	bne.n	800908e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009062:	2b00      	cmp	r3, #0
 8009064:	d109      	bne.n	800907a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906a:	b2db      	uxtb	r3, r3
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009076:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009078:	e067      	b.n	800914a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f043 0301 	orr.w	r3, r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	611a      	str	r2, [r3, #16]
}
 800908c:	e05d      	b.n	800914a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009096:	d133      	bne.n	8009100 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b21      	cmp	r3, #33	; 0x21
 80090a2:	d109      	bne.n	80090b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090b4:	611a      	str	r2, [r3, #16]
 80090b6:	e008      	b.n	80090ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	f043 0301 	orr.w	r3, r3, #1
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <I2C_Master_SB+0x92>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d108      	bne.n	80090ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d032      	beq.n	800914a <I2C_Master_SB+0x100>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d02d      	beq.n	800914a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090fc:	605a      	str	r2, [r3, #4]
}
 80090fe:	e024      	b.n	800914a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10e      	bne.n	8009126 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910c:	b29b      	uxth	r3, r3
 800910e:	11db      	asrs	r3, r3, #7
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	b2db      	uxtb	r3, r3
 8009118:	f063 030f 	orn	r3, r3, #15
 800911c:	b2da      	uxtb	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	611a      	str	r2, [r3, #16]
}
 8009124:	e011      	b.n	800914a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912a:	2b01      	cmp	r3, #1
 800912c:	d10d      	bne.n	800914a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009132:	b29b      	uxth	r3, r3
 8009134:	11db      	asrs	r3, r3, #7
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0306 	and.w	r3, r3, #6
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f063 030e 	orn	r3, r3, #14
 8009142:	b2da      	uxtb	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	611a      	str	r2, [r3, #16]
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009162:	b2da      	uxtb	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <I2C_Master_ADD10+0x26>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00c      	beq.n	800919e <I2C_Master_ADD10+0x48>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800919c:	605a      	str	r2, [r3, #4]
  }
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b091      	sub	sp, #68	; 0x44
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b22      	cmp	r3, #34	; 0x22
 80091d2:	f040 8169 	bne.w	80094a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10f      	bne.n	80091fe <I2C_Master_ADDR+0x54>
 80091de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091e2:	2b40      	cmp	r3, #64	; 0x40
 80091e4:	d10b      	bne.n	80091fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091e6:	2300      	movs	r3, #0
 80091e8:	633b      	str	r3, [r7, #48]	; 0x30
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	633b      	str	r3, [r7, #48]	; 0x30
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	e160      	b.n	80094c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009202:	2b00      	cmp	r3, #0
 8009204:	d11d      	bne.n	8009242 <I2C_Master_ADDR+0x98>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800920e:	d118      	bne.n	8009242 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009210:	2300      	movs	r3, #0
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009234:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	651a      	str	r2, [r3, #80]	; 0x50
 8009240:	e13e      	b.n	80094c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d113      	bne.n	8009274 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800924c:	2300      	movs	r3, #0
 800924e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e115      	b.n	80094a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b01      	cmp	r3, #1
 800927c:	f040 808a 	bne.w	8009394 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009286:	d137      	bne.n	80092f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009296:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092a6:	d113      	bne.n	80092d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b8:	2300      	movs	r3, #0
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	e0e7      	b.n	80094a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092d0:	2300      	movs	r3, #0
 80092d2:	623b      	str	r3, [r7, #32]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	623b      	str	r3, [r7, #32]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	623b      	str	r3, [r7, #32]
 80092e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	e0d3      	b.n	80094a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d02e      	beq.n	800935c <I2C_Master_ADDR+0x1b2>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	2b20      	cmp	r3, #32
 8009302:	d02b      	beq.n	800935c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009306:	2b12      	cmp	r3, #18
 8009308:	d102      	bne.n	8009310 <I2C_Master_ADDR+0x166>
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	2b01      	cmp	r3, #1
 800930e:	d125      	bne.n	800935c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	2b04      	cmp	r3, #4
 8009314:	d00e      	beq.n	8009334 <I2C_Master_ADDR+0x18a>
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	2b02      	cmp	r3, #2
 800931a:	d00b      	beq.n	8009334 <I2C_Master_ADDR+0x18a>
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	2b10      	cmp	r3, #16
 8009320:	d008      	beq.n	8009334 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	e007      	b.n	8009344 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009342:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	61fb      	str	r3, [r7, #28]
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	e0a1      	b.n	80094a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800936c:	2300      	movs	r3, #0
 800936e:	61bb      	str	r3, [r7, #24]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	61bb      	str	r3, [r7, #24]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	e085      	b.n	80094a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d14d      	bne.n	800943a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800939e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d016      	beq.n	80093d2 <I2C_Master_ADDR+0x228>
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d013      	beq.n	80093d2 <I2C_Master_ADDR+0x228>
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	2b10      	cmp	r3, #16
 80093ae:	d010      	beq.n	80093d2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093be:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	e007      	b.n	80093e2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093e0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093f0:	d117      	bne.n	8009422 <I2C_Master_ADDR+0x278>
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093f8:	d00b      	beq.n	8009412 <I2C_Master_ADDR+0x268>
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d008      	beq.n	8009412 <I2C_Master_ADDR+0x268>
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	2b08      	cmp	r3, #8
 8009404:	d005      	beq.n	8009412 <I2C_Master_ADDR+0x268>
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	2b10      	cmp	r3, #16
 800940a:	d002      	beq.n	8009412 <I2C_Master_ADDR+0x268>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	2b20      	cmp	r3, #32
 8009410:	d107      	bne.n	8009422 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009420:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	e032      	b.n	80094a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009448:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009458:	d117      	bne.n	800948a <I2C_Master_ADDR+0x2e0>
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009460:	d00b      	beq.n	800947a <I2C_Master_ADDR+0x2d0>
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	2b01      	cmp	r3, #1
 8009466:	d008      	beq.n	800947a <I2C_Master_ADDR+0x2d0>
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	2b08      	cmp	r3, #8
 800946c:	d005      	beq.n	800947a <I2C_Master_ADDR+0x2d0>
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	2b10      	cmp	r3, #16
 8009472:	d002      	beq.n	800947a <I2C_Master_ADDR+0x2d0>
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	2b20      	cmp	r3, #32
 8009478:	d107      	bne.n	800948a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009488:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	613b      	str	r3, [r7, #16]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80094a6:	e00b      	b.n	80094c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
}
 80094be:	e7ff      	b.n	80094c0 <I2C_Master_ADDR+0x316>
 80094c0:	bf00      	nop
 80094c2:	3744      	adds	r7, #68	; 0x44
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d02b      	beq.n	800953e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	781a      	ldrb	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d114      	bne.n	800953e <I2C_SlaveTransmit_TXE+0x72>
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b29      	cmp	r3, #41	; 0x29
 8009518:	d111      	bne.n	800953e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009528:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2221      	movs	r2, #33	; 0x21
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2228      	movs	r2, #40	; 0x28
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff f9e7 	bl	800890c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800953e:	bf00      	nop
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d011      	beq.n	800957c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	781a      	ldrb	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009572:	b29b      	uxth	r3, r3
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009596:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959c:	b29b      	uxth	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02c      	beq.n	80095fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	b2d2      	uxtb	r2, r2
 80095ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d114      	bne.n	80095fc <I2C_SlaveReceive_RXNE+0x74>
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	2b2a      	cmp	r3, #42	; 0x2a
 80095d6:	d111      	bne.n	80095fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2222      	movs	r2, #34	; 0x22
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2228      	movs	r2, #40	; 0x28
 80095f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff f992 	bl	8008920 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d012      	beq.n	800963c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	b2d2      	uxtb	r2, r2
 8009622:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009652:	2300      	movs	r3, #0
 8009654:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009662:	2b28      	cmp	r3, #40	; 0x28
 8009664:	d127      	bne.n	80096b6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009674:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	089b      	lsrs	r3, r3, #2
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009682:	2301      	movs	r3, #1
 8009684:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	09db      	lsrs	r3, r3, #7
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d103      	bne.n	800969a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	81bb      	strh	r3, [r7, #12]
 8009698:	e002      	b.n	80096a0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80096a8:	89ba      	ldrh	r2, [r7, #12]
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff f940 	bl	8008934 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80096b4:	e00e      	b.n	80096d4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b6:	2300      	movs	r3, #0
 80096b8:	60bb      	str	r3, [r7, #8]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	60bb      	str	r3, [r7, #8]
 80096ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80096fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80096fc:	2300      	movs	r3, #0
 80096fe:	60bb      	str	r3, [r7, #8]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	60bb      	str	r3, [r7, #8]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0201 	orr.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009728:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009738:	d172      	bne.n	8009820 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	2b22      	cmp	r3, #34	; 0x22
 800973e:	d002      	beq.n	8009746 <I2C_Slave_STOPF+0x6a>
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	2b2a      	cmp	r3, #42	; 0x2a
 8009744:	d135      	bne.n	80097b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009758:	b29b      	uxth	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d005      	beq.n	800976a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	f043 0204 	orr.w	r2, r3, #4
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009778:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd ffa6 	bl	80076d0 <HAL_DMA_GetState>
 8009784:	4603      	mov	r3, r0
 8009786:	2b01      	cmp	r3, #1
 8009788:	d049      	beq.n	800981e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	4a69      	ldr	r2, [pc, #420]	; (8009934 <I2C_Slave_STOPF+0x258>)
 8009790:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	4618      	mov	r0, r3
 8009798:	f7fd fdee 	bl	8007378 <HAL_DMA_Abort_IT>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d03d      	beq.n	800981e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b0:	e035      	b.n	800981e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ce:	f043 0204 	orr.w	r2, r3, #4
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fd ff70 	bl	80076d0 <HAL_DMA_GetState>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d014      	beq.n	8009820 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fa:	4a4e      	ldr	r2, [pc, #312]	; (8009934 <I2C_Slave_STOPF+0x258>)
 80097fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009802:	4618      	mov	r0, r3
 8009804:	f7fd fdb8 	bl	8007378 <HAL_DMA_Abort_IT>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	e000      	b.n	8009820 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800981e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009824:	b29b      	uxth	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d03e      	beq.n	80098a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b04      	cmp	r3, #4
 8009836:	d112      	bne.n	800985e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691a      	ldr	r2, [r3, #16]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009868:	2b40      	cmp	r3, #64	; 0x40
 800986a:	d112      	bne.n	8009892 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	691a      	ldr	r2, [r3, #16]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	f043 0204 	orr.w	r2, r3, #4
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f8b3 	bl	8009a1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80098b6:	e039      	b.n	800992c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	2b2a      	cmp	r3, #42	; 0x2a
 80098bc:	d109      	bne.n	80098d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2228      	movs	r2, #40	; 0x28
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7ff f827 	bl	8008920 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b28      	cmp	r3, #40	; 0x28
 80098dc:	d111      	bne.n	8009902 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a15      	ldr	r2, [pc, #84]	; (8009938 <I2C_Slave_STOPF+0x25c>)
 80098e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff f828 	bl	8008950 <HAL_I2C_ListenCpltCallback>
}
 8009900:	e014      	b.n	800992c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	2b22      	cmp	r3, #34	; 0x22
 8009908:	d002      	beq.n	8009910 <I2C_Slave_STOPF+0x234>
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b22      	cmp	r3, #34	; 0x22
 800990e:	d10d      	bne.n	800992c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2220      	movs	r2, #32
 800991a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fe fffa 	bl	8008920 <HAL_I2C_SlaveRxCpltCallback>
}
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	08009f7d 	.word	0x08009f7d
 8009938:	ffff0000 	.word	0xffff0000

0800993c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800994a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b08      	cmp	r3, #8
 8009956:	d002      	beq.n	800995e <I2C_Slave_AF+0x22>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b20      	cmp	r3, #32
 800995c:	d129      	bne.n	80099b2 <I2C_Slave_AF+0x76>
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	2b28      	cmp	r3, #40	; 0x28
 8009962:	d126      	bne.n	80099b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2c      	ldr	r2, [pc, #176]	; (8009a18 <I2C_Slave_AF+0xdc>)
 8009968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009978:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009982:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009992:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fe ffd0 	bl	8008950 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80099b0:	e02e      	b.n	8009a10 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b21      	cmp	r3, #33	; 0x21
 80099b6:	d126      	bne.n	8009a06 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a17      	ldr	r2, [pc, #92]	; (8009a18 <I2C_Slave_AF+0xdc>)
 80099bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2221      	movs	r2, #33	; 0x21
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80099e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe ff84 	bl	800890c <HAL_I2C_SlaveTxCpltCallback>
}
 8009a04:	e004      	b.n	8009a10 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a0e:	615a      	str	r2, [r3, #20]
}
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	ffff0000 	.word	0xffff0000

08009a1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b10      	cmp	r3, #16
 8009a38:	d002      	beq.n	8009a40 <I2C_ITError+0x24>
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b40      	cmp	r3, #64	; 0x40
 8009a3e:	d10a      	bne.n	8009a56 <I2C_ITError+0x3a>
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b22      	cmp	r3, #34	; 0x22
 8009a44:	d107      	bne.n	8009a56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a5c:	2b28      	cmp	r3, #40	; 0x28
 8009a5e:	d107      	bne.n	8009a70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2228      	movs	r2, #40	; 0x28
 8009a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a6e:	e015      	b.n	8009a9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7e:	d00a      	beq.n	8009a96 <I2C_ITError+0x7a>
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b60      	cmp	r3, #96	; 0x60
 8009a84:	d007      	beq.n	8009a96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aaa:	d162      	bne.n	8009b72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009aba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d020      	beq.n	8009b0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ace:	4a6a      	ldr	r2, [pc, #424]	; (8009c78 <I2C_ITError+0x25c>)
 8009ad0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fd fc4e 	bl	8007378 <HAL_DMA_Abort_IT>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 8089 	beq.w	8009bf6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0201 	bic.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b06:	4610      	mov	r0, r2
 8009b08:	4798      	blx	r3
 8009b0a:	e074      	b.n	8009bf6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	4a59      	ldr	r2, [pc, #356]	; (8009c78 <I2C_ITError+0x25c>)
 8009b12:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fd fc2d 	bl	8007378 <HAL_DMA_Abort_IT>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d068      	beq.n	8009bf6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d10b      	bne.n	8009b4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f022 0201 	bic.w	r2, r2, #1
 8009b58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	e041      	b.n	8009bf6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b60      	cmp	r3, #96	; 0x60
 8009b7c:	d125      	bne.n	8009bca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d10b      	bne.n	8009bb2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	691a      	ldr	r2, [r3, #16]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0201 	bic.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fe feec 	bl	80089a0 <HAL_I2C_AbortCpltCallback>
 8009bc8:	e015      	b.n	8009bf6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	d10b      	bne.n	8009bf0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7fe fecb 	bl	800898c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10e      	bne.n	8009c24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d109      	bne.n	8009c24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d007      	beq.n	8009c34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	d113      	bne.n	8009c70 <I2C_ITError+0x254>
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	2b28      	cmp	r3, #40	; 0x28
 8009c4c:	d110      	bne.n	8009c70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a0a      	ldr	r2, [pc, #40]	; (8009c7c <I2C_ITError+0x260>)
 8009c52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fe fe70 	bl	8008950 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	08009f7d 	.word	0x08009f7d
 8009c7c:	ffff0000 	.word	0xffff0000

08009c80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	4608      	mov	r0, r1
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4603      	mov	r3, r0
 8009c90:	817b      	strh	r3, [r7, #10]
 8009c92:	460b      	mov	r3, r1
 8009c94:	813b      	strh	r3, [r7, #8]
 8009c96:	4613      	mov	r3, r2
 8009c98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fa08 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00d      	beq.n	8009cde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd0:	d103      	bne.n	8009cda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e05f      	b.n	8009d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cde:	897b      	ldrh	r3, [r7, #10]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	6a3a      	ldr	r2, [r7, #32]
 8009cf2:	492d      	ldr	r1, [pc, #180]	; (8009da8 <I2C_RequestMemoryWrite+0x128>)
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 fa40 	bl	800a17a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e04c      	b.n	8009d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1c:	6a39      	ldr	r1, [r7, #32]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 faaa 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00d      	beq.n	8009d46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d107      	bne.n	8009d42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e02b      	b.n	8009d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d105      	bne.n	8009d58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d4c:	893b      	ldrh	r3, [r7, #8]
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	611a      	str	r2, [r3, #16]
 8009d56:	e021      	b.n	8009d9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d68:	6a39      	ldr	r1, [r7, #32]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 fa84 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00d      	beq.n	8009d92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d107      	bne.n	8009d8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e005      	b.n	8009d9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d92:	893b      	ldrh	r3, [r7, #8]
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	00010002 	.word	0x00010002

08009dac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	4608      	mov	r0, r1
 8009db6:	4611      	mov	r1, r2
 8009db8:	461a      	mov	r2, r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	817b      	strh	r3, [r7, #10]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	813b      	strh	r3, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 f96a 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00d      	beq.n	8009e1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e0c:	d103      	bne.n	8009e16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e0aa      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e1a:	897b      	ldrh	r3, [r7, #10]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	6a3a      	ldr	r2, [r7, #32]
 8009e2e:	4952      	ldr	r1, [pc, #328]	; (8009f78 <I2C_RequestMemoryRead+0x1cc>)
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f9a2 	bl	800a17a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e097      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e58:	6a39      	ldr	r1, [r7, #32]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fa0c 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d107      	bne.n	8009e7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e076      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d105      	bne.n	8009e94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e88:	893b      	ldrh	r3, [r7, #8]
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	611a      	str	r2, [r3, #16]
 8009e92:	e021      	b.n	8009ed8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e94:	893b      	ldrh	r3, [r7, #8]
 8009e96:	0a1b      	lsrs	r3, r3, #8
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea4:	6a39      	ldr	r1, [r7, #32]
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 f9e6 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00d      	beq.n	8009ece <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d107      	bne.n	8009eca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e050      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ece:	893b      	ldrh	r3, [r7, #8]
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eda:	6a39      	ldr	r1, [r7, #32]
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f9cb 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00d      	beq.n	8009f04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d107      	bne.n	8009f00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e035      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f8d3 	bl	800a0cc <I2C_WaitOnFlagUntilTimeout>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00d      	beq.n	8009f48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3a:	d103      	bne.n	8009f44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e013      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f48:	897b      	ldrh	r3, [r7, #10]
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	6a3a      	ldr	r2, [r7, #32]
 8009f5c:	4906      	ldr	r1, [pc, #24]	; (8009f78 <I2C_RequestMemoryRead+0x1cc>)
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 f90b 	bl	800a17a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	00010002 	.word	0x00010002

08009f7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f94:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f96:	4b4b      	ldr	r3, [pc, #300]	; (800a0c4 <I2C_DMAAbort+0x148>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	08db      	lsrs	r3, r3, #3
 8009f9c:	4a4a      	ldr	r2, [pc, #296]	; (800a0c8 <I2C_DMAAbort+0x14c>)
 8009f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa2:	0a1a      	lsrs	r2, r3, #8
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	00da      	lsls	r2, r3, #3
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d106      	bne.n	8009fc4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	f043 0220 	orr.w	r2, r3, #32
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009fc2:	e00a      	b.n	8009fda <I2C_DMAAbort+0x5e>
    }
    count--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd8:	d0ea      	beq.n	8009fb0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a008:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2200      	movs	r2, #0
 800a00e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	2200      	movs	r2, #0
 800a01e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02c:	2200      	movs	r2, #0
 800a02e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 0201 	bic.w	r2, r2, #1
 800a03e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b60      	cmp	r3, #96	; 0x60
 800a04a:	d10e      	bne.n	800a06a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2220      	movs	r2, #32
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2200      	movs	r2, #0
 800a060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	f7fe fc9c 	bl	80089a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a068:	e027      	b.n	800a0ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a06a:	7cfb      	ldrb	r3, [r7, #19]
 800a06c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a070:	2b28      	cmp	r3, #40	; 0x28
 800a072:	d117      	bne.n	800a0a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a092:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2200      	movs	r2, #0
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2228      	movs	r2, #40	; 0x28
 800a09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a0a2:	e007      	b.n	800a0b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a0b4:	6978      	ldr	r0, [r7, #20]
 800a0b6:	f7fe fc69 	bl	800898c <HAL_I2C_ErrorCallback>
}
 800a0ba:	bf00      	nop
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000154 	.word	0x20000154
 800a0c8:	14f8b589 	.word	0x14f8b589

0800a0cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0dc:	e025      	b.n	800a12a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d021      	beq.n	800a12a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0e6:	f7fc ff57 	bl	8006f98 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d302      	bcc.n	800a0fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d116      	bne.n	800a12a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2220      	movs	r2, #32
 800a106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	f043 0220 	orr.w	r2, r3, #32
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e023      	b.n	800a172 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	0c1b      	lsrs	r3, r3, #16
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b01      	cmp	r3, #1
 800a132:	d10d      	bne.n	800a150 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	43da      	mvns	r2, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4013      	ands	r3, r2
 800a140:	b29b      	uxth	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	bf0c      	ite	eq
 800a146:	2301      	moveq	r3, #1
 800a148:	2300      	movne	r3, #0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	e00c      	b.n	800a16a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	43da      	mvns	r2, r3
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	4013      	ands	r3, r2
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bf0c      	ite	eq
 800a162:	2301      	moveq	r3, #1
 800a164:	2300      	movne	r3, #0
 800a166:	b2db      	uxtb	r3, r3
 800a168:	461a      	mov	r2, r3
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d0b6      	beq.n	800a0de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a188:	e051      	b.n	800a22e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a198:	d123      	bne.n	800a1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f043 0204 	orr.w	r2, r3, #4
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e046      	b.n	800a270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e8:	d021      	beq.n	800a22e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ea:	f7fc fed5 	bl	8006f98 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d302      	bcc.n	800a200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d116      	bne.n	800a22e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2220      	movs	r2, #32
 800a20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	f043 0220 	orr.w	r2, r3, #32
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e020      	b.n	800a270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	0c1b      	lsrs	r3, r3, #16
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b01      	cmp	r3, #1
 800a236:	d10c      	bne.n	800a252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	43da      	mvns	r2, r3
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4013      	ands	r3, r2
 800a244:	b29b      	uxth	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	bf14      	ite	ne
 800a24a:	2301      	movne	r3, #1
 800a24c:	2300      	moveq	r3, #0
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	e00b      	b.n	800a26a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	43da      	mvns	r2, r3
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4013      	ands	r3, r2
 800a25e:	b29b      	uxth	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	bf14      	ite	ne
 800a264:	2301      	movne	r3, #1
 800a266:	2300      	moveq	r3, #0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d18d      	bne.n	800a18a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a284:	e02d      	b.n	800a2e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f900 	bl	800a48c <I2C_IsAcknowledgeFailed>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e02d      	b.n	800a2f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d021      	beq.n	800a2e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29e:	f7fc fe7b 	bl	8006f98 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d302      	bcc.n	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d116      	bne.n	800a2e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	f043 0220 	orr.w	r2, r3, #32
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e007      	b.n	800a2f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ec:	2b80      	cmp	r3, #128	; 0x80
 800a2ee:	d1ca      	bne.n	800a286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a306:	e02d      	b.n	800a364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f8bf 	bl	800a48c <I2C_IsAcknowledgeFailed>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e02d      	b.n	800a374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d021      	beq.n	800a364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a320:	f7fc fe3a 	bl	8006f98 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d302      	bcc.n	800a336 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d116      	bne.n	800a364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2220      	movs	r2, #32
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	f043 0220 	orr.w	r2, r3, #32
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e007      	b.n	800a374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	f003 0304 	and.w	r3, r3, #4
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d1ca      	bne.n	800a308 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a384:	2300      	movs	r3, #0
 800a386:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a388:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	08db      	lsrs	r3, r3, #3
 800a38e:	4a13      	ldr	r2, [pc, #76]	; (800a3dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a390:	fba2 2303 	umull	r2, r3, r2, r3
 800a394:	0a1a      	lsrs	r2, r3, #8
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d107      	bne.n	800a3ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	f043 0220 	orr.w	r2, r3, #32
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e008      	b.n	800a3cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c8:	d0e9      	beq.n	800a39e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	20000154 	.word	0x20000154
 800a3dc:	14f8b589 	.word	0x14f8b589

0800a3e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3ec:	e042      	b.n	800a474 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d119      	bne.n	800a430 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0210 	mvn.w	r2, #16
 800a404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e029      	b.n	800a484 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a430:	f7fc fdb2 	bl	8006f98 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d302      	bcc.n	800a446 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d116      	bne.n	800a474 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a460:	f043 0220 	orr.w	r2, r3, #32
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e007      	b.n	800a484 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d1b5      	bne.n	800a3ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a2:	d11b      	bne.n	800a4dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	f043 0204 	orr.w	r2, r3, #4
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e000      	b.n	800a4de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a4fa:	d103      	bne.n	800a504 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a502:	e007      	b.n	800a514 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a50c:	d102      	bne.n	800a514 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2208      	movs	r2, #8
 800a512:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e267      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d075      	beq.n	800a62a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a53e:	4b88      	ldr	r3, [pc, #544]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 030c 	and.w	r3, r3, #12
 800a546:	2b04      	cmp	r3, #4
 800a548:	d00c      	beq.n	800a564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a54a:	4b85      	ldr	r3, [pc, #532]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a552:	2b08      	cmp	r3, #8
 800a554:	d112      	bne.n	800a57c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a556:	4b82      	ldr	r3, [pc, #520]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a55e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a562:	d10b      	bne.n	800a57c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a564:	4b7e      	ldr	r3, [pc, #504]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05b      	beq.n	800a628 <HAL_RCC_OscConfig+0x108>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d157      	bne.n	800a628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e242      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a584:	d106      	bne.n	800a594 <HAL_RCC_OscConfig+0x74>
 800a586:	4b76      	ldr	r3, [pc, #472]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a75      	ldr	r2, [pc, #468]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a58c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	e01d      	b.n	800a5d0 <HAL_RCC_OscConfig+0xb0>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a59c:	d10c      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x98>
 800a59e:	4b70      	ldr	r3, [pc, #448]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a6f      	ldr	r2, [pc, #444]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	4b6d      	ldr	r3, [pc, #436]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a6c      	ldr	r2, [pc, #432]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	e00b      	b.n	800a5d0 <HAL_RCC_OscConfig+0xb0>
 800a5b8:	4b69      	ldr	r3, [pc, #420]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a68      	ldr	r2, [pc, #416]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	4b66      	ldr	r3, [pc, #408]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a65      	ldr	r2, [pc, #404]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d013      	beq.n	800a600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5d8:	f7fc fcde 	bl	8006f98 <HAL_GetTick>
 800a5dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5e0:	f7fc fcda 	bl	8006f98 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b64      	cmp	r3, #100	; 0x64
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e207      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5f2:	4b5b      	ldr	r3, [pc, #364]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0f0      	beq.n	800a5e0 <HAL_RCC_OscConfig+0xc0>
 800a5fe:	e014      	b.n	800a62a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a600:	f7fc fcca 	bl	8006f98 <HAL_GetTick>
 800a604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a606:	e008      	b.n	800a61a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a608:	f7fc fcc6 	bl	8006f98 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b64      	cmp	r3, #100	; 0x64
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e1f3      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a61a:	4b51      	ldr	r3, [pc, #324]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <HAL_RCC_OscConfig+0xe8>
 800a626:	e000      	b.n	800a62a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d063      	beq.n	800a6fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a636:	4b4a      	ldr	r3, [pc, #296]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f003 030c 	and.w	r3, r3, #12
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a642:	4b47      	ldr	r3, [pc, #284]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a64a:	2b08      	cmp	r3, #8
 800a64c:	d11c      	bne.n	800a688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a64e:	4b44      	ldr	r3, [pc, #272]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d116      	bne.n	800a688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a65a:	4b41      	ldr	r3, [pc, #260]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d005      	beq.n	800a672 <HAL_RCC_OscConfig+0x152>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d001      	beq.n	800a672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e1c7      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a672:	4b3b      	ldr	r3, [pc, #236]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	4937      	ldr	r1, [pc, #220]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a682:	4313      	orrs	r3, r2
 800a684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a686:	e03a      	b.n	800a6fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d020      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a690:	4b34      	ldr	r3, [pc, #208]	; (800a764 <HAL_RCC_OscConfig+0x244>)
 800a692:	2201      	movs	r2, #1
 800a694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a696:	f7fc fc7f 	bl	8006f98 <HAL_GetTick>
 800a69a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a69c:	e008      	b.n	800a6b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a69e:	f7fc fc7b 	bl	8006f98 <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e1a8      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6b0:	4b2b      	ldr	r3, [pc, #172]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d0f0      	beq.n	800a69e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6bc:	4b28      	ldr	r3, [pc, #160]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	4925      	ldr	r1, [pc, #148]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	600b      	str	r3, [r1, #0]
 800a6d0:	e015      	b.n	800a6fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6d2:	4b24      	ldr	r3, [pc, #144]	; (800a764 <HAL_RCC_OscConfig+0x244>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d8:	f7fc fc5e 	bl	8006f98 <HAL_GetTick>
 800a6dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6de:	e008      	b.n	800a6f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6e0:	f7fc fc5a 	bl	8006f98 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e187      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6f2:	4b1b      	ldr	r3, [pc, #108]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1f0      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b00      	cmp	r3, #0
 800a708:	d036      	beq.n	800a778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d016      	beq.n	800a740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <HAL_RCC_OscConfig+0x248>)
 800a714:	2201      	movs	r2, #1
 800a716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a718:	f7fc fc3e 	bl	8006f98 <HAL_GetTick>
 800a71c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a71e:	e008      	b.n	800a732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a720:	f7fc fc3a 	bl	8006f98 <HAL_GetTick>
 800a724:	4602      	mov	r2, r0
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d901      	bls.n	800a732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e167      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a732:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <HAL_RCC_OscConfig+0x240>)
 800a734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0f0      	beq.n	800a720 <HAL_RCC_OscConfig+0x200>
 800a73e:	e01b      	b.n	800a778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a740:	4b09      	ldr	r3, [pc, #36]	; (800a768 <HAL_RCC_OscConfig+0x248>)
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a746:	f7fc fc27 	bl	8006f98 <HAL_GetTick>
 800a74a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a74c:	e00e      	b.n	800a76c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a74e:	f7fc fc23 	bl	8006f98 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d907      	bls.n	800a76c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e150      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
 800a760:	40023800 	.word	0x40023800
 800a764:	42470000 	.word	0x42470000
 800a768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a76c:	4b88      	ldr	r3, [pc, #544]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1ea      	bne.n	800a74e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 8097 	beq.w	800a8b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a78a:	4b81      	ldr	r3, [pc, #516]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10f      	bne.n	800a7b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a796:	2300      	movs	r3, #0
 800a798:	60bb      	str	r3, [r7, #8]
 800a79a:	4b7d      	ldr	r3, [pc, #500]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79e:	4a7c      	ldr	r2, [pc, #496]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a7a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7a4:	6413      	str	r3, [r2, #64]	; 0x40
 800a7a6:	4b7a      	ldr	r3, [pc, #488]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7b6:	4b77      	ldr	r3, [pc, #476]	; (800a994 <HAL_RCC_OscConfig+0x474>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d118      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a7c2:	4b74      	ldr	r3, [pc, #464]	; (800a994 <HAL_RCC_OscConfig+0x474>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a73      	ldr	r2, [pc, #460]	; (800a994 <HAL_RCC_OscConfig+0x474>)
 800a7c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7ce:	f7fc fbe3 	bl	8006f98 <HAL_GetTick>
 800a7d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7d4:	e008      	b.n	800a7e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7d6:	f7fc fbdf 	bl	8006f98 <HAL_GetTick>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d901      	bls.n	800a7e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e10c      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7e8:	4b6a      	ldr	r3, [pc, #424]	; (800a994 <HAL_RCC_OscConfig+0x474>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d0f0      	beq.n	800a7d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d106      	bne.n	800a80a <HAL_RCC_OscConfig+0x2ea>
 800a7fc:	4b64      	ldr	r3, [pc, #400]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a800:	4a63      	ldr	r2, [pc, #396]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a802:	f043 0301 	orr.w	r3, r3, #1
 800a806:	6713      	str	r3, [r2, #112]	; 0x70
 800a808:	e01c      	b.n	800a844 <HAL_RCC_OscConfig+0x324>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d10c      	bne.n	800a82c <HAL_RCC_OscConfig+0x30c>
 800a812:	4b5f      	ldr	r3, [pc, #380]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a816:	4a5e      	ldr	r2, [pc, #376]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a818:	f043 0304 	orr.w	r3, r3, #4
 800a81c:	6713      	str	r3, [r2, #112]	; 0x70
 800a81e:	4b5c      	ldr	r3, [pc, #368]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a822:	4a5b      	ldr	r2, [pc, #364]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a824:	f043 0301 	orr.w	r3, r3, #1
 800a828:	6713      	str	r3, [r2, #112]	; 0x70
 800a82a:	e00b      	b.n	800a844 <HAL_RCC_OscConfig+0x324>
 800a82c:	4b58      	ldr	r3, [pc, #352]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	4a57      	ldr	r2, [pc, #348]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a832:	f023 0301 	bic.w	r3, r3, #1
 800a836:	6713      	str	r3, [r2, #112]	; 0x70
 800a838:	4b55      	ldr	r3, [pc, #340]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83c:	4a54      	ldr	r2, [pc, #336]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a83e:	f023 0304 	bic.w	r3, r3, #4
 800a842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d015      	beq.n	800a878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a84c:	f7fc fba4 	bl	8006f98 <HAL_GetTick>
 800a850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a852:	e00a      	b.n	800a86a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a854:	f7fc fba0 	bl	8006f98 <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a862:	4293      	cmp	r3, r2
 800a864:	d901      	bls.n	800a86a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e0cb      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a86a:	4b49      	ldr	r3, [pc, #292]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0ee      	beq.n	800a854 <HAL_RCC_OscConfig+0x334>
 800a876:	e014      	b.n	800a8a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a878:	f7fc fb8e 	bl	8006f98 <HAL_GetTick>
 800a87c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a87e:	e00a      	b.n	800a896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a880:	f7fc fb8a 	bl	8006f98 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a88e:	4293      	cmp	r3, r2
 800a890:	d901      	bls.n	800a896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e0b5      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a896:	4b3e      	ldr	r3, [pc, #248]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1ee      	bne.n	800a880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d105      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8a8:	4b39      	ldr	r3, [pc, #228]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	4a38      	ldr	r2, [pc, #224]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a8ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 80a1 	beq.w	800aa00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a8be:	4b34      	ldr	r3, [pc, #208]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f003 030c 	and.w	r3, r3, #12
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d05c      	beq.n	800a984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d141      	bne.n	800a956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8d2:	4b31      	ldr	r3, [pc, #196]	; (800a998 <HAL_RCC_OscConfig+0x478>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d8:	f7fc fb5e 	bl	8006f98 <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8e0:	f7fc fb5a 	bl	8006f98 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e087      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8f2:	4b27      	ldr	r3, [pc, #156]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1f0      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	69da      	ldr	r2, [r3, #28]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	431a      	orrs	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	019b      	lsls	r3, r3, #6
 800a90e:	431a      	orrs	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	085b      	lsrs	r3, r3, #1
 800a916:	3b01      	subs	r3, #1
 800a918:	041b      	lsls	r3, r3, #16
 800a91a:	431a      	orrs	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	061b      	lsls	r3, r3, #24
 800a922:	491b      	ldr	r1, [pc, #108]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a924:	4313      	orrs	r3, r2
 800a926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a928:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <HAL_RCC_OscConfig+0x478>)
 800a92a:	2201      	movs	r2, #1
 800a92c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a92e:	f7fc fb33 	bl	8006f98 <HAL_GetTick>
 800a932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a934:	e008      	b.n	800a948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a936:	f7fc fb2f 	bl	8006f98 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e05c      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a948:	4b11      	ldr	r3, [pc, #68]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0f0      	beq.n	800a936 <HAL_RCC_OscConfig+0x416>
 800a954:	e054      	b.n	800aa00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a956:	4b10      	ldr	r3, [pc, #64]	; (800a998 <HAL_RCC_OscConfig+0x478>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a95c:	f7fc fb1c 	bl	8006f98 <HAL_GetTick>
 800a960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a962:	e008      	b.n	800a976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a964:	f7fc fb18 	bl	8006f98 <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d901      	bls.n	800a976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a972:	2303      	movs	r3, #3
 800a974:	e045      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <HAL_RCC_OscConfig+0x470>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1f0      	bne.n	800a964 <HAL_RCC_OscConfig+0x444>
 800a982:	e03d      	b.n	800aa00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d107      	bne.n	800a99c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e038      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
 800a990:	40023800 	.word	0x40023800
 800a994:	40007000 	.word	0x40007000
 800a998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a99c:	4b1b      	ldr	r3, [pc, #108]	; (800aa0c <HAL_RCC_OscConfig+0x4ec>)
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d028      	beq.n	800a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d121      	bne.n	800a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d11a      	bne.n	800a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a9d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d111      	bne.n	800a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e2:	085b      	lsrs	r3, r3, #1
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d107      	bne.n	800a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d001      	beq.n	800aa00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	40023800 	.word	0x40023800

0800aa10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e0cc      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa24:	4b68      	ldr	r3, [pc, #416]	; (800abc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0307 	and.w	r3, r3, #7
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d90c      	bls.n	800aa4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa32:	4b65      	ldr	r3, [pc, #404]	; (800abc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	b2d2      	uxtb	r2, r2
 800aa38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa3a:	4b63      	ldr	r3, [pc, #396]	; (800abc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d001      	beq.n	800aa4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e0b8      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0302 	and.w	r3, r3, #2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d020      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa64:	4b59      	ldr	r3, [pc, #356]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	4a58      	ldr	r2, [pc, #352]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aa6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aa6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d005      	beq.n	800aa88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa7c:	4b53      	ldr	r3, [pc, #332]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	4a52      	ldr	r2, [pc, #328]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aa82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aa86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa88:	4b50      	ldr	r3, [pc, #320]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	494d      	ldr	r1, [pc, #308]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d044      	beq.n	800ab30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d107      	bne.n	800aabe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aaae:	4b47      	ldr	r3, [pc, #284]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d119      	bne.n	800aaee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e07f      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d003      	beq.n	800aace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d107      	bne.n	800aade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aace:	4b3f      	ldr	r3, [pc, #252]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d109      	bne.n	800aaee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e06f      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aade:	4b3b      	ldr	r3, [pc, #236]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e067      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aaee:	4b37      	ldr	r3, [pc, #220]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f023 0203 	bic.w	r2, r3, #3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	4934      	ldr	r1, [pc, #208]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800aafc:	4313      	orrs	r3, r2
 800aafe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab00:	f7fc fa4a 	bl	8006f98 <HAL_GetTick>
 800ab04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab06:	e00a      	b.n	800ab1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab08:	f7fc fa46 	bl	8006f98 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d901      	bls.n	800ab1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e04f      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab1e:	4b2b      	ldr	r3, [pc, #172]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 020c 	and.w	r2, r3, #12
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d1eb      	bne.n	800ab08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab30:	4b25      	ldr	r3, [pc, #148]	; (800abc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d20c      	bcs.n	800ab58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab3e:	4b22      	ldr	r3, [pc, #136]	; (800abc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	b2d2      	uxtb	r2, r2
 800ab44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab46:	4b20      	ldr	r3, [pc, #128]	; (800abc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0307 	and.w	r3, r3, #7
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d001      	beq.n	800ab58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e032      	b.n	800abbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d008      	beq.n	800ab76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab64:	4b19      	ldr	r3, [pc, #100]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	4916      	ldr	r1, [pc, #88]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0308 	and.w	r3, r3, #8
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d009      	beq.n	800ab96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab82:	4b12      	ldr	r3, [pc, #72]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	490e      	ldr	r1, [pc, #56]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ab96:	f000 f821 	bl	800abdc <HAL_RCC_GetSysClockFreq>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4b0b      	ldr	r3, [pc, #44]	; (800abcc <HAL_RCC_ClockConfig+0x1bc>)
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	091b      	lsrs	r3, r3, #4
 800aba2:	f003 030f 	and.w	r3, r3, #15
 800aba6:	490a      	ldr	r1, [pc, #40]	; (800abd0 <HAL_RCC_ClockConfig+0x1c0>)
 800aba8:	5ccb      	ldrb	r3, [r1, r3]
 800abaa:	fa22 f303 	lsr.w	r3, r2, r3
 800abae:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <HAL_RCC_ClockConfig+0x1c4>)
 800abb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800abb2:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <HAL_RCC_ClockConfig+0x1c8>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fc f9aa 	bl	8006f10 <HAL_InitTick>

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	40023c00 	.word	0x40023c00
 800abcc:	40023800 	.word	0x40023800
 800abd0:	080103a4 	.word	0x080103a4
 800abd4:	20000154 	.word	0x20000154
 800abd8:	20000180 	.word	0x20000180

0800abdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abe0:	b094      	sub	sp, #80	; 0x50
 800abe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800abe4:	2300      	movs	r3, #0
 800abe6:	647b      	str	r3, [r7, #68]	; 0x44
 800abe8:	2300      	movs	r3, #0
 800abea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abec:	2300      	movs	r3, #0
 800abee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abf4:	4b79      	ldr	r3, [pc, #484]	; (800addc <HAL_RCC_GetSysClockFreq+0x200>)
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 030c 	and.w	r3, r3, #12
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d00d      	beq.n	800ac1c <HAL_RCC_GetSysClockFreq+0x40>
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	f200 80e1 	bhi.w	800adc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <HAL_RCC_GetSysClockFreq+0x34>
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d003      	beq.n	800ac16 <HAL_RCC_GetSysClockFreq+0x3a>
 800ac0e:	e0db      	b.n	800adc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac10:	4b73      	ldr	r3, [pc, #460]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ac12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800ac14:	e0db      	b.n	800adce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac16:	4b73      	ldr	r3, [pc, #460]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x208>)
 800ac18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ac1a:	e0d8      	b.n	800adce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac1c:	4b6f      	ldr	r3, [pc, #444]	; (800addc <HAL_RCC_GetSysClockFreq+0x200>)
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac26:	4b6d      	ldr	r3, [pc, #436]	; (800addc <HAL_RCC_GetSysClockFreq+0x200>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d063      	beq.n	800acfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac32:	4b6a      	ldr	r3, [pc, #424]	; (800addc <HAL_RCC_GetSysClockFreq+0x200>)
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	099b      	lsrs	r3, r3, #6
 800ac38:	2200      	movs	r2, #0
 800ac3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac44:	633b      	str	r3, [r7, #48]	; 0x30
 800ac46:	2300      	movs	r3, #0
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34
 800ac4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	f04f 0000 	mov.w	r0, #0
 800ac56:	f04f 0100 	mov.w	r1, #0
 800ac5a:	0159      	lsls	r1, r3, #5
 800ac5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ac60:	0150      	lsls	r0, r2, #5
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4621      	mov	r1, r4
 800ac68:	1a51      	subs	r1, r2, r1
 800ac6a:	6139      	str	r1, [r7, #16]
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	eb63 0301 	sbc.w	r3, r3, r1
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	f04f 0200 	mov.w	r2, #0
 800ac78:	f04f 0300 	mov.w	r3, #0
 800ac7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac80:	4659      	mov	r1, fp
 800ac82:	018b      	lsls	r3, r1, #6
 800ac84:	4651      	mov	r1, sl
 800ac86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ac8a:	4651      	mov	r1, sl
 800ac8c:	018a      	lsls	r2, r1, #6
 800ac8e:	4651      	mov	r1, sl
 800ac90:	ebb2 0801 	subs.w	r8, r2, r1
 800ac94:	4659      	mov	r1, fp
 800ac96:	eb63 0901 	sbc.w	r9, r3, r1
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	f04f 0300 	mov.w	r3, #0
 800aca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800acaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800acae:	4690      	mov	r8, r2
 800acb0:	4699      	mov	r9, r3
 800acb2:	4623      	mov	r3, r4
 800acb4:	eb18 0303 	adds.w	r3, r8, r3
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	462b      	mov	r3, r5
 800acbc:	eb49 0303 	adc.w	r3, r9, r3
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	f04f 0200 	mov.w	r2, #0
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800acce:	4629      	mov	r1, r5
 800acd0:	024b      	lsls	r3, r1, #9
 800acd2:	4621      	mov	r1, r4
 800acd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800acd8:	4621      	mov	r1, r4
 800acda:	024a      	lsls	r2, r1, #9
 800acdc:	4610      	mov	r0, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ace2:	2200      	movs	r2, #0
 800ace4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ace6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ace8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acec:	f7f5 fa74 	bl	80001d8 <__aeabi_uldivmod>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4613      	mov	r3, r2
 800acf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acf8:	e058      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acfa:	4b38      	ldr	r3, [pc, #224]	; (800addc <HAL_RCC_GetSysClockFreq+0x200>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	099b      	lsrs	r3, r3, #6
 800ad00:	2200      	movs	r2, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	4611      	mov	r1, r2
 800ad06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ad0a:	623b      	str	r3, [r7, #32]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ad14:	4642      	mov	r2, r8
 800ad16:	464b      	mov	r3, r9
 800ad18:	f04f 0000 	mov.w	r0, #0
 800ad1c:	f04f 0100 	mov.w	r1, #0
 800ad20:	0159      	lsls	r1, r3, #5
 800ad22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad26:	0150      	lsls	r0, r2, #5
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4641      	mov	r1, r8
 800ad2e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ad32:	4649      	mov	r1, r9
 800ad34:	eb63 0b01 	sbc.w	fp, r3, r1
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ad44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ad48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ad4c:	ebb2 040a 	subs.w	r4, r2, sl
 800ad50:	eb63 050b 	sbc.w	r5, r3, fp
 800ad54:	f04f 0200 	mov.w	r2, #0
 800ad58:	f04f 0300 	mov.w	r3, #0
 800ad5c:	00eb      	lsls	r3, r5, #3
 800ad5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad62:	00e2      	lsls	r2, r4, #3
 800ad64:	4614      	mov	r4, r2
 800ad66:	461d      	mov	r5, r3
 800ad68:	4643      	mov	r3, r8
 800ad6a:	18e3      	adds	r3, r4, r3
 800ad6c:	603b      	str	r3, [r7, #0]
 800ad6e:	464b      	mov	r3, r9
 800ad70:	eb45 0303 	adc.w	r3, r5, r3
 800ad74:	607b      	str	r3, [r7, #4]
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	f04f 0300 	mov.w	r3, #0
 800ad7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ad82:	4629      	mov	r1, r5
 800ad84:	028b      	lsls	r3, r1, #10
 800ad86:	4621      	mov	r1, r4
 800ad88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	028a      	lsls	r2, r1, #10
 800ad90:	4610      	mov	r0, r2
 800ad92:	4619      	mov	r1, r3
 800ad94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad96:	2200      	movs	r2, #0
 800ad98:	61bb      	str	r3, [r7, #24]
 800ad9a:	61fa      	str	r2, [r7, #28]
 800ad9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ada0:	f7f5 fa1a 	bl	80001d8 <__aeabi_uldivmod>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4613      	mov	r3, r2
 800adaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800adac:	4b0b      	ldr	r3, [pc, #44]	; (800addc <HAL_RCC_GetSysClockFreq+0x200>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	3301      	adds	r3, #1
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800adbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800adbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800adc6:	e002      	b.n	800adce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x204>)
 800adca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800adcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800add0:	4618      	mov	r0, r3
 800add2:	3750      	adds	r7, #80	; 0x50
 800add4:	46bd      	mov	sp, r7
 800add6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adda:	bf00      	nop
 800addc:	40023800 	.word	0x40023800
 800ade0:	00f42400 	.word	0x00f42400
 800ade4:	007a1200 	.word	0x007a1200

0800ade8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adec:	4b03      	ldr	r3, [pc, #12]	; (800adfc <HAL_RCC_GetHCLKFreq+0x14>)
 800adee:	681b      	ldr	r3, [r3, #0]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20000154 	.word	0x20000154

0800ae00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ae04:	f7ff fff0 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	0a9b      	lsrs	r3, r3, #10
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	4903      	ldr	r1, [pc, #12]	; (800ae24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae16:	5ccb      	ldrb	r3, [r1, r3]
 800ae18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	40023800 	.word	0x40023800
 800ae24:	080103b4 	.word	0x080103b4

0800ae28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ae2c:	f7ff ffdc 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae30:	4602      	mov	r2, r0
 800ae32:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	0b5b      	lsrs	r3, r3, #13
 800ae38:	f003 0307 	and.w	r3, r3, #7
 800ae3c:	4903      	ldr	r1, [pc, #12]	; (800ae4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae3e:	5ccb      	ldrb	r3, [r1, r3]
 800ae40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	080103b4 	.word	0x080103b4

0800ae50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e07b      	b.n	800af5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d108      	bne.n	800ae7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae72:	d009      	beq.n	800ae88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	61da      	str	r2, [r3, #28]
 800ae7a:	e005      	b.n	800ae88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fa fe34 	bl	8005b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aed0:	431a      	orrs	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeda:	431a      	orrs	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	f003 0302 	and.w	r3, r3, #2
 800aee4:	431a      	orrs	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	431a      	orrs	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aef8:	431a      	orrs	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af02:	431a      	orrs	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af0c:	ea42 0103 	orr.w	r1, r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	0c1b      	lsrs	r3, r3, #16
 800af26:	f003 0104 	and.w	r1, r3, #4
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	f003 0210 	and.w	r2, r3, #16
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69da      	ldr	r2, [r3, #28]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b088      	sub	sp, #32
 800af66:	af00      	add	r7, sp, #0
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	603b      	str	r3, [r7, #0]
 800af6e:	4613      	mov	r3, r2
 800af70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d101      	bne.n	800af84 <HAL_SPI_Transmit+0x22>
 800af80:	2302      	movs	r3, #2
 800af82:	e126      	b.n	800b1d2 <HAL_SPI_Transmit+0x270>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af8c:	f7fc f804 	bl	8006f98 <HAL_GetTick>
 800af90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d002      	beq.n	800afa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800afa2:	2302      	movs	r3, #2
 800afa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afa6:	e10b      	b.n	800b1c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <HAL_SPI_Transmit+0x52>
 800afae:	88fb      	ldrh	r3, [r7, #6]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d102      	bne.n	800afba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afb8:	e102      	b.n	800b1c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2203      	movs	r2, #3
 800afbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	88fa      	ldrh	r2, [r7, #6]
 800afd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	88fa      	ldrh	r2, [r7, #6]
 800afd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b000:	d10f      	bne.n	800b022 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02c:	2b40      	cmp	r3, #64	; 0x40
 800b02e:	d007      	beq.n	800b040 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b03e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b048:	d14b      	bne.n	800b0e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <HAL_SPI_Transmit+0xf6>
 800b052:	8afb      	ldrh	r3, [r7, #22]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d13e      	bne.n	800b0d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05c:	881a      	ldrh	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b068:	1c9a      	adds	r2, r3, #2
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b072:	b29b      	uxth	r3, r3
 800b074:	3b01      	subs	r3, #1
 800b076:	b29a      	uxth	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b07c:	e02b      	b.n	800b0d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d112      	bne.n	800b0b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	881a      	ldrh	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	1c9a      	adds	r2, r3, #2
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	86da      	strh	r2, [r3, #54]	; 0x36
 800b0b0:	e011      	b.n	800b0d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0b2:	f7fb ff71 	bl	8006f98 <HAL_GetTick>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d803      	bhi.n	800b0ca <HAL_SPI_Transmit+0x168>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c8:	d102      	bne.n	800b0d0 <HAL_SPI_Transmit+0x16e>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d102      	bne.n	800b0d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b0d4:	e074      	b.n	800b1c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1ce      	bne.n	800b07e <HAL_SPI_Transmit+0x11c>
 800b0e0:	e04c      	b.n	800b17c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <HAL_SPI_Transmit+0x18e>
 800b0ea:	8afb      	ldrh	r3, [r7, #22]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d140      	bne.n	800b172 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	330c      	adds	r3, #12
 800b0fa:	7812      	ldrb	r2, [r2, #0]
 800b0fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	1c5a      	adds	r2, r3, #1
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	3b01      	subs	r3, #1
 800b110:	b29a      	uxth	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b116:	e02c      	b.n	800b172 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f003 0302 	and.w	r3, r3, #2
 800b122:	2b02      	cmp	r3, #2
 800b124:	d113      	bne.n	800b14e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	330c      	adds	r3, #12
 800b130:	7812      	ldrb	r2, [r2, #0]
 800b132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b142:	b29b      	uxth	r3, r3
 800b144:	3b01      	subs	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b14c:	e011      	b.n	800b172 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b14e:	f7fb ff23 	bl	8006f98 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d803      	bhi.n	800b166 <HAL_SPI_Transmit+0x204>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d102      	bne.n	800b16c <HAL_SPI_Transmit+0x20a>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d102      	bne.n	800b172 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b170:	e026      	b.n	800b1c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b176:	b29b      	uxth	r3, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1cd      	bne.n	800b118 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 fce9 	bl	800bb58 <SPI_EndRxTxTransaction>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10a      	bne.n	800b1b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b19a:	2300      	movs	r3, #0
 800b19c:	613b      	str	r3, [r7, #16]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	613b      	str	r3, [r7, #16]
 800b1ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e000      	b.n	800b1c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b1be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b1d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3720      	adds	r7, #32
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b088      	sub	sp, #32
 800b1de:	af02      	add	r7, sp, #8
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	603b      	str	r3, [r7, #0]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1f6:	d112      	bne.n	800b21e <HAL_SPI_Receive+0x44>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10e      	bne.n	800b21e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2204      	movs	r2, #4
 800b204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b208:	88fa      	ldrh	r2, [r7, #6]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4613      	mov	r3, r2
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 f8f1 	bl	800b3fc <HAL_SPI_TransmitReceive>
 800b21a:	4603      	mov	r3, r0
 800b21c:	e0ea      	b.n	800b3f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b224:	2b01      	cmp	r3, #1
 800b226:	d101      	bne.n	800b22c <HAL_SPI_Receive+0x52>
 800b228:	2302      	movs	r3, #2
 800b22a:	e0e3      	b.n	800b3f4 <HAL_SPI_Receive+0x21a>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b234:	f7fb feb0 	bl	8006f98 <HAL_GetTick>
 800b238:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b01      	cmp	r3, #1
 800b244:	d002      	beq.n	800b24c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b246:	2302      	movs	r3, #2
 800b248:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b24a:	e0ca      	b.n	800b3e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <HAL_SPI_Receive+0x7e>
 800b252:	88fb      	ldrh	r3, [r7, #6]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b25c:	e0c1      	b.n	800b3e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2204      	movs	r2, #4
 800b262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	88fa      	ldrh	r2, [r7, #6]
 800b276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	88fa      	ldrh	r2, [r7, #6]
 800b27c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2a4:	d10f      	bne.n	800b2c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b2c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d0:	2b40      	cmp	r3, #64	; 0x40
 800b2d2:	d007      	beq.n	800b2e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d162      	bne.n	800b3b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b2ec:	e02e      	b.n	800b34c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d115      	bne.n	800b328 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f103 020c 	add.w	r2, r3, #12
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	7812      	ldrb	r2, [r2, #0]
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	3b01      	subs	r3, #1
 800b320:	b29a      	uxth	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b326:	e011      	b.n	800b34c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b328:	f7fb fe36 	bl	8006f98 <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d803      	bhi.n	800b340 <HAL_SPI_Receive+0x166>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b33e:	d102      	bne.n	800b346 <HAL_SPI_Receive+0x16c>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d102      	bne.n	800b34c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b34a:	e04a      	b.n	800b3e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b350:	b29b      	uxth	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1cb      	bne.n	800b2ee <HAL_SPI_Receive+0x114>
 800b356:	e031      	b.n	800b3bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b01      	cmp	r3, #1
 800b364:	d113      	bne.n	800b38e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b370:	b292      	uxth	r2, r2
 800b372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b378:	1c9a      	adds	r2, r3, #2
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b382:	b29b      	uxth	r3, r3
 800b384:	3b01      	subs	r3, #1
 800b386:	b29a      	uxth	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b38c:	e011      	b.n	800b3b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b38e:	f7fb fe03 	bl	8006f98 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d803      	bhi.n	800b3a6 <HAL_SPI_Receive+0x1cc>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a4:	d102      	bne.n	800b3ac <HAL_SPI_Receive+0x1d2>
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b3b0:	e017      	b.n	800b3e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1cd      	bne.n	800b358 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 fb63 	bl	800ba8c <SPI_EndRxTransaction>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	75fb      	strb	r3, [r7, #23]
 800b3de:	e000      	b.n	800b3e2 <HAL_SPI_Receive+0x208>
  }

error :
 800b3e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08c      	sub	sp, #48	; 0x30
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b40a:	2301      	movs	r3, #1
 800b40c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d101      	bne.n	800b422 <HAL_SPI_TransmitReceive+0x26>
 800b41e:	2302      	movs	r3, #2
 800b420:	e18a      	b.n	800b738 <HAL_SPI_TransmitReceive+0x33c>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b42a:	f7fb fdb5 	bl	8006f98 <HAL_GetTick>
 800b42e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b440:	887b      	ldrh	r3, [r7, #2]
 800b442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d00f      	beq.n	800b46c <HAL_SPI_TransmitReceive+0x70>
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b452:	d107      	bne.n	800b464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <HAL_SPI_TransmitReceive+0x68>
 800b45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b460:	2b04      	cmp	r3, #4
 800b462:	d003      	beq.n	800b46c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b464:	2302      	movs	r3, #2
 800b466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b46a:	e15b      	b.n	800b724 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d005      	beq.n	800b47e <HAL_SPI_TransmitReceive+0x82>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <HAL_SPI_TransmitReceive+0x82>
 800b478:	887b      	ldrh	r3, [r7, #2]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d103      	bne.n	800b486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b484:	e14e      	b.n	800b724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d003      	beq.n	800b49a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2205      	movs	r2, #5
 800b496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	887a      	ldrh	r2, [r7, #2]
 800b4aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	887a      	ldrh	r2, [r7, #2]
 800b4b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	887a      	ldrh	r2, [r7, #2]
 800b4bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	887a      	ldrh	r2, [r7, #2]
 800b4c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4da:	2b40      	cmp	r3, #64	; 0x40
 800b4dc:	d007      	beq.n	800b4ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f6:	d178      	bne.n	800b5ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <HAL_SPI_TransmitReceive+0x10a>
 800b500:	8b7b      	ldrh	r3, [r7, #26]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d166      	bne.n	800b5d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50a:	881a      	ldrh	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b516:	1c9a      	adds	r2, r3, #2
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b520:	b29b      	uxth	r3, r3
 800b522:	3b01      	subs	r3, #1
 800b524:	b29a      	uxth	r2, r3
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b52a:	e053      	b.n	800b5d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f003 0302 	and.w	r3, r3, #2
 800b536:	2b02      	cmp	r3, #2
 800b538:	d11b      	bne.n	800b572 <HAL_SPI_TransmitReceive+0x176>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b53e:	b29b      	uxth	r3, r3
 800b540:	2b00      	cmp	r3, #0
 800b542:	d016      	beq.n	800b572 <HAL_SPI_TransmitReceive+0x176>
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	2b01      	cmp	r3, #1
 800b548:	d113      	bne.n	800b572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54e:	881a      	ldrh	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55a:	1c9a      	adds	r2, r3, #2
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b564:	b29b      	uxth	r3, r3
 800b566:	3b01      	subs	r3, #1
 800b568:	b29a      	uxth	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b56e:	2300      	movs	r3, #0
 800b570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d119      	bne.n	800b5b4 <HAL_SPI_TransmitReceive+0x1b8>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b584:	b29b      	uxth	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d014      	beq.n	800b5b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b594:	b292      	uxth	r2, r2
 800b596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59c:	1c9a      	adds	r2, r3, #2
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b5b4:	f7fb fcf0 	bl	8006f98 <HAL_GetTick>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d807      	bhi.n	800b5d4 <HAL_SPI_TransmitReceive+0x1d8>
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ca:	d003      	beq.n	800b5d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b5d2:	e0a7      	b.n	800b724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1a6      	bne.n	800b52c <HAL_SPI_TransmitReceive+0x130>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1a1      	bne.n	800b52c <HAL_SPI_TransmitReceive+0x130>
 800b5e8:	e07c      	b.n	800b6e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <HAL_SPI_TransmitReceive+0x1fc>
 800b5f2:	8b7b      	ldrh	r3, [r7, #26]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d16b      	bne.n	800b6d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	330c      	adds	r3, #12
 800b602:	7812      	ldrb	r2, [r2, #0]
 800b604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b614:	b29b      	uxth	r3, r3
 800b616:	3b01      	subs	r3, #1
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b61e:	e057      	b.n	800b6d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d11c      	bne.n	800b668 <HAL_SPI_TransmitReceive+0x26c>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b632:	b29b      	uxth	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d017      	beq.n	800b668 <HAL_SPI_TransmitReceive+0x26c>
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d114      	bne.n	800b668 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	330c      	adds	r3, #12
 800b648:	7812      	ldrb	r2, [r2, #0]
 800b64a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	3b01      	subs	r3, #1
 800b65e:	b29a      	uxth	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b01      	cmp	r3, #1
 800b674:	d119      	bne.n	800b6aa <HAL_SPI_TransmitReceive+0x2ae>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d014      	beq.n	800b6aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68da      	ldr	r2, [r3, #12]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b692:	1c5a      	adds	r2, r3, #1
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b6aa:	f7fb fc75 	bl	8006f98 <HAL_GetTick>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d803      	bhi.n	800b6c2 <HAL_SPI_TransmitReceive+0x2c6>
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d102      	bne.n	800b6c8 <HAL_SPI_TransmitReceive+0x2cc>
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b6ce:	e029      	b.n	800b724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1a2      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x224>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d19d      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 fa35 	bl	800bb58 <SPI_EndRxTxTransaction>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d006      	beq.n	800b702 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b700:	e010      	b.n	800b724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10b      	bne.n	800b722 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	e000      	b.n	800b724 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3730      	adds	r7, #48	; 0x30
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b088      	sub	sp, #32
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	099b      	lsrs	r3, r3, #6
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10f      	bne.n	800b784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	099b      	lsrs	r3, r3, #6
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	2b00      	cmp	r3, #0
 800b778:	d004      	beq.n	800b784 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	4798      	blx	r3
    return;
 800b782:	e0d7      	b.n	800b934 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	085b      	lsrs	r3, r3, #1
 800b788:	f003 0301 	and.w	r3, r3, #1
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00a      	beq.n	800b7a6 <HAL_SPI_IRQHandler+0x66>
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	09db      	lsrs	r3, r3, #7
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d004      	beq.n	800b7a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	4798      	blx	r3
    return;
 800b7a4:	e0c6      	b.n	800b934 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	095b      	lsrs	r3, r3, #5
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10c      	bne.n	800b7cc <HAL_SPI_IRQHandler+0x8c>
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	099b      	lsrs	r3, r3, #6
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	0a1b      	lsrs	r3, r3, #8
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 80b4 	beq.w	800b934 <HAL_SPI_IRQHandler+0x1f4>
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80ad 	beq.w	800b934 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	099b      	lsrs	r3, r3, #6
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d023      	beq.n	800b82e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d011      	beq.n	800b816 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f6:	f043 0204 	orr.w	r2, r3, #4
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	e00b      	b.n	800b82e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b816:	2300      	movs	r3, #0
 800b818:	613b      	str	r3, [r7, #16]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	613b      	str	r3, [r7, #16]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	613b      	str	r3, [r7, #16]
 800b82a:	693b      	ldr	r3, [r7, #16]
        return;
 800b82c:	e082      	b.n	800b934 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	095b      	lsrs	r3, r3, #5
 800b832:	f003 0301 	and.w	r3, r3, #1
 800b836:	2b00      	cmp	r3, #0
 800b838:	d014      	beq.n	800b864 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b83e:	f043 0201 	orr.w	r2, r3, #1
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	0a1b      	lsrs	r3, r3, #8
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00c      	beq.n	800b88a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b874:	f043 0208 	orr.w	r2, r3, #8
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b87c:	2300      	movs	r3, #0
 800b87e:	60bb      	str	r3, [r7, #8]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	60bb      	str	r3, [r7, #8]
 800b888:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d04f      	beq.n	800b932 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	f003 0302 	and.w	r3, r3, #2
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <HAL_SPI_IRQHandler+0x17e>
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d034      	beq.n	800b928 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 0203 	bic.w	r2, r2, #3
 800b8cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d011      	beq.n	800b8fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8da:	4a18      	ldr	r2, [pc, #96]	; (800b93c <HAL_SPI_IRQHandler+0x1fc>)
 800b8dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fb fd48 	bl	8007378 <HAL_DMA_Abort_IT>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d005      	beq.n	800b8fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d016      	beq.n	800b930 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b906:	4a0d      	ldr	r2, [pc, #52]	; (800b93c <HAL_SPI_IRQHandler+0x1fc>)
 800b908:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fb fd32 	bl	8007378 <HAL_DMA_Abort_IT>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b926:	e003      	b.n	800b930 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f809 	bl	800b940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b92e:	e000      	b.n	800b932 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b930:	bf00      	nop
    return;
 800b932:	bf00      	nop
  }
}
 800b934:	3720      	adds	r7, #32
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	0800b955 	.word	0x0800b955

0800b940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b960:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7ff ffe6 	bl	800b940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	4613      	mov	r3, r2
 800b98a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b98c:	f7fb fb04 	bl	8006f98 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	1a9b      	subs	r3, r3, r2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	4413      	add	r3, r2
 800b99a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b99c:	f7fb fafc 	bl	8006f98 <HAL_GetTick>
 800b9a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9a2:	4b39      	ldr	r3, [pc, #228]	; (800ba88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	015b      	lsls	r3, r3, #5
 800b9a8:	0d1b      	lsrs	r3, r3, #20
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	fb02 f303 	mul.w	r3, r2, r3
 800b9b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9b2:	e054      	b.n	800ba5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ba:	d050      	beq.n	800ba5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9bc:	f7fb faec 	bl	8006f98 <HAL_GetTick>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d902      	bls.n	800b9d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d13d      	bne.n	800ba4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9ea:	d111      	bne.n	800ba10 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9f4:	d004      	beq.n	800ba00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9fe:	d107      	bne.n	800ba10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba18:	d10f      	bne.n	800ba3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba28:	601a      	str	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e017      	b.n	800ba7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689a      	ldr	r2, [r3, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	4013      	ands	r3, r2
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	bf0c      	ite	eq
 800ba6e:	2301      	moveq	r3, #1
 800ba70:	2300      	movne	r3, #0
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	461a      	mov	r2, r3
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d19b      	bne.n	800b9b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3720      	adds	r7, #32
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000154 	.word	0x20000154

0800ba8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af02      	add	r7, sp, #8
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800baa0:	d111      	bne.n	800bac6 <SPI_EndRxTransaction+0x3a>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baaa:	d004      	beq.n	800bab6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bab4:	d107      	bne.n	800bac6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bac4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bace:	d12a      	bne.n	800bb26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad8:	d012      	beq.n	800bb00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	2180      	movs	r1, #128	; 0x80
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f7ff ff49 	bl	800b97c <SPI_WaitFlagStateUntilTimeout>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d02d      	beq.n	800bb4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf4:	f043 0220 	orr.w	r2, r3, #32
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e026      	b.n	800bb4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2200      	movs	r2, #0
 800bb08:	2101      	movs	r1, #1
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff ff36 	bl	800b97c <SPI_WaitFlagStateUntilTimeout>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d01a      	beq.n	800bb4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1a:	f043 0220 	orr.w	r2, r3, #32
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e013      	b.n	800bb4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2101      	movs	r1, #1
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f7ff ff23 	bl	800b97c <SPI_WaitFlagStateUntilTimeout>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d007      	beq.n	800bb4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb40:	f043 0220 	orr.w	r2, r3, #32
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e000      	b.n	800bb4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bb64:	4b1b      	ldr	r3, [pc, #108]	; (800bbd4 <SPI_EndRxTxTransaction+0x7c>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a1b      	ldr	r2, [pc, #108]	; (800bbd8 <SPI_EndRxTxTransaction+0x80>)
 800bb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6e:	0d5b      	lsrs	r3, r3, #21
 800bb70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb74:	fb02 f303 	mul.w	r3, r2, r3
 800bb78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb82:	d112      	bne.n	800bbaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2180      	movs	r1, #128	; 0x80
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff fef4 	bl	800b97c <SPI_WaitFlagStateUntilTimeout>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d016      	beq.n	800bbc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f043 0220 	orr.w	r2, r3, #32
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e00f      	b.n	800bbca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00a      	beq.n	800bbc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc0:	2b80      	cmp	r3, #128	; 0x80
 800bbc2:	d0f2      	beq.n	800bbaa <SPI_EndRxTxTransaction+0x52>
 800bbc4:	e000      	b.n	800bbc8 <SPI_EndRxTxTransaction+0x70>
        break;
 800bbc6:	bf00      	nop
  }

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000154 	.word	0x20000154
 800bbd8:	165e9f81 	.word	0x165e9f81

0800bbdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e041      	b.n	800bc72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7fa fdac 	bl	8006760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3304      	adds	r3, #4
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	f000 fae0 	bl	800c1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
	...

0800bc7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d001      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e04e      	b.n	800bd32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2202      	movs	r2, #2
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68da      	ldr	r2, [r3, #12]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f042 0201 	orr.w	r2, r2, #1
 800bcaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a23      	ldr	r2, [pc, #140]	; (800bd40 <HAL_TIM_Base_Start_IT+0xc4>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d022      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcbe:	d01d      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1f      	ldr	r2, [pc, #124]	; (800bd44 <HAL_TIM_Base_Start_IT+0xc8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d018      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a1e      	ldr	r2, [pc, #120]	; (800bd48 <HAL_TIM_Base_Start_IT+0xcc>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d013      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1c      	ldr	r2, [pc, #112]	; (800bd4c <HAL_TIM_Base_Start_IT+0xd0>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00e      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a1b      	ldr	r2, [pc, #108]	; (800bd50 <HAL_TIM_Base_Start_IT+0xd4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d009      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a19      	ldr	r2, [pc, #100]	; (800bd54 <HAL_TIM_Base_Start_IT+0xd8>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d004      	beq.n	800bcfc <HAL_TIM_Base_Start_IT+0x80>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a18      	ldr	r2, [pc, #96]	; (800bd58 <HAL_TIM_Base_Start_IT+0xdc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d111      	bne.n	800bd20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b06      	cmp	r3, #6
 800bd0c:	d010      	beq.n	800bd30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f042 0201 	orr.w	r2, r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd1e:	e007      	b.n	800bd30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0201 	orr.w	r2, r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40010000 	.word	0x40010000
 800bd44:	40000400 	.word	0x40000400
 800bd48:	40000800 	.word	0x40000800
 800bd4c:	40000c00 	.word	0x40000c00
 800bd50:	40010400 	.word	0x40010400
 800bd54:	40014000 	.word	0x40014000
 800bd58:	40001800 	.word	0x40001800

0800bd5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e041      	b.n	800bdf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7fa fcca 	bl	800671c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f000 fa20 	bl	800c1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	f003 0302 	and.w	r3, r3, #2
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d122      	bne.n	800be56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	f003 0302 	and.w	r3, r3, #2
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d11b      	bne.n	800be56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f06f 0202 	mvn.w	r2, #2
 800be26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	f003 0303 	and.w	r3, r3, #3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f9b1 	bl	800c1a4 <HAL_TIM_IC_CaptureCallback>
 800be42:	e005      	b.n	800be50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f9a3 	bl	800c190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f9b4 	bl	800c1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	f003 0304 	and.w	r3, r3, #4
 800be60:	2b04      	cmp	r3, #4
 800be62:	d122      	bne.n	800beaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	f003 0304 	and.w	r3, r3, #4
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d11b      	bne.n	800beaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f06f 0204 	mvn.w	r2, #4
 800be7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f987 	bl	800c1a4 <HAL_TIM_IC_CaptureCallback>
 800be96:	e005      	b.n	800bea4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f979 	bl	800c190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f98a 	bl	800c1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b08      	cmp	r3, #8
 800beb6:	d122      	bne.n	800befe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f003 0308 	and.w	r3, r3, #8
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	d11b      	bne.n	800befe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f06f 0208 	mvn.w	r2, #8
 800bece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2204      	movs	r2, #4
 800bed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	f003 0303 	and.w	r3, r3, #3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f95d 	bl	800c1a4 <HAL_TIM_IC_CaptureCallback>
 800beea:	e005      	b.n	800bef8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f94f 	bl	800c190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f960 	bl	800c1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	f003 0310 	and.w	r3, r3, #16
 800bf08:	2b10      	cmp	r3, #16
 800bf0a:	d122      	bne.n	800bf52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f003 0310 	and.w	r3, r3, #16
 800bf16:	2b10      	cmp	r3, #16
 800bf18:	d11b      	bne.n	800bf52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f06f 0210 	mvn.w	r2, #16
 800bf22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2208      	movs	r2, #8
 800bf28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f933 	bl	800c1a4 <HAL_TIM_IC_CaptureCallback>
 800bf3e:	e005      	b.n	800bf4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f925 	bl	800c190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f936 	bl	800c1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d10e      	bne.n	800bf7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d107      	bne.n	800bf7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f06f 0201 	mvn.w	r2, #1
 800bf76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7fa fb11 	bl	80065a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf88:	2b80      	cmp	r3, #128	; 0x80
 800bf8a:	d10e      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf96:	2b80      	cmp	r3, #128	; 0x80
 800bf98:	d107      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fbf1 	bl	800c78c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	d10e      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b40      	cmp	r3, #64	; 0x40
 800bfc4:	d107      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8fb 	bl	800c1cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d10e      	bne.n	800c002 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d107      	bne.n	800c002 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f06f 0220 	mvn.w	r2, #32
 800bffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fbbb 	bl	800c778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c026:	2302      	movs	r3, #2
 800c028:	e0ae      	b.n	800c188 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b0c      	cmp	r3, #12
 800c036:	f200 809f 	bhi.w	800c178 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c075 	.word	0x0800c075
 800c044:	0800c179 	.word	0x0800c179
 800c048:	0800c179 	.word	0x0800c179
 800c04c:	0800c179 	.word	0x0800c179
 800c050:	0800c0b5 	.word	0x0800c0b5
 800c054:	0800c179 	.word	0x0800c179
 800c058:	0800c179 	.word	0x0800c179
 800c05c:	0800c179 	.word	0x0800c179
 800c060:	0800c0f7 	.word	0x0800c0f7
 800c064:	0800c179 	.word	0x0800c179
 800c068:	0800c179 	.word	0x0800c179
 800c06c:	0800c179 	.word	0x0800c179
 800c070:	0800c137 	.word	0x0800c137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68b9      	ldr	r1, [r7, #8]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 f950 	bl	800c320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	699a      	ldr	r2, [r3, #24]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0208 	orr.w	r2, r2, #8
 800c08e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	699a      	ldr	r2, [r3, #24]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f022 0204 	bic.w	r2, r2, #4
 800c09e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6999      	ldr	r1, [r3, #24]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	691a      	ldr	r2, [r3, #16]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	619a      	str	r2, [r3, #24]
      break;
 800c0b2:	e064      	b.n	800c17e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68b9      	ldr	r1, [r7, #8]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 f9a0 	bl	800c400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	699a      	ldr	r2, [r3, #24]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6999      	ldr	r1, [r3, #24]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	021a      	lsls	r2, r3, #8
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	619a      	str	r2, [r3, #24]
      break;
 800c0f4:	e043      	b.n	800c17e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f9f5 	bl	800c4ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	69da      	ldr	r2, [r3, #28]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0208 	orr.w	r2, r2, #8
 800c110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69da      	ldr	r2, [r3, #28]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f022 0204 	bic.w	r2, r2, #4
 800c120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	69d9      	ldr	r1, [r3, #28]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	61da      	str	r2, [r3, #28]
      break;
 800c134:	e023      	b.n	800c17e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fa49 	bl	800c5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	69da      	ldr	r2, [r3, #28]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	69da      	ldr	r2, [r3, #28]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69d9      	ldr	r1, [r3, #28]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	021a      	lsls	r2, r3, #8
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	430a      	orrs	r2, r1
 800c174:	61da      	str	r2, [r3, #28]
      break;
 800c176:	e002      	b.n	800c17e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	75fb      	strb	r3, [r7, #23]
      break;
 800c17c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a40      	ldr	r2, [pc, #256]	; (800c2f4 <TIM_Base_SetConfig+0x114>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d013      	beq.n	800c220 <TIM_Base_SetConfig+0x40>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1fe:	d00f      	beq.n	800c220 <TIM_Base_SetConfig+0x40>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a3d      	ldr	r2, [pc, #244]	; (800c2f8 <TIM_Base_SetConfig+0x118>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d00b      	beq.n	800c220 <TIM_Base_SetConfig+0x40>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a3c      	ldr	r2, [pc, #240]	; (800c2fc <TIM_Base_SetConfig+0x11c>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d007      	beq.n	800c220 <TIM_Base_SetConfig+0x40>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a3b      	ldr	r2, [pc, #236]	; (800c300 <TIM_Base_SetConfig+0x120>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d003      	beq.n	800c220 <TIM_Base_SetConfig+0x40>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a3a      	ldr	r2, [pc, #232]	; (800c304 <TIM_Base_SetConfig+0x124>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d108      	bne.n	800c232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a2f      	ldr	r2, [pc, #188]	; (800c2f4 <TIM_Base_SetConfig+0x114>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d02b      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c240:	d027      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a2c      	ldr	r2, [pc, #176]	; (800c2f8 <TIM_Base_SetConfig+0x118>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d023      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a2b      	ldr	r2, [pc, #172]	; (800c2fc <TIM_Base_SetConfig+0x11c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d01f      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a2a      	ldr	r2, [pc, #168]	; (800c300 <TIM_Base_SetConfig+0x120>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d01b      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a29      	ldr	r2, [pc, #164]	; (800c304 <TIM_Base_SetConfig+0x124>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d017      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a28      	ldr	r2, [pc, #160]	; (800c308 <TIM_Base_SetConfig+0x128>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d013      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a27      	ldr	r2, [pc, #156]	; (800c30c <TIM_Base_SetConfig+0x12c>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d00f      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a26      	ldr	r2, [pc, #152]	; (800c310 <TIM_Base_SetConfig+0x130>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d00b      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a25      	ldr	r2, [pc, #148]	; (800c314 <TIM_Base_SetConfig+0x134>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d007      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a24      	ldr	r2, [pc, #144]	; (800c318 <TIM_Base_SetConfig+0x138>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d003      	beq.n	800c292 <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a23      	ldr	r2, [pc, #140]	; (800c31c <TIM_Base_SetConfig+0x13c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d108      	bne.n	800c2a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	689a      	ldr	r2, [r3, #8]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a0a      	ldr	r2, [pc, #40]	; (800c2f4 <TIM_Base_SetConfig+0x114>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d003      	beq.n	800c2d8 <TIM_Base_SetConfig+0xf8>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a0c      	ldr	r2, [pc, #48]	; (800c304 <TIM_Base_SetConfig+0x124>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d103      	bne.n	800c2e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	691a      	ldr	r2, [r3, #16]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	615a      	str	r2, [r3, #20]
}
 800c2e6:	bf00      	nop
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	40010000 	.word	0x40010000
 800c2f8:	40000400 	.word	0x40000400
 800c2fc:	40000800 	.word	0x40000800
 800c300:	40000c00 	.word	0x40000c00
 800c304:	40010400 	.word	0x40010400
 800c308:	40014000 	.word	0x40014000
 800c30c:	40014400 	.word	0x40014400
 800c310:	40014800 	.word	0x40014800
 800c314:	40001800 	.word	0x40001800
 800c318:	40001c00 	.word	0x40001c00
 800c31c:	40002000 	.word	0x40002000

0800c320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	f023 0201 	bic.w	r2, r3, #1
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f023 0303 	bic.w	r3, r3, #3
 800c356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4313      	orrs	r3, r2
 800c360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f023 0302 	bic.w	r3, r3, #2
 800c368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	4313      	orrs	r3, r2
 800c372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a20      	ldr	r2, [pc, #128]	; (800c3f8 <TIM_OC1_SetConfig+0xd8>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d003      	beq.n	800c384 <TIM_OC1_SetConfig+0x64>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a1f      	ldr	r2, [pc, #124]	; (800c3fc <TIM_OC1_SetConfig+0xdc>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d10c      	bne.n	800c39e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f023 0308 	bic.w	r3, r3, #8
 800c38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	4313      	orrs	r3, r2
 800c394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f023 0304 	bic.w	r3, r3, #4
 800c39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <TIM_OC1_SetConfig+0xd8>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d003      	beq.n	800c3ae <TIM_OC1_SetConfig+0x8e>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a14      	ldr	r2, [pc, #80]	; (800c3fc <TIM_OC1_SetConfig+0xdc>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d111      	bne.n	800c3d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	621a      	str	r2, [r3, #32]
}
 800c3ec:	bf00      	nop
 800c3ee:	371c      	adds	r7, #28
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	40010000 	.word	0x40010000
 800c3fc:	40010400 	.word	0x40010400

0800c400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	f023 0210 	bic.w	r2, r3, #16
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	021b      	lsls	r3, r3, #8
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	4313      	orrs	r3, r2
 800c442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f023 0320 	bic.w	r3, r3, #32
 800c44a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	4313      	orrs	r3, r2
 800c456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a22      	ldr	r2, [pc, #136]	; (800c4e4 <TIM_OC2_SetConfig+0xe4>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d003      	beq.n	800c468 <TIM_OC2_SetConfig+0x68>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a21      	ldr	r2, [pc, #132]	; (800c4e8 <TIM_OC2_SetConfig+0xe8>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d10d      	bne.n	800c484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c46e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4313      	orrs	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a17      	ldr	r2, [pc, #92]	; (800c4e4 <TIM_OC2_SetConfig+0xe4>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d003      	beq.n	800c494 <TIM_OC2_SetConfig+0x94>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a16      	ldr	r2, [pc, #88]	; (800c4e8 <TIM_OC2_SetConfig+0xe8>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d113      	bne.n	800c4bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c49a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	693a      	ldr	r2, [r7, #16]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	621a      	str	r2, [r3, #32]
}
 800c4d6:	bf00      	nop
 800c4d8:	371c      	adds	r7, #28
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	40010000 	.word	0x40010000
 800c4e8:	40010400 	.word	0x40010400

0800c4ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	021b      	lsls	r3, r3, #8
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	4313      	orrs	r3, r2
 800c540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a21      	ldr	r2, [pc, #132]	; (800c5cc <TIM_OC3_SetConfig+0xe0>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d003      	beq.n	800c552 <TIM_OC3_SetConfig+0x66>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a20      	ldr	r2, [pc, #128]	; (800c5d0 <TIM_OC3_SetConfig+0xe4>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d10d      	bne.n	800c56e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	4313      	orrs	r3, r2
 800c564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c56c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a16      	ldr	r2, [pc, #88]	; (800c5cc <TIM_OC3_SetConfig+0xe0>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d003      	beq.n	800c57e <TIM_OC3_SetConfig+0x92>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a15      	ldr	r2, [pc, #84]	; (800c5d0 <TIM_OC3_SetConfig+0xe4>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d113      	bne.n	800c5a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c58c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	695b      	ldr	r3, [r3, #20]
 800c592:	011b      	lsls	r3, r3, #4
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	4313      	orrs	r3, r2
 800c598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	011b      	lsls	r3, r3, #4
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	621a      	str	r2, [r3, #32]
}
 800c5c0:	bf00      	nop
 800c5c2:	371c      	adds	r7, #28
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	40010000 	.word	0x40010000
 800c5d0:	40010400 	.word	0x40010400

0800c5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	031b      	lsls	r3, r3, #12
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4313      	orrs	r3, r2
 800c62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a12      	ldr	r2, [pc, #72]	; (800c678 <TIM_OC4_SetConfig+0xa4>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d003      	beq.n	800c63c <TIM_OC4_SetConfig+0x68>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a11      	ldr	r2, [pc, #68]	; (800c67c <TIM_OC4_SetConfig+0xa8>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d109      	bne.n	800c650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	019b      	lsls	r3, r3, #6
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	621a      	str	r2, [r3, #32]
}
 800c66a:	bf00      	nop
 800c66c:	371c      	adds	r7, #28
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	40010000 	.word	0x40010000
 800c67c:	40010400 	.word	0x40010400

0800c680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c694:	2302      	movs	r3, #2
 800c696:	e05a      	b.n	800c74e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a21      	ldr	r2, [pc, #132]	; (800c75c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d022      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e4:	d01d      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a1d      	ldr	r2, [pc, #116]	; (800c760 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d018      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1b      	ldr	r2, [pc, #108]	; (800c764 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d013      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a1a      	ldr	r2, [pc, #104]	; (800c768 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d00e      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a18      	ldr	r2, [pc, #96]	; (800c76c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d009      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a17      	ldr	r2, [pc, #92]	; (800c770 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d004      	beq.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a15      	ldr	r2, [pc, #84]	; (800c774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d10c      	bne.n	800c73c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	4313      	orrs	r3, r2
 800c732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	40010000 	.word	0x40010000
 800c760:	40000400 	.word	0x40000400
 800c764:	40000800 	.word	0x40000800
 800c768:	40000c00 	.word	0x40000c00
 800c76c:	40010400 	.word	0x40010400
 800c770:	40014000 	.word	0x40014000
 800c774:	40001800 	.word	0x40001800

0800c778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e03f      	b.n	800c832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d106      	bne.n	800c7cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7fa fab6 	bl	8006d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2224      	movs	r2, #36	; 0x24
 800c7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68da      	ldr	r2, [r3, #12]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c7e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f929 	bl	800ca3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	691a      	ldr	r2, [r3, #16]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c7f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	695a      	ldr	r2, [r3, #20]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68da      	ldr	r2, [r3, #12]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2220      	movs	r2, #32
 800c824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b08a      	sub	sp, #40	; 0x28
 800c83e:	af02      	add	r7, sp, #8
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	603b      	str	r3, [r7, #0]
 800c846:	4613      	mov	r3, r2
 800c848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b20      	cmp	r3, #32
 800c858:	d17c      	bne.n	800c954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <HAL_UART_Transmit+0x2c>
 800c860:	88fb      	ldrh	r3, [r7, #6]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e075      	b.n	800c956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c870:	2b01      	cmp	r3, #1
 800c872:	d101      	bne.n	800c878 <HAL_UART_Transmit+0x3e>
 800c874:	2302      	movs	r3, #2
 800c876:	e06e      	b.n	800c956 <HAL_UART_Transmit+0x11c>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2221      	movs	r2, #33	; 0x21
 800c88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c88e:	f7fa fb83 	bl	8006f98 <HAL_GetTick>
 800c892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	88fa      	ldrh	r2, [r7, #6]
 800c898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	88fa      	ldrh	r2, [r7, #6]
 800c89e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8a8:	d108      	bne.n	800c8bc <HAL_UART_Transmit+0x82>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d104      	bne.n	800c8bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	61bb      	str	r3, [r7, #24]
 800c8ba:	e003      	b.n	800c8c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c8cc:	e02a      	b.n	800c924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2180      	movs	r1, #128	; 0x80
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 f840 	bl	800c95e <UART_WaitOnFlagUntilTimeout>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e036      	b.n	800c956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10b      	bne.n	800c906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	3302      	adds	r3, #2
 800c902:	61bb      	str	r3, [r7, #24]
 800c904:	e007      	b.n	800c916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	781a      	ldrb	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	3301      	adds	r3, #1
 800c914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c928:	b29b      	uxth	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1cf      	bne.n	800c8ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2200      	movs	r2, #0
 800c936:	2140      	movs	r1, #64	; 0x40
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 f810 	bl	800c95e <UART_WaitOnFlagUntilTimeout>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e006      	b.n	800c956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	e000      	b.n	800c956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c954:	2302      	movs	r3, #2
  }
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b090      	sub	sp, #64	; 0x40
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	603b      	str	r3, [r7, #0]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c96e:	e050      	b.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c976:	d04c      	beq.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d007      	beq.n	800c98e <UART_WaitOnFlagUntilTimeout+0x30>
 800c97e:	f7fa fb0b 	bl	8006f98 <HAL_GetTick>
 800c982:	4602      	mov	r2, r0
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d241      	bcs.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	330c      	adds	r3, #12
 800c994:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c998:	e853 3f00 	ldrex	r3, [r3]
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	330c      	adds	r3, #12
 800c9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ae:	637a      	str	r2, [r7, #52]	; 0x34
 800c9b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9b6:	e841 2300 	strex	r3, r2, [r1]
 800c9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1e5      	bne.n	800c98e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	e853 3f00 	ldrex	r3, [r3]
 800c9d0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	f023 0301 	bic.w	r3, r3, #1
 800c9d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3314      	adds	r3, #20
 800c9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9e2:	623a      	str	r2, [r7, #32]
 800c9e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	69f9      	ldr	r1, [r7, #28]
 800c9e8:	6a3a      	ldr	r2, [r7, #32]
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1e5      	bne.n	800c9c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2220      	movs	r2, #32
 800c9fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e00f      	b.n	800ca32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	bf0c      	ite	eq
 800ca22:	2301      	moveq	r3, #1
 800ca24:	2300      	movne	r3, #0
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	461a      	mov	r2, r3
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d09f      	beq.n	800c970 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3740      	adds	r7, #64	; 0x40
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca40:	b0c0      	sub	sp, #256	; 0x100
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ca54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca58:	68d9      	ldr	r1, [r3, #12]
 800ca5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	ea40 0301 	orr.w	r3, r0, r1
 800ca64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ca66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca6a:	689a      	ldr	r2, [r3, #8]
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca78:	695b      	ldr	r3, [r3, #20]
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	4313      	orrs	r3, r2
 800ca84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ca88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ca94:	f021 010c 	bic.w	r1, r1, #12
 800ca98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800caa2:	430b      	orrs	r3, r1
 800caa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800caa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	695b      	ldr	r3, [r3, #20]
 800caae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab6:	6999      	ldr	r1, [r3, #24]
 800cab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	ea40 0301 	orr.w	r3, r0, r1
 800cac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	4b8f      	ldr	r3, [pc, #572]	; (800cd08 <UART_SetConfig+0x2cc>)
 800cacc:	429a      	cmp	r2, r3
 800cace:	d005      	beq.n	800cadc <UART_SetConfig+0xa0>
 800cad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	4b8d      	ldr	r3, [pc, #564]	; (800cd0c <UART_SetConfig+0x2d0>)
 800cad8:	429a      	cmp	r2, r3
 800cada:	d104      	bne.n	800cae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cadc:	f7fe f9a4 	bl	800ae28 <HAL_RCC_GetPCLK2Freq>
 800cae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cae4:	e003      	b.n	800caee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cae6:	f7fe f98b 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 800caea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caf2:	69db      	ldr	r3, [r3, #28]
 800caf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf8:	f040 810c 	bne.w	800cd14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cafc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb00:	2200      	movs	r2, #0
 800cb02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cb0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cb0e:	4622      	mov	r2, r4
 800cb10:	462b      	mov	r3, r5
 800cb12:	1891      	adds	r1, r2, r2
 800cb14:	65b9      	str	r1, [r7, #88]	; 0x58
 800cb16:	415b      	adcs	r3, r3
 800cb18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cb1e:	4621      	mov	r1, r4
 800cb20:	eb12 0801 	adds.w	r8, r2, r1
 800cb24:	4629      	mov	r1, r5
 800cb26:	eb43 0901 	adc.w	r9, r3, r1
 800cb2a:	f04f 0200 	mov.w	r2, #0
 800cb2e:	f04f 0300 	mov.w	r3, #0
 800cb32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb3e:	4690      	mov	r8, r2
 800cb40:	4699      	mov	r9, r3
 800cb42:	4623      	mov	r3, r4
 800cb44:	eb18 0303 	adds.w	r3, r8, r3
 800cb48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cb4c:	462b      	mov	r3, r5
 800cb4e:	eb49 0303 	adc.w	r3, r9, r3
 800cb52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cb56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cb66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	18db      	adds	r3, r3, r3
 800cb6e:	653b      	str	r3, [r7, #80]	; 0x50
 800cb70:	4613      	mov	r3, r2
 800cb72:	eb42 0303 	adc.w	r3, r2, r3
 800cb76:	657b      	str	r3, [r7, #84]	; 0x54
 800cb78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cb7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cb80:	f7f3 fb2a 	bl	80001d8 <__aeabi_uldivmod>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4b61      	ldr	r3, [pc, #388]	; (800cd10 <UART_SetConfig+0x2d4>)
 800cb8a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	011c      	lsls	r4, r3, #4
 800cb92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb96:	2200      	movs	r2, #0
 800cb98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cba4:	4642      	mov	r2, r8
 800cba6:	464b      	mov	r3, r9
 800cba8:	1891      	adds	r1, r2, r2
 800cbaa:	64b9      	str	r1, [r7, #72]	; 0x48
 800cbac:	415b      	adcs	r3, r3
 800cbae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cbb4:	4641      	mov	r1, r8
 800cbb6:	eb12 0a01 	adds.w	sl, r2, r1
 800cbba:	4649      	mov	r1, r9
 800cbbc:	eb43 0b01 	adc.w	fp, r3, r1
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	f04f 0300 	mov.w	r3, #0
 800cbc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cbcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cbd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbd4:	4692      	mov	sl, r2
 800cbd6:	469b      	mov	fp, r3
 800cbd8:	4643      	mov	r3, r8
 800cbda:	eb1a 0303 	adds.w	r3, sl, r3
 800cbde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	eb4b 0303 	adc.w	r3, fp, r3
 800cbe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cbf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cbfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cc00:	460b      	mov	r3, r1
 800cc02:	18db      	adds	r3, r3, r3
 800cc04:	643b      	str	r3, [r7, #64]	; 0x40
 800cc06:	4613      	mov	r3, r2
 800cc08:	eb42 0303 	adc.w	r3, r2, r3
 800cc0c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cc16:	f7f3 fadf 	bl	80001d8 <__aeabi_uldivmod>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4b3b      	ldr	r3, [pc, #236]	; (800cd10 <UART_SetConfig+0x2d4>)
 800cc22:	fba3 2301 	umull	r2, r3, r3, r1
 800cc26:	095b      	lsrs	r3, r3, #5
 800cc28:	2264      	movs	r2, #100	; 0x64
 800cc2a:	fb02 f303 	mul.w	r3, r2, r3
 800cc2e:	1acb      	subs	r3, r1, r3
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cc36:	4b36      	ldr	r3, [pc, #216]	; (800cd10 <UART_SetConfig+0x2d4>)
 800cc38:	fba3 2302 	umull	r2, r3, r3, r2
 800cc3c:	095b      	lsrs	r3, r3, #5
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc44:	441c      	add	r4, r3
 800cc46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cc54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	1891      	adds	r1, r2, r2
 800cc5e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc60:	415b      	adcs	r3, r3
 800cc62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc68:	4641      	mov	r1, r8
 800cc6a:	1851      	adds	r1, r2, r1
 800cc6c:	6339      	str	r1, [r7, #48]	; 0x30
 800cc6e:	4649      	mov	r1, r9
 800cc70:	414b      	adcs	r3, r1
 800cc72:	637b      	str	r3, [r7, #52]	; 0x34
 800cc74:	f04f 0200 	mov.w	r2, #0
 800cc78:	f04f 0300 	mov.w	r3, #0
 800cc7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cc80:	4659      	mov	r1, fp
 800cc82:	00cb      	lsls	r3, r1, #3
 800cc84:	4651      	mov	r1, sl
 800cc86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc8a:	4651      	mov	r1, sl
 800cc8c:	00ca      	lsls	r2, r1, #3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	4603      	mov	r3, r0
 800cc94:	4642      	mov	r2, r8
 800cc96:	189b      	adds	r3, r3, r2
 800cc98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc9c:	464b      	mov	r3, r9
 800cc9e:	460a      	mov	r2, r1
 800cca0:	eb42 0303 	adc.w	r3, r2, r3
 800cca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ccb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ccb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	18db      	adds	r3, r3, r3
 800ccc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	eb42 0303 	adc.w	r3, r2, r3
 800ccc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ccce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ccd2:	f7f3 fa81 	bl	80001d8 <__aeabi_uldivmod>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4b0d      	ldr	r3, [pc, #52]	; (800cd10 <UART_SetConfig+0x2d4>)
 800ccdc:	fba3 1302 	umull	r1, r3, r3, r2
 800cce0:	095b      	lsrs	r3, r3, #5
 800cce2:	2164      	movs	r1, #100	; 0x64
 800cce4:	fb01 f303 	mul.w	r3, r1, r3
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	3332      	adds	r3, #50	; 0x32
 800ccee:	4a08      	ldr	r2, [pc, #32]	; (800cd10 <UART_SetConfig+0x2d4>)
 800ccf0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf4:	095b      	lsrs	r3, r3, #5
 800ccf6:	f003 0207 	and.w	r2, r3, #7
 800ccfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4422      	add	r2, r4
 800cd02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cd04:	e105      	b.n	800cf12 <UART_SetConfig+0x4d6>
 800cd06:	bf00      	nop
 800cd08:	40011000 	.word	0x40011000
 800cd0c:	40011400 	.word	0x40011400
 800cd10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cd22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cd26:	4642      	mov	r2, r8
 800cd28:	464b      	mov	r3, r9
 800cd2a:	1891      	adds	r1, r2, r2
 800cd2c:	6239      	str	r1, [r7, #32]
 800cd2e:	415b      	adcs	r3, r3
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
 800cd32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd36:	4641      	mov	r1, r8
 800cd38:	1854      	adds	r4, r2, r1
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	eb43 0501 	adc.w	r5, r3, r1
 800cd40:	f04f 0200 	mov.w	r2, #0
 800cd44:	f04f 0300 	mov.w	r3, #0
 800cd48:	00eb      	lsls	r3, r5, #3
 800cd4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd4e:	00e2      	lsls	r2, r4, #3
 800cd50:	4614      	mov	r4, r2
 800cd52:	461d      	mov	r5, r3
 800cd54:	4643      	mov	r3, r8
 800cd56:	18e3      	adds	r3, r4, r3
 800cd58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd5c:	464b      	mov	r3, r9
 800cd5e:	eb45 0303 	adc.w	r3, r5, r3
 800cd62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd76:	f04f 0200 	mov.w	r2, #0
 800cd7a:	f04f 0300 	mov.w	r3, #0
 800cd7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd82:	4629      	mov	r1, r5
 800cd84:	008b      	lsls	r3, r1, #2
 800cd86:	4621      	mov	r1, r4
 800cd88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	008a      	lsls	r2, r1, #2
 800cd90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cd94:	f7f3 fa20 	bl	80001d8 <__aeabi_uldivmod>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	4b60      	ldr	r3, [pc, #384]	; (800cf20 <UART_SetConfig+0x4e4>)
 800cd9e:	fba3 2302 	umull	r2, r3, r3, r2
 800cda2:	095b      	lsrs	r3, r3, #5
 800cda4:	011c      	lsls	r4, r3, #4
 800cda6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cdb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cdb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cdb8:	4642      	mov	r2, r8
 800cdba:	464b      	mov	r3, r9
 800cdbc:	1891      	adds	r1, r2, r2
 800cdbe:	61b9      	str	r1, [r7, #24]
 800cdc0:	415b      	adcs	r3, r3
 800cdc2:	61fb      	str	r3, [r7, #28]
 800cdc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cdc8:	4641      	mov	r1, r8
 800cdca:	1851      	adds	r1, r2, r1
 800cdcc:	6139      	str	r1, [r7, #16]
 800cdce:	4649      	mov	r1, r9
 800cdd0:	414b      	adcs	r3, r1
 800cdd2:	617b      	str	r3, [r7, #20]
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cde0:	4659      	mov	r1, fp
 800cde2:	00cb      	lsls	r3, r1, #3
 800cde4:	4651      	mov	r1, sl
 800cde6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdea:	4651      	mov	r1, sl
 800cdec:	00ca      	lsls	r2, r1, #3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	4642      	mov	r2, r8
 800cdf6:	189b      	adds	r3, r3, r2
 800cdf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdfc:	464b      	mov	r3, r9
 800cdfe:	460a      	mov	r2, r1
 800ce00:	eb42 0303 	adc.w	r3, r2, r3
 800ce04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce12:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	f04f 0300 	mov.w	r3, #0
 800ce1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ce20:	4649      	mov	r1, r9
 800ce22:	008b      	lsls	r3, r1, #2
 800ce24:	4641      	mov	r1, r8
 800ce26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce2a:	4641      	mov	r1, r8
 800ce2c:	008a      	lsls	r2, r1, #2
 800ce2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ce32:	f7f3 f9d1 	bl	80001d8 <__aeabi_uldivmod>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4b39      	ldr	r3, [pc, #228]	; (800cf20 <UART_SetConfig+0x4e4>)
 800ce3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ce40:	095b      	lsrs	r3, r3, #5
 800ce42:	2164      	movs	r1, #100	; 0x64
 800ce44:	fb01 f303 	mul.w	r3, r1, r3
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	011b      	lsls	r3, r3, #4
 800ce4c:	3332      	adds	r3, #50	; 0x32
 800ce4e:	4a34      	ldr	r2, [pc, #208]	; (800cf20 <UART_SetConfig+0x4e4>)
 800ce50:	fba2 2303 	umull	r2, r3, r2, r3
 800ce54:	095b      	lsrs	r3, r3, #5
 800ce56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce5a:	441c      	add	r4, r3
 800ce5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce60:	2200      	movs	r2, #0
 800ce62:	673b      	str	r3, [r7, #112]	; 0x70
 800ce64:	677a      	str	r2, [r7, #116]	; 0x74
 800ce66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ce6a:	4642      	mov	r2, r8
 800ce6c:	464b      	mov	r3, r9
 800ce6e:	1891      	adds	r1, r2, r2
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	415b      	adcs	r3, r3
 800ce74:	60fb      	str	r3, [r7, #12]
 800ce76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce7a:	4641      	mov	r1, r8
 800ce7c:	1851      	adds	r1, r2, r1
 800ce7e:	6039      	str	r1, [r7, #0]
 800ce80:	4649      	mov	r1, r9
 800ce82:	414b      	adcs	r3, r1
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	f04f 0200 	mov.w	r2, #0
 800ce8a:	f04f 0300 	mov.w	r3, #0
 800ce8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce92:	4659      	mov	r1, fp
 800ce94:	00cb      	lsls	r3, r1, #3
 800ce96:	4651      	mov	r1, sl
 800ce98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce9c:	4651      	mov	r1, sl
 800ce9e:	00ca      	lsls	r2, r1, #3
 800cea0:	4610      	mov	r0, r2
 800cea2:	4619      	mov	r1, r3
 800cea4:	4603      	mov	r3, r0
 800cea6:	4642      	mov	r2, r8
 800cea8:	189b      	adds	r3, r3, r2
 800ceaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800ceac:	464b      	mov	r3, r9
 800ceae:	460a      	mov	r2, r1
 800ceb0:	eb42 0303 	adc.w	r3, r2, r3
 800ceb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ceb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	663b      	str	r3, [r7, #96]	; 0x60
 800cec0:	667a      	str	r2, [r7, #100]	; 0x64
 800cec2:	f04f 0200 	mov.w	r2, #0
 800cec6:	f04f 0300 	mov.w	r3, #0
 800ceca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cece:	4649      	mov	r1, r9
 800ced0:	008b      	lsls	r3, r1, #2
 800ced2:	4641      	mov	r1, r8
 800ced4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ced8:	4641      	mov	r1, r8
 800ceda:	008a      	lsls	r2, r1, #2
 800cedc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cee0:	f7f3 f97a 	bl	80001d8 <__aeabi_uldivmod>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <UART_SetConfig+0x4e4>)
 800ceea:	fba3 1302 	umull	r1, r3, r3, r2
 800ceee:	095b      	lsrs	r3, r3, #5
 800cef0:	2164      	movs	r1, #100	; 0x64
 800cef2:	fb01 f303 	mul.w	r3, r1, r3
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	011b      	lsls	r3, r3, #4
 800cefa:	3332      	adds	r3, #50	; 0x32
 800cefc:	4a08      	ldr	r2, [pc, #32]	; (800cf20 <UART_SetConfig+0x4e4>)
 800cefe:	fba2 2303 	umull	r2, r3, r2, r3
 800cf02:	095b      	lsrs	r3, r3, #5
 800cf04:	f003 020f 	and.w	r2, r3, #15
 800cf08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4422      	add	r2, r4
 800cf10:	609a      	str	r2, [r3, #8]
}
 800cf12:	bf00      	nop
 800cf14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf1e:	bf00      	nop
 800cf20:	51eb851f 	.word	0x51eb851f

0800cf24 <__libc_init_array>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	4d0d      	ldr	r5, [pc, #52]	; (800cf5c <__libc_init_array+0x38>)
 800cf28:	4c0d      	ldr	r4, [pc, #52]	; (800cf60 <__libc_init_array+0x3c>)
 800cf2a:	1b64      	subs	r4, r4, r5
 800cf2c:	10a4      	asrs	r4, r4, #2
 800cf2e:	2600      	movs	r6, #0
 800cf30:	42a6      	cmp	r6, r4
 800cf32:	d109      	bne.n	800cf48 <__libc_init_array+0x24>
 800cf34:	4d0b      	ldr	r5, [pc, #44]	; (800cf64 <__libc_init_array+0x40>)
 800cf36:	4c0c      	ldr	r4, [pc, #48]	; (800cf68 <__libc_init_array+0x44>)
 800cf38:	f000 f87c 	bl	800d034 <_init>
 800cf3c:	1b64      	subs	r4, r4, r5
 800cf3e:	10a4      	asrs	r4, r4, #2
 800cf40:	2600      	movs	r6, #0
 800cf42:	42a6      	cmp	r6, r4
 800cf44:	d105      	bne.n	800cf52 <__libc_init_array+0x2e>
 800cf46:	bd70      	pop	{r4, r5, r6, pc}
 800cf48:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf4c:	4798      	blx	r3
 800cf4e:	3601      	adds	r6, #1
 800cf50:	e7ee      	b.n	800cf30 <__libc_init_array+0xc>
 800cf52:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf56:	4798      	blx	r3
 800cf58:	3601      	adds	r6, #1
 800cf5a:	e7f2      	b.n	800cf42 <__libc_init_array+0x1e>
 800cf5c:	080103f4 	.word	0x080103f4
 800cf60:	080103f4 	.word	0x080103f4
 800cf64:	080103f4 	.word	0x080103f4
 800cf68:	080103f8 	.word	0x080103f8

0800cf6c <__itoa>:
 800cf6c:	1e93      	subs	r3, r2, #2
 800cf6e:	2b22      	cmp	r3, #34	; 0x22
 800cf70:	b510      	push	{r4, lr}
 800cf72:	460c      	mov	r4, r1
 800cf74:	d904      	bls.n	800cf80 <__itoa+0x14>
 800cf76:	2300      	movs	r3, #0
 800cf78:	700b      	strb	r3, [r1, #0]
 800cf7a:	461c      	mov	r4, r3
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	bd10      	pop	{r4, pc}
 800cf80:	2a0a      	cmp	r2, #10
 800cf82:	d109      	bne.n	800cf98 <__itoa+0x2c>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	da07      	bge.n	800cf98 <__itoa+0x2c>
 800cf88:	232d      	movs	r3, #45	; 0x2d
 800cf8a:	700b      	strb	r3, [r1, #0]
 800cf8c:	4240      	negs	r0, r0
 800cf8e:	2101      	movs	r1, #1
 800cf90:	4421      	add	r1, r4
 800cf92:	f000 f80d 	bl	800cfb0 <__utoa>
 800cf96:	e7f1      	b.n	800cf7c <__itoa+0x10>
 800cf98:	2100      	movs	r1, #0
 800cf9a:	e7f9      	b.n	800cf90 <__itoa+0x24>

0800cf9c <itoa>:
 800cf9c:	f7ff bfe6 	b.w	800cf6c <__itoa>

0800cfa0 <memset>:
 800cfa0:	4402      	add	r2, r0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d100      	bne.n	800cfaa <memset+0xa>
 800cfa8:	4770      	bx	lr
 800cfaa:	f803 1b01 	strb.w	r1, [r3], #1
 800cfae:	e7f9      	b.n	800cfa4 <memset+0x4>

0800cfb0 <__utoa>:
 800cfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfb2:	4c1f      	ldr	r4, [pc, #124]	; (800d030 <__utoa+0x80>)
 800cfb4:	b08b      	sub	sp, #44	; 0x2c
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	466e      	mov	r6, sp
 800cfbc:	f104 0c20 	add.w	ip, r4, #32
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	6861      	ldr	r1, [r4, #4]
 800cfc4:	4637      	mov	r7, r6
 800cfc6:	c703      	stmia	r7!, {r0, r1}
 800cfc8:	3408      	adds	r4, #8
 800cfca:	4564      	cmp	r4, ip
 800cfcc:	463e      	mov	r6, r7
 800cfce:	d1f7      	bne.n	800cfc0 <__utoa+0x10>
 800cfd0:	7921      	ldrb	r1, [r4, #4]
 800cfd2:	7139      	strb	r1, [r7, #4]
 800cfd4:	1e91      	subs	r1, r2, #2
 800cfd6:	6820      	ldr	r0, [r4, #0]
 800cfd8:	6038      	str	r0, [r7, #0]
 800cfda:	2922      	cmp	r1, #34	; 0x22
 800cfdc:	f04f 0100 	mov.w	r1, #0
 800cfe0:	d904      	bls.n	800cfec <__utoa+0x3c>
 800cfe2:	7019      	strb	r1, [r3, #0]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	b00b      	add	sp, #44	; 0x2c
 800cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfec:	1e58      	subs	r0, r3, #1
 800cfee:	4684      	mov	ip, r0
 800cff0:	fbb5 f7f2 	udiv	r7, r5, r2
 800cff4:	fb02 5617 	mls	r6, r2, r7, r5
 800cff8:	3628      	adds	r6, #40	; 0x28
 800cffa:	446e      	add	r6, sp
 800cffc:	460c      	mov	r4, r1
 800cffe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d002:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d006:	462e      	mov	r6, r5
 800d008:	42b2      	cmp	r2, r6
 800d00a:	f101 0101 	add.w	r1, r1, #1
 800d00e:	463d      	mov	r5, r7
 800d010:	d9ee      	bls.n	800cff0 <__utoa+0x40>
 800d012:	2200      	movs	r2, #0
 800d014:	545a      	strb	r2, [r3, r1]
 800d016:	1919      	adds	r1, r3, r4
 800d018:	1aa5      	subs	r5, r4, r2
 800d01a:	42aa      	cmp	r2, r5
 800d01c:	dae3      	bge.n	800cfe6 <__utoa+0x36>
 800d01e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d022:	780e      	ldrb	r6, [r1, #0]
 800d024:	7006      	strb	r6, [r0, #0]
 800d026:	3201      	adds	r2, #1
 800d028:	f801 5901 	strb.w	r5, [r1], #-1
 800d02c:	e7f4      	b.n	800d018 <__utoa+0x68>
 800d02e:	bf00      	nop
 800d030:	080103c4 	.word	0x080103c4

0800d034 <_init>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	bf00      	nop
 800d038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03a:	bc08      	pop	{r3}
 800d03c:	469e      	mov	lr, r3
 800d03e:	4770      	bx	lr

0800d040 <_fini>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	bf00      	nop
 800d044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d046:	bc08      	pop	{r3}
 800d048:	469e      	mov	lr, r3
 800d04a:	4770      	bx	lr
