
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000208c  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d50  08009d50  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d58  08009d58  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000013a0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013b8  200013b8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001618a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e9  00000000  00000000  000361d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  000392c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002336e  00000000  00000000  0003b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a0d  00000000  00000000  0005ebee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0efa  00000000  00000000  000775fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001484f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005140  00000000  00000000  00148548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cac 	.word	0x08007cac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08007cac 	.word	0x08007cac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004d0:	f000 f914 	bl	80006fc <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 fbc3 	bl	8000c60 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004da:	20cb      	movs	r0, #203	; 0xcb
 80004dc:	f000 fbc0 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004e0:	2039      	movs	r0, #57	; 0x39
 80004e2:	f000 fbcc 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004e6:	202c      	movs	r0, #44	; 0x2c
 80004e8:	f000 fbc9 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fbc6 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80004f2:	2034      	movs	r0, #52	; 0x34
 80004f4:	f000 fbc3 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fbc0 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 80004fe:	20cf      	movs	r0, #207	; 0xcf
 8000500:	f000 fbae 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fbba 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800050a:	20c1      	movs	r0, #193	; 0xc1
 800050c:	f000 fbb7 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000510:	2030      	movs	r0, #48	; 0x30
 8000512:	f000 fbb4 	bl	8000c7e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000516:	20e8      	movs	r0, #232	; 0xe8
 8000518:	f000 fba2 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800051c:	2085      	movs	r0, #133	; 0x85
 800051e:	f000 fbae 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fbab 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000528:	2078      	movs	r0, #120	; 0x78
 800052a:	f000 fba8 	bl	8000c7e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800052e:	20ea      	movs	r0, #234	; 0xea
 8000530:	f000 fb96 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fba2 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fb9f 	bl	8000c7e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000540:	20ed      	movs	r0, #237	; 0xed
 8000542:	f000 fb8d 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f000 fb99 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 fb96 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000552:	2012      	movs	r0, #18
 8000554:	f000 fb93 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000558:	2081      	movs	r0, #129	; 0x81
 800055a:	f000 fb90 	bl	8000c7e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800055e:	20f7      	movs	r0, #247	; 0xf7
 8000560:	f000 fb7e 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000564:	2020      	movs	r0, #32
 8000566:	f000 fb8a 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800056a:	20c0      	movs	r0, #192	; 0xc0
 800056c:	f000 fb78 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000570:	2010      	movs	r0, #16
 8000572:	f000 fb84 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000576:	20c1      	movs	r0, #193	; 0xc1
 8000578:	f000 fb72 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800057c:	2010      	movs	r0, #16
 800057e:	f000 fb7e 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000582:	20c5      	movs	r0, #197	; 0xc5
 8000584:	f000 fb6c 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000588:	203e      	movs	r0, #62	; 0x3e
 800058a:	f000 fb78 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800058e:	2028      	movs	r0, #40	; 0x28
 8000590:	f000 fb75 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8000594:	20c7      	movs	r0, #199	; 0xc7
 8000596:	f000 fb63 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800059a:	2086      	movs	r0, #134	; 0x86
 800059c:	f000 fb6f 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005a0:	2036      	movs	r0, #54	; 0x36
 80005a2:	f000 fb5d 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005a6:	2048      	movs	r0, #72	; 0x48
 80005a8:	f000 fb69 	bl	8000c7e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f000 fb57 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005b2:	2055      	movs	r0, #85	; 0x55
 80005b4:	f000 fb63 	bl	8000c7e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005b8:	20b1      	movs	r0, #177	; 0xb1
 80005ba:	f000 fb51 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fb5d 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005c4:	2018      	movs	r0, #24
 80005c6:	f000 fb5a 	bl	8000c7e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005ca:	20b6      	movs	r0, #182	; 0xb6
 80005cc:	f000 fb48 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005d0:	2008      	movs	r0, #8
 80005d2:	f000 fb54 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005d6:	2082      	movs	r0, #130	; 0x82
 80005d8:	f000 fb51 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005dc:	2027      	movs	r0, #39	; 0x27
 80005de:	f000 fb4e 	bl	8000c7e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005e2:	20f2      	movs	r0, #242	; 0xf2
 80005e4:	f000 fb3c 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fb48 	bl	8000c7e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005ee:	2026      	movs	r0, #38	; 0x26
 80005f0:	f000 fb36 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fb42 	bl	8000c7e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 80005fa:	20e0      	movs	r0, #224	; 0xe0
 80005fc:	f000 fb30 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000600:	200f      	movs	r0, #15
 8000602:	f000 fb3c 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000606:	2031      	movs	r0, #49	; 0x31
 8000608:	f000 fb39 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800060c:	202b      	movs	r0, #43	; 0x2b
 800060e:	f000 fb36 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000612:	200c      	movs	r0, #12
 8000614:	f000 fb33 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000618:	200e      	movs	r0, #14
 800061a:	f000 fb30 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800061e:	2008      	movs	r0, #8
 8000620:	f000 fb2d 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000624:	204e      	movs	r0, #78	; 0x4e
 8000626:	f000 fb2a 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800062a:	20f1      	movs	r0, #241	; 0xf1
 800062c:	f000 fb27 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000630:	2037      	movs	r0, #55	; 0x37
 8000632:	f000 fb24 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000636:	2007      	movs	r0, #7
 8000638:	f000 fb21 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800063c:	2010      	movs	r0, #16
 800063e:	f000 fb1e 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 fb1b 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000648:	200e      	movs	r0, #14
 800064a:	f000 fb18 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800064e:	2009      	movs	r0, #9
 8000650:	f000 fb15 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fb12 	bl	8000c7e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800065a:	20e1      	movs	r0, #225	; 0xe1
 800065c:	f000 fb00 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fb0c 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000666:	200e      	movs	r0, #14
 8000668:	f000 fb09 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800066c:	2014      	movs	r0, #20
 800066e:	f000 fb06 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 fb03 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000678:	2011      	movs	r0, #17
 800067a:	f000 fb00 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800067e:	2007      	movs	r0, #7
 8000680:	f000 fafd 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000684:	2031      	movs	r0, #49	; 0x31
 8000686:	f000 fafa 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800068a:	20c1      	movs	r0, #193	; 0xc1
 800068c:	f000 faf7 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8000690:	2048      	movs	r0, #72	; 0x48
 8000692:	f000 faf4 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000696:	2008      	movs	r0, #8
 8000698:	f000 faf1 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800069c:	200f      	movs	r0, #15
 800069e:	f000 faee 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006a2:	200c      	movs	r0, #12
 80006a4:	f000 faeb 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 fae8 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006ae:	2036      	movs	r0, #54	; 0x36
 80006b0:	f000 fae5 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006b4:	200f      	movs	r0, #15
 80006b6:	f000 fae2 	bl	8000c7e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ba:	2011      	movs	r0, #17
 80006bc:	f000 fad0 	bl	8000c60 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006c0:	2029      	movs	r0, #41	; 0x29
 80006c2:	f000 facd 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006c6:	202c      	movs	r0, #44	; 0x2c
 80006c8:	f000 fad9 	bl	8000c7e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f83d 	bl	800074c <ILI9341_Set_Rotation>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006e2:	1df9      	adds	r1, r7, #7
 80006e4:	2301      	movs	r3, #1
 80006e6:	2201      	movs	r2, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <ILI9341_SPI_Send+0x20>)
 80006ea:	f005 fb76 	bl	8005dda <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000119c 	.word	0x2000119c

080006fc <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	RESET_ON;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <ILI9341_Reset+0x4c>)
 8000708:	f003 f80c 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f002 fa1d 	bl	8002b4c <HAL_Delay>
	RESET_OFF;
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <ILI9341_Reset+0x4c>)
 800071a:	f003 f803 	bl	8003724 <HAL_GPIO_WritePin>
	CS_ON;
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <ILI9341_Reset+0x4c>)
 8000726:	f002 fffd 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f002 fa0e 	bl	8002b4c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fa95 	bl	8000c60 <ILI9341_Send_Command>
	CS_OFF;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <ILI9341_Reset+0x4c>)
 800073e:	f002 fff1 	bl	8003724 <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020c00 	.word	0x40020c00

0800074c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000756:	2036      	movs	r0, #54	; 0x36
 8000758:	f000 fa82 	bl	8000c60 <ILI9341_Send_Command>
	switch (rotation) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d836      	bhi.n	80007d0 <ILI9341_Set_Rotation+0x84>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <ILI9341_Set_Rotation+0x1c>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000779 	.word	0x08000779
 800076c:	0800078f 	.word	0x0800078f
 8000770:	080007a5 	.word	0x080007a5
 8000774:	080007bb 	.word	0x080007bb
	case 0:
		ILI9341_Send_Data(0x48);
 8000778:	2048      	movs	r0, #72	; 0x48
 800077a:	f000 fa80 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 240;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 8000780:	22f0      	movs	r2, #240	; 0xf0
 8000782:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 8000786:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e020      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f000 fa75 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 320;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 800079e:	22f0      	movs	r2, #240	; 0xf0
 80007a0:	601a      	str	r2, [r3, #0]
		break;
 80007a2:	e015      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007a4:	2088      	movs	r0, #136	; 0x88
 80007a6:	f000 fa6a 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 80007ac:	22f0      	movs	r2, #240	; 0xf0
 80007ae:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 80007b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007b6:	601a      	str	r2, [r3, #0]
		break;
 80007b8:	e00a      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ba:	20e8      	movs	r0, #232	; 0xe8
 80007bc:	f000 fa5f 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 80007ca:	22f0      	movs	r2, #240	; 0xf0
 80007cc:	601a      	str	r2, [r3, #0]
		break;
 80007ce:	bf00      	nop
	}
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000004 	.word	0x20000004

080007e0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 80007f4:	f002 ff96 	bl	8003724 <HAL_GPIO_WritePin>
	DC_COMMAND;
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 8000800:	f002 ff90 	bl	8003724 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff66 	bl	80006d8 <ILI9341_SPI_Send>

	DC_DATA;
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 8000814:	f002 ff86 	bl	8003724 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	0e1b      	lsrs	r3, r3, #24
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff5a 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff54 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff4e 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff49 	bl	80006d8 <ILI9341_SPI_Send>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000874:	6979      	ldr	r1, [r7, #20]
 8000876:	202a      	movs	r0, #42	; 0x2a
 8000878:	f7ff ffb2 	bl	80007e0 <ILI9341_SPI_Send_32>
	t = y1;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4313      	orrs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800088e:	6979      	ldr	r1, [r7, #20]
 8000890:	202b      	movs	r0, #43	; 0x2b
 8000892:	f7ff ffa5 	bl	80007e0 <ILI9341_SPI_Send_32>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <ILI9341_Fill_Screen+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <ILI9341_Fill_Screen+0x44>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	2100      	movs	r1, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ffcc 	bl	8000854 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <ILI9341_Fill_Screen+0x40>)
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <ILI9341_Fill_Screen+0x44>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	fb01 f202 	mul.w	r2, r1, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f9e3 	bl	8000c9c <ILI9341_Send_Burst>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004

080008e8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db31      	blt.n	800095e <ILI9341_Draw_Pixel+0x76>
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db2e      	blt.n	800095e <ILI9341_Draw_Pixel+0x76>
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <ILI9341_Draw_Pixel+0x80>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d229      	bcs.n	800095e <ILI9341_Draw_Pixel+0x76>
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <ILI9341_Draw_Pixel+0x84>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d224      	bcs.n	800095e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <ILI9341_Draw_Pixel+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <ILI9341_Draw_Pixel+0x84>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	f7ff ff96 	bl	8000854 <ILI9341_Set_Address>
	DC_COMMAND;
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	4810      	ldr	r0, [pc, #64]	; (8000970 <ILI9341_Draw_Pixel+0x88>)
 8000930:	f002 fef8 	bl	8003724 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff fecf 	bl	80006d8 <ILI9341_SPI_Send>
	DC_DATA;
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <ILI9341_Draw_Pixel+0x88>)
 8000942:	f002 feef 	bl	8003724 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fec3 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff febe 	bl	80006d8 <ILI9341_SPI_Send>
 800095c:	e000      	b.n	8000960 <ILI9341_Draw_Pixel+0x78>
		return;
 800095e:	bf00      	nop
}
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	20000004 	.word	0x20000004
 8000970:	40020c00 	.word	0x40020c00

08000974 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f7ff ff63 	bl	8000854 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	b298      	uxth	r0, r3
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	3301      	adds	r3, #1
 800099a:	4619      	mov	r1, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	fb01 f303 	mul.w	r3, r1, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	f000 f977 	bl	8000c9c <ILI9341_Send_Burst>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af02      	add	r7, sp, #8
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f81c 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f814 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f80c 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f804 	bl	8000a0c <ILI9341_Draw_Line>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1acb      	subs	r3, r1, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	429a      	cmp	r2, r3
 8000a36:	bfcc      	ite	gt
 8000a38:	2301      	movgt	r3, #1
 8000a3a:	2300      	movle	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00d      	beq.n	8000a62 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a52:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	843b      	strh	r3, [r7, #32]
 8000a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d90d      	bls.n	8000a86 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	83fb      	strh	r3, [r7, #30]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a76:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	83bb      	strh	r3, [r7, #28]
 8000a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	0fda      	lsrs	r2, r3, #31
 8000aa0:	4413      	add	r3, r2
 8000aa2:	105b      	asrs	r3, r3, #1
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d202      	bcs.n	8000ab4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab2:	e023      	b.n	8000afc <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aba:	e01f      	b.n	8000afc <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff0d 	bl	80008e8 <ILI9341_Draw_Pixel>
 8000ace:	e005      	b.n	8000adc <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff06 	bl	80008e8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da05      	bge.n	8000af6 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	607b      	str	r3, [r7, #4]
			err = dx;
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d9db      	bls.n	8000abc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b1e:	7f3b      	ldrb	r3, [r7, #28]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d061      	beq.n	8000be8 <ILI9341_Draw_String+0xd8>
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	f300 8092 	bgt.w	8000c4e <ILI9341_Draw_String+0x13e>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d028      	beq.n	8000b80 <ILI9341_Draw_String+0x70>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d02b      	beq.n	8000b8a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b32:	e08c      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b34:	7f3b      	ldrb	r3, [r7, #28]
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d907      	bls.n	8000b56 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	7f3a      	ldrb	r2, [r7, #28]
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	f000 f95a 	bl	8000e20 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b6c:	7f3b      	ldrb	r3, [r7, #28]
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	3b02      	subs	r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1d5      	bne.n	8000b34 <ILI9341_Draw_String+0x24>
	break;
 8000b88:	e061      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b90:	e025      	b.n	8000bde <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b92:	7f3b      	ldrb	r3, [r7, #28]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d907      	bls.n	8000bb4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	7f3a      	ldrb	r2, [r7, #28]
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	f000 f92b 	bl	8000e20 <ILI9341_Draw_Char>
			x += hh*8;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1d5      	bne.n	8000b92 <ILI9341_Draw_String+0x82>
	break;
 8000be6:	e032      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bee:	e029      	b.n	8000c44 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bf0:	7f3b      	ldrb	r3, [r7, #28]
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	441a      	add	r2, r3
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d907      	bls.n	8000c12 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c06:	7f3b      	ldrb	r3, [r7, #28]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	7f3a      	ldrb	r2, [r7, #28]
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	f000 f8fc 	bl	8000e20 <ILI9341_Draw_Char>
			x += hh*10;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1d1      	bne.n	8000bf0 <ILI9341_Draw_String+0xe0>
	break;
 8000c4c:	bf00      	nop
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000034 	.word	0x20000034

08000c60 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c6a:	f000 fa09 	bl	8001080 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fd31 	bl	80006d8 <ILI9341_SPI_Send>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c88:	f000 f9e8 	bl	800105c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd22 	bl	80006d8 <ILI9341_SPI_Send>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	733b      	strb	r3, [r7, #12]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	4858      	ldr	r0, [pc, #352]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cbc:	f002 fd32 	bl	8003724 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc6:	4855      	ldr	r0, [pc, #340]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cc8:	f002 fd2c 	bl	8003724 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000ccc:	202c      	movs	r0, #44	; 0x2c
 8000cce:	f7ff fd03 	bl	80006d8 <ILI9341_SPI_Send>
	DC_DATA;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	4850      	ldr	r0, [pc, #320]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cda:	f002 fd23 	bl	8003724 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cde:	7b3b      	ldrb	r3, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fcf9 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcf5 	bl	80006d8 <ILI9341_SPI_Send>
	len--;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	099b      	lsrs	r3, r3, #6
 8000cf8:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cfa:	7b3a      	ldrb	r2, [r7, #12]
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d169      	bne.n	8000dd6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d02:	e027      	b.n	8000d54 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fce4 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fce0 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcdc 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcd8 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcd4 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd0 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fccc 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcc8 	bl	80006d8 <ILI9341_SPI_Send>
			} while (--i);
 8000d48:	7b7b      	ldrb	r3, [r7, #13]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	737b      	strb	r3, [r7, #13]
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1d9      	bne.n	8000d08 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	81fa      	strh	r2, [r7, #14]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1d2      	bne.n	8000d04 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d66:	737b      	strb	r3, [r7, #13]
 8000d68:	e007      	b.n	8000d7a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcb3 	bl	80006d8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcaf 	bl	80006d8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	737a      	strb	r2, [r7, #13]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f2      	bne.n	8000d6a <ILI9341_Send_Burst+0xce>
 8000d84:	e03f      	b.n	8000e06 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d86:	2310      	movs	r3, #16
 8000d88:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fca3 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc9f 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fc9b 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc97 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc93 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc8f 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc8b 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc87 	bl	80006d8 <ILI9341_SPI_Send>
			} while (--i);
 8000dca:	7b7b      	ldrb	r3, [r7, #13]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	737b      	strb	r3, [r7, #13]
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1d9      	bne.n	8000d8a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	81fa      	strh	r2, [r7, #14]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1d2      	bne.n	8000d86 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000de8:	737b      	strb	r3, [r7, #13]
 8000dea:	e007      	b.n	8000dfc <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dec:	7b3b      	ldrb	r3, [r7, #12]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fc72 	bl	80006d8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fc6e 	bl	80006d8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	737a      	strb	r2, [r7, #13]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f2      	bne.n	8000dec <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000e0e:	f002 fc89 	bl	8003724 <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	f000 80b2 	beq.w	8000f9c <ILI9341_Draw_Char+0x17c>
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	f300 8104 	bgt.w	8001046 <ILI9341_Draw_Char+0x226>
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d002      	beq.n	8000e48 <ILI9341_Draw_Char+0x28>
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d055      	beq.n	8000ef2 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e46:	e0fe      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3305      	adds	r3, #5
 8000e50:	461a      	mov	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3308      	adds	r3, #8
 8000e56:	f7ff fcfd 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	487b      	ldr	r0, [pc, #492]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000e62:	f002 fc5f 	bl	8003724 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e66:	202c      	movs	r0, #44	; 0x2c
 8000e68:	f7ff fc36 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	4877      	ldr	r0, [pc, #476]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000e74:	f002 fc56 	bl	8003724 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e035      	b.n	8000eea <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e7e:	2302      	movs	r3, #2
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e02c      	b.n	8000ede <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e88:	3b20      	subs	r3, #32
 8000e8a:	4a72      	ldr	r2, [pc, #456]	; (8001054 <ILI9341_Draw_Char+0x234>)
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	441a      	add	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	fa42 f303 	asr.w	r3, r2, r3
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc11 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc0c 	bl	80006d8 <ILI9341_SPI_Send>
 8000ec0:	e00a      	b.n	8000ed8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc05 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc00 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddcf      	ble.n	8000e84 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	ddc6      	ble.n	8000e7e <ILI9341_Draw_Char+0x5e>
			break;
 8000ef0:	e0a9      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3307      	adds	r3, #7
 8000efa:	461a      	mov	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3310      	adds	r3, #16
 8000f00:	f7ff fca8 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	4851      	ldr	r0, [pc, #324]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000f0c:	f002 fc0a 	bl	8003724 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f10:	202c      	movs	r0, #44	; 0x2c
 8000f12:	f7ff fbe1 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	484c      	ldr	r0, [pc, #304]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000f1e:	f002 fc01 	bl	8003724 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e035      	b.n	8000f94 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e02c      	b.n	8000f88 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f32:	3b20      	subs	r3, #32
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <ILI9341_Draw_Char+0x238>)
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	441a      	add	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f1c3 0307 	rsb	r3, r3, #7
 8000f48:	fa42 f303 	asr.w	r3, r2, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbbc 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbb7 	bl	80006d8 <ILI9341_SPI_Send>
 8000f6a:	e00a      	b.n	8000f82 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fbb0 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbab 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	ddcf      	ble.n	8000f2e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3301      	adds	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	ddc6      	ble.n	8000f28 <ILI9341_Draw_Char+0x108>
		break;
 8000f9a:	e054      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3309      	adds	r3, #9
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3310      	adds	r3, #16
 8000faa:	f7ff fc53 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	4826      	ldr	r0, [pc, #152]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000fb6:	f002 fbb5 	bl	8003724 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fba:	202c      	movs	r0, #44	; 0x2c
 8000fbc:	f7ff fb8c 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000fc8:	f002 fbac 	bl	8003724 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e035      	b.n	800103e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e02c      	b.n	8001032 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <ILI9341_Draw_Char+0x238>)
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	441a      	add	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	fa42 f303 	asr.w	r3, r2, r3
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fb67 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb62 	bl	80006d8 <ILI9341_SPI_Send>
 8001014:	e00a      	b.n	800102c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fb5b 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb56 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b07      	cmp	r3, #7
 8001036:	ddcf      	ble.n	8000fd8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3301      	adds	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b1d      	cmp	r3, #29
 8001042:	ddc6      	ble.n	8000fd2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001044:	bf00      	nop
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020c00 	.word	0x40020c00
 8001054:	08007d9c 	.word	0x08007d9c
 8001058:	08008074 	.word	0x08008074

0800105c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <Before_Sending_Data+0x20>)
 8001068:	f002 fb5c 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <Before_Sending_Data+0x20>)
 8001074:	f002 fb56 	bl	8003724 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020c00 	.word	0x40020c00

08001080 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <Before_Sending_Command+0x20>)
 800108c:	f002 fb4a 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <Before_Sending_Command+0x20>)
 8001098:	f002 fb44 	bl	8003724 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020c00 	.word	0x40020c00

080010a4 <Si468x_init>:

RETURN_CODE status = 0;


void Si468x_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	Si468x_reset();
 80010a8:	f000 f81a 	bl	80010e0 <Si468x_reset>
	Si468x_power_up();
 80010ac:	f000 f82e 	bl	800110c <Si468x_power_up>
	Si468x_load_init();
 80010b0:	f000 f87e 	bl	80011b0 <Si468x_load_init>
	Si468x_bootloader_load_host();
 80010b4:	f000 f8a2 	bl	80011fc <Si468x_bootloader_load_host>
	Si468x_load_init();
 80010b8:	f000 f87a 	bl	80011b0 <Si468x_load_init>
	Si468x_firmware_load_flash();
 80010bc:	f000 f922 	bl	8001304 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010c0:	f000 f964 	bl	800138c <Si468x_boot>
	HAL_Delay(3000);
 80010c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010c8:	f001 fd40 	bl	8002b4c <HAL_Delay>
	Si468x_get_part_info();
 80010cc:	f000 faa2 	bl	8001614 <Si468x_get_part_info>
	HAL_Delay(5000);
 80010d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80010d4:	f001 fd3a 	bl	8002b4c <HAL_Delay>
	Si468x_get_sys_state();
 80010d8:	f000 fa72 	bl	80015c0 <Si468x_get_sys_state>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Si468x_reset>:

void Si468x_reset()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	RESET_PIN_LOW;
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <Si468x_reset+0x28>)
 80010ea:	f002 fb1b 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f001 fd2c 	bl	8002b4c <HAL_Delay>
	RESET_PIN_HIGH;
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <Si468x_reset+0x28>)
 80010fa:	f002 fb13 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80010fe:	20c8      	movs	r0, #200	; 0xc8
 8001100:	f001 fd24 	bl	8002b4c <HAL_Delay>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020800 	.word	0x40020800

0800110c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	DisplayState("Power Up...");
 8001110:	4823      	ldr	r0, [pc, #140]	; (80011a0 <Si468x_power_up+0x94>)
 8001112:	f000 fcd3 	bl	8001abc <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <Si468x_power_up+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Si468x_power_up+0x98>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <Si468x_power_up+0x98>)
 8001124:	2217      	movs	r2, #23
 8001126:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <Si468x_power_up+0x98>)
 800112a:	2250      	movs	r2, #80	; 0x50
 800112c:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <Si468x_power_up+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <Si468x_power_up+0x98>)
 8001136:	22f8      	movs	r2, #248	; 0xf8
 8001138:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <Si468x_power_up+0x98>)
 800113c:	2224      	movs	r2, #36	; 0x24
 800113e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <Si468x_power_up+0x98>)
 8001142:	2201      	movs	r2, #1
 8001144:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <Si468x_power_up+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <Si468x_power_up+0x98>)
 800114e:	2210      	movs	r2, #16
 8001150:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <Si468x_power_up+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <Si468x_power_up+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <Si468x_power_up+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <Si468x_power_up+0x98>)
 8001166:	2228      	movs	r2, #40	; 0x28
 8001168:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <Si468x_power_up+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <Si468x_power_up+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001176:	490b      	ldr	r1, [pc, #44]	; (80011a4 <Si468x_power_up+0x98>)
 8001178:	2010      	movs	r0, #16
 800117a:	f000 f9df 	bl	800153c <Si468x_write_command>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <Si468x_power_up+0x9c>)
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f001 fce0 	bl	8002b4c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <Si468x_power_up+0xa0>)
 800118e:	2005      	movs	r0, #5
 8001190:	f000 f9f6 	bl	8001580 <Si468x_read_reply>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <Si468x_power_up+0x9c>)
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08007cc4 	.word	0x08007cc4
 80011a4:	20000038 	.word	0x20000038
 80011a8:	20001078 	.word	0x20001078
 80011ac:	20001038 	.word	0x20001038

080011b0 <Si468x_load_init>:

void Si468x_load_init()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <Si468x_load_init+0x40>)
 80011b6:	2206      	movs	r2, #6
 80011b8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <Si468x_load_init+0x40>)
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80011c0:	490b      	ldr	r1, [pc, #44]	; (80011f0 <Si468x_load_init+0x40>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f000 f9ba 	bl	800153c <Si468x_write_command>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <Si468x_load_init+0x44>)
 80011ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 80011d0:	2005      	movs	r0, #5
 80011d2:	f001 fcbb 	bl	8002b4c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <Si468x_load_init+0x48>)
 80011d8:	2005      	movs	r0, #5
 80011da:	f000 f9d1 	bl	8001580 <Si468x_read_reply>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <Si468x_load_init+0x44>)
 80011e4:	701a      	strb	r2, [r3, #0]

	DisplayStatusReg();
 80011e6:	f000 fb91 	bl	800190c <DisplayStatusReg>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000038 	.word	0x20000038
 80011f4:	20001078 	.word	0x20001078
 80011f8:	20001038 	.word	0x20001038

080011fc <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	ClearOK();
 8001202:	f000 fc47 	bl	8001a94 <ClearOK>
	DisplayState("Boot Write ");
 8001206:	4839      	ldr	r0, [pc, #228]	; (80012ec <Si468x_bootloader_load_host+0xf0>)
 8001208:	f000 fc58 	bl	8001abc <DisplayState>
	uint16_t patch_size = sizeof(patch_full);
 800120c:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001210:	807b      	strh	r3, [r7, #2]
	DisplayFirmwareTotalSize(patch_size);
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fc99 	bl	8001b4c <DisplayFirmwareTotalSize>

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 800121c:	2204      	movs	r2, #4
 800121e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 8001222:	2200      	movs	r2, #0
 8001224:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 8001228:	2200      	movs	r2, #0
 800122a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 800122e:	2200      	movs	r2, #0
 8001230:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	e04f      	b.n	80012d8 <Si468x_bootloader_load_host+0xdc>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001238:	2300      	movs	r3, #0
 800123a:	80bb      	strh	r3, [r7, #4]
 800123c:	e014      	b.n	8001268 <Si468x_bootloader_load_host+0x6c>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800123e:	88ba      	ldrh	r2, [r7, #4]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	492c      	ldr	r1, [pc, #176]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 8001244:	fba1 1303 	umull	r1, r3, r1, r3
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	441a      	add	r2, r3
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	3304      	adds	r3, #4
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <Si468x_bootloader_load_host+0xfc>)
 800125c:	5c89      	ldrb	r1, [r1, r2]
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 8001260:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	80bb      	strh	r3, [r7, #4]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	88ba      	ldrh	r2, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3e1      	bcc.n	800123e <Si468x_bootloader_load_host+0x42>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	b29b      	uxth	r3, r3
 8001286:	3304      	adds	r3, #4
 8001288:	b29b      	uxth	r3, r3
 800128a:	4919      	ldr	r1, [pc, #100]	; (80012f0 <Si468x_bootloader_load_host+0xf4>)
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f955 	bl	800153c <Si468x_write_command>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <Si468x_bootloader_load_host+0x100>)
 8001298:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 800129a:	2005      	movs	r0, #5
 800129c:	f001 fc56 	bl	8002b4c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012a0:	4917      	ldr	r1, [pc, #92]	; (8001300 <Si468x_bootloader_load_host+0x104>)
 80012a2:	2005      	movs	r0, #5
 80012a4:	f000 f96c 	bl	8001580 <Si468x_read_reply>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <Si468x_bootloader_load_host+0x100>)
 80012ae:	701a      	strb	r2, [r3, #0]
		DisplayStatusReg();
 80012b0:	f000 fb2c 	bl	800190c <DisplayStatusReg>
		DisplayFirmwareDownloadStatus(j + (patch_size / BOOT_WRITE_STEPS) * i);
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <Si468x_bootloader_load_host+0xf8>)
 80012ba:	fba1 1303 	umull	r1, r3, r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fc21 	bl	8001b14 <DisplayFirmwareDownloadStatus>
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	3301      	adds	r3, #1
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d9ac      	bls.n	8001238 <Si468x_bootloader_load_host+0x3c>
	}

	DisplayOK();
 80012de:	f000 fbc5 	bl	8001a6c <DisplayOK>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08007cd0 	.word	0x08007cd0
 80012f0:	20000038 	.word	0x20000038
 80012f4:	aaaaaaab 	.word	0xaaaaaaab
 80012f8:	08008664 	.word	0x08008664
 80012fc:	20001078 	.word	0x20001078
 8001300:	20001038 	.word	0x20001038

08001304 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	DisplayState("Image Write");
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <Si468x_firmware_load_flash+0x78>)
 800130a:	f000 fbd7 	bl	8001abc <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;	//Power up command code
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001310:	2205      	movs	r2, #5
 8001312:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//not used - value as in documentation
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;					//not used - value as in documentation
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800131c:	2200      	movs	r2, #0
 800131e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;					//not used - value as in documentation
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//Flash start address [7:0] 0x6000
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001328:	2200      	movs	r2, #0
 800132a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0x60;					//Flash start address [15:8]
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800132e:	2260      	movs	r2, #96	; 0x60
 8001330:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x00;					//Flash start address [23:16]
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001334:	2200      	movs	r2, #0
 8001336:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x00;					//Flash start address [31:24]
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//not used - value as in documentation
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001340:	2200      	movs	r2, #0
 8001342:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;					//not used - value as in documentation
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001346:	2200      	movs	r2, #0
 8001348:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 800134c:	2200      	movs	r2, #0
 800134e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]

	Si468x_write_command(12, dab_spi_tx_buffer);
 8001356:	490a      	ldr	r1, [pc, #40]	; (8001380 <Si468x_firmware_load_flash+0x7c>)
 8001358:	200c      	movs	r0, #12
 800135a:	f000 f8ef 	bl	800153c <Si468x_write_command>
	HAL_Delay(5);
 800135e:	2005      	movs	r0, #5
 8001360:	f001 fbf4 	bl	8002b4c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <Si468x_firmware_load_flash+0x80>)
 8001366:	2005      	movs	r0, #5
 8001368:	f000 f90a 	bl	8001580 <Si468x_read_reply>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <Si468x_firmware_load_flash+0x84>)
 8001372:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 8001374:	f000 faca 	bl	800190c <DisplayStatusReg>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	08007cdc 	.word	0x08007cdc
 8001380:	20000038 	.word	0x20000038
 8001384:	20001038 	.word	0x20001038
 8001388:	20001078 	.word	0x20001078

0800138c <Si468x_boot>:

void Si468x_boot()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	DisplayState("Booting... ");
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <Si468x_boot+0x48>)
 8001392:	f000 fb93 	bl	8001abc <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <Si468x_boot+0x4c>)
 8001398:	2207      	movs	r2, #7
 800139a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <Si468x_boot+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <Si468x_boot+0x4c>)
 80013a4:	2002      	movs	r0, #2
 80013a6:	f000 f8c9 	bl	800153c <Si468x_write_command>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <Si468x_boot+0x50>)
 80013b0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(300);
 80013b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013b6:	f001 fbc9 	bl	8002b4c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80013ba:	4909      	ldr	r1, [pc, #36]	; (80013e0 <Si468x_boot+0x54>)
 80013bc:	2005      	movs	r0, #5
 80013be:	f000 f8df 	bl	8001580 <Si468x_read_reply>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <Si468x_boot+0x50>)
 80013c8:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 80013ca:	f000 fa9f 	bl	800190c <DisplayStatusReg>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08007ce8 	.word	0x08007ce8
 80013d8:	20000038 	.word	0x20000038
 80013dc:	20001078 	.word	0x20001078
 80013e0:	20001038 	.word	0x20001038

080013e4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80013ee:	1df9      	adds	r1, r7, #7
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	2201      	movs	r2, #1
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <Si468x_write_single_byte+0x20>)
 80013f6:	f004 fcf0 	bl	8005dda <HAL_SPI_Transmit>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20001144 	.word	0x20001144

08001408 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001412:	1df9      	adds	r1, r7, #7
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	2201      	movs	r2, #1
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <Si468x_read_single_byte+0x20>)
 800141a:	f004 fe1a 	bl	8006052 <HAL_SPI_Receive>
	return data_buffer;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20001144 	.word	0x20001144

0800142c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	81fb      	strh	r3, [r7, #14]
 800143e:	e018      	b.n	8001472 <Si468x_wait_for_CTS+0x46>
	{
		Si468x_read_multiple(1, &cts_status);
 8001440:	f107 030d 	add.w	r3, r7, #13
 8001444:	4619      	mov	r1, r3
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f844 	bl	80014d4 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	da08      	bge.n	8001466 <Si468x_wait_for_CTS+0x3a>
		{
			if((cts_status & 0x40) == 0x40)
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <Si468x_wait_for_CTS+0x36>
			{
				return COMMAND_ERROR;
 800145e:	2320      	movs	r3, #32
 8001460:	e00c      	b.n	800147c <Si468x_wait_for_CTS+0x50>
			}
			return SUCCESS;
 8001462:	2300      	movs	r3, #0
 8001464:	e00a      	b.n	800147c <Si468x_wait_for_CTS+0x50>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f001 fb70 	bl	8002b4c <HAL_Delay>
	for(i = 0; i < timeout; i++)
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	3301      	adds	r3, #1
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	89fa      	ldrh	r2, [r7, #14]
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3e2      	bcc.n	8001440 <Si468x_wait_for_CTS+0x14>
	}
	return TIMEOUT;
 800147a:	2308      	movs	r3, #8
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001494:	2200      	movs	r2, #0
 8001496:	2110      	movs	r1, #16
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <Si468x_write_multiple+0x4c>)
 800149a:	f002 f943 	bl	8003724 <HAL_GPIO_WritePin>
	while(len--)
 800149e:	e009      	b.n	80014b4 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	81fa      	strh	r2, [r7, #14]
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff98 	bl	80013e4 <Si468x_write_single_byte>
	while(len--)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	80fa      	strh	r2, [r7, #6]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80014be:	2201      	movs	r2, #1
 80014c0:	2110      	movs	r1, #16
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <Si468x_write_multiple+0x4c>)
 80014c4:	f002 f92e 	bl	8003724 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020800 	.word	0x40020800

080014d4 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <Si468x_read_multiple+0x64>)
 80014ea:	f002 f91b 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014ee:	200a      	movs	r0, #10
 80014f0:	f001 fb2c 	bl	8002b4c <HAL_Delay>
	CS_PIN_LOW;
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <Si468x_read_multiple+0x64>)
 80014fa:	f002 f913 	bl	8003724 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ff70 	bl	80013e4 <Si468x_write_single_byte>
	while(len--)
 8001504:	e009      	b.n	800151a <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	81fa      	strh	r2, [r7, #14]
 800150c:	461a      	mov	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	189c      	adds	r4, r3, r2
 8001512:	f7ff ff79 	bl	8001408 <Si468x_read_single_byte>
 8001516:	4603      	mov	r3, r0
 8001518:	7023      	strb	r3, [r4, #0]
	while(len--)
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	80fa      	strh	r2, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <Si468x_read_multiple+0x64>)
 800152a:	f002 f8fb 	bl	8003724 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	40020800 	.word	0x40020800

0800153c <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f7ff ff6e 	bl	800142c <Si468x_wait_for_CTS>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <Si468x_write_command+0x24>
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b20      	cmp	r3, #32
 800155e:	d10a      	bne.n	8001576 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff8d 	bl	8001484 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800156a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156e:	f7ff ff5d 	bl	800142c <Si468x_wait_for_CTS>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff9f 	bl	80014d4 <Si468x_read_multiple>
	return SUCCESS;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <get_rx_buffer>:

uint8_t get_rx_buffer(int buffer_pos)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	return dab_spi_rx_buffer[buffer_pos];
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <get_rx_buffer+0x1c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20001038 	.word	0x20001038

080015c0 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	DisplayState("Get sys stat");
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <Si468x_get_sys_state+0x44>)
 80015c6:	f000 fa79 	bl	8001abc <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <Si468x_get_sys_state+0x48>)
 80015cc:	2209      	movs	r2, #9
 80015ce:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <Si468x_get_sys_state+0x48>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <Si468x_get_sys_state+0x48>)
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff ffaf 	bl	800153c <Si468x_write_command>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <Si468x_get_sys_state+0x4c>)
 80015e4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f001 fab0 	bl	8002b4c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80015ec:	4908      	ldr	r1, [pc, #32]	; (8001610 <Si468x_get_sys_state+0x50>)
 80015ee:	2005      	movs	r0, #5
 80015f0:	f7ff ffc6 	bl	8001580 <Si468x_read_reply>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <Si468x_get_sys_state+0x4c>)
 80015fa:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 80015fc:	f000 f986 	bl	800190c <DisplayStatusReg>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	08007cf4 	.word	0x08007cf4
 8001608:	20000038 	.word	0x20000038
 800160c:	20001078 	.word	0x20001078
 8001610:	20001038 	.word	0x20001038

08001614 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	DisplayState("Get part info");
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <Si468x_get_part_info+0x7c>)
 800161a:	f000 fa4f 	bl	8001abc <DisplayState>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <Si468x_get_part_info+0x80>)
 8001620:	2208      	movs	r2, #8
 8001622:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <Si468x_get_part_info+0x80>)
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800162a:	491a      	ldr	r1, [pc, #104]	; (8001694 <Si468x_get_part_info+0x80>)
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff ff85 	bl	800153c <Si468x_write_command>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <Si468x_get_part_info+0x84>)
 8001638:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f001 fa86 	bl	8002b4c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fecf 	bl	80013e4 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001646:	4915      	ldr	r1, [pc, #84]	; (800169c <Si468x_get_part_info+0x88>)
 8001648:	200a      	movs	r0, #10
 800164a:	f7ff ff99 	bl	8001580 <Si468x_read_reply>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <Si468x_get_part_info+0x84>)
 8001654:	701a      	strb	r2, [r3, #0]
	DisplayStatusReg();
 8001656:	f000 f959 	bl	800190c <DisplayStatusReg>

	HAL_Delay(5000);
 800165a:	f241 3088 	movw	r0, #5000	; 0x1388
 800165e:	f001 fa75 	bl	8002b4c <HAL_Delay>
	DisplayState("Show part info");
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <Si468x_get_part_info+0x8c>)
 8001664:	f000 fa2a 	bl	8001abc <DisplayState>
	dab_spi_rx_buffer[0] = dab_spi_rx_buffer[4];
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <Si468x_get_part_info+0x88>)
 800166a:	791a      	ldrb	r2, [r3, #4]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <Si468x_get_part_info+0x88>)
 800166e:	701a      	strb	r2, [r3, #0]
	dab_spi_rx_buffer[1] = dab_spi_rx_buffer[5];
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <Si468x_get_part_info+0x88>)
 8001672:	795a      	ldrb	r2, [r3, #5]
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <Si468x_get_part_info+0x88>)
 8001676:	705a      	strb	r2, [r3, #1]
	dab_spi_rx_buffer[2] = dab_spi_rx_buffer[8];
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <Si468x_get_part_info+0x88>)
 800167a:	7a1a      	ldrb	r2, [r3, #8]
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <Si468x_get_part_info+0x88>)
 800167e:	709a      	strb	r2, [r3, #2]
	dab_spi_rx_buffer[3] = dab_spi_rx_buffer[9];
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <Si468x_get_part_info+0x88>)
 8001682:	7a5a      	ldrb	r2, [r3, #9]
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <Si468x_get_part_info+0x88>)
 8001686:	70da      	strb	r2, [r3, #3]
	DisplayStatusReg();
 8001688:	f000 f940 	bl	800190c <DisplayStatusReg>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	08007d04 	.word	0x08007d04
 8001694:	20000038 	.word	0x20000038
 8001698:	20001078 	.word	0x20001078
 800169c:	20001038 	.word	0x20001038
 80016a0:	08007d14 	.word	0x08007d14

080016a4 <DisplayMainScreen>:
#include "Si468x.h"

char char_buffer[32];

void DisplayMainScreen()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff f8f8 	bl	80008a0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 80016b0:	23eb      	movs	r3, #235	; 0xeb
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	f240 133b 	movw	r3, #315	; 0x13b
 80016b8:	2219      	movs	r2, #25
 80016ba:	2105      	movs	r1, #5
 80016bc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80016c0:	f7ff f979 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 80016c4:	2302      	movs	r3, #2
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	4b85      	ldr	r3, [pc, #532]	; (80018e0 <DisplayMainScreen+0x23c>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d2:	2105      	movs	r1, #5
 80016d4:	2041      	movs	r0, #65	; 0x41
 80016d6:	f7ff fa1b 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 80016da:	233c      	movs	r3, #60	; 0x3c
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f240 1331 	movw	r3, #305	; 0x131
 80016e2:	2223      	movs	r2, #35	; 0x23
 80016e4:	210f      	movs	r1, #15
 80016e6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80016ea:	f7ff f964 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 80016ee:	235f      	movs	r3, #95	; 0x5f
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	f240 1331 	movw	r3, #305	; 0x131
 80016f6:	2246      	movs	r2, #70	; 0x46
 80016f8:	210f      	movs	r1, #15
 80016fa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80016fe:	f7ff f95a 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 8001702:	23a0      	movs	r3, #160	; 0xa0
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2369      	movs	r3, #105	; 0x69
 8001708:	226e      	movs	r2, #110	; 0x6e
 800170a:	210f      	movs	r1, #15
 800170c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001710:	f7ff f951 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8001714:	239f      	movs	r3, #159	; 0x9f
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2368      	movs	r3, #104	; 0x68
 800171a:	226f      	movs	r2, #111	; 0x6f
 800171c:	2110      	movs	r1, #16
 800171e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001722:	f7ff f927 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8001726:	2302      	movs	r3, #2
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	4b6e      	ldr	r3, [pc, #440]	; (80018e4 <DisplayMainScreen+0x240>)
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	217f      	movs	r1, #127	; 0x7f
 8001738:	2023      	movs	r0, #35	; 0x23
 800173a:	f7ff f9e9 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 800173e:	23a0      	movs	r3, #160	; 0xa0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	23cd      	movs	r3, #205	; 0xcd
 8001744:	226e      	movs	r2, #110	; 0x6e
 8001746:	2173      	movs	r1, #115	; 0x73
 8001748:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800174c:	f7ff f933 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8001750:	239f      	movs	r3, #159	; 0x9f
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	23cc      	movs	r3, #204	; 0xcc
 8001756:	226f      	movs	r2, #111	; 0x6f
 8001758:	2174      	movs	r1, #116	; 0x74
 800175a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800175e:	f7ff f909 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 8001762:	2302      	movs	r3, #2
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <DisplayMainScreen+0x244>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001772:	217f      	movs	r1, #127	; 0x7f
 8001774:	2090      	movs	r0, #144	; 0x90
 8001776:	f7ff f9cb 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 800177a:	23a0      	movs	r3, #160	; 0xa0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	f240 1331 	movw	r3, #305	; 0x131
 8001782:	226e      	movs	r2, #110	; 0x6e
 8001784:	21d7      	movs	r1, #215	; 0xd7
 8001786:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800178a:	f7ff f914 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 800178e:	239f      	movs	r3, #159	; 0x9f
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001796:	226f      	movs	r2, #111	; 0x6f
 8001798:	21d8      	movs	r1, #216	; 0xd8
 800179a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800179e:	f7ff f8e9 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 80017a2:	2302      	movs	r3, #2
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	4b51      	ldr	r3, [pc, #324]	; (80018ec <DisplayMainScreen+0x248>)
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b2:	217f      	movs	r1, #127	; 0x7f
 80017b4:	20ea      	movs	r0, #234	; 0xea
 80017b6:	f7ff f9ab 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 80017ba:	23dc      	movs	r3, #220	; 0xdc
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2369      	movs	r3, #105	; 0x69
 80017c0:	22aa      	movs	r2, #170	; 0xaa
 80017c2:	210f      	movs	r1, #15
 80017c4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80017c8:	f7ff f8f5 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 80017cc:	23db      	movs	r3, #219	; 0xdb
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2368      	movs	r3, #104	; 0x68
 80017d2:	22ab      	movs	r2, #171	; 0xab
 80017d4:	2110      	movs	r1, #16
 80017d6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80017da:	f7ff f8cb 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 80017de:	2302      	movs	r3, #2
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <DisplayMainScreen+0x24c>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ee:	21bb      	movs	r1, #187	; 0xbb
 80017f0:	202d      	movs	r0, #45	; 0x2d
 80017f2:	f7ff f98d 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 80017f6:	23dc      	movs	r3, #220	; 0xdc
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	23cd      	movs	r3, #205	; 0xcd
 80017fc:	22aa      	movs	r2, #170	; 0xaa
 80017fe:	2173      	movs	r1, #115	; 0x73
 8001800:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001804:	f7ff f8d7 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8001808:	23db      	movs	r3, #219	; 0xdb
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	23cc      	movs	r3, #204	; 0xcc
 800180e:	22ab      	movs	r2, #171	; 0xab
 8001810:	2174      	movs	r1, #116	; 0x74
 8001812:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001816:	f7ff f8ad 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 800181a:	2302      	movs	r3, #2
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <DisplayMainScreen+0x250>)
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	21b4      	movs	r1, #180	; 0xb4
 800182c:	2081      	movs	r0, #129	; 0x81
 800182e:	f7ff f96f 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 8001832:	2302      	movs	r3, #2
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <DisplayMainScreen+0x254>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800183e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001842:	21c3      	movs	r1, #195	; 0xc3
 8001844:	2084      	movs	r0, #132	; 0x84
 8001846:	f7ff f963 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 800184a:	23dc      	movs	r3, #220	; 0xdc
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	f240 1331 	movw	r3, #305	; 0x131
 8001852:	22aa      	movs	r2, #170	; 0xaa
 8001854:	21d7      	movs	r1, #215	; 0xd7
 8001856:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800185a:	f7ff f8ac 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 800185e:	23db      	movs	r3, #219	; 0xdb
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001866:	22ab      	movs	r2, #171	; 0xab
 8001868:	21d8      	movs	r1, #216	; 0xd8
 800186a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800186e:	f7ff f881 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 8001872:	2302      	movs	r3, #2
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <DisplayMainScreen+0x258>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	21b4      	movs	r1, #180	; 0xb4
 8001884:	20f5      	movs	r0, #245	; 0xf5
 8001886:	f7ff f943 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 800188a:	2302      	movs	r3, #2
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <DisplayMainScreen+0x254>)
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189a:	21c3      	movs	r1, #195	; 0xc3
 800189c:	20e8      	movs	r0, #232	; 0xe8
 800189e:	f7ff f937 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 75, WHITE, BLACK, "Status:" , 2);
 80018a2:	2302      	movs	r3, #2
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <DisplayMainScreen+0x25c>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b0:	214b      	movs	r1, #75	; 0x4b
 80018b2:	2014      	movs	r0, #20
 80018b4:	f7ff f92c 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 75, WHITE, BLACK, "/", 2);
 80018b8:	2302      	movs	r3, #2
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <DisplayMainScreen+0x260>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c6:	214b      	movs	r1, #75	; 0x4b
 80018c8:	20f0      	movs	r0, #240	; 0xf0
 80018ca:	f7ff f921 	bl	8000b10 <ILI9341_Draw_String>

	CS_OFF;
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <DisplayMainScreen+0x264>)
 80018d6:	f001 ff25 	bl	8003724 <HAL_GPIO_WritePin>
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08007d24 	.word	0x08007d24
 80018e4:	08007d38 	.word	0x08007d38
 80018e8:	08007d40 	.word	0x08007d40
 80018ec:	08007d48 	.word	0x08007d48
 80018f0:	08007d50 	.word	0x08007d50
 80018f4:	08007d58 	.word	0x08007d58
 80018f8:	08007d64 	.word	0x08007d64
 80018fc:	08007d6c 	.word	0x08007d6c
 8001900:	08007d74 	.word	0x08007d74
 8001904:	08007d7c 	.word	0x08007d7c
 8001908:	40020c00 	.word	0x40020c00

0800190c <DisplayStatusReg>:

void DisplayStatusReg()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "   ", 2);
 8001912:	2302      	movs	r3, #2
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <DisplayStatusReg+0x158>)
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001920:	2128      	movs	r1, #40	; 0x28
 8001922:	2014      	movs	r0, #20
 8001924:	f7ff f8f4 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(60, 40, WHITE, BLACK, "   ", 2);
 8001928:	2302      	movs	r3, #2
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <DisplayStatusReg+0x158>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2300      	movs	r3, #0
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	2128      	movs	r1, #40	; 0x28
 8001938:	203c      	movs	r0, #60	; 0x3c
 800193a:	f7ff f8e9 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 40, WHITE, BLACK, "   ", 2);
 800193e:	2302      	movs	r3, #2
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <DisplayStatusReg+0x158>)
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	2128      	movs	r1, #40	; 0x28
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f7ff f8de 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(140, 40, WHITE, BLACK, "   ",  2);
 8001954:	2302      	movs	r3, #2
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <DisplayStatusReg+0x158>)
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	2128      	movs	r1, #40	; 0x28
 8001964:	208c      	movs	r0, #140	; 0x8c
 8001966:	f7ff f8d3 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 40, WHITE, BLACK, "   ", 2);
 800196a:	2302      	movs	r3, #2
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <DisplayStatusReg+0x158>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001978:	2128      	movs	r1, #40	; 0x28
 800197a:	20b4      	movs	r0, #180	; 0xb4
 800197c:	f7ff f8c8 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 40, WHITE, BLACK, "   ", 2);
 8001980:	2302      	movs	r3, #2
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <DisplayStatusReg+0x158>)
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198e:	2128      	movs	r1, #40	; 0x28
 8001990:	20dc      	movs	r0, #220	; 0xdc
 8001992:	f7ff f8bd 	bl	8000b10 <ILI9341_Draw_String>


	ILI9341_Draw_String(20, 40, WHITE, BLACK, itoa(get_rx_buffer(0), char_buffer, 10), 2);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fe02 	bl	80015a0 <get_rx_buffer>
 800199c:	4603      	mov	r3, r0
 800199e:	220a      	movs	r2, #10
 80019a0:	4931      	ldr	r1, [pc, #196]	; (8001a68 <DisplayStatusReg+0x15c>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f006 f936 	bl	8007c14 <itoa>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2202      	movs	r2, #2
 80019ac:	9201      	str	r2, [sp, #4]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b6:	2128      	movs	r1, #40	; 0x28
 80019b8:	2014      	movs	r0, #20
 80019ba:	f7ff f8a9 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(60, 40, WHITE, BLACK, itoa(get_rx_buffer(1), char_buffer, 10), 2);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fdee 	bl	80015a0 <get_rx_buffer>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220a      	movs	r2, #10
 80019c8:	4927      	ldr	r1, [pc, #156]	; (8001a68 <DisplayStatusReg+0x15c>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 f922 	bl	8007c14 <itoa>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2202      	movs	r2, #2
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019de:	2128      	movs	r1, #40	; 0x28
 80019e0:	203c      	movs	r0, #60	; 0x3c
 80019e2:	f7ff f895 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 40, WHITE, BLACK, itoa(get_rx_buffer(2), char_buffer, 10), 2);
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fdda 	bl	80015a0 <get_rx_buffer>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220a      	movs	r2, #10
 80019f0:	491d      	ldr	r1, [pc, #116]	; (8001a68 <DisplayStatusReg+0x15c>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f006 f90e 	bl	8007c14 <itoa>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2202      	movs	r2, #2
 80019fc:	9201      	str	r2, [sp, #4]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a06:	2128      	movs	r1, #40	; 0x28
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	f7ff f881 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(140, 40, WHITE, BLACK, itoa(get_rx_buffer(3), char_buffer, 10), 2);
 8001a0e:	2003      	movs	r0, #3
 8001a10:	f7ff fdc6 	bl	80015a0 <get_rx_buffer>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220a      	movs	r2, #10
 8001a18:	4913      	ldr	r1, [pc, #76]	; (8001a68 <DisplayStatusReg+0x15c>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 f8fa 	bl	8007c14 <itoa>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2202      	movs	r2, #2
 8001a24:	9201      	str	r2, [sp, #4]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2e:	2128      	movs	r1, #40	; 0x28
 8001a30:	208c      	movs	r0, #140	; 0x8c
 8001a32:	f7ff f86d 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 40, WHITE, BLACK, itoa(get_rx_buffer(4), char_buffer, 10), 2);
 8001a36:	2004      	movs	r0, #4
 8001a38:	f7ff fdb2 	bl	80015a0 <get_rx_buffer>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220a      	movs	r2, #10
 8001a40:	4909      	ldr	r1, [pc, #36]	; (8001a68 <DisplayStatusReg+0x15c>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f006 f8e6 	bl	8007c14 <itoa>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	9201      	str	r2, [sp, #4]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a56:	2128      	movs	r1, #40	; 0x28
 8001a58:	20b4      	movs	r0, #180	; 0xb4
 8001a5a:	f7ff f859 	bl	8000b10 <ILI9341_Draw_String>
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	08007d80 	.word	0x08007d80
 8001a68:	2000107c 	.word	0x2000107c

08001a6c <DisplayOK>:

void DisplayOK()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(260, 40, WHITE, BLACK, "OK", 2);
 8001a72:	2302      	movs	r3, #2
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <DisplayOK+0x24>)
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a80:	2128      	movs	r1, #40	; 0x28
 8001a82:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001a86:	f7ff f843 	bl	8000b10 <ILI9341_Draw_String>
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	08007d84 	.word	0x08007d84

08001a94 <ClearOK>:
{
	ILI9341_Draw_String(260, 40, WHITE, BLACK, "TO", 2);
}

void ClearOK()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(260, 40, WHITE, BLACK, "  ", 2);
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <ClearOK+0x24>)
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa8:	2128      	movs	r1, #40	; 0x28
 8001aaa:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001aae:	f7ff f82f 	bl	8000b10 <ILI9341_Draw_String>
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	08007d8c 	.word	0x08007d8c

08001abc <DisplayState>:

void DisplayState(char* string)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_String(80, 75, WHITE, BLACK, string, 2);
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	214b      	movs	r1, #75	; 0x4b
 8001ad4:	2050      	movs	r0, #80	; 0x50
 8001ad6:	f7ff f81b 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(190, 75, WHITE, BLACK, "      ", 2);
 8001ada:	2302      	movs	r3, #2
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <DisplayState+0x54>)
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae8:	214b      	movs	r1, #75	; 0x4b
 8001aea:	20be      	movs	r0, #190	; 0xbe
 8001aec:	f7ff f810 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(250, 75, WHITE, BLACK, "      ", 2);
 8001af0:	2302      	movs	r3, #2
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <DisplayState+0x54>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afe:	214b      	movs	r1, #75	; 0x4b
 8001b00:	20fa      	movs	r0, #250	; 0xfa
 8001b02:	f7ff f805 	bl	8000b10 <ILI9341_Draw_String>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	08007d90 	.word	0x08007d90

08001b14 <DisplayFirmwareDownloadStatus>:


void DisplayFirmwareDownloadStatus(uint32_t byte_cnt)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_String(190, 75, WHITE, BLACK, itoa(byte_cnt, char_buffer, 10), 2);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	220a      	movs	r2, #10
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <DisplayFirmwareDownloadStatus+0x34>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f006 f876 	bl	8007c14 <itoa>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b36:	214b      	movs	r1, #75	; 0x4b
 8001b38:	20be      	movs	r0, #190	; 0xbe
 8001b3a:	f7fe ffe9 	bl	8000b10 <ILI9341_Draw_String>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000107c 	.word	0x2000107c

08001b4c <DisplayFirmwareTotalSize>:

void DisplayFirmwareTotalSize(uint32_t byte_cnt)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_String(250, 75, WHITE, BLACK, itoa(byte_cnt, char_buffer, 10), 2);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	220a      	movs	r2, #10
 8001b58:	4909      	ldr	r1, [pc, #36]	; (8001b80 <DisplayFirmwareTotalSize+0x34>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f006 f85a 	bl	8007c14 <itoa>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2202      	movs	r2, #2
 8001b64:	9201      	str	r2, [sp, #4]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	214b      	movs	r1, #75	; 0x4b
 8001b70:	20fa      	movs	r0, #250	; 0xfa
 8001b72:	f7fe ffcd 	bl	8000b10 <ILI9341_Draw_String>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000107c 	.word	0x2000107c

08001b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_DMA_Init+0x3c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <MX_DMA_Init+0x3c>)
 8001b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_DMA_Init+0x3c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	200f      	movs	r0, #15
 8001bac:	f001 f8cd 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bb0:	200f      	movs	r0, #15
 8001bb2:	f001 f8e6 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a64      	ldr	r2, [pc, #400]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <MX_GPIO_Init+0x1b0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2130      	movs	r1, #48	; 0x30
 8001c86:	483c      	ldr	r0, [pc, #240]	; (8001d78 <MX_GPIO_Init+0x1b4>)
 8001c88:	f001 fd4c 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c92:	483a      	ldr	r0, [pc, #232]	; (8001d7c <MX_GPIO_Init+0x1b8>)
 8001c94:	f001 fd46 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f24f 7180 	movw	r1, #63360	; 0xf780
 8001c9e:	4838      	ldr	r0, [pc, #224]	; (8001d80 <MX_GPIO_Init+0x1bc>)
 8001ca0:	f001 fd40 	bl	8003724 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2128      	movs	r1, #40	; 0x28
 8001ca8:	4836      	ldr	r0, [pc, #216]	; (8001d84 <MX_GPIO_Init+0x1c0>)
 8001caa:	f001 fd3b 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8001cae:	2310      	movs	r3, #16
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4831      	ldr	r0, [pc, #196]	; (8001d88 <MX_GPIO_Init+0x1c4>)
 8001cc2:	f001 fb93 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8001cc6:	2330      	movs	r3, #48	; 0x30
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4826      	ldr	r0, [pc, #152]	; (8001d78 <MX_GPIO_Init+0x1b4>)
 8001cde:	f001 fb85 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8001ce2:	2311      	movs	r3, #17
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4823      	ldr	r0, [pc, #140]	; (8001d84 <MX_GPIO_Init+0x1c0>)
 8001cf6:	f001 fb79 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8001cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	481a      	ldr	r0, [pc, #104]	; (8001d7c <MX_GPIO_Init+0x1b8>)
 8001d14:	f001 fb6a 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8001d18:	f24f 7380 	movw	r3, #63360	; 0xf780
 8001d1c:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4813      	ldr	r0, [pc, #76]	; (8001d80 <MX_GPIO_Init+0x1bc>)
 8001d32:	f001 fb5b 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001d36:	2340      	movs	r3, #64	; 0x40
 8001d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_GPIO_Init+0x1bc>)
 8001d4a:	f001 fb4f 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8001d4e:	2328      	movs	r3, #40	; 0x28
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_GPIO_Init+0x1c0>)
 8001d66:	f001 fb41 	bl	80033ec <HAL_GPIO_Init>

}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	; 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020000 	.word	0x40020000

08001d8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <MX_I2C1_Init+0x54>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_I2C1_Init+0x58>)
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_I2C1_Init+0x50>)
 8001dca:	f001 fcc5 	bl	8003758 <HAL_I2C_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dd4:	f000 fa0a 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000109c 	.word	0x2000109c
 8001de0:	40005400 	.word	0x40005400
 8001de4:	000186a0 	.word	0x000186a0

08001de8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <MX_I2C3_Init+0x54>)
 8001df0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_I2C3_Init+0x58>)
 8001df6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e26:	f001 fc97 	bl	8003758 <HAL_I2C_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e30:	f000 f9dc 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200010f0 	.word	0x200010f0
 8001e3c:	40005c00 	.word	0x40005c00
 8001e40:	000186a0 	.word	0x000186a0

08001e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_I2C_MspInit+0x148>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12c      	bne.n	8001ec0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a48      	ldr	r2, [pc, #288]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e86:	2312      	movs	r3, #18
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e92:	2304      	movs	r3, #4
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	483d      	ldr	r0, [pc, #244]	; (8001f94 <HAL_I2C_MspInit+0x150>)
 8001e9e:	f001 faa5 	bl	80033ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a39      	ldr	r2, [pc, #228]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001ebe:	e060      	b.n	8001f82 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <HAL_I2C_MspInit+0x154>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d15b      	bne.n	8001f82 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8001f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f08:	2312      	movs	r3, #18
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f14:	2304      	movs	r3, #4
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481f      	ldr	r0, [pc, #124]	; (8001f9c <HAL_I2C_MspInit+0x158>)
 8001f20:	f001 fa64 	bl	80033ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8001f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f2a:	2312      	movs	r3, #18
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f36:	2304      	movs	r3, #4
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4817      	ldr	r0, [pc, #92]	; (8001fa0 <HAL_I2C_MspInit+0x15c>)
 8001f42:	f001 fa53 	bl	80033ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_I2C_MspInit+0x14c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2048      	movs	r0, #72	; 0x48
 8001f68:	f000 feef 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001f6c:	2048      	movs	r0, #72	; 0x48
 8001f6e:	f000 ff08 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2049      	movs	r0, #73	; 0x49
 8001f78:	f000 fee7 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001f7c:	2049      	movs	r0, #73	; 0x49
 8001f7e:	f000 ff00 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40005c00 	.word	0x40005c00
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	led_number++;
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <Leds_Control_Blink+0x110>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <Leds_Control_Blink+0x110>)
 8001fb2:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <Leds_Control_Blink+0x110>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d102      	bne.n	8001fc2 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <Leds_Control_Blink+0x110>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <Leds_Control_Blink+0x110>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d86f      	bhi.n	80020ac <Leds_Control_Blink+0x108>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <Leds_Control_Blink+0x30>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08002017 	.word	0x08002017
 8001fdc:	08002049 	.word	0x08002049
 8001fe0:	0800207b 	.word	0x0800207b
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fea:	4833      	ldr	r0, [pc, #204]	; (80020b8 <Leds_Control_Blink+0x114>)
 8001fec:	f001 fb9a 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff6:	4830      	ldr	r0, [pc, #192]	; (80020b8 <Leds_Control_Blink+0x114>)
 8001ff8:	f001 fb94 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002002:	482d      	ldr	r0, [pc, #180]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002004:	f001 fb8e 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800200e:	482a      	ldr	r0, [pc, #168]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002010:	f001 fb88 	bl	8003724 <HAL_GPIO_WritePin>
		break;
 8002014:	e04b      	b.n	80020ae <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4826      	ldr	r0, [pc, #152]	; (80020b8 <Leds_Control_Blink+0x114>)
 800201e:	f001 fb81 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002028:	4823      	ldr	r0, [pc, #140]	; (80020b8 <Leds_Control_Blink+0x114>)
 800202a:	f001 fb7b 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002034:	4820      	ldr	r0, [pc, #128]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002036:	f001 fb75 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	481d      	ldr	r0, [pc, #116]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002042:	f001 fb6f 	bl	8003724 <HAL_GPIO_WritePin>
		break;
 8002046:	e032      	b.n	80020ae <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204e:	481a      	ldr	r0, [pc, #104]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002050:	f001 fb68 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800205a:	4817      	ldr	r0, [pc, #92]	; (80020b8 <Leds_Control_Blink+0x114>)
 800205c:	f001 fb62 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8002060:	2201      	movs	r2, #1
 8002062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002066:	4814      	ldr	r0, [pc, #80]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002068:	f001 fb5c 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002072:	4811      	ldr	r0, [pc, #68]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002074:	f001 fb56 	bl	8003724 <HAL_GPIO_WritePin>
		break;
 8002078:	e019      	b.n	80020ae <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <Leds_Control_Blink+0x114>)
 8002082:	f001 fb4f 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208c:	480a      	ldr	r0, [pc, #40]	; (80020b8 <Leds_Control_Blink+0x114>)
 800208e:	f001 fb49 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <Leds_Control_Blink+0x114>)
 800209a:	f001 fb43 	bl	8003724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <Leds_Control_Blink+0x114>)
 80020a6:	f001 fb3d 	bl	8003724 <HAL_GPIO_WritePin>
		break;
 80020aa:	e000      	b.n	80020ae <Leds_Control_Blink+0x10a>
	default:

		break;
 80020ac:	bf00      	nop
	}
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008
 80020b8:	40020c00 	.word	0x40020c00

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f000 fcd2 	bl	8002a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c4:	f000 f828 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c8:	f7ff fd7c 	bl	8001bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020cc:	f7ff fd5a 	bl	8001b84 <MX_DMA_Init>
  MX_I2C1_Init();
 80020d0:	f7ff fe5c 	bl	8001d8c <MX_I2C1_Init>
  MX_I2C3_Init();
 80020d4:	f7ff fe88 	bl	8001de8 <MX_I2C3_Init>
  MX_SPI1_Init();
 80020d8:	f000 f88e 	bl	80021f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80020dc:	f000 f8c2 	bl	8002264 <MX_SPI2_Init>
  MX_TIM3_Init();
 80020e0:	f000 fa60 	bl	80025a4 <MX_TIM3_Init>
  MX_UART5_Init();
 80020e4:	f000 fba2 	bl	800282c <MX_UART5_Init>
  MX_USART3_UART_Init();
 80020e8:	f000 fbca 	bl	8002880 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80020ec:	f000 fab4 	bl	8002658 <MX_TIM10_Init>
  MX_TIM11_Init();
 80020f0:	f000 fad6 	bl	80026a0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 80020f4:	4806      	ldr	r0, [pc, #24]	; (8002110 <main+0x54>)
 80020f6:	f004 fcfd 	bl	8006af4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <main+0x58>)
 80020fc:	f004 fcfa 	bl	8006af4 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8002100:	f7fe f9e4 	bl	80004cc <ILI9341_Init>
  DisplayMainScreen();
 8002104:	f7ff face 	bl	80016a4 <DisplayMainScreen>

  Si468x_init();
 8002108:	f7fe ffcc 	bl	80010a4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800210c:	e7fe      	b.n	800210c <main+0x50>
 800210e:	bf00      	nop
 8002110:	2000129c 	.word	0x2000129c
 8002114:	200012e4 	.word	0x200012e4

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	; 0x50
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f005 fd76 	bl	8007c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <SystemClock_Config+0xcc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <SystemClock_Config+0xcc>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <SystemClock_Config+0xcc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <SystemClock_Config+0xd0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <SystemClock_Config+0xd0>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <SystemClock_Config+0xd0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002174:	2301      	movs	r3, #1
 8002176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002188:	2304      	movs	r3, #4
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800218c:	23a0      	movs	r3, #160	; 0xa0
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002190:	2302      	movs	r3, #2
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002194:	2304      	movs	r3, #4
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	4618      	mov	r0, r3
 800219e:	f003 f8fb 	bl	8005398 <HAL_RCC_OscConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021a8:	f000 f820 	bl	80021ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ac:	230f      	movs	r3, #15
 80021ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2105      	movs	r1, #5
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fb5c 	bl	8005888 <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021d6:	f000 f809 	bl	80021ec <Error_Handler>
  }
}
 80021da:	bf00      	nop
 80021dc:	3750      	adds	r7, #80	; 0x50
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000

080021ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f0:	b672      	cpsid	i
}
 80021f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <Error_Handler+0x8>
	...

080021f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <MX_SPI1_Init+0x64>)
 80021fe:	4a18      	ldr	r2, [pc, #96]	; (8002260 <MX_SPI1_Init+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_SPI1_Init+0x64>)
 8002204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002208:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_SPI1_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_SPI1_Init+0x64>)
 8002224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002228:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_SPI1_Init+0x64>)
 800222c:	2218      	movs	r2, #24
 800222e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <MX_SPI1_Init+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_SPI1_Init+0x64>)
 8002244:	220a      	movs	r2, #10
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_SPI1_Init+0x64>)
 800224a:	f003 fd3d 	bl	8005cc8 <HAL_SPI_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002254:	f7ff ffca 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20001144 	.word	0x20001144
 8002260:	40013000 	.word	0x40013000

08002264 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_SPI2_Init+0x64>)
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <MX_SPI2_Init+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002274:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_SPI2_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_SPI2_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_SPI2_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_SPI2_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022b0:	220a      	movs	r2, #10
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_SPI2_Init+0x64>)
 80022b6:	f003 fd07 	bl	8005cc8 <HAL_SPI_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022c0:	f7ff ff94 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000119c 	.word	0x2000119c
 80022cc:	40003800 	.word	0x40003800

080022d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <HAL_SPI_MspInit+0x154>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12c      	bne.n	800234c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_SPI_MspInit+0x158>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <HAL_SPI_MspInit+0x158>)
 80022fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a44      	ldr	r2, [pc, #272]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 800232a:	23e0      	movs	r3, #224	; 0xe0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800233a:	2305      	movs	r3, #5
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4839      	ldr	r0, [pc, #228]	; (800242c <HAL_SPI_MspInit+0x15c>)
 8002346:	f001 f851 	bl	80033ec <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800234a:	e066      	b.n	800241a <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a37      	ldr	r2, [pc, #220]	; (8002430 <HAL_SPI_MspInit+0x160>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d161      	bne.n	800241a <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_SPI_MspInit+0x158>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a32      	ldr	r2, [pc, #200]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_SPI_MspInit+0x158>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_SPI_MspInit+0x158>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800238e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a0:	2305      	movs	r3, #5
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4822      	ldr	r0, [pc, #136]	; (8002434 <HAL_SPI_MspInit+0x164>)
 80023ac:	f001 f81e 	bl	80033ec <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023b2:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_SPI_MspInit+0x16c>)
 80023b4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023ee:	4812      	ldr	r0, [pc, #72]	; (8002438 <HAL_SPI_MspInit+0x168>)
 80023f0:	f000 fce2 	bl	8002db8 <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80023fa:	f7ff fef7 	bl	80021ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_SPI_MspInit+0x168>)
 8002402:	649a      	str	r2, [r3, #72]	; 0x48
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_SPI_MspInit+0x168>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	2024      	movs	r0, #36	; 0x24
 8002410:	f000 fc9b 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002414:	2024      	movs	r0, #36	; 0x24
 8002416:	f000 fcb4 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3730      	adds	r7, #48	; 0x30
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40013000 	.word	0x40013000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000
 8002430:	40003800 	.word	0x40003800
 8002434:	40020400 	.word	0x40020400
 8002438:	200011f4 	.word	0x200011f4
 800243c:	40026070 	.word	0x40026070

08002440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_MspInit+0x4c>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_MspInit+0x4c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_MspInit+0x4c>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_MspInit+0x4c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <NMI_Handler+0x4>

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f000 fb16 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA1_Stream4_IRQHandler+0x10>)
 80024ea:	f000 fd35 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200011f4 	.word	0x200011f4

080024f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024fe:	f004 fbb8 	bl	8006c72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000129c 	.word	0x2000129c

0800250c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002512:	f004 fbae 	bl	8006c72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200012e4 	.word	0x200012e4

08002520 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <SPI2_IRQHandler+0x10>)
 8002526:	f004 f847 	bl	80065b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000119c 	.word	0x2000119c

08002534 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <I2C3_EV_IRQHandler+0x10>)
 800253a:	f001 fa51 	bl	80039e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200010f0 	.word	0x200010f0

08002548 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <I2C3_ER_IRQHandler+0x10>)
 800254e:	f001 fbb8 	bl	8003cc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200010f0 	.word	0x200010f0

0800255c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 800256e:	f7ff fd19 	bl	8001fa4 <Leds_Control_Blink>

	}
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40014800 	.word	0x40014800

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]
 80025c2:	615a      	str	r2, [r3, #20]
 80025c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <MX_TIM3_Init+0xac>)
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <MX_TIM3_Init+0xb0>)
 80025ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <MX_TIM3_Init+0xac>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <MX_TIM3_Init+0xac>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <MX_TIM3_Init+0xac>)
 80025da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <MX_TIM3_Init+0xac>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_TIM3_Init+0xac>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025ec:	4818      	ldr	r0, [pc, #96]	; (8002650 <MX_TIM3_Init+0xac>)
 80025ee:	f004 faf1 	bl	8006bd4 <HAL_TIM_PWM_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025f8:	f7ff fdf8 	bl	80021ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002604:	f107 0320 	add.w	r3, r7, #32
 8002608:	4619      	mov	r1, r3
 800260a:	4811      	ldr	r0, [pc, #68]	; (8002650 <MX_TIM3_Init+0xac>)
 800260c:	f004 ff74 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002616:	f7ff fde9 	bl	80021ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261a:	2360      	movs	r3, #96	; 0x60
 800261c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2208      	movs	r2, #8
 800262e:	4619      	mov	r1, r3
 8002630:	4807      	ldr	r0, [pc, #28]	; (8002650 <MX_TIM3_Init+0xac>)
 8002632:	f004 fc27 	bl	8006e84 <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800263c:	f7ff fdd6 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <MX_TIM3_Init+0xac>)
 8002642:	f000 f8b9 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20001254 	.word	0x20001254
 8002654:	40000400 	.word	0x40000400

08002658 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_TIM10_Init+0x40>)
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <MX_TIM10_Init+0x44>)
 8002660:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <MX_TIM10_Init+0x40>)
 8002664:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002668:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_TIM10_Init+0x40>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_TIM10_Init+0x40>)
 8002672:	f240 2257 	movw	r2, #599	; 0x257
 8002676:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_TIM10_Init+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_TIM10_Init+0x40>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <MX_TIM10_Init+0x40>)
 8002686:	f004 f9e5 	bl	8006a54 <HAL_TIM_Base_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002690:	f7ff fdac 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000129c 	.word	0x2000129c
 800269c:	40014400 	.word	0x40014400

080026a0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <MX_TIM11_Init+0x44>)
 80026a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026ac:	f643 2297 	movw	r2, #14999	; 0x3a97
 80026b0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026ba:	f240 5213 	movw	r2, #1299	; 0x513
 80026be:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80026cc:	4804      	ldr	r0, [pc, #16]	; (80026e0 <MX_TIM11_Init+0x40>)
 80026ce:	f004 f9c1 	bl	8006a54 <HAL_TIM_Base_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80026d8:	f7ff fd88 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200012e4 	.word	0x200012e4
 80026e4:	40014800 	.word	0x40014800

080026e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <HAL_TIM_PWM_MspInit+0x3c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10d      	bne.n	8002716 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_TIM_PWM_MspInit+0x40>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_TIM_PWM_MspInit+0x40>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_TIM_PWM_MspInit+0x40>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40000400 	.word	0x40000400
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_TIM_Base_MspInit+0x80>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d116      	bne.n	800276c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_TIM_Base_MspInit+0x84>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_TIM_Base_MspInit+0x84>)
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_TIM_Base_MspInit+0x84>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2019      	movs	r0, #25
 8002760:	f000 faf3 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002764:	2019      	movs	r0, #25
 8002766:	f000 fb0c 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800276a:	e01a      	b.n	80027a2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <HAL_TIM_Base_MspInit+0x88>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d115      	bne.n	80027a2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_TIM_Base_MspInit+0x84>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_TIM_Base_MspInit+0x84>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_TIM_Base_MspInit+0x84>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	201a      	movs	r0, #26
 8002798:	f000 fad7 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800279c:	201a      	movs	r0, #26
 800279e:	f000 faf0 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40014400 	.word	0x40014400
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40014800 	.word	0x40014800

080027b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_TIM_MspPostInit+0x68>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11e      	bne.n	8002818 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_TIM_MspPostInit+0x6c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_TIM_MspPostInit+0x6c>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_TIM_MspPostInit+0x6c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 80027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002808:	2302      	movs	r3, #2
 800280a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4619      	mov	r1, r3
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <HAL_TIM_MspPostInit+0x70>)
 8002814:	f000 fdea 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40000400 	.word	0x40000400
 8002824:	40023800 	.word	0x40023800
 8002828:	40020800 	.word	0x40020800

0800282c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_UART5_Init+0x4c>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <MX_UART5_Init+0x50>)
 8002834:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_UART5_Init+0x4c>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_UART5_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_UART5_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_UART5_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_UART5_Init+0x4c>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_UART5_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_UART5_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_UART5_Init+0x4c>)
 8002864:	f004 fed8 	bl	8007618 <HAL_UART_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800286e:	f7ff fcbd 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000132c 	.word	0x2000132c
 800287c:	40005000 	.word	0x40005000

08002880 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <MX_USART3_UART_Init+0x50>)
 8002888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_USART3_UART_Init+0x4c>)
 80028b8:	f004 feae 	bl	8007618 <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028c2:	f7ff fc93 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20001370 	.word	0x20001370
 80028d0:	40004800 	.word	0x40004800

080028d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a42      	ldr	r2, [pc, #264]	; (80029fc <HAL_UART_MspInit+0x128>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d14b      	bne.n	800298e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a39      	ldr	r2, [pc, #228]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800294a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800295c:	2308      	movs	r3, #8
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	4827      	ldr	r0, [pc, #156]	; (8002a04 <HAL_UART_MspInit+0x130>)
 8002968:	f000 fd40 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800296c:	2304      	movs	r3, #4
 800296e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800297c:	2308      	movs	r3, #8
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4619      	mov	r1, r3
 8002986:	4820      	ldr	r0, [pc, #128]	; (8002a08 <HAL_UART_MspInit+0x134>)
 8002988:	f000 fd30 	bl	80033ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800298c:	e031      	b.n	80029f2 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_UART_MspInit+0x138>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d12c      	bne.n	80029f2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 80029a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_UART_MspInit+0x12c>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80029d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029e2:	2307      	movs	r3, #7
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029ee:	f000 fcfd 	bl	80033ec <HAL_GPIO_Init>
}
 80029f2:	bf00      	nop
 80029f4:	3730      	adds	r7, #48	; 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40005000 	.word	0x40005000
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40004800 	.word	0x40004800
 8002a10:	40020400 	.word	0x40020400

08002a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480d      	ldr	r0, [pc, #52]	; (8002a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a1a:	490e      	ldr	r1, [pc, #56]	; (8002a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a30:	4c0b      	ldr	r4, [pc, #44]	; (8002a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a3e:	f7ff fd9f 	bl	8002580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a42:	f005 f8ab 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a46:	f7ff fb39 	bl	80020bc <main>
  bx  lr    
 8002a4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002a58:	08009d60 	.word	0x08009d60
  ldr r2, =_sbss
 8002a5c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002a60:	200013b8 	.word	0x200013b8

08002a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_Init+0x40>)
 8002a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_Init+0x40>)
 8002a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_Init+0x40>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <HAL_Init+0x40>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a90:	2003      	movs	r0, #3
 8002a92:	f000 f94f 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a96:	200f      	movs	r0, #15
 8002a98:	f000 f808 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9c:	f7ff fcd0 	bl	8002440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x54>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x58>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f967 	bl	8002d9e <HAL_SYSTICK_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00e      	b.n	8002af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d80a      	bhi.n	8002af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f000 f92f 	bl	8002d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aec:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <HAL_InitTick+0x5c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	20000014 	.word	0x20000014
 8002b08:	20000010 	.word	0x20000010

08002b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x24>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_IncTick+0x24>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000014 	.word	0x20000014
 8002b30:	200013b4 	.word	0x200013b4

08002b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_GetTick+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	200013b4 	.word	0x200013b4

08002b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff ffee 	bl	8002b34 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d005      	beq.n	8002b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_Delay+0x44>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b72:	bf00      	nop
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d8f7      	bhi.n	8002b74 <HAL_Delay+0x28>
  {
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000014 	.word	0x20000014

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff29 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5c:	f7ff ff3e 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff ff8e 	bl	8002c88 <NVIC_EncodePriority>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff31 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffa2 	bl	8002cf0 <SysTick_Config>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff feb6 	bl	8002b34 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e099      	b.n	8002f08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df4:	e00f      	b.n	8002e16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df6:	f7ff fe9d 	bl	8002b34 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d908      	bls.n	8002e16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e078      	b.n	8002f08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e8      	bne.n	8002df6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_DMA_Init+0x158>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d117      	bne.n	8002eda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fa19 	bl	80032f4 <DMA_CheckFifoParam>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9d0 	bl	8003288 <DMA_CalcBaseAndBitshift>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	223f      	movs	r2, #63	; 0x3f
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	f010803f 	.word	0xf010803f

08002f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d004      	beq.n	8002f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00c      	b.n	8002f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f64:	4b8e      	ldr	r3, [pc, #568]	; (80031a0 <HAL_DMA_IRQHandler+0x248>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a8e      	ldr	r2, [pc, #568]	; (80031a4 <HAL_DMA_IRQHandler+0x24c>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2208      	movs	r2, #8
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d012      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	2204      	movs	r2, #4
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d012      	beq.n	8003030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	2204      	movs	r2, #4
 800301e:	409a      	lsls	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	2210      	movs	r2, #16
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d043      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d03c      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2210      	movs	r2, #16
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d024      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
 8003086:	e01f      	b.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e016      	b.n	80030c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0208 	bic.w	r2, r2, #8
 80030b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2220      	movs	r2, #32
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 808f 	beq.w	80031f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8087 	beq.w	80031f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2220      	movs	r2, #32
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d136      	bne.n	8003170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0216 	bic.w	r2, r2, #22
 8003110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_DMA_IRQHandler+0x1da>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0208 	bic.w	r2, r2, #8
 8003140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	223f      	movs	r2, #63	; 0x3f
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	2b00      	cmp	r3, #0
 8003164:	d07e      	beq.n	8003264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
        }
        return;
 800316e:	e079      	b.n	8003264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01d      	beq.n	80031ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	2b00      	cmp	r3, #0
 8003192:	d031      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e02c      	b.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c
 80031a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d023      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	e01e      	b.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10f      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0210 	bic.w	r2, r2, #16
 80031d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d032      	beq.n	8003266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d022      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2205      	movs	r2, #5
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3301      	adds	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	d307      	bcc.n	8003240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f2      	bne.n	8003224 <HAL_DMA_IRQHandler+0x2cc>
 800323e:	e000      	b.n	8003242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e000      	b.n	8003266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003264:	bf00      	nop
    }
  }
}
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3b10      	subs	r3, #16
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <DMA_CalcBaseAndBitshift+0x64>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DMA_CalcBaseAndBitshift+0x68>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d909      	bls.n	80032ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	1d1a      	adds	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58
 80032c8:	e007      	b.n	80032da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	aaaaaaab 	.word	0xaaaaaaab
 80032f0:	08009d20 	.word	0x08009d20

080032f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11f      	bne.n	800334e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d856      	bhi.n	80033c2 <DMA_CheckFifoParam+0xce>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <DMA_CheckFifoParam+0x28>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	0800332d 	.word	0x0800332d
 8003320:	0800333f 	.word	0x0800333f
 8003324:	0800332d 	.word	0x0800332d
 8003328:	080033c3 	.word	0x080033c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d046      	beq.n	80033c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e043      	b.n	80033c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003346:	d140      	bne.n	80033ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334c:	e03d      	b.n	80033ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d121      	bne.n	800339c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d837      	bhi.n	80033ce <DMA_CheckFifoParam+0xda>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <DMA_CheckFifoParam+0x70>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003375 	.word	0x08003375
 8003368:	0800337b 	.word	0x0800337b
 800336c:	08003375 	.word	0x08003375
 8003370:	0800338d 	.word	0x0800338d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e030      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d025      	beq.n	80033d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338a:	e022      	b.n	80033d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003394:	d11f      	bne.n	80033d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800339a:	e01c      	b.n	80033d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d903      	bls.n	80033aa <DMA_CheckFifoParam+0xb6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d003      	beq.n	80033b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033a8:	e018      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      break;
 80033ae:	e015      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      break;
 80033c0:	e00b      	b.n	80033da <DMA_CheckFifoParam+0xe6>
      break;
 80033c2:	bf00      	nop
 80033c4:	e00a      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e008      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e006      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e004      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;   
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
    }
  } 
  
  return status; 
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e16b      	b.n	80036e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 815a 	bne.w	80036da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d005      	beq.n	800343e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	2b02      	cmp	r3, #2
 800343c:	d130      	bne.n	80034a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	2203      	movs	r2, #3
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d017      	beq.n	80034dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d123      	bne.n	8003530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b4 	beq.w	80036da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <HAL_GPIO_Init+0x30c>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	4a5f      	ldr	r2, [pc, #380]	; (80036f8 <HAL_GPIO_Init+0x30c>)
 800357c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_GPIO_Init+0x30c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_GPIO_Init+0x310>)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a52      	ldr	r2, [pc, #328]	; (8003700 <HAL_GPIO_Init+0x314>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <HAL_GPIO_Init+0x226>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <HAL_GPIO_Init+0x318>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d025      	beq.n	800360e <HAL_GPIO_Init+0x222>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a50      	ldr	r2, [pc, #320]	; (8003708 <HAL_GPIO_Init+0x31c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <HAL_GPIO_Init+0x21e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4f      	ldr	r2, [pc, #316]	; (800370c <HAL_GPIO_Init+0x320>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_Init+0x21a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <HAL_GPIO_Init+0x324>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_Init+0x216>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_GPIO_Init+0x328>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_Init+0x212>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	; (8003718 <HAL_GPIO_Init+0x32c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_Init+0x20e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	; (800371c <HAL_GPIO_Init+0x330>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_Init+0x20a>
 80035f2:	2307      	movs	r3, #7
 80035f4:	e00e      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035f6:	2308      	movs	r3, #8
 80035f8:	e00c      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035fa:	2306      	movs	r3, #6
 80035fc:	e00a      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035fe:	2305      	movs	r3, #5
 8003600:	e008      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003602:	2304      	movs	r3, #4
 8003604:	e006      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003606:	2303      	movs	r3, #3
 8003608:	e004      	b.n	8003614 <HAL_GPIO_Init+0x228>
 800360a:	2302      	movs	r3, #2
 800360c:	e002      	b.n	8003614 <HAL_GPIO_Init+0x228>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003612:	2300      	movs	r3, #0
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f002 0203 	and.w	r2, r2, #3
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4093      	lsls	r3, r2
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003624:	4935      	ldr	r1, [pc, #212]	; (80036fc <HAL_GPIO_Init+0x310>)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003656:	4a32      	ldr	r2, [pc, #200]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800365c:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_GPIO_Init+0x334>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_GPIO_Init+0x334>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_GPIO_Init+0x334>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d4:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_GPIO_Init+0x334>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	f67f ae90 	bls.w	8003408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40013800 	.word	0x40013800
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00
 8003710:	40021000 	.word	0x40021000
 8003714:	40021400 	.word	0x40021400
 8003718:	40021800 	.word	0x40021800
 800371c:	40021c00 	.word	0x40021c00
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e12b      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fb60 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f002 fa5c 	bl	8005c78 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a81      	ldr	r2, [pc, #516]	; (80039cc <HAL_I2C_Init+0x274>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_I2C_Init+0x278>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_I2C_Init+0x27c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0e7      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a78      	ldr	r2, [pc, #480]	; (80039d8 <HAL_I2C_Init+0x280>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_I2C_Init+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a69      	ldr	r2, [pc, #420]	; (80039dc <HAL_I2C_Init+0x284>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	495c      	ldr	r1, [pc, #368]	; (80039cc <HAL_I2C_Init+0x274>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d819      	bhi.n	8003894 <HAL_I2C_Init+0x13c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003874:	400b      	ands	r3, r1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_I2C_Init+0x138>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e59      	subs	r1, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fbb1 f3f3 	udiv	r3, r1, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	e051      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003890:	2304      	movs	r3, #4
 8003892:	e04f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_I2C_Init+0x168>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e012      	b.n	80038e6 <HAL_I2C_Init+0x18e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x196>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <HAL_I2C_Init+0x1bc>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e58      	subs	r0, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	fbb0 f3f3 	udiv	r3, r0, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003912:	e00f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6911      	ldr	r1, [r2, #16]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	000186a0 	.word	0x000186a0
 80039d0:	001e847f 	.word	0x001e847f
 80039d4:	003d08ff 	.word	0x003d08ff
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d003      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0x38>
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	f040 80c1 	bne.w	8003b9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_I2C_EV_IRQHandler+0x6e>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a38:	d003      	beq.n	8003a42 <HAL_I2C_EV_IRQHandler+0x62>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a40:	d101      	bne.n	8003a46 <HAL_I2C_EV_IRQHandler+0x66>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_I2C_EV_IRQHandler+0x68>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f000 8132 	beq.w	8003cb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x92>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	0a5b      	lsrs	r3, r3, #9
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f001 fc7b 	bl	8005360 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fd83 	bl	8004576 <I2C_Master_SB>
 8003a70:	e092      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0xb2>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	0a5b      	lsrs	r3, r3, #9
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fdf9 	bl	8004682 <I2C_Master_ADD10>
 8003a90:	e082      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0xd2>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	0a5b      	lsrs	r3, r3, #9
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fe13 	bl	80046d6 <I2C_Master_ADDR>
 8003ab0:	e072      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03b      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	f000 80f3 	beq.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	09db      	lsrs	r3, r3, #7
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00f      	beq.n	8003afc <HAL_I2C_EV_IRQHandler+0x11c>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <HAL_I2C_EV_IRQHandler+0x11c>
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9f3 	bl	8003ee0 <I2C_MasterTransmit_TXE>
 8003afa:	e04d      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80d6 	beq.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	0a5b      	lsrs	r3, r3, #9
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80cf 	beq.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	2b21      	cmp	r3, #33	; 0x21
 8003b1c:	d103      	bne.n	8003b26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa7a 	bl	8004018 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b24:	e0c7      	b.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	f040 80c4 	bne.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fae8 	bl	8004104 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b34:	e0bf      	b.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b44:	f000 80b7 	beq.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00f      	beq.n	8003b74 <HAL_I2C_EV_IRQHandler+0x194>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	0a9b      	lsrs	r3, r3, #10
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_I2C_EV_IRQHandler+0x194>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb5d 	bl	800422c <I2C_MasterReceive_RXNE>
 8003b72:	e011      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 809a 	beq.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	0a5b      	lsrs	r3, r3, #9
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8093 	beq.w	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fc06 	bl	80043a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b96:	e08e      	b.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b98:	e08d      	b.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e007      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d012      	beq.n	8003bee <HAL_I2C_EV_IRQHandler+0x20e>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a5b      	lsrs	r3, r3, #9
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ffc4 	bl	8004b74 <I2C_Slave_ADDR>
 8003bec:	e066      	b.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x22e>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	0a5b      	lsrs	r3, r3, #9
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fffe 	bl	8004c08 <I2C_Slave_STOPF>
 8003c0c:	e056      	b.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c0e:	7bbb      	ldrb	r3, [r7, #14]
 8003c10:	2b21      	cmp	r3, #33	; 0x21
 8003c12:	d002      	beq.n	8003c1a <HAL_I2C_EV_IRQHandler+0x23a>
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	2b29      	cmp	r3, #41	; 0x29
 8003c18:	d125      	bne.n	8003c66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	09db      	lsrs	r3, r3, #7
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00f      	beq.n	8003c46 <HAL_I2C_EV_IRQHandler+0x266>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	0a9b      	lsrs	r3, r3, #10
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_I2C_EV_IRQHandler+0x266>
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 feda 	bl	80049f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c44:	e039      	b.n	8003cba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d033      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0x2da>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	0a5b      	lsrs	r3, r3, #9
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d02d      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 ff07 	bl	8004a72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c64:	e029      	b.n	8003cba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00f      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	0a9b      	lsrs	r3, r3, #10
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ff12 	bl	8004ab4 <I2C_SlaveReceive_RXNE>
 8003c90:	e014      	b.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	0a5b      	lsrs	r3, r3, #9
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 ff40 	bl	8004b30 <I2C_SlaveReceive_BTF>
 8003cb0:	e004      	b.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	; 0x28
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <HAL_I2C_ER_IRQHandler+0x4e>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0x78>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f043 0302 	orr.w	r3, r3, #2
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	0a9b      	lsrs	r3, r3, #10
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d03f      	beq.n	8003dc6 <HAL_I2C_ER_IRQHandler+0x104>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d039      	beq.n	8003dc6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003d52:	7efb      	ldrb	r3, [r7, #27]
 8003d54:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d6c:	7ebb      	ldrb	r3, [r7, #26]
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d112      	bne.n	8003d98 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10f      	bne.n	8003d98 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b21      	cmp	r3, #33	; 0x21
 8003d7c:	d008      	beq.n	8003d90 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b29      	cmp	r3, #41	; 0x29
 8003d82:	d005      	beq.n	8003d90 <HAL_I2C_ER_IRQHandler+0xce>
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b28      	cmp	r3, #40	; 0x28
 8003d88:	d106      	bne.n	8003d98 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b21      	cmp	r3, #33	; 0x21
 8003d8e:	d103      	bne.n	8003d98 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f001 f869 	bl	8004e68 <I2C_Slave_AF>
 8003d96:	e016      	b.n	8003dc6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003da0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003daa:	7efb      	ldrb	r3, [r7, #27]
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d002      	beq.n	8003db6 <HAL_I2C_ER_IRQHandler+0xf4>
 8003db0:	7efb      	ldrb	r3, [r7, #27]
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	0adb      	lsrs	r3, r3, #11
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00e      	beq.n	8003df0 <HAL_I2C_ER_IRQHandler+0x12e>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	f043 0308 	orr.w	r3, r3, #8
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003dee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 f8a0 	bl	8004f48 <I2C_ITError>
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d150      	bne.n	8003fa8 <I2C_MasterTransmit_TXE+0xc8>
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b21      	cmp	r3, #33	; 0x21
 8003f0a:	d14d      	bne.n	8003fa8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d01d      	beq.n	8003f4e <I2C_MasterTransmit_TXE+0x6e>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d01a      	beq.n	8003f4e <I2C_MasterTransmit_TXE+0x6e>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f1e:	d016      	beq.n	8003f4e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f2e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2211      	movs	r2, #17
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff62 	bl	8003e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f4c:	e060      	b.n	8004010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f5c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d107      	bne.n	8003f98 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff7d 	bl	8003e90 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f96:	e03b      	b.n	8004010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff35 	bl	8003e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa6:	e033      	b.n	8004010 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b21      	cmp	r3, #33	; 0x21
 8003fac:	d005      	beq.n	8003fba <I2C_MasterTransmit_TXE+0xda>
 8003fae:	7bbb      	ldrb	r3, [r7, #14]
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d12d      	bne.n	8004010 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b22      	cmp	r3, #34	; 0x22
 8003fb8:	d12a      	bne.n	8004010 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fd4:	e01c      	b.n	8004010 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d103      	bne.n	8003fea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f88e 	bl	8004104 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fe8:	e012      	b.n	8004010 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800400e:	e7ff      	b.n	8004010 <I2C_MasterTransmit_TXE+0x130>
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b21      	cmp	r3, #33	; 0x21
 8004030:	d164      	bne.n	80040fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004060:	e04c      	b.n	80040fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d01d      	beq.n	80040a4 <I2C_MasterTransmit_BTF+0x8c>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b20      	cmp	r3, #32
 800406c:	d01a      	beq.n	80040a4 <I2C_MasterTransmit_BTF+0x8c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004074:	d016      	beq.n	80040a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004084:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2211      	movs	r2, #17
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff feb7 	bl	8003e10 <HAL_I2C_MasterTxCpltCallback>
}
 80040a2:	e02b      	b.n	80040fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d107      	bne.n	80040ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fed2 	bl	8003e90 <HAL_I2C_MemTxCpltCallback>
}
 80040ec:	e006      	b.n	80040fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fe8a 	bl	8003e10 <HAL_I2C_MasterTxCpltCallback>
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11d      	bne.n	8004158 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10b      	bne.n	800413c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	b2da      	uxtb	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800413a:	e073      	b.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	b29b      	uxth	r3, r3
 8004142:	121b      	asrs	r3, r3, #8
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004156:	e065      	b.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10b      	bne.n	8004178 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	b2da      	uxtb	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004176:	e055      	b.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	2b02      	cmp	r3, #2
 800417e:	d151      	bne.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b22      	cmp	r3, #34	; 0x22
 8004184:	d10d      	bne.n	80041a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004194:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041a0:	e040      	b.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b21      	cmp	r3, #33	; 0x21
 80041b0:	d112      	bne.n	80041d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041d6:	e025      	b.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d120      	bne.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b21      	cmp	r3, #33	; 0x21
 80041e6:	d11d      	bne.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe36 	bl	8003e90 <HAL_I2C_MemTxCpltCallback>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b22      	cmp	r3, #34	; 0x22
 800423e:	f040 80ac 	bne.w	800439a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d921      	bls.n	8004294 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b03      	cmp	r3, #3
 800427e:	f040 808c 	bne.w	800439a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004292:	e082      	b.n	800439a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	2b02      	cmp	r3, #2
 800429a:	d075      	beq.n	8004388 <I2C_MasterReceive_RXNE+0x15c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d002      	beq.n	80042a8 <I2C_MasterReceive_RXNE+0x7c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d16f      	bne.n	8004388 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 f827 	bl	80052fc <I2C_WaitOnSTOPRequestThroughIT>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d142      	bne.n	800433a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d10a      	bne.n	8004324 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff fdc1 	bl	8003ea4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004322:	e03a      	b.n	800439a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2212      	movs	r2, #18
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff fd76 	bl	8003e24 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004338:	e02f      	b.n	800439a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004348:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fd99 	bl	8003eb8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004386:	e008      	b.n	800439a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004396:	605a      	str	r2, [r3, #4]
}
 8004398:	e7ff      	b.n	800439a <I2C_MasterReceive_RXNE+0x16e>
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d11b      	bne.n	80043f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80043f0:	e0bd      	b.n	800456e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d129      	bne.n	8004450 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d00a      	beq.n	8004428 <I2C_MasterReceive_BTF+0x86>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d007      	beq.n	8004428 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004426:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800444e:	e08e      	b.n	800456e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d176      	bne.n	8004548 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d002      	beq.n	8004466 <I2C_MasterReceive_BTF+0xc4>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b10      	cmp	r3, #16
 8004464:	d108      	bne.n	8004478 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e019      	b.n	80044ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d002      	beq.n	8004484 <I2C_MasterReceive_BTF+0xe2>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d108      	bne.n	8004496 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e00a      	b.n	80044ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b10      	cmp	r3, #16
 800449a:	d007      	beq.n	80044ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004506:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d10a      	bne.n	8004532 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fcba 	bl	8003ea4 <HAL_I2C_MemRxCpltCallback>
}
 8004530:	e01d      	b.n	800456e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2212      	movs	r2, #18
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fc6f 	bl	8003e24 <HAL_I2C_MasterRxCpltCallback>
}
 8004546:	e012      	b.n	800456e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d117      	bne.n	80045ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045a4:	e067      	b.n	8004676 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]
}
 80045b8:	e05d      	b.n	8004676 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c2:	d133      	bne.n	800462c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b21      	cmp	r3, #33	; 0x21
 80045ce:	d109      	bne.n	80045e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045e0:	611a      	str	r2, [r3, #16]
 80045e2:	e008      	b.n	80045f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <I2C_Master_SB+0x92>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d108      	bne.n	800461a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d032      	beq.n	8004676 <I2C_Master_SB+0x100>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d02d      	beq.n	8004676 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004628:	605a      	str	r2, [r3, #4]
}
 800462a:	e024      	b.n	8004676 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10e      	bne.n	8004652 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	b29b      	uxth	r3, r3
 800463a:	11db      	asrs	r3, r3, #7
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0306 	and.w	r3, r3, #6
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f063 030f 	orn	r3, r3, #15
 8004648:	b2da      	uxtb	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]
}
 8004650:	e011      	b.n	8004676 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004656:	2b01      	cmp	r3, #1
 8004658:	d10d      	bne.n	8004676 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	b29b      	uxth	r3, r3
 8004660:	11db      	asrs	r3, r3, #7
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0306 	and.w	r3, r3, #6
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f063 030e 	orn	r3, r3, #14
 800466e:	b2da      	uxtb	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	611a      	str	r2, [r3, #16]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	b2da      	uxtb	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <I2C_Master_ADD10+0x26>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <I2C_Master_ADD10+0x48>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	605a      	str	r2, [r3, #4]
  }
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b091      	sub	sp, #68	; 0x44
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b22      	cmp	r3, #34	; 0x22
 80046fe:	f040 8169 	bne.w	80049d4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <I2C_Master_ADDR+0x54>
 800470a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d10b      	bne.n	800472a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004712:	2300      	movs	r3, #0
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	633b      	str	r3, [r7, #48]	; 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	633b      	str	r3, [r7, #48]	; 0x30
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	e160      	b.n	80049ec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11d      	bne.n	800476e <I2C_Master_ADDR+0x98>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800473a:	d118      	bne.n	800476e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004760:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	651a      	str	r2, [r3, #80]	; 0x50
 800476c:	e13e      	b.n	80049ec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d113      	bne.n	80047a0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e115      	b.n	80049cc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f040 808a 	bne.w	80048c0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b2:	d137      	bne.n	8004824 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d2:	d113      	bne.n	80047fc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	e0e7      	b.n	80049cc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fc:	2300      	movs	r3, #0
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	623b      	str	r3, [r7, #32]
 8004810:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e0d3      	b.n	80049cc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	2b08      	cmp	r3, #8
 8004828:	d02e      	beq.n	8004888 <I2C_Master_ADDR+0x1b2>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	2b20      	cmp	r3, #32
 800482e:	d02b      	beq.n	8004888 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	2b12      	cmp	r3, #18
 8004834:	d102      	bne.n	800483c <I2C_Master_ADDR+0x166>
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	2b01      	cmp	r3, #1
 800483a:	d125      	bne.n	8004888 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	2b04      	cmp	r3, #4
 8004840:	d00e      	beq.n	8004860 <I2C_Master_ADDR+0x18a>
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b02      	cmp	r3, #2
 8004846:	d00b      	beq.n	8004860 <I2C_Master_ADDR+0x18a>
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	2b10      	cmp	r3, #16
 800484c:	d008      	beq.n	8004860 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e007      	b.n	8004870 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800486e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	e0a1      	b.n	80049cc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004896:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e085      	b.n	80049cc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d14d      	bne.n	8004966 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d016      	beq.n	80048fe <I2C_Master_ADDR+0x228>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d013      	beq.n	80048fe <I2C_Master_ADDR+0x228>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d010      	beq.n	80048fe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800490c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d117      	bne.n	800494e <I2C_Master_ADDR+0x278>
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004924:	d00b      	beq.n	800493e <I2C_Master_ADDR+0x268>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b01      	cmp	r3, #1
 800492a:	d008      	beq.n	800493e <I2C_Master_ADDR+0x268>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	2b08      	cmp	r3, #8
 8004930:	d005      	beq.n	800493e <I2C_Master_ADDR+0x268>
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b10      	cmp	r3, #16
 8004936:	d002      	beq.n	800493e <I2C_Master_ADDR+0x268>
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	2b20      	cmp	r3, #32
 800493c:	d107      	bne.n	800494e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	e032      	b.n	80049cc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004984:	d117      	bne.n	80049b6 <I2C_Master_ADDR+0x2e0>
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800498c:	d00b      	beq.n	80049a6 <I2C_Master_ADDR+0x2d0>
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2b01      	cmp	r3, #1
 8004992:	d008      	beq.n	80049a6 <I2C_Master_ADDR+0x2d0>
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b08      	cmp	r3, #8
 8004998:	d005      	beq.n	80049a6 <I2C_Master_ADDR+0x2d0>
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b10      	cmp	r3, #16
 800499e:	d002      	beq.n	80049a6 <I2C_Master_ADDR+0x2d0>
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d107      	bne.n	80049b6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80049d2:	e00b      	b.n	80049ec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
}
 80049ea:	e7ff      	b.n	80049ec <I2C_Master_ADDR+0x316>
 80049ec:	bf00      	nop
 80049ee:	3744      	adds	r7, #68	; 0x44
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02b      	beq.n	8004a6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d114      	bne.n	8004a6a <I2C_SlaveTransmit_TXE+0x72>
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b29      	cmp	r3, #41	; 0x29
 8004a44:	d111      	bne.n	8004a6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2221      	movs	r2, #33	; 0x21
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2228      	movs	r2, #40	; 0x28
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff f9e7 	bl	8003e38 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d011      	beq.n	8004aa8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02c      	beq.n	8004b28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d114      	bne.n	8004b28 <I2C_SlaveReceive_RXNE+0x74>
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b2a      	cmp	r3, #42	; 0x2a
 8004b02:	d111      	bne.n	8004b28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2222      	movs	r2, #34	; 0x22
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2228      	movs	r2, #40	; 0x28
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff f992 	bl	8003e4c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b8e:	2b28      	cmp	r3, #40	; 0x28
 8004b90:	d127      	bne.n	8004be2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	09db      	lsrs	r3, r3, #7
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	81bb      	strh	r3, [r7, #12]
 8004bc4:	e002      	b.n	8004bcc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004bd4:	89ba      	ldrh	r2, [r7, #12]
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff f940 	bl	8003e60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004be0:	e00e      	b.n	8004c00 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c64:	d172      	bne.n	8004d4c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b22      	cmp	r3, #34	; 0x22
 8004c6a:	d002      	beq.n	8004c72 <I2C_Slave_STOPF+0x6a>
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c70:	d135      	bne.n	8004cde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fade 	bl	800326c <HAL_DMA_GetState>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d049      	beq.n	8004d4a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	4a69      	ldr	r2, [pc, #420]	; (8004e60 <I2C_Slave_STOPF+0x258>)
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe f926 	bl	8002f14 <HAL_DMA_Abort_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d03d      	beq.n	8004d4a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cdc:	e035      	b.n	8004d4a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0204 	orr.w	r2, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe faa8 	bl	800326c <HAL_DMA_GetState>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d014      	beq.n	8004d4c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d26:	4a4e      	ldr	r2, [pc, #312]	; (8004e60 <I2C_Slave_STOPF+0x258>)
 8004d28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe f8f0 	bl	8002f14 <HAL_DMA_Abort_IT>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d44:	4610      	mov	r0, r2
 8004d46:	4798      	blx	r3
 8004d48:	e000      	b.n	8004d4c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d4a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03e      	beq.n	8004dd4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d112      	bne.n	8004d8a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d112      	bne.n	8004dbe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	f043 0204 	orr.w	r2, r3, #4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8b3 	bl	8004f48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004de2:	e039      	b.n	8004e58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b2a      	cmp	r3, #42	; 0x2a
 8004de8:	d109      	bne.n	8004dfe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2228      	movs	r2, #40	; 0x28
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff f827 	bl	8003e4c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b28      	cmp	r3, #40	; 0x28
 8004e08:	d111      	bne.n	8004e2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <I2C_Slave_STOPF+0x25c>)
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff f828 	bl	8003e7c <HAL_I2C_ListenCpltCallback>
}
 8004e2c:	e014      	b.n	8004e58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	2b22      	cmp	r3, #34	; 0x22
 8004e34:	d002      	beq.n	8004e3c <I2C_Slave_STOPF+0x234>
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b22      	cmp	r3, #34	; 0x22
 8004e3a:	d10d      	bne.n	8004e58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fe fffa 	bl	8003e4c <HAL_I2C_SlaveRxCpltCallback>
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	080051ad 	.word	0x080051ad
 8004e64:	ffff0000 	.word	0xffff0000

08004e68 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d002      	beq.n	8004e8a <I2C_Slave_AF+0x22>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d129      	bne.n	8004ede <I2C_Slave_AF+0x76>
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b28      	cmp	r3, #40	; 0x28
 8004e8e:	d126      	bne.n	8004ede <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <I2C_Slave_AF+0xdc>)
 8004e94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fe ffd0 	bl	8003e7c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004edc:	e02e      	b.n	8004f3c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b21      	cmp	r3, #33	; 0x21
 8004ee2:	d126      	bne.n	8004f32 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <I2C_Slave_AF+0xdc>)
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2221      	movs	r2, #33	; 0x21
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f0e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f18:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f28:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fe ff84 	bl	8003e38 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f30:	e004      	b.n	8004f3c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f3a:	615a      	str	r2, [r3, #20]
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	ffff0000 	.word	0xffff0000

08004f48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d002      	beq.n	8004f6c <I2C_ITError+0x24>
 8004f66:	7bbb      	ldrb	r3, [r7, #14]
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d10a      	bne.n	8004f82 <I2C_ITError+0x3a>
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b22      	cmp	r3, #34	; 0x22
 8004f70:	d107      	bne.n	8004f82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f88:	2b28      	cmp	r3, #40	; 0x28
 8004f8a:	d107      	bne.n	8004f9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2228      	movs	r2, #40	; 0x28
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f9a:	e015      	b.n	8004fc8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d00a      	beq.n	8004fc2 <I2C_ITError+0x7a>
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b60      	cmp	r3, #96	; 0x60
 8004fb0:	d007      	beq.n	8004fc2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd6:	d162      	bne.n	800509e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d020      	beq.n	8005038 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	4a6a      	ldr	r2, [pc, #424]	; (80051a4 <I2C_ITError+0x25c>)
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd ff86 	bl	8002f14 <HAL_DMA_Abort_IT>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8089 	beq.w	8005122 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005032:	4610      	mov	r0, r2
 8005034:	4798      	blx	r3
 8005036:	e074      	b.n	8005122 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	4a59      	ldr	r2, [pc, #356]	; (80051a4 <I2C_ITError+0x25c>)
 800503e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	4618      	mov	r0, r3
 8005046:	f7fd ff65 	bl	8002f14 <HAL_DMA_Abort_IT>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d068      	beq.n	8005122 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d10b      	bne.n	8005076 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005098:	4610      	mov	r0, r2
 800509a:	4798      	blx	r3
 800509c:	e041      	b.n	8005122 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b60      	cmp	r3, #96	; 0x60
 80050a8:	d125      	bne.n	80050f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d10b      	bne.n	80050de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fe feec 	bl	8003ecc <HAL_I2C_AbortCpltCallback>
 80050f4:	e015      	b.n	8005122 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d10b      	bne.n	800511c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fe fecb 	bl	8003eb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10e      	bne.n	8005150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d113      	bne.n	800519c <I2C_ITError+0x254>
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b28      	cmp	r3, #40	; 0x28
 8005178:	d110      	bne.n	800519c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <I2C_ITError+0x260>)
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fe fe70 	bl	8003e7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	080051ad 	.word	0x080051ad
 80051a8:	ffff0000 	.word	0xffff0000

080051ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051c6:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <I2C_DMAAbort+0x148>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	08db      	lsrs	r3, r3, #3
 80051cc:	4a4a      	ldr	r2, [pc, #296]	; (80052f8 <I2C_DMAAbort+0x14c>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	0a1a      	lsrs	r2, r3, #8
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	00da      	lsls	r2, r3, #3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051f2:	e00a      	b.n	800520a <I2C_DMAAbort+0x5e>
    }
    count--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005208:	d0ea      	beq.n	80051e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	2200      	movs	r2, #0
 8005218:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	2200      	movs	r2, #0
 8005228:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005238:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2200      	movs	r2, #0
 800523e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	2200      	movs	r2, #0
 800524e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	2200      	movs	r2, #0
 800525e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d10e      	bne.n	800529a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005292:	6978      	ldr	r0, [r7, #20]
 8005294:	f7fe fe1a 	bl	8003ecc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005298:	e027      	b.n	80052ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052a0:	2b28      	cmp	r3, #40	; 0x28
 80052a2:	d117      	bne.n	80052d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2228      	movs	r2, #40	; 0x28
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052d2:	e007      	b.n	80052e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052e4:	6978      	ldr	r0, [r7, #20]
 80052e6:	f7fe fde7 	bl	8003eb8 <HAL_I2C_ErrorCallback>
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
 80052f8:	14f8b589 	.word	0x14f8b589

080052fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	0a1a      	lsrs	r2, r3, #8
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b01      	subs	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e008      	b.n	800534c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d0e9      	beq.n	800531e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	2000000c 	.word	0x2000000c
 800535c:	14f8b589 	.word	0x14f8b589

08005360 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005370:	d103      	bne.n	800537a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005378:	e007      	b.n	800538a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005382:	d102      	bne.n	800538a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2208      	movs	r2, #8
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e267      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d075      	beq.n	80054a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b6:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d00c      	beq.n	80053dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d112      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ce:	4b82      	ldr	r3, [pc, #520]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053da:	d10b      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05b      	beq.n	80054a0 <HAL_RCC_OscConfig+0x108>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d157      	bne.n	80054a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e242      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d106      	bne.n	800540c <HAL_RCC_OscConfig+0x74>
 80053fe:	4b76      	ldr	r3, [pc, #472]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a75      	ldr	r2, [pc, #468]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e01d      	b.n	8005448 <HAL_RCC_OscConfig+0xb0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005414:	d10c      	bne.n	8005430 <HAL_RCC_OscConfig+0x98>
 8005416:	4b70      	ldr	r3, [pc, #448]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6f      	ldr	r2, [pc, #444]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800541c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6c      	ldr	r2, [pc, #432]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e00b      	b.n	8005448 <HAL_RCC_OscConfig+0xb0>
 8005430:	4b69      	ldr	r3, [pc, #420]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a68      	ldr	r2, [pc, #416]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	4b66      	ldr	r3, [pc, #408]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a65      	ldr	r2, [pc, #404]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d013      	beq.n	8005478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd fb70 	bl	8002b34 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fd fb6c 	bl	8002b34 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e207      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546a:	4b5b      	ldr	r3, [pc, #364]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0xc0>
 8005476:	e014      	b.n	80054a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fd fb5c 	bl	8002b34 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005480:	f7fd fb58 	bl	8002b34 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	; 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e1f3      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	4b51      	ldr	r3, [pc, #324]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0xe8>
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d063      	beq.n	8005576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ae:	4b4a      	ldr	r3, [pc, #296]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d11c      	bne.n	8005500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d116      	bne.n	8005500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d2:	4b41      	ldr	r3, [pc, #260]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_RCC_OscConfig+0x152>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e1c7      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4937      	ldr	r1, [pc, #220]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fe:	e03a      	b.n	8005576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005508:	4b34      	ldr	r3, [pc, #208]	; (80055dc <HAL_RCC_OscConfig+0x244>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fd fb11 	bl	8002b34 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005516:	f7fd fb0d 	bl	8002b34 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1a8      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005528:	4b2b      	ldr	r3, [pc, #172]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b28      	ldr	r3, [pc, #160]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4925      	ldr	r1, [pc, #148]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
 8005548:	e015      	b.n	8005576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_RCC_OscConfig+0x244>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd faf0 	bl	8002b34 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005558:	f7fd faec 	bl	8002b34 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e187      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d036      	beq.n	80055f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <HAL_RCC_OscConfig+0x248>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fd fad0 	bl	8002b34 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005598:	f7fd facc 	bl	8002b34 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e167      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80055ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x200>
 80055b6:	e01b      	b.n	80055f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_OscConfig+0x248>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fd fab9 	bl	8002b34 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c4:	e00e      	b.n	80055e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fd fab5 	bl	8002b34 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d907      	bls.n	80055e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e150      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
 80055d8:	40023800 	.word	0x40023800
 80055dc:	42470000 	.word	0x42470000
 80055e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e4:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80055e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ea      	bne.n	80055c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8097 	beq.w	800572c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005602:	4b81      	ldr	r3, [pc, #516]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	4b7d      	ldr	r3, [pc, #500]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	4a7c      	ldr	r2, [pc, #496]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	; 0x40
 800561e:	4b7a      	ldr	r3, [pc, #488]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	4b77      	ldr	r3, [pc, #476]	; (800580c <HAL_RCC_OscConfig+0x474>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563a:	4b74      	ldr	r3, [pc, #464]	; (800580c <HAL_RCC_OscConfig+0x474>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a73      	ldr	r2, [pc, #460]	; (800580c <HAL_RCC_OscConfig+0x474>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fd fa75 	bl	8002b34 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fd fa71 	bl	8002b34 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e10c      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	4b6a      	ldr	r3, [pc, #424]	; (800580c <HAL_RCC_OscConfig+0x474>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <HAL_RCC_OscConfig+0x2ea>
 8005674:	4b64      	ldr	r3, [pc, #400]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a63      	ldr	r2, [pc, #396]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
 8005680:	e01c      	b.n	80056bc <HAL_RCC_OscConfig+0x324>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b05      	cmp	r3, #5
 8005688:	d10c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x30c>
 800568a:	4b5f      	ldr	r3, [pc, #380]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005690:	f043 0304 	orr.w	r3, r3, #4
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
 8005696:	4b5c      	ldr	r3, [pc, #368]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	e00b      	b.n	80056bc <HAL_RCC_OscConfig+0x324>
 80056a4:	4b58      	ldr	r3, [pc, #352]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a57      	ldr	r2, [pc, #348]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
 80056b0:	4b55      	ldr	r3, [pc, #340]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a54      	ldr	r2, [pc, #336]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 0304 	bic.w	r3, r3, #4
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fd fa36 	bl	8002b34 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fd fa32 	bl	8002b34 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0cb      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e2:	4b49      	ldr	r3, [pc, #292]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RCC_OscConfig+0x334>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fd fa20 	bl	8002b34 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7fd fa1c 	bl	8002b34 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0b5      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570e:	4b3e      	ldr	r3, [pc, #248]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1ee      	bne.n	80056f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d105      	bne.n	800572c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	4a38      	ldr	r2, [pc, #224]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a1 	beq.w	8005878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005736:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b08      	cmp	r3, #8
 8005740:	d05c      	beq.n	80057fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d141      	bne.n	80057ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_OscConfig+0x478>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fd f9f0 	bl	8002b34 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005758:	f7fd f9ec 	bl	8002b34 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e087      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	4b27      	ldr	r3, [pc, #156]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69da      	ldr	r2, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	019b      	lsls	r3, r3, #6
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	3b01      	subs	r3, #1
 8005790:	041b      	lsls	r3, r3, #16
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	061b      	lsls	r3, r3, #24
 800579a:	491b      	ldr	r1, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <HAL_RCC_OscConfig+0x478>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fd f9c5 	bl	8002b34 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fd f9c1 	bl	8002b34 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e05c      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x416>
 80057cc:	e054      	b.n	8005878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_RCC_OscConfig+0x478>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fd f9ae 	bl	8002b34 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fd f9aa 	bl	8002b34 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e045      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x444>
 80057fa:	e03d      	b.n	8005878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e038      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
 8005808:	40023800 	.word	0x40023800
 800580c:	40007000 	.word	0x40007000
 8005810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x4ec>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d028      	beq.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d121      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d11a      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d107      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800

08005888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0cc      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b68      	ldr	r3, [pc, #416]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d90c      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0b8      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058dc:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4a52      	ldr	r2, [pc, #328]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	494d      	ldr	r1, [pc, #308]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d044      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d107      	bne.n	8005936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005926:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e07f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d003      	beq.n	8005946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	2b03      	cmp	r3, #3
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e06f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005956:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e067      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 0203 	bic.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4934      	ldr	r1, [pc, #208]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005978:	f7fd f8dc 	bl	8002b34 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fd f8d8 	bl	8002b34 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e04f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 020c 	and.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d1eb      	bne.n	8005980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d20c      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e032      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4916      	ldr	r1, [pc, #88]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	490e      	ldr	r1, [pc, #56]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a0e:	f000 f821 	bl	8005a54 <HAL_RCC_GetSysClockFreq>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	490a      	ldr	r1, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x1c0>)
 8005a20:	5ccb      	ldrb	r3, [r1, r3]
 8005a22:	fa22 f303 	lsr.w	r3, r2, r3
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fd f83c 	bl	8002aac <HAL_InitTick>

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023c00 	.word	0x40023c00
 8005a44:	40023800 	.word	0x40023800
 8005a48:	08009d08 	.word	0x08009d08
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	20000010 	.word	0x20000010

08005a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a58:	b094      	sub	sp, #80	; 0x50
 8005a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a60:	2300      	movs	r3, #0
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	2300      	movs	r3, #0
 8005a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a6c:	4b79      	ldr	r3, [pc, #484]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 030c 	and.w	r3, r3, #12
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d00d      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x40>
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	f200 80e1 	bhi.w	8005c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x34>
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d003      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a86:	e0db      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a88:	4b73      	ldr	r3, [pc, #460]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a8c:	e0db      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8e:	4b73      	ldr	r3, [pc, #460]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8005a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a92:	e0d8      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a94:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a9e:	4b6d      	ldr	r3, [pc, #436]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d063      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aaa:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	0159      	lsls	r1, r3, #5
 8005ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad8:	0150      	lsls	r0, r2, #5
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4621      	mov	r1, r4
 8005ae0:	1a51      	subs	r1, r2, r1
 8005ae2:	6139      	str	r1, [r7, #16]
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af8:	4659      	mov	r1, fp
 8005afa:	018b      	lsls	r3, r1, #6
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b02:	4651      	mov	r1, sl
 8005b04:	018a      	lsls	r2, r1, #6
 8005b06:	4651      	mov	r1, sl
 8005b08:	ebb2 0801 	subs.w	r8, r2, r1
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b26:	4690      	mov	r8, r2
 8005b28:	4699      	mov	r9, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	eb18 0303 	adds.w	r3, r8, r3
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	462b      	mov	r3, r5
 8005b34:	eb49 0303 	adc.w	r3, r9, r3
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b46:	4629      	mov	r1, r5
 8005b48:	024b      	lsls	r3, r1, #9
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b50:	4621      	mov	r1, r4
 8005b52:	024a      	lsls	r2, r1, #9
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b64:	f7fa fb30 	bl	80001c8 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b70:	e058      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b72:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
 8005b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	f04f 0000 	mov.w	r0, #0
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	0159      	lsls	r1, r3, #5
 8005b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9e:	0150      	lsls	r0, r2, #5
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005baa:	4649      	mov	r1, r9
 8005bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	00eb      	lsls	r3, r5, #3
 8005bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bda:	00e2      	lsls	r2, r4, #3
 8005bdc:	4614      	mov	r4, r2
 8005bde:	461d      	mov	r5, r3
 8005be0:	4643      	mov	r3, r8
 8005be2:	18e3      	adds	r3, r4, r3
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	464b      	mov	r3, r9
 8005be8:	eb45 0303 	adc.w	r3, r5, r3
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	028b      	lsls	r3, r1, #10
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c04:	4621      	mov	r1, r4
 8005c06:	028a      	lsls	r2, r1, #10
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0e:	2200      	movs	r2, #0
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	61fa      	str	r2, [r7, #28]
 8005c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c18:	f7fa fad6 	bl	80001c8 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4613      	mov	r3, r2
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3e:	e002      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3750      	adds	r7, #80	; 0x50
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	007a1200 	.word	0x007a1200

08005c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c64:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c66:	681b      	ldr	r3, [r3, #0]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c

08005c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c7c:	f7ff fff0 	bl	8005c60 <HAL_RCC_GetHCLKFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	0a9b      	lsrs	r3, r3, #10
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	4903      	ldr	r1, [pc, #12]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	08009d18 	.word	0x08009d18

08005ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ca4:	f7ff ffdc 	bl	8005c60 <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0b5b      	lsrs	r3, r3, #13
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4903      	ldr	r1, [pc, #12]	; (8005cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	08009d18 	.word	0x08009d18

08005cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e07b      	b.n	8005dd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d108      	bne.n	8005cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cea:	d009      	beq.n	8005d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
 8005cf2:	e005      	b.n	8005d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fc fad8 	bl	80022d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	ea42 0103 	orr.w	r1, r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	f003 0104 	and.w	r1, r3, #4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	f003 0210 	and.w	r2, r3, #16
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b088      	sub	sp, #32
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	603b      	str	r3, [r7, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_SPI_Transmit+0x22>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e126      	b.n	800604a <HAL_SPI_Transmit+0x270>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e04:	f7fc fe96 	bl	8002b34 <HAL_GetTick>
 8005e08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e1e:	e10b      	b.n	8006038 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_SPI_Transmit+0x52>
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e30:	e102      	b.n	8006038 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2203      	movs	r2, #3
 8005e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e78:	d10f      	bne.n	8005e9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d007      	beq.n	8005eb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec0:	d14b      	bne.n	8005f5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_Transmit+0xf6>
 8005eca:	8afb      	ldrh	r3, [r7, #22]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d13e      	bne.n	8005f4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ef4:	e02b      	b.n	8005f4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d112      	bne.n	8005f2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	881a      	ldrh	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	1c9a      	adds	r2, r3, #2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f28:	e011      	b.n	8005f4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2a:	f7fc fe03 	bl	8002b34 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d803      	bhi.n	8005f42 <HAL_SPI_Transmit+0x168>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d102      	bne.n	8005f48 <HAL_SPI_Transmit+0x16e>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f4c:	e074      	b.n	8006038 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ce      	bne.n	8005ef6 <HAL_SPI_Transmit+0x11c>
 8005f58:	e04c      	b.n	8005ff4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Transmit+0x18e>
 8005f62:	8afb      	ldrh	r3, [r7, #22]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d140      	bne.n	8005fea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	330c      	adds	r3, #12
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f8e:	e02c      	b.n	8005fea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d113      	bne.n	8005fc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fc4:	e011      	b.n	8005fea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc6:	f7fc fdb5 	bl	8002b34 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d803      	bhi.n	8005fde <HAL_SPI_Transmit+0x204>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d102      	bne.n	8005fe4 <HAL_SPI_Transmit+0x20a>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fe8:	e026      	b.n	8006038 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1cd      	bne.n	8005f90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fce9 	bl	80069d0 <SPI_EndRxTxTransaction>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e000      	b.n	8006038 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006048:	7ffb      	ldrb	r3, [r7, #31]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b088      	sub	sp, #32
 8006056:	af02      	add	r7, sp, #8
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606e:	d112      	bne.n	8006096 <HAL_SPI_Receive+0x44>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10e      	bne.n	8006096 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2204      	movs	r2, #4
 800607c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f8f1 	bl	8006274 <HAL_SPI_TransmitReceive>
 8006092:	4603      	mov	r3, r0
 8006094:	e0ea      	b.n	800626c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_SPI_Receive+0x52>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0e3      	b.n	800626c <HAL_SPI_Receive+0x21a>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ac:	f7fc fd42 	bl	8002b34 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060be:	2302      	movs	r3, #2
 80060c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060c2:	e0ca      	b.n	800625a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_SPI_Receive+0x7e>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d4:	e0c1      	b.n	800625a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2204      	movs	r2, #4
 80060da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	88fa      	ldrh	r2, [r7, #6]
 80060ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	88fa      	ldrh	r2, [r7, #6]
 80060f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611c:	d10f      	bne.n	800613e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800613c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d007      	beq.n	800615c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d162      	bne.n	800622a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006164:	e02e      	b.n	80061c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	d115      	bne.n	80061a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f103 020c 	add.w	r2, r3, #12
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800619e:	e011      	b.n	80061c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a0:	f7fc fcc8 	bl	8002b34 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d803      	bhi.n	80061b8 <HAL_SPI_Receive+0x166>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d102      	bne.n	80061be <HAL_SPI_Receive+0x16c>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061c2:	e04a      	b.n	800625a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1cb      	bne.n	8006166 <HAL_SPI_Receive+0x114>
 80061ce:	e031      	b.n	8006234 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d113      	bne.n	8006206 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	b292      	uxth	r2, r2
 80061ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006204:	e011      	b.n	800622a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006206:	f7fc fc95 	bl	8002b34 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d803      	bhi.n	800621e <HAL_SPI_Receive+0x1cc>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d102      	bne.n	8006224 <HAL_SPI_Receive+0x1d2>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006228:	e017      	b.n	800625a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1cd      	bne.n	80061d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fb63 	bl	8006904 <SPI_EndRxTransaction>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]
 8006256:	e000      	b.n	800625a <HAL_SPI_Receive+0x208>
  }

error :
 8006258:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	; 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006282:	2301      	movs	r3, #1
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_SPI_TransmitReceive+0x26>
 8006296:	2302      	movs	r3, #2
 8006298:	e18a      	b.n	80065b0 <HAL_SPI_TransmitReceive+0x33c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a2:	f7fc fc47 	bl	8002b34 <HAL_GetTick>
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062b8:	887b      	ldrh	r3, [r7, #2]
 80062ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d00f      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x70>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ca:	d107      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d103      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x68>
 80062d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d003      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062e2:	e15b      	b.n	800659c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x82>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x82>
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062fc:	e14e      	b.n	800659c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b04      	cmp	r3, #4
 8006308:	d003      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2205      	movs	r2, #5
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	887a      	ldrh	r2, [r7, #2]
 8006322:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	887a      	ldrh	r2, [r7, #2]
 800633a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d007      	beq.n	8006366 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636e:	d178      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_SPI_TransmitReceive+0x10a>
 8006378:	8b7b      	ldrh	r3, [r7, #26]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d166      	bne.n	800644c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	881a      	ldrh	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	1c9a      	adds	r2, r3, #2
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a2:	e053      	b.n	800644c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d11b      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x176>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d016      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x176>
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d113      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d119      	bne.n	800642c <HAL_SPI_TransmitReceive+0x1b8>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d014      	beq.n	800642c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	b292      	uxth	r2, r2
 800640e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	1c9a      	adds	r2, r3, #2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800642c:	f7fc fb82 	bl	8002b34 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006438:	429a      	cmp	r2, r3
 800643a:	d807      	bhi.n	800644c <HAL_SPI_TransmitReceive+0x1d8>
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d003      	beq.n	800644c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800644a:	e0a7      	b.n	800659c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1a6      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x130>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1a1      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x130>
 8006460:	e07c      	b.n	800655c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x1fc>
 800646a:	8b7b      	ldrh	r3, [r7, #26]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d16b      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006496:	e057      	b.n	8006548 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d11c      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x26c>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d017      	beq.n	80064e0 <HAL_SPI_TransmitReceive+0x26c>
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d114      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	7812      	ldrb	r2, [r2, #0]
 80064c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d119      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x2ae>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d014      	beq.n	8006522 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800651e:	2301      	movs	r3, #1
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006522:	f7fc fb07 	bl	8002b34 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652e:	429a      	cmp	r2, r3
 8006530:	d803      	bhi.n	800653a <HAL_SPI_TransmitReceive+0x2c6>
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d102      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x2cc>
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d103      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006546:	e029      	b.n	800659c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1a2      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x224>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d19d      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fa35 	bl	80069d0 <SPI_EndRxTxTransaction>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006578:	e010      	b.n	800659c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	e000      	b.n	800659c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800659a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3730      	adds	r7, #48	; 0x30
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10f      	bne.n	80065fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	099b      	lsrs	r3, r3, #6
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
    return;
 80065fa:	e0d7      	b.n	80067ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_SPI_IRQHandler+0x66>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	09db      	lsrs	r3, r3, #7
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
    return;
 800661c:	e0c6      	b.n	80067ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10c      	bne.n	8006644 <HAL_SPI_IRQHandler+0x8c>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80b4 	beq.w	80067ac <HAL_SPI_IRQHandler+0x1f4>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80ad 	beq.w	80067ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d023      	beq.n	80066a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b03      	cmp	r3, #3
 8006668:	d011      	beq.n	800668e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	f043 0204 	orr.w	r2, r3, #4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	e00b      	b.n	80066a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	693b      	ldr	r3, [r7, #16]
        return;
 80066a4:	e082      	b.n	80067ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	f043 0201 	orr.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ec:	f043 0208 	orr.w	r2, r3, #8
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2b00      	cmp	r3, #0
 8006708:	d04f      	beq.n	80067aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006718:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_SPI_IRQHandler+0x17e>
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d034      	beq.n	80067a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0203 	bic.w	r2, r2, #3
 8006744:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d011      	beq.n	8006772 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_SPI_IRQHandler+0x1fc>)
 8006754:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	4618      	mov	r0, r3
 800675c:	f7fc fbda 	bl	8002f14 <HAL_DMA_Abort_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	2b00      	cmp	r3, #0
 8006778:	d016      	beq.n	80067a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	4a0d      	ldr	r2, [pc, #52]	; (80067b4 <HAL_SPI_IRQHandler+0x1fc>)
 8006780:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	4618      	mov	r0, r3
 8006788:	f7fc fbc4 	bl	8002f14 <HAL_DMA_Abort_IT>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800679e:	e003      	b.n	80067a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f809 	bl	80067b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067a6:	e000      	b.n	80067aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067a8:	bf00      	nop
    return;
 80067aa:	bf00      	nop
  }
}
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	080067cd 	.word	0x080067cd

080067b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ffe6 	bl	80067b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4613      	mov	r3, r2
 8006802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006804:	f7fc f996 	bl	8002b34 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	1a9b      	subs	r3, r3, r2
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	4413      	add	r3, r2
 8006812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006814:	f7fc f98e 	bl	8002b34 <HAL_GetTick>
 8006818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800681a:	4b39      	ldr	r3, [pc, #228]	; (8006900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	015b      	lsls	r3, r3, #5
 8006820:	0d1b      	lsrs	r3, r3, #20
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800682a:	e054      	b.n	80068d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d050      	beq.n	80068d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006834:	f7fc f97e 	bl	8002b34 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	429a      	cmp	r2, r3
 8006842:	d902      	bls.n	800684a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d13d      	bne.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006862:	d111      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686c:	d004      	beq.n	8006878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006876:	d107      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d10f      	bne.n	80068b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e017      	b.n	80068f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4013      	ands	r3, r2
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	bf0c      	ite	eq
 80068e6:	2301      	moveq	r3, #1
 80068e8:	2300      	movne	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d19b      	bne.n	800682c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3720      	adds	r7, #32
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000000c 	.word	0x2000000c

08006904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006918:	d111      	bne.n	800693e <SPI_EndRxTransaction+0x3a>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006922:	d004      	beq.n	800692e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692c:	d107      	bne.n	800693e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006946:	d12a      	bne.n	800699e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006950:	d012      	beq.n	8006978 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff ff49 	bl	80067f4 <SPI_WaitFlagStateUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d02d      	beq.n	80069c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e026      	b.n	80069c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	2101      	movs	r1, #1
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff ff36 	bl	80067f4 <SPI_WaitFlagStateUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01a      	beq.n	80069c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e013      	b.n	80069c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2101      	movs	r1, #1
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff ff23 	bl	80067f4 <SPI_WaitFlagStateUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e000      	b.n	80069c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <SPI_EndRxTxTransaction+0x7c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1b      	ldr	r2, [pc, #108]	; (8006a50 <SPI_EndRxTxTransaction+0x80>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	0d5b      	lsrs	r3, r3, #21
 80069e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069ec:	fb02 f303 	mul.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069fa:	d112      	bne.n	8006a22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fef4 	bl	80067f4 <SPI_WaitFlagStateUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d016      	beq.n	8006a40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	f043 0220 	orr.w	r2, r3, #32
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e00f      	b.n	8006a42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a38:	2b80      	cmp	r3, #128	; 0x80
 8006a3a:	d0f2      	beq.n	8006a22 <SPI_EndRxTxTransaction+0x52>
 8006a3c:	e000      	b.n	8006a40 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a3e:	bf00      	nop
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	2000000c 	.word	0x2000000c
 8006a50:	165e9f81 	.word	0x165e9f81

08006a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e041      	b.n	8006aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fb fe56 	bl	800272c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f000 fae0 	bl	8007058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d001      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e04e      	b.n	8006baa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d022      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d01d      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1f      	ldr	r2, [pc, #124]	; (8006bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d018      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1e      	ldr	r2, [pc, #120]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d013      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00e      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d009      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a19      	ldr	r2, [pc, #100]	; (8006bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d004      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x80>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a18      	ldr	r2, [pc, #96]	; (8006bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d111      	bne.n	8006b98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b06      	cmp	r3, #6
 8006b84:	d010      	beq.n	8006ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b96:	e007      	b.n	8006ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40000800 	.word	0x40000800
 8006bc4:	40000c00 	.word	0x40000c00
 8006bc8:	40010400 	.word	0x40010400
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40001800 	.word	0x40001800

08006bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e041      	b.n	8006c6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb fd74 	bl	80026e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f000 fa20 	bl	8007058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d122      	bne.n	8006cce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d11b      	bne.n	8006cce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f06f 0202 	mvn.w	r2, #2
 8006c9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9b1 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006cba:	e005      	b.n	8006cc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f9a3 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9b4 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d122      	bne.n	8006d22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d11b      	bne.n	8006d22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f06f 0204 	mvn.w	r2, #4
 8006cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f987 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006d0e:	e005      	b.n	8006d1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f979 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f98a 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d122      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d11b      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f06f 0208 	mvn.w	r2, #8
 8006d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f95d 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006d62:	e005      	b.n	8006d70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f94f 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f960 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d122      	bne.n	8006dca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	d11b      	bne.n	8006dca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f06f 0210 	mvn.w	r2, #16
 8006d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2208      	movs	r2, #8
 8006da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f933 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006db6:	e005      	b.n	8006dc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f925 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f936 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10e      	bne.n	8006df6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d107      	bne.n	8006df6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f06f 0201 	mvn.w	r2, #1
 8006dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7fb fbb3 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e00:	2b80      	cmp	r3, #128	; 0x80
 8006e02:	d10e      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d107      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fbf1 	bl	8007604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d10e      	bne.n	8006e4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d107      	bne.n	8006e4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8fb 	bl	8007044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d10e      	bne.n	8006e7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d107      	bne.n	8006e7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f06f 0220 	mvn.w	r2, #32
 8006e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbbb 	bl	80075f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e0ae      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	f200 809f 	bhi.w	8006ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006ff1 	.word	0x08006ff1
 8006ec0:	08006ff1 	.word	0x08006ff1
 8006ec4:	08006ff1 	.word	0x08006ff1
 8006ec8:	08006f2d 	.word	0x08006f2d
 8006ecc:	08006ff1 	.word	0x08006ff1
 8006ed0:	08006ff1 	.word	0x08006ff1
 8006ed4:	08006ff1 	.word	0x08006ff1
 8006ed8:	08006f6f 	.word	0x08006f6f
 8006edc:	08006ff1 	.word	0x08006ff1
 8006ee0:	08006ff1 	.word	0x08006ff1
 8006ee4:	08006ff1 	.word	0x08006ff1
 8006ee8:	08006faf 	.word	0x08006faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 f950 	bl	8007198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0208 	orr.w	r2, r2, #8
 8006f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0204 	bic.w	r2, r2, #4
 8006f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6999      	ldr	r1, [r3, #24]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	619a      	str	r2, [r3, #24]
      break;
 8006f2a:	e064      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f9a0 	bl	8007278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6999      	ldr	r1, [r3, #24]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	021a      	lsls	r2, r3, #8
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	619a      	str	r2, [r3, #24]
      break;
 8006f6c:	e043      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f9f5 	bl	8007364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0208 	orr.w	r2, r2, #8
 8006f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0204 	bic.w	r2, r2, #4
 8006f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69d9      	ldr	r1, [r3, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	61da      	str	r2, [r3, #28]
      break;
 8006fac:	e023      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fa49 	bl	800744c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69d9      	ldr	r1, [r3, #28]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	021a      	lsls	r2, r3, #8
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	61da      	str	r2, [r3, #28]
      break;
 8006fee:	e002      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a40      	ldr	r2, [pc, #256]	; (800716c <TIM_Base_SetConfig+0x114>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d013      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d00f      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a3d      	ldr	r2, [pc, #244]	; (8007170 <TIM_Base_SetConfig+0x118>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00b      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <TIM_Base_SetConfig+0x11c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d007      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <TIM_Base_SetConfig+0x120>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a3a      	ldr	r2, [pc, #232]	; (800717c <TIM_Base_SetConfig+0x124>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d108      	bne.n	80070aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2f      	ldr	r2, [pc, #188]	; (800716c <TIM_Base_SetConfig+0x114>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d02b      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d027      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <TIM_Base_SetConfig+0x118>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d023      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2b      	ldr	r2, [pc, #172]	; (8007174 <TIM_Base_SetConfig+0x11c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01f      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2a      	ldr	r2, [pc, #168]	; (8007178 <TIM_Base_SetConfig+0x120>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01b      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a29      	ldr	r2, [pc, #164]	; (800717c <TIM_Base_SetConfig+0x124>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d017      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a28      	ldr	r2, [pc, #160]	; (8007180 <TIM_Base_SetConfig+0x128>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a27      	ldr	r2, [pc, #156]	; (8007184 <TIM_Base_SetConfig+0x12c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00f      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a26      	ldr	r2, [pc, #152]	; (8007188 <TIM_Base_SetConfig+0x130>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00b      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a25      	ldr	r2, [pc, #148]	; (800718c <TIM_Base_SetConfig+0x134>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d007      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a24      	ldr	r2, [pc, #144]	; (8007190 <TIM_Base_SetConfig+0x138>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a23      	ldr	r2, [pc, #140]	; (8007194 <TIM_Base_SetConfig+0x13c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d108      	bne.n	800711c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <TIM_Base_SetConfig+0x114>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a0c      	ldr	r2, [pc, #48]	; (800717c <TIM_Base_SetConfig+0x124>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d103      	bne.n	8007158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	615a      	str	r2, [r3, #20]
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40010400 	.word	0x40010400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800
 800718c:	40001800 	.word	0x40001800
 8007190:	40001c00 	.word	0x40001c00
 8007194:	40002000 	.word	0x40002000

08007198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f023 0201 	bic.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 0302 	bic.w	r3, r3, #2
 80071e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a20      	ldr	r2, [pc, #128]	; (8007270 <TIM_OC1_SetConfig+0xd8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC1_SetConfig+0x64>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a1f      	ldr	r2, [pc, #124]	; (8007274 <TIM_OC1_SetConfig+0xdc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d10c      	bne.n	8007216 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0308 	bic.w	r3, r3, #8
 8007202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f023 0304 	bic.w	r3, r3, #4
 8007214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a15      	ldr	r2, [pc, #84]	; (8007270 <TIM_OC1_SetConfig+0xd8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d003      	beq.n	8007226 <TIM_OC1_SetConfig+0x8e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <TIM_OC1_SetConfig+0xdc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d111      	bne.n	800724a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800722c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	621a      	str	r2, [r3, #32]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0210 	bic.w	r2, r3, #16
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f023 0320 	bic.w	r3, r3, #32
 80072c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a22      	ldr	r2, [pc, #136]	; (800735c <TIM_OC2_SetConfig+0xe4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC2_SetConfig+0x68>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a21      	ldr	r2, [pc, #132]	; (8007360 <TIM_OC2_SetConfig+0xe8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10d      	bne.n	80072fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a17      	ldr	r2, [pc, #92]	; (800735c <TIM_OC2_SetConfig+0xe4>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_OC2_SetConfig+0x94>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a16      	ldr	r2, [pc, #88]	; (8007360 <TIM_OC2_SetConfig+0xe8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d113      	bne.n	8007334 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800731a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400

08007364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a21      	ldr	r2, [pc, #132]	; (8007444 <TIM_OC3_SetConfig+0xe0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC3_SetConfig+0x66>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a20      	ldr	r2, [pc, #128]	; (8007448 <TIM_OC3_SetConfig+0xe4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10d      	bne.n	80073e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a16      	ldr	r2, [pc, #88]	; (8007444 <TIM_OC3_SetConfig+0xe0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_OC3_SetConfig+0x92>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a15      	ldr	r2, [pc, #84]	; (8007448 <TIM_OC3_SetConfig+0xe4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d113      	bne.n	800741e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	621a      	str	r2, [r3, #32]
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40010000 	.word	0x40010000
 8007448:	40010400 	.word	0x40010400

0800744c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	031b      	lsls	r3, r3, #12
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <TIM_OC4_SetConfig+0xa4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_OC4_SetConfig+0x68>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <TIM_OC4_SetConfig+0xa8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d109      	bne.n	80074c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	019b      	lsls	r3, r3, #6
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40010400 	.word	0x40010400

080074f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e05a      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d01d      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40010400 	.word	0x40010400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40001800 	.word	0x40001800

080075f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e03f      	b.n	80076aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb f948 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2224      	movs	r2, #36	; 0x24
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800765a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f829 	bl	80076b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b8:	b0c0      	sub	sp, #256	; 0x100
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	68d9      	ldr	r1, [r3, #12]
 80076d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	ea40 0301 	orr.w	r3, r0, r1
 80076dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800770c:	f021 010c 	bic.w	r1, r1, #12
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800771a:	430b      	orrs	r3, r1
 800771c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772e:	6999      	ldr	r1, [r3, #24]
 8007730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	ea40 0301 	orr.w	r3, r0, r1
 800773a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b8f      	ldr	r3, [pc, #572]	; (8007980 <UART_SetConfig+0x2cc>)
 8007744:	429a      	cmp	r2, r3
 8007746:	d005      	beq.n	8007754 <UART_SetConfig+0xa0>
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b8d      	ldr	r3, [pc, #564]	; (8007984 <UART_SetConfig+0x2d0>)
 8007750:	429a      	cmp	r2, r3
 8007752:	d104      	bne.n	800775e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007754:	f7fe faa4 	bl	8005ca0 <HAL_RCC_GetPCLK2Freq>
 8007758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800775c:	e003      	b.n	8007766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800775e:	f7fe fa8b 	bl	8005c78 <HAL_RCC_GetPCLK1Freq>
 8007762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007770:	f040 810c 	bne.w	800798c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007778:	2200      	movs	r2, #0
 800777a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800777e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	1891      	adds	r1, r2, r2
 800778c:	65b9      	str	r1, [r7, #88]	; 0x58
 800778e:	415b      	adcs	r3, r3
 8007790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007796:	4621      	mov	r1, r4
 8007798:	eb12 0801 	adds.w	r8, r2, r1
 800779c:	4629      	mov	r1, r5
 800779e:	eb43 0901 	adc.w	r9, r3, r1
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077b6:	4690      	mov	r8, r2
 80077b8:	4699      	mov	r9, r3
 80077ba:	4623      	mov	r3, r4
 80077bc:	eb18 0303 	adds.w	r3, r8, r3
 80077c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077c4:	462b      	mov	r3, r5
 80077c6:	eb49 0303 	adc.w	r3, r9, r3
 80077ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80077de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077e2:	460b      	mov	r3, r1
 80077e4:	18db      	adds	r3, r3, r3
 80077e6:	653b      	str	r3, [r7, #80]	; 0x50
 80077e8:	4613      	mov	r3, r2
 80077ea:	eb42 0303 	adc.w	r3, r2, r3
 80077ee:	657b      	str	r3, [r7, #84]	; 0x54
 80077f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077f8:	f7f8 fce6 	bl	80001c8 <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4b61      	ldr	r3, [pc, #388]	; (8007988 <UART_SetConfig+0x2d4>)
 8007802:	fba3 2302 	umull	r2, r3, r3, r2
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	011c      	lsls	r4, r3, #4
 800780a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780e:	2200      	movs	r2, #0
 8007810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	1891      	adds	r1, r2, r2
 8007822:	64b9      	str	r1, [r7, #72]	; 0x48
 8007824:	415b      	adcs	r3, r3
 8007826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800782c:	4641      	mov	r1, r8
 800782e:	eb12 0a01 	adds.w	sl, r2, r1
 8007832:	4649      	mov	r1, r9
 8007834:	eb43 0b01 	adc.w	fp, r3, r1
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800784c:	4692      	mov	sl, r2
 800784e:	469b      	mov	fp, r3
 8007850:	4643      	mov	r3, r8
 8007852:	eb1a 0303 	adds.w	r3, sl, r3
 8007856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800785a:	464b      	mov	r3, r9
 800785c:	eb4b 0303 	adc.w	r3, fp, r3
 8007860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007878:	460b      	mov	r3, r1
 800787a:	18db      	adds	r3, r3, r3
 800787c:	643b      	str	r3, [r7, #64]	; 0x40
 800787e:	4613      	mov	r3, r2
 8007880:	eb42 0303 	adc.w	r3, r2, r3
 8007884:	647b      	str	r3, [r7, #68]	; 0x44
 8007886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800788a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800788e:	f7f8 fc9b 	bl	80001c8 <__aeabi_uldivmod>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4611      	mov	r1, r2
 8007898:	4b3b      	ldr	r3, [pc, #236]	; (8007988 <UART_SetConfig+0x2d4>)
 800789a:	fba3 2301 	umull	r2, r3, r3, r1
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	2264      	movs	r2, #100	; 0x64
 80078a2:	fb02 f303 	mul.w	r3, r2, r3
 80078a6:	1acb      	subs	r3, r1, r3
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078ae:	4b36      	ldr	r3, [pc, #216]	; (8007988 <UART_SetConfig+0x2d4>)
 80078b0:	fba3 2302 	umull	r2, r3, r3, r2
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078bc:	441c      	add	r4, r3
 80078be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	1891      	adds	r1, r2, r2
 80078d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80078d8:	415b      	adcs	r3, r3
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078e0:	4641      	mov	r1, r8
 80078e2:	1851      	adds	r1, r2, r1
 80078e4:	6339      	str	r1, [r7, #48]	; 0x30
 80078e6:	4649      	mov	r1, r9
 80078e8:	414b      	adcs	r3, r1
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078f8:	4659      	mov	r1, fp
 80078fa:	00cb      	lsls	r3, r1, #3
 80078fc:	4651      	mov	r1, sl
 80078fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007902:	4651      	mov	r1, sl
 8007904:	00ca      	lsls	r2, r1, #3
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	4603      	mov	r3, r0
 800790c:	4642      	mov	r2, r8
 800790e:	189b      	adds	r3, r3, r2
 8007910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007914:	464b      	mov	r3, r9
 8007916:	460a      	mov	r2, r1
 8007918:	eb42 0303 	adc.w	r3, r2, r3
 800791c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800792c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007934:	460b      	mov	r3, r1
 8007936:	18db      	adds	r3, r3, r3
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28
 800793a:	4613      	mov	r3, r2
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800794a:	f7f8 fc3d 	bl	80001c8 <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <UART_SetConfig+0x2d4>)
 8007954:	fba3 1302 	umull	r1, r3, r3, r2
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	2164      	movs	r1, #100	; 0x64
 800795c:	fb01 f303 	mul.w	r3, r1, r3
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	3332      	adds	r3, #50	; 0x32
 8007966:	4a08      	ldr	r2, [pc, #32]	; (8007988 <UART_SetConfig+0x2d4>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	f003 0207 	and.w	r2, r3, #7
 8007972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4422      	add	r2, r4
 800797a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800797c:	e105      	b.n	8007b8a <UART_SetConfig+0x4d6>
 800797e:	bf00      	nop
 8007980:	40011000 	.word	0x40011000
 8007984:	40011400 	.word	0x40011400
 8007988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800798c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007990:	2200      	movs	r2, #0
 8007992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800799a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800799e:	4642      	mov	r2, r8
 80079a0:	464b      	mov	r3, r9
 80079a2:	1891      	adds	r1, r2, r2
 80079a4:	6239      	str	r1, [r7, #32]
 80079a6:	415b      	adcs	r3, r3
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
 80079aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079ae:	4641      	mov	r1, r8
 80079b0:	1854      	adds	r4, r2, r1
 80079b2:	4649      	mov	r1, r9
 80079b4:	eb43 0501 	adc.w	r5, r3, r1
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	00eb      	lsls	r3, r5, #3
 80079c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079c6:	00e2      	lsls	r2, r4, #3
 80079c8:	4614      	mov	r4, r2
 80079ca:	461d      	mov	r5, r3
 80079cc:	4643      	mov	r3, r8
 80079ce:	18e3      	adds	r3, r4, r3
 80079d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079d4:	464b      	mov	r3, r9
 80079d6:	eb45 0303 	adc.w	r3, r5, r3
 80079da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079fa:	4629      	mov	r1, r5
 80079fc:	008b      	lsls	r3, r1, #2
 80079fe:	4621      	mov	r1, r4
 8007a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a04:	4621      	mov	r1, r4
 8007a06:	008a      	lsls	r2, r1, #2
 8007a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a0c:	f7f8 fbdc 	bl	80001c8 <__aeabi_uldivmod>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4b60      	ldr	r3, [pc, #384]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007a16:	fba3 2302 	umull	r2, r3, r3, r2
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	011c      	lsls	r4, r3, #4
 8007a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	61b9      	str	r1, [r7, #24]
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a40:	4641      	mov	r1, r8
 8007a42:	1851      	adds	r1, r2, r1
 8007a44:	6139      	str	r1, [r7, #16]
 8007a46:	4649      	mov	r1, r9
 8007a48:	414b      	adcs	r3, r1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a58:	4659      	mov	r1, fp
 8007a5a:	00cb      	lsls	r3, r1, #3
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a62:	4651      	mov	r1, sl
 8007a64:	00ca      	lsls	r2, r1, #3
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a74:	464b      	mov	r3, r9
 8007a76:	460a      	mov	r2, r1
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a98:	4649      	mov	r1, r9
 8007a9a:	008b      	lsls	r3, r1, #2
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	008a      	lsls	r2, r1, #2
 8007aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007aaa:	f7f8 fb8d 	bl	80001c8 <__aeabi_uldivmod>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4b39      	ldr	r3, [pc, #228]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a34      	ldr	r2, [pc, #208]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ad2:	441c      	add	r4, r3
 8007ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad8:	2200      	movs	r2, #0
 8007ada:	673b      	str	r3, [r7, #112]	; 0x70
 8007adc:	677a      	str	r2, [r7, #116]	; 0x74
 8007ade:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	1891      	adds	r1, r2, r2
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	415b      	adcs	r3, r3
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af2:	4641      	mov	r1, r8
 8007af4:	1851      	adds	r1, r2, r1
 8007af6:	6039      	str	r1, [r7, #0]
 8007af8:	4649      	mov	r1, r9
 8007afa:	414b      	adcs	r3, r1
 8007afc:	607b      	str	r3, [r7, #4]
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b0a:	4659      	mov	r1, fp
 8007b0c:	00cb      	lsls	r3, r1, #3
 8007b0e:	4651      	mov	r1, sl
 8007b10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b14:	4651      	mov	r1, sl
 8007b16:	00ca      	lsls	r2, r1, #3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4642      	mov	r2, r8
 8007b20:	189b      	adds	r3, r3, r2
 8007b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b24:	464b      	mov	r3, r9
 8007b26:	460a      	mov	r2, r1
 8007b28:	eb42 0303 	adc.w	r3, r2, r3
 8007b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	663b      	str	r3, [r7, #96]	; 0x60
 8007b38:	667a      	str	r2, [r7, #100]	; 0x64
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b46:	4649      	mov	r1, r9
 8007b48:	008b      	lsls	r3, r1, #2
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b50:	4641      	mov	r1, r8
 8007b52:	008a      	lsls	r2, r1, #2
 8007b54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b58:	f7f8 fb36 	bl	80001c8 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007b62:	fba3 1302 	umull	r1, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	2164      	movs	r1, #100	; 0x64
 8007b6a:	fb01 f303 	mul.w	r3, r1, r3
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	3332      	adds	r3, #50	; 0x32
 8007b74:	4a08      	ldr	r2, [pc, #32]	; (8007b98 <UART_SetConfig+0x4e4>)
 8007b76:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4422      	add	r2, r4
 8007b88:	609a      	str	r2, [r3, #8]
}
 8007b8a:	bf00      	nop
 8007b8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b90:	46bd      	mov	sp, r7
 8007b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b96:	bf00      	nop
 8007b98:	51eb851f 	.word	0x51eb851f

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	; (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	; (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f000 f87c 	bl	8007cac <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	08009d58 	.word	0x08009d58
 8007bd8:	08009d58 	.word	0x08009d58
 8007bdc:	08009d58 	.word	0x08009d58
 8007be0:	08009d5c 	.word	0x08009d5c

08007be4 <__itoa>:
 8007be4:	1e93      	subs	r3, r2, #2
 8007be6:	2b22      	cmp	r3, #34	; 0x22
 8007be8:	b510      	push	{r4, lr}
 8007bea:	460c      	mov	r4, r1
 8007bec:	d904      	bls.n	8007bf8 <__itoa+0x14>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	700b      	strb	r3, [r1, #0]
 8007bf2:	461c      	mov	r4, r3
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	bd10      	pop	{r4, pc}
 8007bf8:	2a0a      	cmp	r2, #10
 8007bfa:	d109      	bne.n	8007c10 <__itoa+0x2c>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	da07      	bge.n	8007c10 <__itoa+0x2c>
 8007c00:	232d      	movs	r3, #45	; 0x2d
 8007c02:	700b      	strb	r3, [r1, #0]
 8007c04:	4240      	negs	r0, r0
 8007c06:	2101      	movs	r1, #1
 8007c08:	4421      	add	r1, r4
 8007c0a:	f000 f80d 	bl	8007c28 <__utoa>
 8007c0e:	e7f1      	b.n	8007bf4 <__itoa+0x10>
 8007c10:	2100      	movs	r1, #0
 8007c12:	e7f9      	b.n	8007c08 <__itoa+0x24>

08007c14 <itoa>:
 8007c14:	f7ff bfe6 	b.w	8007be4 <__itoa>

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <__utoa>:
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2a:	4c1f      	ldr	r4, [pc, #124]	; (8007ca8 <__utoa+0x80>)
 8007c2c:	b08b      	sub	sp, #44	; 0x2c
 8007c2e:	4605      	mov	r5, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	466e      	mov	r6, sp
 8007c34:	f104 0c20 	add.w	ip, r4, #32
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	6861      	ldr	r1, [r4, #4]
 8007c3c:	4637      	mov	r7, r6
 8007c3e:	c703      	stmia	r7!, {r0, r1}
 8007c40:	3408      	adds	r4, #8
 8007c42:	4564      	cmp	r4, ip
 8007c44:	463e      	mov	r6, r7
 8007c46:	d1f7      	bne.n	8007c38 <__utoa+0x10>
 8007c48:	7921      	ldrb	r1, [r4, #4]
 8007c4a:	7139      	strb	r1, [r7, #4]
 8007c4c:	1e91      	subs	r1, r2, #2
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	6038      	str	r0, [r7, #0]
 8007c52:	2922      	cmp	r1, #34	; 0x22
 8007c54:	f04f 0100 	mov.w	r1, #0
 8007c58:	d904      	bls.n	8007c64 <__utoa+0x3c>
 8007c5a:	7019      	strb	r1, [r3, #0]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4618      	mov	r0, r3
 8007c60:	b00b      	add	sp, #44	; 0x2c
 8007c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c64:	1e58      	subs	r0, r3, #1
 8007c66:	4684      	mov	ip, r0
 8007c68:	fbb5 f7f2 	udiv	r7, r5, r2
 8007c6c:	fb02 5617 	mls	r6, r2, r7, r5
 8007c70:	3628      	adds	r6, #40	; 0x28
 8007c72:	446e      	add	r6, sp
 8007c74:	460c      	mov	r4, r1
 8007c76:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007c7a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007c7e:	462e      	mov	r6, r5
 8007c80:	42b2      	cmp	r2, r6
 8007c82:	f101 0101 	add.w	r1, r1, #1
 8007c86:	463d      	mov	r5, r7
 8007c88:	d9ee      	bls.n	8007c68 <__utoa+0x40>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	545a      	strb	r2, [r3, r1]
 8007c8e:	1919      	adds	r1, r3, r4
 8007c90:	1aa5      	subs	r5, r4, r2
 8007c92:	42aa      	cmp	r2, r5
 8007c94:	dae3      	bge.n	8007c5e <__utoa+0x36>
 8007c96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007c9a:	780e      	ldrb	r6, [r1, #0]
 8007c9c:	7006      	strb	r6, [r0, #0]
 8007c9e:	3201      	adds	r2, #1
 8007ca0:	f801 5901 	strb.w	r5, [r1], #-1
 8007ca4:	e7f4      	b.n	8007c90 <__utoa+0x68>
 8007ca6:	bf00      	nop
 8007ca8:	08009d28 	.word	0x08009d28

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
