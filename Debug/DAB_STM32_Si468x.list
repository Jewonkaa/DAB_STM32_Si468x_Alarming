
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f50  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd08  0800dd08  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd08  0800dd08  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd10  0800dd10  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd10  0800dd10  0001dd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd14  0800dd14  0001dd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800dd18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          0000325c  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200033e0  200033e0  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   000189a1  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391a  00000000  00000000  00038b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001390  00000000  00000000  0003d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244f7  00000000  00000000  0003ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c63f  00000000  00000000  000631f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2836  00000000  00000000  0007f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015206c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005720  00000000  00000000  001520bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ada0 	.word	0x0800ada0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	0800ada0 	.word	0x0800ada0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fb97 	bl	8000c18 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fb94 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fba0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fb9d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb9a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fb97 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb94 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fb82 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb8e 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fb8b 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fb88 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fb76 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fb82 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb7f 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fb7c 	bl	8000c36 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb6a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb76 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb73 	bl	8000c36 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb61 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb6d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb6a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb67 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb64 	bl	8000c36 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb52 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb5e 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb4c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb58 	bl	8000c36 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb46 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb52 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb40 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb4c 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb49 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb37 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb43 	bl	8000c36 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb31 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb3d 	bl	8000c36 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb2b 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb37 	bl	8000c36 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb25 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb31 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb2e 	bl	8000c36 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb1c 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb28 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb25 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb22 	bl	8000c36 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb10 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb1c 	bl	8000c36 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb0a 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb16 	bl	8000c36 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb04 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb10 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb0d 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb0a 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb07 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb04 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb01 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fafe 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fafb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 faf8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 faf5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 faf2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 faef 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 faec 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fae9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fae6 	bl	8000c36 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fad4 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae0 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fadd 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fada 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fad7 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fad4 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fad1 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 face 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 facb 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 fac8 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fac5 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 fac2 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 fabf 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fabc 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fab9 	bl	8000c36 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fab6 	bl	8000c36 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 faa4 	bl	8000c18 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 faa1 	bl	8000c18 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 faad 	bl	8000c36 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f008 fae8 	bl	8008cce <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200031b8 	.word	0x200031b8

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f005 f904 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f004 fafd 	bl	8004d1c <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f005 f8fb 	bl	8005924 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f005 f8f5 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f004 faee 	bl	8004d1c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa69 	bl	8000c18 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f005 f8e9 	bl	8005924 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa56 	bl	8000c18 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa54 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa49 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa3e 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa33 	bl	8000c36 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f005 f88e 	bl	8005924 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f005 f888 	bl	8005924 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f005 f87e 	bl	8005924 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9b7 	bl	8000c54 <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f004 fff0 	bl	8005924 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f004 ffe7 	bl	8005924 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f94b 	bl	8000c54 <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bfb8      	it	lt
 80009ec:	425b      	neglt	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	bfcc      	ite	gt
 80009f2:	2301      	movgt	r3, #1
 80009f4:	2300      	movle	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00d      	beq.n	8000a1c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a0c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d90d      	bls.n	8000a40 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a30:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0fda      	lsrs	r2, r3, #31
 8000a5a:	4413      	add	r3, r2
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e023      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a74:	e01f      	b.n	8000ab6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff38 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000a88:	e005      	b.n	8000a96 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
			err = dx;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d9db      	bls.n	8000a76 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	switch (size)
 8000ad6:	7f3b      	ldrb	r3, [r7, #28]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d061      	beq.n	8000ba0 <ILI9341_Draw_String+0xd8>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f300 8092 	bgt.w	8000c06 <ILI9341_Draw_String+0x13e>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d028      	beq.n	8000b38 <ILI9341_Draw_String+0x70>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000aea:	e08c      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d907      	bls.n	8000b0e <ILI9341_Draw_String+0x46>
				x = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	7f3a      	ldrb	r2, [r7, #28]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	f000 f95a 	bl	8000dd8 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b24:	7f3b      	ldrb	r3, [r7, #28]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b02      	subs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1d5      	bne.n	8000aec <ILI9341_Draw_String+0x24>
	break;
 8000b40:	e061      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b48:	e025      	b.n	8000b96 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d907      	bls.n	8000b6c <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7f3a      	ldrb	r2, [r7, #28]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	f000 f92b 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*8;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d5      	bne.n	8000b4a <ILI9341_Draw_String+0x82>
	break;
 8000b9e:	e032      	b.n	8000c06 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba6:	e029      	b.n	8000bfc <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <ILI9341_Draw_String+0x148>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <ILI9341_Draw_String+0x102>
				x = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	7f3a      	ldrb	r2, [r7, #28]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	f000 f8fc 	bl	8000dd8 <ILI9341_Draw_Char>
			x += hh*10;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <ILI9341_Draw_String+0x14c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d1      	bne.n	8000ba8 <ILI9341_Draw_String+0xe0>
	break;
 8000c04:	bf00      	nop
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200001a0 	.word	0x200001a0

08000c18 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c22:	f000 fa09 	bl	8001038 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd5d 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c40:	f000 f9e8 	bl	8001014 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd4e 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c74:	f004 fe56 	bl	8005924 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c80:	f004 fe50 	bl	8005924 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff fd2f 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000c92:	f004 fe47 	bl	8005924 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd25 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd21 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	099b      	lsrs	r3, r3, #6
 8000cb0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cb2:	7b3a      	ldrb	r2, [r7, #12]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d169      	bne.n	8000d8e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cba:	e027      	b.n	8000d0c <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd10 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd0c 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd08 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd04 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd00 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcfc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf4 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d9      	bne.n	8000cc0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	81fa      	strh	r2, [r7, #14]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d2      	bne.n	8000cbc <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	e007      	b.n	8000d32 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcdf 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	737a      	strb	r2, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f2      	bne.n	8000d22 <ILI9341_Send_Burst+0xce>
 8000d3c:	e03f      	b.n	8000dbe <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fccf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fccb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcc7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcc3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcbf 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcbb 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcb7 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	81fa      	strh	r2, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1d2      	bne.n	8000d3e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e007      	b.n	8000db4 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc9e 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc9a 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	737a      	strb	r2, [r7, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f2      	bne.n	8000da4 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_Send_Burst+0x180>)
 8000dc6:	f004 fdad 	bl	8005924 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	f000 80b2 	beq.w	8000f54 <ILI9341_Draw_Char+0x17c>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f300 8104 	bgt.w	8000ffe <ILI9341_Draw_Char+0x226>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d002      	beq.n	8000e00 <ILI9341_Draw_Char+0x28>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d055      	beq.n	8000eaa <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000dfe:	e0fe      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3305      	adds	r3, #5
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	f7ff fd29 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	487b      	ldr	r0, [pc, #492]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e1a:	f004 fd83 	bl	8005924 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff fc62 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4877      	ldr	r0, [pc, #476]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000e2c:	f004 fd7a 	bl	8005924 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e035      	b.n	8000ea2 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e02c      	b.n	8000e96 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	3b20      	subs	r3, #32
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <ILI9341_Draw_Char+0x234>)
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	441a      	add	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc3d 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc38 	bl	80006e8 <ILI9341_SPI_Send>
 8000e78:	e00a      	b.n	8000e90 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc31 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc2c 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	ddcf      	ble.n	8000e3c <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddc6      	ble.n	8000e36 <ILI9341_Draw_Char+0x5e>
			break;
 8000ea8:	e0a9      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	f7ff fcd4 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4851      	ldr	r0, [pc, #324]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ec4:	f004 fd2e 	bl	8005924 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f7ff fc0d 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	484c      	ldr	r0, [pc, #304]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000ed6:	f004 fd25 	bl	8005924 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e035      	b.n	8000f4c <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e02c      	b.n	8000f40 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eea:	3b20      	subs	r3, #32
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f1c3 0307 	rsb	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe8 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fbe3 	bl	80006e8 <ILI9341_SPI_Send>
 8000f22:	e00a      	b.n	8000f3a <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbdc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbd7 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddcf      	ble.n	8000ee6 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	ddc6      	ble.n	8000ee0 <ILI9341_Draw_Char+0x108>
		break;
 8000f52:	e054      	b.n	8000ffe <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3309      	adds	r3, #9
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3310      	adds	r3, #16
 8000f62:	f7ff fc7f 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f6e:	f004 fcd9 	bl	8005924 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff fbb8 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <ILI9341_Draw_Char+0x230>)
 8000f80:	f004 fcd0 	bl	8005924 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e035      	b.n	8000ff6 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e02c      	b.n	8000fea <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <ILI9341_Draw_Char+0x238>)
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	fa42 f303 	asr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb93 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb8e 	bl	80006e8 <ILI9341_SPI_Send>
 8000fcc:	e00a      	b.n	8000fe4 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb87 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb82 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	ddcf      	ble.n	8000f90 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b1d      	cmp	r3, #29
 8000ffa:	ddc6      	ble.n	8000f8a <ILI9341_Draw_Char+0x1b2>
		break;
 8000ffc:	bf00      	nop
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00
 800100c:	0800bd54 	.word	0x0800bd54
 8001010:	0800c02c 	.word	0x0800c02c

08001014 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <Before_Sending_Data+0x20>)
 8001020:	f004 fc80 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <Before_Sending_Data+0x20>)
 800102c:	f004 fc7a 	bl	8005924 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020c00 	.word	0x40020c00

08001038 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Before_Sending_Command+0x20>)
 8001044:	f004 fc6e 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <Before_Sending_Command+0x20>)
 8001050:	f004 fc68 	bl	8005924 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <Si468x_dab_init>:
uint8_t actual_station = 0;

uint8_t last_station_index = 0;

void Si468x_dab_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001060:	2101      	movs	r1, #1
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <Si468x_dab_init+0xc0>)
 8001064:	f001 fc32 	bl	80028cc <send_debug_msg>
	Si468x_reset();
 8001068:	f000 f85a 	bl	8001120 <Si468x_reset>
	Si468x_power_up();
 800106c:	f000 f874 	bl	8001158 <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001070:	f000 f8f6 	bl	8001260 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 8001074:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 8001078:	f000 f966 	bl	8001348 <Si468x_firmware_load_flash>
	Si468x_boot();
 800107c:	f000 fa04 	bl	8001488 <Si468x_boot>
	Si468x_get_part_info();
 8001080:	f000 fbbc 	bl	80017fc <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001084:	f000 fb34 	bl	80016f0 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 8001088:	2101      	movs	r1, #1
 800108a:	f241 7012 	movw	r0, #5906	; 0x1712
 800108e:	f000 fc25 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 8001092:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 8001096:	f241 7010 	movw	r0, #5904	; 0x1710
 800109a:	f000 fc1f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 800109e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010a2:	f241 7011 	movw	r0, #5905	; 0x1711
 80010a6:	f000 fc19 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010aa:	2107      	movs	r1, #7
 80010ac:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010b0:	f000 fc14 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ba:	f000 fc0f 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010c2:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010c6:	f000 fc09 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta
 80010ca:	f244 0105 	movw	r1, #16389	; 0x4005
 80010ce:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010d2:	f000 fc03 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010d6:	2101      	movs	r1, #1
 80010d8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010dc:	f000 fbfe 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010e0:	2101      	movs	r1, #1
 80010e2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010e6:	f000 fbf9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010ea:	2101      	movs	r1, #1
 80010ec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80010f0:	f000 fbf4 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80010f4:	2105      	movs	r1, #5
 80010f6:	f24b 5001 	movw	r0, #46337	; 0xb501
 80010fa:	f000 fbef 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80010fe:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001102:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001106:	f000 fbe9 	bl	80018dc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800110a:	2101      	movs	r1, #1
 800110c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001110:	f000 fbe4 	bl	80018dc <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001114:	f000 faec 	bl	80016f0 <Si468x_get_sys_state>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800ae68 	.word	0x0800ae68

08001120 <Si468x_reset>:

void Si468x_reset()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001124:	2101      	movs	r1, #1
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <Si468x_reset+0x30>)
 8001128:	f001 fbd0 	bl	80028cc <send_debug_msg>
	RESET_PIN_LOW;
 800112c:	2200      	movs	r2, #0
 800112e:	2120      	movs	r1, #32
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <Si468x_reset+0x34>)
 8001132:	f004 fbf7 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f003 fdf0 	bl	8004d1c <HAL_Delay>
	RESET_PIN_HIGH;
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <Si468x_reset+0x34>)
 8001142:	f004 fbef 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001146:	20c8      	movs	r0, #200	; 0xc8
 8001148:	f003 fde8 	bl	8004d1c <HAL_Delay>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800aeb8 	.word	0x0800aeb8
 8001154:	40020800 	.word	0x40020800

08001158 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 800115c:	2101      	movs	r1, #1
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <Si468x_power_up+0xa0>)
 8001160:	f001 fbb4 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <Si468x_power_up+0xa4>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <Si468x_power_up+0xa4>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Si468x_power_up+0xa4>)
 8001172:	2217      	movs	r2, #23
 8001174:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <Si468x_power_up+0xa4>)
 8001178:	2250      	movs	r2, #80	; 0x50
 800117a:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <Si468x_power_up+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <Si468x_power_up+0xa4>)
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <Si468x_power_up+0xa4>)
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <Si468x_power_up+0xa4>)
 8001190:	2201      	movs	r2, #1
 8001192:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <Si468x_power_up+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Si468x_power_up+0xa4>)
 800119c:	2210      	movs	r2, #16
 800119e:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <Si468x_power_up+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Si468x_power_up+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Si468x_power_up+0xa4>)
 80011b4:	2228      	movs	r2, #40	; 0x28
 80011b6:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Si468x_power_up+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <Si468x_power_up+0xa4>)
 80011c6:	2010      	movs	r0, #16
 80011c8:	f000 fa58 	bl	800167c <Si468x_write_command>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <Si468x_power_up+0xa8>)
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f003 fda1 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <Si468x_power_up+0xac>)
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fa6f 	bl	80016c0 <Si468x_read_reply>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <Si468x_power_up+0xa8>)
 80011e8:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011ea:	2101      	movs	r1, #1
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <Si468x_power_up+0xb0>)
 80011ee:	f001 fb6d 	bl	80028cc <send_debug_msg>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800aecc 	.word	0x0800aecc
 80011fc:	200001a4 	.word	0x200001a4
 8001200:	200019e4 	.word	0x200019e4
 8001204:	200011a4 	.word	0x200011a4
 8001208:	0800af08 	.word	0x0800af08

0800120c <Si468x_load_init>:

void Si468x_load_init()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <Si468x_load_init+0x44>)
 8001214:	f001 fb5a 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <Si468x_load_init+0x48>)
 800121a:	2206      	movs	r2, #6
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <Si468x_load_init+0x48>)
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001224:	490b      	ldr	r1, [pc, #44]	; (8001254 <Si468x_load_init+0x48>)
 8001226:	2002      	movs	r0, #2
 8001228:	f000 fa28 	bl	800167c <Si468x_write_command>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <Si468x_load_init+0x4c>)
 8001232:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f003 fd71 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <Si468x_load_init+0x50>)
 800123c:	2005      	movs	r0, #5
 800123e:	f000 fa3f 	bl	80016c0 <Si468x_read_reply>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <Si468x_load_init+0x4c>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800af28 	.word	0x0800af28
 8001254:	200001a4 	.word	0x200001a4
 8001258:	200019e4 	.word	0x200019e4
 800125c:	200011a4 	.word	0x200011a4

08001260 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 8001266:	2101      	movs	r1, #1
 8001268:	4830      	ldr	r0, [pc, #192]	; (800132c <Si468x_bootloader_load_host+0xcc>)
 800126a:	f001 fb2f 	bl	80028cc <send_debug_msg>
	Si468x_load_init();
 800126e:	f7ff ffcd 	bl	800120c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001272:	f241 63a4 	movw	r3, #5796	; 0x16a4
 8001276:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	e03e      	b.n	8001314 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001296:	2300      	movs	r3, #0
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	e014      	b.n	80012c6 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800129c:	88ba      	ldrh	r2, [r7, #4]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4924      	ldr	r1, [pc, #144]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012a2:	fba1 1303 	umull	r1, r3, r1, r3
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	441a      	add	r2, r3
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	491f      	ldr	r1, [pc, #124]	; (8001338 <Si468x_bootloader_load_host+0xd8>)
 80012ba:	5c89      	ldrb	r1, [r1, r2]
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012be:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	88ba      	ldrh	r2, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3e1      	bcc.n	800129c <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <Si468x_bootloader_load_host+0xd4>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3304      	adds	r3, #4
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <Si468x_bootloader_load_host+0xd0>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9c6 	bl	800167c <Si468x_write_command>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 80012f6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f003 fd0f 	bl	8004d1c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <Si468x_bootloader_load_host+0xe0>)
 8001300:	2005      	movs	r0, #5
 8001302:	f000 f9dd 	bl	80016c0 <Si468x_read_reply>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <Si468x_bootloader_load_host+0xdc>)
 800130c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	3301      	adds	r3, #1
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d9bd      	bls.n	8001296 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <Si468x_bootloader_load_host+0xe4>)
 800131e:	f001 fad5 	bl	80028cc <send_debug_msg>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	0800af40 	.word	0x0800af40
 8001330:	200001a4 	.word	0x200001a4
 8001334:	aaaaaaab 	.word	0xaaaaaaab
 8001338:	0800c61c 	.word	0x0800c61c
 800133c:	200019e4 	.word	0x200019e4
 8001340:	200011a4 	.word	0x200011a4
 8001344:	0800af7c 	.word	0x0800af7c

08001348 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001350:	2101      	movs	r1, #1
 8001352:	4845      	ldr	r0, [pc, #276]	; (8001468 <Si468x_firmware_load_flash+0x120>)
 8001354:	f001 faba 	bl	80028cc <send_debug_msg>
	Si468x_load_init();
 8001358:	f7ff ff58 	bl	800120c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800135e:	2205      	movs	r2, #5
 8001360:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800137a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001384:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800138e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001398:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800139a:	2100      	movs	r1, #0
 800139c:	4834      	ldr	r0, [pc, #208]	; (8001470 <Si468x_firmware_load_flash+0x128>)
 800139e:	f001 fa95 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013a2:	4b32      	ldr	r3, [pc, #200]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	2210      	movs	r2, #16
 80013a8:	4932      	ldr	r1, [pc, #200]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 fcac 	bl	800ad08 <itoa>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fa89 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	2210      	movs	r2, #16
 80013c0:	492c      	ldr	r1, [pc, #176]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f009 fca0 	bl	800ad08 <itoa>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fa7d 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013d4:	799b      	ldrb	r3, [r3, #6]
 80013d6:	2210      	movs	r2, #16
 80013d8:	4926      	ldr	r1, [pc, #152]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f009 fc94 	bl	800ad08 <itoa>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fa71 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <Si468x_firmware_load_flash+0x124>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	2210      	movs	r2, #16
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <Si468x_firmware_load_flash+0x12c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f009 fc88 	bl	800ad08 <itoa>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2101      	movs	r1, #1
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fa65 	bl	80028cc <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800140a:	2200      	movs	r2, #0
 800140c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001410:	2200      	movs	r2, #0
 8001412:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <Si468x_firmware_load_flash+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <Si468x_firmware_load_flash+0x124>)
 800141c:	200c      	movs	r0, #12
 800141e:	f000 f92d 	bl	800167c <Si468x_write_command>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 8001428:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f003 fc76 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001430:	4912      	ldr	r1, [pc, #72]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001432:	2005      	movs	r0, #5
 8001434:	f000 f944 	bl	80016c0 <Si468x_read_reply>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <Si468x_firmware_load_flash+0x130>)
 800143e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <Si468x_firmware_load_flash+0x134>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800144c:	2101      	movs	r1, #1
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <Si468x_firmware_load_flash+0x138>)
 8001450:	f001 fa3c 	bl	80028cc <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001454:	e003      	b.n	800145e <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 8001456:	2101      	movs	r1, #1
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <Si468x_firmware_load_flash+0x13c>)
 800145a:	f001 fa37 	bl	80028cc <send_debug_msg>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800af9c 	.word	0x0800af9c
 800146c:	200001a4 	.word	0x200001a4
 8001470:	0800afd8 	.word	0x0800afd8
 8001474:	200019a4 	.word	0x200019a4
 8001478:	200019e4 	.word	0x200019e4
 800147c:	200011a4 	.word	0x200011a4
 8001480:	0800afec 	.word	0x0800afec
 8001484:	0800affc 	.word	0x0800affc

08001488 <Si468x_boot>:

void Si468x_boot()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 800148c:	2101      	movs	r1, #1
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <Si468x_boot+0x60>)
 8001490:	f001 fa1c 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <Si468x_boot+0x64>)
 8001496:	2207      	movs	r2, #7
 8001498:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <Si468x_boot+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <Si468x_boot+0x64>)
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f8ea 	bl	800167c <Si468x_write_command>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <Si468x_boot+0x68>)
 80014ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f003 fc33 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014b6:	490f      	ldr	r1, [pc, #60]	; (80014f4 <Si468x_boot+0x6c>)
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 f901 	bl	80016c0 <Si468x_read_reply>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Si468x_boot+0x68>)
 80014c4:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <Si468x_boot+0x6c>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ce:	2bc0      	cmp	r3, #192	; 0xc0
 80014d0:	d104      	bne.n	80014dc <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <Si468x_boot+0x70>)
 80014d6:	f001 f9f9 	bl	80028cc <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014da:	e003      	b.n	80014e4 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014dc:	2101      	movs	r1, #1
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <Si468x_boot+0x74>)
 80014e0:	f001 f9f4 	bl	80028cc <send_debug_msg>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800b018 	.word	0x0800b018
 80014ec:	200001a4 	.word	0x200001a4
 80014f0:	200019e4 	.word	0x200019e4
 80014f4:	200011a4 	.word	0x200011a4
 80014f8:	0800b054 	.word	0x0800b054
 80014fc:	0800b070 	.word	0x0800b070

08001500 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800150a:	1df9      	adds	r1, r7, #7
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <Si468x_write_single_byte+0x20>)
 8001512:	f007 fbdc 	bl	8008cce <HAL_SPI_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20003160 	.word	0x20003160

08001524 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <Si468x_read_single_byte+0x20>)
 8001536:	f007 fd06 	bl	8008f46 <HAL_SPI_Receive>
	return data_buffer;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20003160 	.word	0x20003160

08001548 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	e01f      	b.n	8001598 <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <Si468x_wait_for_CTS+0x6c>)
 800155a:	2001      	movs	r0, #1
 800155c:	f000 f8b0 	bl	80016c0 <Si468x_read_reply>
		if(rd_reply.cts)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00e      	beq.n	800158c <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <Si468x_wait_for_CTS+0x70>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 800157c:	2101      	movs	r1, #1
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <Si468x_wait_for_CTS+0x74>)
 8001580:	f001 f9a4 	bl	80028cc <send_debug_msg>
				return COMMAND_ERROR;
 8001584:	2320      	movs	r3, #32
 8001586:	e010      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 8001588:	2300      	movs	r3, #0
 800158a:	e00e      	b.n	80015aa <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f003 fbc5 	bl	8004d1c <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	81fb      	strh	r3, [r7, #14]
 8001598:	89fa      	ldrh	r2, [r7, #14]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3db      	bcc.n	8001558 <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015a0:	2101      	movs	r1, #1
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <Si468x_wait_for_CTS+0x78>)
 80015a4:	f001 f992 	bl	80028cc <send_debug_msg>
	return TIMEOUT;
 80015a8:	2308      	movs	r3, #8
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200011a4 	.word	0x200011a4
 80015b8:	20001ad4 	.word	0x20001ad4
 80015bc:	0800b084 	.word	0x0800b084
 80015c0:	0800b0ac 	.word	0x0800b0ac

080015c4 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <Si468x_write_multiple+0x4c>)
 80015da:	f004 f9a3 	bl	8005924 <HAL_GPIO_WritePin>
	while(len--)
 80015de:	e009      	b.n	80015f4 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	81fa      	strh	r2, [r7, #14]
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff86 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	80fa      	strh	r2, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80015fe:	2201      	movs	r2, #1
 8001600:	2110      	movs	r1, #16
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <Si468x_write_multiple+0x4c>)
 8001604:	f004 f98e 	bl	8005924 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020800 	.word	0x40020800

08001614 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <Si468x_read_multiple+0x64>)
 800162a:	f004 f97b 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800162e:	2003      	movs	r0, #3
 8001630:	f003 fb74 	bl	8004d1c <HAL_Delay>
	CS_PIN_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <Si468x_read_multiple+0x64>)
 800163a:	f004 f973 	bl	8005924 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff ff5e 	bl	8001500 <Si468x_write_single_byte>
	while(len--)
 8001644:	e009      	b.n	800165a <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	81fa      	strh	r2, [r7, #14]
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	189c      	adds	r4, r3, r2
 8001652:	f7ff ff67 	bl	8001524 <Si468x_read_single_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
	while(len--)
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	80fa      	strh	r2, [r7, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <Si468x_read_multiple+0x64>)
 800166a:	f004 f95b 	bl	8005924 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	40020800 	.word	0x40020800

0800167c <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f7ff ff5c 	bl	8001548 <Si468x_wait_for_CTS>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <Si468x_write_command+0x24>
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b20      	cmp	r3, #32
 800169e:	d10a      	bne.n	80016b6 <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff8d 	bl	80015c4 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ae:	f7ff ff4b 	bl	8001548 <Si468x_wait_for_CTS>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff9f 	bl	8001614 <Si468x_read_multiple>
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <Si468x_read_reply+0x28>)
 80016d8:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <Si468x_read_reply+0x2c>)
 80016dc:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200011a4 	.word	0x200011a4
 80016ec:	20001ad4 	.word	0x20001ad4

080016f0 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4833      	ldr	r0, [pc, #204]	; (80017c4 <Si468x_get_sys_state+0xd4>)
 80016f8:	f001 f8e8 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 80016fe:	2209      	movs	r2, #9
 8001700:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001708:	492f      	ldr	r1, [pc, #188]	; (80017c8 <Si468x_get_sys_state+0xd8>)
 800170a:	2002      	movs	r0, #2
 800170c:	f7ff ffb6 	bl	800167c <Si468x_write_command>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <Si468x_get_sys_state+0xdc>)
 8001716:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f003 faff 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001720:	2005      	movs	r0, #5
 8001722:	f7ff ffcd 	bl	80016c0 <Si468x_read_reply>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <Si468x_get_sys_state+0xdc>)
 800172c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800172e:	2100      	movs	r1, #0
 8001730:	4828      	ldr	r0, [pc, #160]	; (80017d4 <Si468x_get_sys_state+0xe4>)
 8001732:	f001 f8cb 	bl	80028cc <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <Si468x_get_sys_state+0xe0>)
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	2b07      	cmp	r3, #7
 800173c:	d83a      	bhi.n	80017b4 <Si468x_get_sys_state+0xc4>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <Si468x_get_sys_state+0x54>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001765 	.word	0x08001765
 8001748:	0800176f 	.word	0x0800176f
 800174c:	08001779 	.word	0x08001779
 8001750:	08001783 	.word	0x08001783
 8001754:	0800178d 	.word	0x0800178d
 8001758:	08001797 	.word	0x08001797
 800175c:	080017a1 	.word	0x080017a1
 8001760:	080017ab 	.word	0x080017ab
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001764:	2101      	movs	r1, #1
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <Si468x_get_sys_state+0xe8>)
 8001768:	f001 f8b0 	bl	80028cc <send_debug_msg>
			break;
 800176c:	e027      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 800176e:	2101      	movs	r1, #1
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <Si468x_get_sys_state+0xec>)
 8001772:	f001 f8ab 	bl	80028cc <send_debug_msg>
			break;
 8001776:	e022      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001778:	2101      	movs	r1, #1
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <Si468x_get_sys_state+0xf0>)
 800177c:	f001 f8a6 	bl	80028cc <send_debug_msg>
			break;
 8001780:	e01d      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001782:	2101      	movs	r1, #1
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <Si468x_get_sys_state+0xf4>)
 8001786:	f001 f8a1 	bl	80028cc <send_debug_msg>
			break;
 800178a:	e018      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <Si468x_get_sys_state+0xf8>)
 8001790:	f001 f89c 	bl	80028cc <send_debug_msg>
			break;
 8001794:	e013      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 8001796:	2101      	movs	r1, #1
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <Si468x_get_sys_state+0xfc>)
 800179a:	f001 f897 	bl	80028cc <send_debug_msg>
			break;
 800179e:	e00e      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <Si468x_get_sys_state+0x100>)
 80017a4:	f001 f892 	bl	80028cc <send_debug_msg>
			break;
 80017a8:	e009      	b.n	80017be <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <Si468x_get_sys_state+0x104>)
 80017ae:	f001 f88d 	bl	80028cc <send_debug_msg>
			break;
 80017b2:	e004      	b.n	80017be <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <Si468x_get_sys_state+0x108>)
 80017b8:	f001 f888 	bl	80028cc <send_debug_msg>
			break;
 80017bc:	bf00      	nop
	}
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800b0bc 	.word	0x0800b0bc
 80017c8:	200001a4 	.word	0x200001a4
 80017cc:	200019e4 	.word	0x200019e4
 80017d0:	200011a4 	.word	0x200011a4
 80017d4:	0800b0f8 	.word	0x0800b0f8
 80017d8:	0800b104 	.word	0x0800b104
 80017dc:	0800b11c 	.word	0x0800b11c
 80017e0:	0800b134 	.word	0x0800b134
 80017e4:	0800b14c 	.word	0x0800b14c
 80017e8:	0800b174 	.word	0x0800b174
 80017ec:	0800b190 	.word	0x0800b190
 80017f0:	0800b1a8 	.word	0x0800b1a8
 80017f4:	0800b1c4 	.word	0x0800b1c4
 80017f8:	0800b1dc 	.word	0x0800b1dc

080017fc <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001802:	2101      	movs	r1, #1
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <Si468x_get_part_info+0xc0>)
 8001806:	f001 f861 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <Si468x_get_part_info+0xc4>)
 800180c:	2208      	movs	r2, #8
 800180e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001816:	492a      	ldr	r1, [pc, #168]	; (80018c0 <Si468x_get_part_info+0xc4>)
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff ff2f 	bl	800167c <Si468x_write_command>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001824:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f003 fa78 	bl	8004d1c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fe67 	bl	8001500 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ff43 	bl	80016c0 <Si468x_read_reply>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <Si468x_get_part_info+0xc8>)
 8001840:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001842:	2100      	movs	r1, #0
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <Si468x_get_part_info+0xd0>)
 8001846:	f001 f841 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	220a      	movs	r2, #10
 8001850:	491f      	ldr	r1, [pc, #124]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001852:	4618      	mov	r0, r3
 8001854:	f009 fa58 	bl	800ad08 <itoa>
 8001858:	4603      	mov	r3, r0
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f001 f835 	bl	80028cc <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001862:	2100      	movs	r1, #0
 8001864:	481b      	ldr	r0, [pc, #108]	; (80018d4 <Si468x_get_part_info+0xd8>)
 8001866:	f001 f831 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800186c:	795b      	ldrb	r3, [r3, #5]
 800186e:	220a      	movs	r2, #10
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <Si468x_get_part_info+0xd4>)
 8001872:	4618      	mov	r0, r3
 8001874:	f009 fa48 	bl	800ad08 <itoa>
 8001878:	4603      	mov	r3, r0
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f001 f825 	bl	80028cc <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001882:	2100      	movs	r1, #0
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <Si468x_get_part_info+0xdc>)
 8001886:	f001 f821 	bl	80028cc <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <Si468x_get_part_info+0xcc>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	b29b      	uxth	r3, r3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <Si468x_get_part_info+0xcc>)
 8001896:	7a1b      	ldrb	r3, [r3, #8]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4413      	add	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	220a      	movs	r2, #10
 80018a2:	490b      	ldr	r1, [pc, #44]	; (80018d0 <Si468x_get_part_info+0xd4>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f009 fa2f 	bl	800ad08 <itoa>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f80c 	bl	80028cc <send_debug_msg>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800b1f0 	.word	0x0800b1f0
 80018c0:	200001a4 	.word	0x200001a4
 80018c4:	200019e4 	.word	0x200019e4
 80018c8:	200011a4 	.word	0x200011a4
 80018cc:	0800b22c 	.word	0x0800b22c
 80018d0:	200019a4 	.word	0x200019a4
 80018d4:	0800b23c 	.word	0x0800b23c
 80018d8:	0800b248 	.word	0x0800b248

080018dc <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 80018ec:	2101      	movs	r1, #1
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <Si468x_set_property+0xdc>)
 80018f0:	f000 ffec 	bl	80028cc <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80018f4:	2100      	movs	r1, #0
 80018f6:	4831      	ldr	r0, [pc, #196]	; (80019bc <Si468x_set_property+0xe0>)
 80018f8:	f000 ffe8 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	2210      	movs	r2, #16
 8001900:	492f      	ldr	r1, [pc, #188]	; (80019c0 <Si468x_set_property+0xe4>)
 8001902:	4618      	mov	r0, r3
 8001904:	f009 fa00 	bl	800ad08 <itoa>
 8001908:	4603      	mov	r3, r0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f000 ffdd 	bl	80028cc <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001912:	2100      	movs	r1, #0
 8001914:	482b      	ldr	r0, [pc, #172]	; (80019c4 <Si468x_set_property+0xe8>)
 8001916:	f000 ffd9 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	2210      	movs	r2, #16
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <Si468x_set_property+0xe4>)
 8001920:	4618      	mov	r0, r3
 8001922:	f009 f9f1 	bl	800ad08 <itoa>
 8001926:	4603      	mov	r3, r0
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f000 ffce 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <Si468x_set_property+0xec>)
 8001932:	2213      	movs	r2, #19
 8001934:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <Si468x_set_property+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <Si468x_set_property+0xec>)
 8001942:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <Si468x_set_property+0xec>)
 800194e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <Si468x_set_property+0xec>)
 8001956:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Si468x_set_property+0xec>)
 8001962:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <Si468x_set_property+0xec>)
 8001966:	2006      	movs	r0, #6
 8001968:	f7ff fe88 	bl	800167c <Si468x_write_command>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <Si468x_set_property+0xf0>)
 8001972:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f003 f9d1 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800197a:	4915      	ldr	r1, [pc, #84]	; (80019d0 <Si468x_set_property+0xf4>)
 800197c:	2005      	movs	r0, #5
 800197e:	f7ff fe9f 	bl	80016c0 <Si468x_read_reply>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <Si468x_set_property+0xf0>)
 8001988:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f825 	bl	80019dc <Si468x_get_property>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001996:	89fa      	ldrh	r2, [r7, #14]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d104      	bne.n	80019a8 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 800199e:	2101      	movs	r1, #1
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <Si468x_set_property+0xf8>)
 80019a2:	f000 ff93 	bl	80028cc <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019a6:	e003      	b.n	80019b0 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019a8:	2101      	movs	r1, #1
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <Si468x_set_property+0xfc>)
 80019ac:	f000 ff8e 	bl	80028cc <send_debug_msg>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800b258 	.word	0x0800b258
 80019bc:	0800b298 	.word	0x0800b298
 80019c0:	200019a4 	.word	0x200019a4
 80019c4:	0800b2a8 	.word	0x0800b2a8
 80019c8:	200001a4 	.word	0x200001a4
 80019cc:	200019e4 	.word	0x200019e4
 80019d0:	200011a4 	.word	0x200011a4
 80019d4:	0800b2c4 	.word	0x0800b2c4
 80019d8:	0800b2e0 	.word	0x0800b2e0

080019dc <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019e6:	2101      	movs	r1, #1
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <Si468x_get_property+0xbc>)
 80019ea:	f000 ff6f 	bl	80028cc <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019ee:	2100      	movs	r1, #0
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <Si468x_get_property+0xc0>)
 80019f2:	f000 ff6b 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2210      	movs	r2, #16
 80019fa:	4929      	ldr	r1, [pc, #164]	; (8001aa0 <Si468x_get_property+0xc4>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f009 f983 	bl	800ad08 <itoa>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 ff60 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a0e:	2214      	movs	r2, #20
 8001a10:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a1e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2a:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <Si468x_get_property+0xc8>)
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7ff fe24 	bl	800167c <Si468x_write_command>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f003 f96d 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a42:	491a      	ldr	r1, [pc, #104]	; (8001aac <Si468x_get_property+0xd0>)
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff fe3b 	bl	80016c0 <Si468x_read_reply>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <Si468x_get_property+0xcc>)
 8001a50:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <Si468x_get_property+0xd4>)
 8001a56:	f000 ff39 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <Si468x_get_property+0xd0>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <Si468x_get_property+0xd0>)
 8001a62:	7912      	ldrb	r2, [r2, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	2210      	movs	r2, #16
 8001a68:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <Si468x_get_property+0xc4>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f009 f94c 	bl	800ad08 <itoa>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 ff29 	bl	80028cc <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <Si468x_get_property+0xd0>)
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <Si468x_get_property+0xd0>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800b2f8 	.word	0x0800b2f8
 8001a9c:	0800b298 	.word	0x0800b298
 8001aa0:	200019a4 	.word	0x200019a4
 8001aa4:	200001a4 	.word	0x200001a4
 8001aa8:	200019e4 	.word	0x200019e4
 8001aac:	200011a4 	.word	0x200011a4
 8001ab0:	0800b334 	.word	0x0800b334

08001ab4 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4849      	ldr	r0, [pc, #292]	; (8001bec <Si468x_dab_tune_freq+0x138>)
 8001ac8:	f000 ff00 	bl	80028cc <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4848      	ldr	r0, [pc, #288]	; (8001bf0 <Si468x_dab_tune_freq+0x13c>)
 8001ad0:	f000 fefc 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	220a      	movs	r2, #10
 8001ade:	4946      	ldr	r1, [pc, #280]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f009 f911 	bl	800ad08 <itoa>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 feee 	bl	80028cc <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001af0:	2101      	movs	r1, #1
 8001af2:	4842      	ldr	r0, [pc, #264]	; (8001bfc <Si468x_dab_tune_freq+0x148>)
 8001af4:	f000 feea 	bl	80028cc <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001afa:	22b0      	movs	r2, #176	; 0xb0
 8001afc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b04:	4a3e      	ldr	r2, [pc, #248]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b16:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b22:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b24:	4936      	ldr	r1, [pc, #216]	; (8001c00 <Si468x_dab_tune_freq+0x14c>)
 8001b26:	2006      	movs	r0, #6
 8001b28:	f7ff fda8 	bl	800167c <Si468x_write_command>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b32:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b34:	4934      	ldr	r1, [pc, #208]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fdc2 	bl	80016c0 <Si468x_read_reply>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b42:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b52:	2101      	movs	r1, #1
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <Si468x_dab_tune_freq+0x15c>)
 8001b56:	f000 feb9 	bl	80028cc <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e03a      	b.n	8001bd6 <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b60:	4929      	ldr	r1, [pc, #164]	; (8001c08 <Si468x_dab_tune_freq+0x154>)
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff fdac 	bl	80016c0 <Si468x_read_reply>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <Si468x_dab_tune_freq+0x150>)
 8001b6e:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <Si468x_dab_tune_freq+0x158>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4824      	ldr	r0, [pc, #144]	; (8001c14 <Si468x_dab_tune_freq+0x160>)
 8001b82:	f000 fea3 	bl	80028cc <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <Si468x_dab_tune_freq+0x144>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f009 f8bb 	bl	800ad08 <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fe98 	bl	80028cc <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	481e      	ldr	r0, [pc, #120]	; (8001c18 <Si468x_dab_tune_freq+0x164>)
 8001ba0:	f000 fe94 	bl	80028cc <send_debug_msg>
			actual_freq_id = channel;
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <Si468x_dab_tune_freq+0x168>)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <Si468x_dab_tune_freq+0x140>)
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <Si468x_dab_tune_freq+0x16c>)
 8001bb4:	6013      	str	r3, [r2, #0]
			break;
 8001bb6:	e014      	b.n	8001be2 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4817      	ldr	r0, [pc, #92]	; (8001c24 <Si468x_dab_tune_freq+0x170>)
 8001bc6:	f000 fe81 	bl	80028cc <send_debug_msg>
		}
		HAL_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f003 f8a6 	bl	8004d1c <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d9bf      	bls.n	8001b60 <Si468x_dab_tune_freq+0xac>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800b3ec 	.word	0x0800b3ec
 8001bf0:	0800b428 	.word	0x0800b428
 8001bf4:	200019e8 	.word	0x200019e8
 8001bf8:	200019a4 	.word	0x200019a4
 8001bfc:	0800b3a8 	.word	0x0800b3a8
 8001c00:	200001a4 	.word	0x200001a4
 8001c04:	200019e4 	.word	0x200019e4
 8001c08:	200011a4 	.word	0x200011a4
 8001c0c:	20001ad4 	.word	0x20001ad4
 8001c10:	0800afec 	.word	0x0800afec
 8001c14:	0800b434 	.word	0x0800b434
 8001c18:	0800b450 	.word	0x0800b450
 8001c1c:	20003070 	.word	0x20003070
 8001c20:	2000306c 	.word	0x2000306c
 8001c24:	0800b458 	.word	0x0800b458

08001c28 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <Si468x_dab_digrad_status+0x7c>)
 8001c2e:	22b2      	movs	r2, #178	; 0xb2
 8001c30:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <Si468x_dab_digrad_status+0x7c>)
 8001c34:	221a      	movs	r2, #26
 8001c36:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c38:	491a      	ldr	r1, [pc, #104]	; (8001ca4 <Si468x_dab_digrad_status+0x7c>)
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7ff fd1e 	bl	800167c <Si468x_write_command>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <Si468x_dab_digrad_status+0x80>)
 8001c46:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f003 f867 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c4e:	4917      	ldr	r1, [pc, #92]	; (8001cac <Si468x_dab_digrad_status+0x84>)
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f7ff fd35 	bl	80016c0 <Si468x_read_reply>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <Si468x_dab_digrad_status+0x80>)
 8001c5c:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <Si468x_dab_digrad_status+0x88>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d019      	beq.n	8001ca0 <Si468x_dab_digrad_status+0x78>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <Si468x_dab_digrad_status+0x8c>)
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <Si468x_dab_digrad_status+0x84>)
 8001c70:	4615      	mov	r5, r2
 8001c72:	1d1c      	adds	r4, r3, #4
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c80:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <Si468x_dab_digrad_status+0x8c>)
 8001c86:	78db      	ldrb	r3, [r3, #3]
 8001c88:	2b14      	cmp	r3, #20
 8001c8a:	d902      	bls.n	8001c92 <Si468x_dab_digrad_status+0x6a>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <Si468x_dab_digrad_status+0x8c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <Si468x_dab_digrad_status+0x8c>)
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	2b36      	cmp	r3, #54	; 0x36
 8001c98:	d902      	bls.n	8001ca0 <Si468x_dab_digrad_status+0x78>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <Si468x_dab_digrad_status+0x8c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	715a      	strb	r2, [r3, #5]
		}
//		Display_dab_digrad_status_data(dab_digrad_status);
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	200001a4 	.word	0x200001a4
 8001ca8:	200019e4 	.word	0x200019e4
 8001cac:	200011a4 	.word	0x200011a4
 8001cb0:	20001ad4 	.word	0x20001ad4
 8001cb4:	20001aac 	.word	0x20001aac

08001cb8 <Si468x_dab_start_digital_service>:
	total_services += number_of_services;
	actual_services += number_of_services;
}

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	482d      	ldr	r0, [pc, #180]	; (8001d7c <Si468x_dab_start_digital_service+0xc4>)
 8001cc6:	f000 fe01 	bl	80028cc <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001ccc:	2281      	movs	r2, #129	; 0x81
 8001cce:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001ce8:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001cf2:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001cfc:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0e1b      	lsrs	r3, r3, #24
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001d06:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001d0e:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001d18:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001d22:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	0e1b      	lsrs	r3, r3, #24
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001d2c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001d2e:	4914      	ldr	r1, [pc, #80]	; (8001d80 <Si468x_dab_start_digital_service+0xc8>)
 8001d30:	200c      	movs	r0, #12
 8001d32:	f7ff fca3 	bl	800167c <Si468x_write_command>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <Si468x_dab_start_digital_service+0xcc>)
 8001d3c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f002 ffec 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001d44:	4910      	ldr	r1, [pc, #64]	; (8001d88 <Si468x_dab_start_digital_service+0xd0>)
 8001d46:	2005      	movs	r0, #5
 8001d48:	f7ff fcba 	bl	80016c0 <Si468x_read_reply>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <Si468x_dab_start_digital_service+0xcc>)
 8001d52:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <Si468x_dab_start_digital_service+0xd4>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d62:	2101      	movs	r1, #1
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <Si468x_dab_start_digital_service+0xd8>)
 8001d66:	f000 fdb1 	bl	80028cc <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8001d6a:	e003      	b.n	8001d74 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <Si468x_dab_start_digital_service+0xdc>)
 8001d70:	f000 fdac 	bl	80028cc <send_debug_msg>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	0800b4f4 	.word	0x0800b4f4
 8001d80:	200001a4 	.word	0x200001a4
 8001d84:	200019e4 	.word	0x200019e4
 8001d88:	200011a4 	.word	0x200011a4
 8001d8c:	20001ad4 	.word	0x20001ad4
 8001d90:	0800afec 	.word	0x0800afec
 8001d94:	0800b530 	.word	0x0800b530

08001d98 <Si468x_dab_get_audio_info>:


}

void Si468x_dab_get_audio_info()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4865      	ldr	r0, [pc, #404]	; (8001f38 <Si468x_dab_get_audio_info+0x1a0>)
 8001da2:	f000 fd93 	bl	80028cc <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <Si468x_dab_get_audio_info+0x1a4>)
 8001da8:	22bd      	movs	r2, #189	; 0xbd
 8001daa:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <Si468x_dab_get_audio_info+0x1a4>)
 8001dae:	2203      	movs	r2, #3
 8001db0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001db2:	4962      	ldr	r1, [pc, #392]	; (8001f3c <Si468x_dab_get_audio_info+0x1a4>)
 8001db4:	2002      	movs	r0, #2
 8001db6:	f7ff fc61 	bl	800167c <Si468x_write_command>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b60      	ldr	r3, [pc, #384]	; (8001f40 <Si468x_dab_get_audio_info+0x1a8>)
 8001dc0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f002 ffaa 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8001dc8:	495e      	ldr	r1, [pc, #376]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001dca:	2014      	movs	r0, #20
 8001dcc:	f7ff fc78 	bl	80016c0 <Si468x_read_reply>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	; (8001f40 <Si468x_dab_get_audio_info+0x1a8>)
 8001dd6:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001dd8:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001dda:	795b      	ldrb	r3, [r3, #5]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8001dec:	4b55      	ldr	r3, [pc, #340]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001dee:	79db      	ldrb	r3, [r3, #7]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001df8:	799b      	ldrb	r3, [r3, #6]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e02:	7a1b      	ldrb	r3, [r3, #8]
 8001e04:	111b      	asrs	r3, r3, #4
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e10:	7a1b      	ldrb	r3, [r3, #8]
 8001e12:	10db      	asrs	r3, r3, #3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8001e1c:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e1e:	7a1b      	ldrb	r3, [r3, #8]
 8001e20:	109b      	asrs	r3, r3, #2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e2c:	7a1b      	ldrb	r3, [r3, #8]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	703b      	strb	r3, [r7, #0]

	dab_digrad_status.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e36:	7b1b      	ldrb	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e3c:	7b5b      	ldrb	r3, [r3, #13]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	441a      	add	r2, r3
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e44:	7b9b      	ldrb	r3, [r3, #14]
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	441a      	add	r2, r3
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e4c:	7bdb      	ldrb	r3, [r3, #15]
 8001e4e:	061b      	lsls	r3, r3, #24
 8001e50:	4413      	add	r3, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <Si468x_dab_get_audio_info+0x1b0>)
 8001e56:	621a      	str	r2, [r3, #32]
	dab_digrad_status.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8001e58:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e5a:	7c1b      	ldrb	r3, [r3, #16]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e60:	7c5b      	ldrb	r3, [r3, #17]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	441a      	add	r2, r3
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e68:	7c9b      	ldrb	r3, [r3, #18]
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	441a      	add	r2, r3
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <Si468x_dab_get_audio_info+0x1ac>)
 8001e70:	7cdb      	ldrb	r3, [r3, #19]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	4413      	add	r3, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <Si468x_dab_get_audio_info+0x1b0>)
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24

//	Display_dab_digrad_status_data(dab_digrad_status);

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4833      	ldr	r0, [pc, #204]	; (8001f4c <Si468x_dab_get_audio_info+0x1b4>)
 8001e80:	f000 fd24 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	220a      	movs	r2, #10
 8001e88:	4931      	ldr	r1, [pc, #196]	; (8001f50 <Si468x_dab_get_audio_info+0x1b8>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f008 ff3c 	bl	800ad08 <itoa>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fd19 	bl	80028cc <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	482d      	ldr	r0, [pc, #180]	; (8001f54 <Si468x_dab_get_audio_info+0x1bc>)
 8001e9e:	f000 fd15 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8001ea2:	88bb      	ldrh	r3, [r7, #4]
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	492a      	ldr	r1, [pc, #168]	; (8001f50 <Si468x_dab_get_audio_info+0x1b8>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f008 ff2d 	bl	800ad08 <itoa>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fd0a 	bl	80028cc <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4827      	ldr	r0, [pc, #156]	; (8001f58 <Si468x_dab_get_audio_info+0x1c0>)
 8001ebc:	f000 fd06 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	4922      	ldr	r1, [pc, #136]	; (8001f50 <Si468x_dab_get_audio_info+0x1b8>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f008 ff1e 	bl	800ad08 <itoa>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fcfb 	bl	80028cc <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <Si468x_dab_get_audio_info+0x1c4>)
 8001eda:	f000 fcf7 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8001ede:	78bb      	ldrb	r3, [r7, #2]
 8001ee0:	220a      	movs	r2, #10
 8001ee2:	491b      	ldr	r1, [pc, #108]	; (8001f50 <Si468x_dab_get_audio_info+0x1b8>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f008 ff0f 	bl	800ad08 <itoa>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fcec 	bl	80028cc <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	481a      	ldr	r0, [pc, #104]	; (8001f60 <Si468x_dab_get_audio_info+0x1c8>)
 8001ef8:	f000 fce8 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	220a      	movs	r2, #10
 8001f00:	4913      	ldr	r1, [pc, #76]	; (8001f50 <Si468x_dab_get_audio_info+0x1b8>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f008 ff00 	bl	800ad08 <itoa>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fcdd 	bl	80028cc <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8001f12:	2100      	movs	r1, #0
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <Si468x_dab_get_audio_info+0x1cc>)
 8001f16:	f000 fcd9 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8001f1a:	783b      	ldrb	r3, [r7, #0]
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	490c      	ldr	r1, [pc, #48]	; (8001f50 <Si468x_dab_get_audio_info+0x1b8>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f008 fef1 	bl	800ad08 <itoa>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fcce 	bl	80028cc <send_debug_msg>

}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	0800b7b8 	.word	0x0800b7b8
 8001f3c:	200001a4 	.word	0x200001a4
 8001f40:	200019e4 	.word	0x200019e4
 8001f44:	200011a4 	.word	0x200011a4
 8001f48:	20001aac 	.word	0x20001aac
 8001f4c:	0800b7f4 	.word	0x0800b7f4
 8001f50:	200019a4 	.word	0x200019a4
 8001f54:	0800b800 	.word	0x0800b800
 8001f58:	0800b810 	.word	0x0800b810
 8001f5c:	0800b824 	.word	0x0800b824
 8001f60:	0800b830 	.word	0x0800b830
 8001f64:	0800b83c 	.word	0x0800b83c

08001f68 <Si468x_dab_get_component_info>:

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
}

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8001f74:	2101      	movs	r1, #1
 8001f76:	484a      	ldr	r0, [pc, #296]	; (80020a0 <Si468x_dab_get_component_info+0x138>)
 8001f78:	f000 fca8 	bl	80028cc <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001f7e:	22bb      	movs	r2, #187	; 0xbb
 8001f80:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8001f82:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8001f8e:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001f9a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fa4:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fae:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0e1b      	lsrs	r3, r3, #24
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fb8:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8001fba:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	121b      	asrs	r3, r3, #8
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fc8:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	141b      	asrs	r3, r3, #16
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fd2:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	161b      	asrs	r3, r3, #24
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fdc:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8001fde:	4931      	ldr	r1, [pc, #196]	; (80020a4 <Si468x_dab_get_component_info+0x13c>)
 8001fe0:	200c      	movs	r0, #12
 8001fe2:	f7ff fb4b 	bl	800167c <Si468x_write_command>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <Si468x_dab_get_component_info+0x140>)
 8001fec:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8001fee:	2005      	movs	r0, #5
 8001ff0:	f002 fe94 	bl	8004d1c <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8001ff4:	492d      	ldr	r1, [pc, #180]	; (80020ac <Si468x_dab_get_component_info+0x144>)
 8001ff6:	201a      	movs	r0, #26
 8001ff8:	f7ff fb62 	bl	80016c0 <Si468x_read_reply>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <Si468x_dab_get_component_info+0x140>)
 8002002:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <Si468x_dab_get_component_info+0x144>)
 8002006:	799b      	ldrb	r3, [r3, #6]
 8002008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200c:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 800200e:	2300      	movs	r3, #0
 8002010:	77fb      	strb	r3, [r7, #31]
 8002012:	e00c      	b.n	800202e <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002014:	7ffb      	ldrb	r3, [r7, #31]
 8002016:	f103 0208 	add.w	r2, r3, #8
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	4923      	ldr	r1, [pc, #140]	; (80020ac <Si468x_dab_get_component_info+0x144>)
 800201e:	5c8a      	ldrb	r2, [r1, r2]
 8002020:	3320      	adds	r3, #32
 8002022:	443b      	add	r3, r7
 8002024:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002028:	7ffb      	ldrb	r3, [r7, #31]
 800202a:	3301      	adds	r3, #1
 800202c:	77fb      	strb	r3, [r7, #31]
 800202e:	7ffb      	ldrb	r3, [r7, #31]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d9ef      	bls.n	8002014 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <Si468x_dab_get_component_info+0x144>)
 8002036:	7e1b      	ldrb	r3, [r3, #24]
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <Si468x_dab_get_component_info+0x144>)
 800203c:	7e5b      	ldrb	r3, [r3, #25]
 800203e:	b29b      	uxth	r3, r3
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b29b      	uxth	r3, r3
 8002044:	4413      	add	r3, r2
 8002046:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002048:	2100      	movs	r1, #0
 800204a:	4819      	ldr	r0, [pc, #100]	; (80020b0 <Si468x_dab_get_component_info+0x148>)
 800204c:	f000 fc3e 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002050:	7fbb      	ldrb	r3, [r7, #30]
 8002052:	220a      	movs	r2, #10
 8002054:	4917      	ldr	r1, [pc, #92]	; (80020b4 <Si468x_dab_get_component_info+0x14c>)
 8002056:	4618      	mov	r0, r3
 8002058:	f008 fe56 	bl	800ad08 <itoa>
 800205c:	4603      	mov	r3, r0
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fc33 	bl	80028cc <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002066:	2100      	movs	r1, #0
 8002068:	4813      	ldr	r0, [pc, #76]	; (80020b8 <Si468x_dab_get_component_info+0x150>)
 800206a:	f000 fc2f 	bl	80028cc <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	2101      	movs	r1, #1
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fc29 	bl	80028cc <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 800207a:	2100      	movs	r1, #0
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <Si468x_dab_get_component_info+0x154>)
 800207e:	f000 fc25 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002082:	8bbb      	ldrh	r3, [r7, #28]
 8002084:	2202      	movs	r2, #2
 8002086:	490b      	ldr	r1, [pc, #44]	; (80020b4 <Si468x_dab_get_component_info+0x14c>)
 8002088:	4618      	mov	r0, r3
 800208a:	f008 fe3d 	bl	800ad08 <itoa>
 800208e:	4603      	mov	r3, r0
 8002090:	2101      	movs	r1, #1
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fc1a 	bl	80028cc <send_debug_msg>

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	0800b88c 	.word	0x0800b88c
 80020a4:	200001a4 	.word	0x200001a4
 80020a8:	200019e4 	.word	0x200019e4
 80020ac:	200011a4 	.word	0x200011a4
 80020b0:	0800b8c0 	.word	0x0800b8c0
 80020b4:	200019a4 	.word	0x200019a4
 80020b8:	0800b8cc 	.word	0x0800b8cc
 80020bc:	0800b8e0 	.word	0x0800b8e0

080020c0 <play_station>:
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}

void play_station(uint8_t direction)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	if(total_ensembles && total_services)
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <play_station+0x164>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80a3 	beq.w	800221a <play_station+0x15a>
 80020d4:	4b54      	ldr	r3, [pc, #336]	; (8002228 <play_station+0x168>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 809e 	beq.w	800221a <play_station+0x15a>
	{
		switch(direction)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d011      	beq.n	8002108 <play_station+0x48>
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d122      	bne.n	800212e <play_station+0x6e>
		{
			case 2:
				actual_station++;
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <play_station+0x16c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b4e      	ldr	r3, [pc, #312]	; (800222c <play_station+0x16c>)
 80020f2:	701a      	strb	r2, [r3, #0]
				if(actual_station == total_services)
 80020f4:	4b4d      	ldr	r3, [pc, #308]	; (800222c <play_station+0x16c>)
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <play_station+0x168>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d118      	bne.n	8002132 <play_station+0x72>
				{
				  actual_station = 0;
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <play_station+0x16c>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002106:	e014      	b.n	8002132 <play_station+0x72>
			case 1:
				actual_station--;
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <play_station+0x16c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b46      	ldr	r3, [pc, #280]	; (800222c <play_station+0x16c>)
 8002112:	701a      	strb	r2, [r3, #0]
				if(actual_station < 0 || actual_station > total_services)
 8002114:	4b45      	ldr	r3, [pc, #276]	; (800222c <play_station+0x16c>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b43      	ldr	r3, [pc, #268]	; (8002228 <play_station+0x168>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d90a      	bls.n	8002136 <play_station+0x76>
				{
				  actual_station = total_services - 1;
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <play_station+0x168>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <play_station+0x16c>)
 800212a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800212c:	e003      	b.n	8002136 <play_station+0x76>
			default:
				break;
 800212e:	bf00      	nop
 8002130:	e002      	b.n	8002138 <play_station+0x78>
				break;
 8002132:	bf00      	nop
 8002134:	e000      	b.n	8002138 <play_station+0x78>
				break;
 8002136:	bf00      	nop
		}

		last_station_index = actual_station;
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <play_station+0x16c>)
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <play_station+0x170>)
 800213e:	701a      	strb	r2, [r3, #0]

		eeprom_write(LAST_STATION_INDEX_ADDR, &last_station_index, sizeof(last_station_index));
 8002140:	2201      	movs	r2, #1
 8002142:	493b      	ldr	r1, [pc, #236]	; (8002230 <play_station+0x170>)
 8002144:	f240 1007 	movw	r0, #263	; 0x107
 8002148:	f001 fab8 	bl	80036bc <eeprom_write>

		send_debug_msg("---------------------------------", CRLF_SEND);
 800214c:	2101      	movs	r1, #1
 800214e:	4839      	ldr	r0, [pc, #228]	; (8002234 <play_station+0x174>)
 8002150:	f000 fbbc 	bl	80028cc <send_debug_msg>
		send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002154:	2100      	movs	r1, #0
 8002156:	4838      	ldr	r0, [pc, #224]	; (8002238 <play_station+0x178>)
 8002158:	f000 fbb8 	bl	80028cc <send_debug_msg>
		send_debug_msg(itoa(actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 800215c:	4b33      	ldr	r3, [pc, #204]	; (800222c <play_station+0x16c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	220a      	movs	r2, #10
 8002164:	4935      	ldr	r1, [pc, #212]	; (800223c <play_station+0x17c>)
 8002166:	4618      	mov	r0, r3
 8002168:	f008 fdce 	bl	800ad08 <itoa>
 800216c:	4603      	mov	r3, r0
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fbab 	bl	80028cc <send_debug_msg>
		send_debug_msg("Name: ", CRLF_NO_SEND);
 8002176:	2100      	movs	r1, #0
 8002178:	4831      	ldr	r0, [pc, #196]	; (8002240 <play_station+0x180>)
 800217a:	f000 fba7 	bl	80028cc <send_debug_msg>
		send_debug_msg(services_list[actual_station].name, CRLF_SEND);
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <play_station+0x16c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	2334      	movs	r3, #52	; 0x34
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <play_station+0x184>)
 800218c:	4413      	add	r3, r2
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fb9b 	bl	80028cc <send_debug_msg>
		Si468x_dab_tune_freq(services_list[actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <play_station+0x16c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	4a29      	ldr	r2, [pc, #164]	; (8002244 <play_station+0x184>)
 800219e:	2334      	movs	r3, #52	; 0x34
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3328      	adds	r3, #40	; 0x28
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc81 	bl	8001ab4 <Si468x_dab_tune_freq>
		Si468x_dab_get_component_info(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <play_station+0x16c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <play_station+0x184>)
 80021ba:	2334      	movs	r3, #52	; 0x34
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3320      	adds	r3, #32
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <play_station+0x16c>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	491d      	ldr	r1, [pc, #116]	; (8002244 <play_station+0x184>)
 80021ce:	2334      	movs	r3, #52	; 0x34
 80021d0:	fb00 f303 	mul.w	r3, r0, r3
 80021d4:	440b      	add	r3, r1
 80021d6:	332a      	adds	r3, #42	; 0x2a
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f7ff fec3 	bl	8001f68 <Si468x_dab_get_component_info>
		Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <play_station+0x16c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <play_station+0x184>)
 80021ea:	2334      	movs	r3, #52	; 0x34
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3320      	adds	r3, #32
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <play_station+0x16c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	4911      	ldr	r1, [pc, #68]	; (8002244 <play_station+0x184>)
 80021fe:	2334      	movs	r3, #52	; 0x34
 8002200:	fb00 f303 	mul.w	r3, r0, r3
 8002204:	440b      	add	r3, r1
 8002206:	332a      	adds	r3, #42	; 0x2a
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7ff fd53 	bl	8001cb8 <Si468x_dab_start_digital_service>

		Si468x_dab_digrad_status();
 8002212:	f7ff fd09 	bl	8001c28 <Si468x_dab_digrad_status>
		Si468x_dab_get_audio_info();
 8002216:	f7ff fdbf 	bl	8001d98 <Si468x_dab_get_audio_info>


	}

}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20003069 	.word	0x20003069
 8002228:	20003068 	.word	0x20003068
 800222c:	20003071 	.word	0x20003071
 8002230:	20003072 	.word	0x20003072
 8002234:	0800b930 	.word	0x0800b930
 8002238:	0800b954 	.word	0x0800b954
 800223c:	200019a4 	.word	0x200019a4
 8002240:	0800b968 	.word	0x0800b968
 8002244:	20001c18 	.word	0x20001c18

08002248 <restore_from_eeprom>:

void restore_from_eeprom()
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 800224e:	2101      	movs	r1, #1
 8002250:	4895      	ldr	r0, [pc, #596]	; (80024a8 <restore_from_eeprom+0x260>)
 8002252:	f000 fb3b 	bl	80028cc <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &freq_cnt, sizeof(freq_cnt));
 8002256:	2201      	movs	r2, #1
 8002258:	4994      	ldr	r1, [pc, #592]	; (80024ac <restore_from_eeprom+0x264>)
 800225a:	203f      	movs	r0, #63	; 0x3f
 800225c:	f001 fa10 	bl	8003680 <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	75fb      	strb	r3, [r7, #23]
 8002264:	e012      	b.n	800228c <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	3301      	adds	r3, #1
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	4618      	mov	r0, r3
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4a8e      	ldr	r2, [pc, #568]	; (80024b0 <restore_from_eeprom+0x268>)
 8002276:	4413      	add	r3, r2
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	4619      	mov	r1, r3
 800227c:	f001 fa00 	bl	8003680 <eeprom_read>
		HAL_Delay(5);
 8002280:	2005      	movs	r0, #5
 8002282:	f002 fd4b 	bl	8004d1c <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	3301      	adds	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d9e9      	bls.n	8002266 <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 8002292:	2100      	movs	r1, #0
 8002294:	4887      	ldr	r0, [pc, #540]	; (80024b4 <restore_from_eeprom+0x26c>)
 8002296:	f000 fb19 	bl	80028cc <send_debug_msg>
	send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 800229a:	4b84      	ldr	r3, [pc, #528]	; (80024ac <restore_from_eeprom+0x264>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	220a      	movs	r2, #10
 80022a0:	4985      	ldr	r1, [pc, #532]	; (80024b8 <restore_from_eeprom+0x270>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f008 fd30 	bl	800ad08 <itoa>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fb0d 	bl	80028cc <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 80022b2:	2101      	movs	r1, #1
 80022b4:	4881      	ldr	r0, [pc, #516]	; (80024bc <restore_from_eeprom+0x274>)
 80022b6:	f000 fb09 	bl	80028cc <send_debug_msg>
	for(int i = 0; i < freq_cnt; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e022      	b.n	8002306 <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80022c0:	220a      	movs	r2, #10
 80022c2:	497d      	ldr	r1, [pc, #500]	; (80024b8 <restore_from_eeprom+0x270>)
 80022c4:	6938      	ldr	r0, [r7, #16]
 80022c6:	f008 fd1f 	bl	800ad08 <itoa>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fafc 	bl	80028cc <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 80022d4:	2100      	movs	r1, #0
 80022d6:	487a      	ldr	r0, [pc, #488]	; (80024c0 <restore_from_eeprom+0x278>)
 80022d8:	f000 faf8 	bl	80028cc <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 80022dc:	4a74      	ldr	r2, [pc, #464]	; (80024b0 <restore_from_eeprom+0x268>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e4:	220a      	movs	r2, #10
 80022e6:	4974      	ldr	r1, [pc, #464]	; (80024b8 <restore_from_eeprom+0x270>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f008 fd0d 	bl	800ad08 <itoa>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 faea 	bl	80028cc <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 80022f8:	2101      	movs	r1, #1
 80022fa:	4872      	ldr	r0, [pc, #456]	; (80024c4 <restore_from_eeprom+0x27c>)
 80022fc:	f000 fae6 	bl	80028cc <send_debug_msg>
	for(int i = 0; i < freq_cnt; i++)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3301      	adds	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b69      	ldr	r3, [pc, #420]	; (80024ac <restore_from_eeprom+0x264>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4293      	cmp	r3, r2
 8002310:	dbd6      	blt.n	80022c0 <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &total_ensembles, sizeof(total_ensembles));
 8002312:	2201      	movs	r2, #1
 8002314:	496c      	ldr	r1, [pc, #432]	; (80024c8 <restore_from_eeprom+0x280>)
 8002316:	f240 1005 	movw	r0, #261	; 0x105
 800231a:	f001 f9b1 	bl	8003680 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &total_services, sizeof(total_services));
 800231e:	2201      	movs	r2, #1
 8002320:	496a      	ldr	r1, [pc, #424]	; (80024cc <restore_from_eeprom+0x284>)
 8002322:	f44f 7083 	mov.w	r0, #262	; 0x106
 8002326:	f001 f9ab 	bl	8003680 <eeprom_read>

	if(total_services != 0xFF && total_ensembles != 0xFF)
 800232a:	4b68      	ldr	r3, [pc, #416]	; (80024cc <restore_from_eeprom+0x284>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2bff      	cmp	r3, #255	; 0xff
 8002330:	f000 8291 	beq.w	8002856 <restore_from_eeprom+0x60e>
 8002334:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <restore_from_eeprom+0x280>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2bff      	cmp	r3, #255	; 0xff
 800233a:	f000 828c 	beq.w	8002856 <restore_from_eeprom+0x60e>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &actual_freq, sizeof(actual_freq));
 800233e:	2204      	movs	r2, #4
 8002340:	4963      	ldr	r1, [pc, #396]	; (80024d0 <restore_from_eeprom+0x288>)
 8002342:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002346:	f001 f99b 	bl	8003680 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &actual_freq_id, sizeof(actual_freq_id));
 800234a:	2201      	movs	r2, #1
 800234c:	4961      	ldr	r1, [pc, #388]	; (80024d4 <restore_from_eeprom+0x28c>)
 800234e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002352:	f001 f995 	bl	8003680 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &last_station_index, sizeof(last_station_index));
 8002356:	2201      	movs	r2, #1
 8002358:	495f      	ldr	r1, [pc, #380]	; (80024d8 <restore_from_eeprom+0x290>)
 800235a:	f240 1007 	movw	r0, #263	; 0x107
 800235e:	f001 f98f 	bl	8003680 <eeprom_read>
		if(last_station_index == 0xFF)
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <restore_from_eeprom+0x290>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d102      	bne.n	8002370 <restore_from_eeprom+0x128>
		{
			last_station_index = 0;
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <restore_from_eeprom+0x290>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
		}
		actual_station = last_station_index;
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <restore_from_eeprom+0x290>)
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <restore_from_eeprom+0x294>)
 8002376:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < total_ensembles; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e00e      	b.n	800239c <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	3305      	adds	r3, #5
 8002382:	019b      	lsls	r3, r3, #6
 8002384:	4618      	mov	r0, r3
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <restore_from_eeprom+0x298>)
 800238c:	4413      	add	r3, r2
 800238e:	2220      	movs	r2, #32
 8002390:	4619      	mov	r1, r3
 8002392:	f001 f975 	bl	8003680 <eeprom_read>
		for(uint8_t i = 0; i < total_ensembles; i++)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3301      	adds	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <restore_from_eeprom+0x280>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3eb      	bcc.n	800237e <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < total_services; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	73bb      	strb	r3, [r7, #14]
 80023aa:	e010      	b.n	80023ce <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 80023ac:	7bbb      	ldrb	r3, [r7, #14]
 80023ae:	330f      	adds	r3, #15
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	4618      	mov	r0, r3
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	2234      	movs	r2, #52	; 0x34
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <restore_from_eeprom+0x29c>)
 80023be:	4413      	add	r3, r2
 80023c0:	2234      	movs	r2, #52	; 0x34
 80023c2:	4619      	mov	r1, r3
 80023c4:	f001 f95c 	bl	8003680 <eeprom_read>
		for(uint8_t i = 0; i < total_services; i++)
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73bb      	strb	r3, [r7, #14]
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <restore_from_eeprom+0x284>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	7bba      	ldrb	r2, [r7, #14]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3e9      	bcc.n	80023ac <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 80023d8:	2100      	movs	r1, #0
 80023da:	4836      	ldr	r0, [pc, #216]	; (80024b4 <restore_from_eeprom+0x26c>)
 80023dc:	f000 fa76 	bl	80028cc <send_debug_msg>
		send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <restore_from_eeprom+0x264>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	220a      	movs	r2, #10
 80023e6:	4934      	ldr	r1, [pc, #208]	; (80024b8 <restore_from_eeprom+0x270>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f008 fc8d 	bl	800ad08 <itoa>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa6a 	bl	80028cc <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 80023f8:	2101      	movs	r1, #1
 80023fa:	4830      	ldr	r0, [pc, #192]	; (80024bc <restore_from_eeprom+0x274>)
 80023fc:	f000 fa66 	bl	80028cc <send_debug_msg>
		for(int i = 0; i < freq_cnt; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	e022      	b.n	800244c <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8002406:	220a      	movs	r2, #10
 8002408:	492b      	ldr	r1, [pc, #172]	; (80024b8 <restore_from_eeprom+0x270>)
 800240a:	68b8      	ldr	r0, [r7, #8]
 800240c:	f008 fc7c 	bl	800ad08 <itoa>
 8002410:	4603      	mov	r3, r0
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fa59 	bl	80028cc <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 800241a:	2100      	movs	r1, #0
 800241c:	4828      	ldr	r0, [pc, #160]	; (80024c0 <restore_from_eeprom+0x278>)
 800241e:	f000 fa55 	bl	80028cc <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8002422:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <restore_from_eeprom+0x268>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	220a      	movs	r2, #10
 800242c:	4922      	ldr	r1, [pc, #136]	; (80024b8 <restore_from_eeprom+0x270>)
 800242e:	4618      	mov	r0, r3
 8002430:	f008 fc6a 	bl	800ad08 <itoa>
 8002434:	4603      	mov	r3, r0
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa47 	bl	80028cc <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 800243e:	2101      	movs	r1, #1
 8002440:	4820      	ldr	r0, [pc, #128]	; (80024c4 <restore_from_eeprom+0x27c>)
 8002442:	f000 fa43 	bl	80028cc <send_debug_msg>
		for(int i = 0; i < freq_cnt; i++)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3301      	adds	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <restore_from_eeprom+0x264>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4293      	cmp	r3, r2
 8002456:	dbd6      	blt.n	8002406 <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002458:	2100      	movs	r1, #0
 800245a:	4823      	ldr	r0, [pc, #140]	; (80024e8 <restore_from_eeprom+0x2a0>)
 800245c:	f000 fa36 	bl	80028cc <send_debug_msg>
		send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <restore_from_eeprom+0x280>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	220a      	movs	r2, #10
 8002466:	4914      	ldr	r1, [pc, #80]	; (80024b8 <restore_from_eeprom+0x270>)
 8002468:	4618      	mov	r0, r3
 800246a:	f008 fc4d 	bl	800ad08 <itoa>
 800246e:	4603      	mov	r3, r0
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fa2a 	bl	80028cc <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002478:	2101      	movs	r1, #1
 800247a:	481c      	ldr	r0, [pc, #112]	; (80024ec <restore_from_eeprom+0x2a4>)
 800247c:	f000 fa26 	bl	80028cc <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8002480:	2100      	movs	r1, #0
 8002482:	481b      	ldr	r0, [pc, #108]	; (80024f0 <restore_from_eeprom+0x2a8>)
 8002484:	f000 fa22 	bl	80028cc <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002488:	2100      	movs	r1, #0
 800248a:	481a      	ldr	r0, [pc, #104]	; (80024f4 <restore_from_eeprom+0x2ac>)
 800248c:	f000 fa1e 	bl	80028cc <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002490:	2100      	movs	r1, #0
 8002492:	4819      	ldr	r0, [pc, #100]	; (80024f8 <restore_from_eeprom+0x2b0>)
 8002494:	f000 fa1a 	bl	80028cc <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8002498:	2101      	movs	r1, #1
 800249a:	4818      	ldr	r0, [pc, #96]	; (80024fc <restore_from_eeprom+0x2b4>)
 800249c:	f000 fa16 	bl	80028cc <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	71fb      	strb	r3, [r7, #7]
 80024a4:	e081      	b.n	80025aa <restore_from_eeprom+0x362>
 80024a6:	bf00      	nop
 80024a8:	0800b970 	.word	0x0800b970
 80024ac:	20001aa8 	.word	0x20001aa8
 80024b0:	200019e8 	.word	0x200019e8
 80024b4:	0800b384 	.word	0x0800b384
 80024b8:	200019a4 	.word	0x200019a4
 80024bc:	0800b38c 	.word	0x0800b38c
 80024c0:	0800b3a4 	.word	0x0800b3a4
 80024c4:	0800b3a8 	.word	0x0800b3a8
 80024c8:	20003069 	.word	0x20003069
 80024cc:	20003068 	.word	0x20003068
 80024d0:	2000306c 	.word	0x2000306c
 80024d4:	20003070 	.word	0x20003070
 80024d8:	20003072 	.word	0x20003072
 80024dc:	20003071 	.word	0x20003071
 80024e0:	20001ad8 	.word	0x20001ad8
 80024e4:	20001c18 	.word	0x20001c18
 80024e8:	0800b5ec 	.word	0x0800b5ec
 80024ec:	0800b600 	.word	0x0800b600
 80024f0:	0800b634 	.word	0x0800b634
 80024f4:	0800b640 	.word	0x0800b640
 80024f8:	0800b654 	.word	0x0800b654
 80024fc:	0800b664 	.word	0x0800b664
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8002500:	2100      	movs	r1, #0
 8002502:	4865      	ldr	r0, [pc, #404]	; (8002698 <restore_from_eeprom+0x450>)
 8002504:	f000 f9e2 	bl	80028cc <send_debug_msg>
			send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	220a      	movs	r2, #10
 800250c:	4963      	ldr	r1, [pc, #396]	; (800269c <restore_from_eeprom+0x454>)
 800250e:	4618      	mov	r0, r3
 8002510:	f008 fbfa 	bl	800ad08 <itoa>
 8002514:	4603      	mov	r3, r0
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f9d7 	bl	80028cc <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 800251e:	2100      	movs	r1, #0
 8002520:	485f      	ldr	r0, [pc, #380]	; (80026a0 <restore_from_eeprom+0x458>)
 8002522:	f000 f9d3 	bl	80028cc <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	015b      	lsls	r3, r3, #5
 800252a:	4a5e      	ldr	r2, [pc, #376]	; (80026a4 <restore_from_eeprom+0x45c>)
 800252c:	4413      	add	r3, r2
 800252e:	3302      	adds	r3, #2
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f9ca 	bl	80028cc <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8002538:	2100      	movs	r1, #0
 800253a:	4857      	ldr	r0, [pc, #348]	; (8002698 <restore_from_eeprom+0x450>)
 800253c:	f000 f9c6 	bl	80028cc <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <restore_from_eeprom+0x45c>)
 8002544:	015b      	lsls	r3, r3, #5
 8002546:	4413      	add	r3, r2
 8002548:	3318      	adds	r3, #24
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	220a      	movs	r2, #10
 800254e:	4953      	ldr	r1, [pc, #332]	; (800269c <restore_from_eeprom+0x454>)
 8002550:	4618      	mov	r0, r3
 8002552:	f008 fbd9 	bl	800ad08 <itoa>
 8002556:	4603      	mov	r3, r0
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f9b6 	bl	80028cc <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002560:	2100      	movs	r1, #0
 8002562:	4851      	ldr	r0, [pc, #324]	; (80026a8 <restore_from_eeprom+0x460>)
 8002564:	f000 f9b2 	bl	80028cc <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4a4e      	ldr	r2, [pc, #312]	; (80026a4 <restore_from_eeprom+0x45c>)
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	4413      	add	r3, r2
 8002570:	331c      	adds	r3, #28
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <restore_from_eeprom+0x464>)
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f9a4 	bl	80028cc <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4a47      	ldr	r2, [pc, #284]	; (80026a4 <restore_from_eeprom+0x45c>)
 8002588:	015b      	lsls	r3, r3, #5
 800258a:	4413      	add	r3, r2
 800258c:	331c      	adds	r3, #28
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b13      	cmp	r3, #19
 8002592:	d803      	bhi.n	800259c <restore_from_eeprom+0x354>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002594:	2100      	movs	r1, #0
 8002596:	4846      	ldr	r0, [pc, #280]	; (80026b0 <restore_from_eeprom+0x468>)
 8002598:	f000 f998 	bl	80028cc <send_debug_msg>
			}
			send_debug_msg("  |", CRLF_SEND);
 800259c:	2101      	movs	r1, #1
 800259e:	4845      	ldr	r0, [pc, #276]	; (80026b4 <restore_from_eeprom+0x46c>)
 80025a0:	f000 f994 	bl	80028cc <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	3301      	adds	r3, #1
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <restore_from_eeprom+0x470>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3a5      	bcc.n	8002500 <restore_from_eeprom+0x2b8>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80025b4:	2101      	movs	r1, #1
 80025b6:	4841      	ldr	r0, [pc, #260]	; (80026bc <restore_from_eeprom+0x474>)
 80025b8:	f000 f988 	bl	80028cc <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80025bc:	2100      	movs	r1, #0
 80025be:	4840      	ldr	r0, [pc, #256]	; (80026c0 <restore_from_eeprom+0x478>)
 80025c0:	f000 f984 	bl	80028cc <send_debug_msg>
		send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 80025c4:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <restore_from_eeprom+0x47c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	220a      	movs	r2, #10
 80025ca:	4934      	ldr	r1, [pc, #208]	; (800269c <restore_from_eeprom+0x454>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f008 fb9b 	bl	800ad08 <itoa>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f978 	bl	80028cc <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80025dc:	2101      	movs	r1, #1
 80025de:	483a      	ldr	r0, [pc, #232]	; (80026c8 <restore_from_eeprom+0x480>)
 80025e0:	f000 f974 	bl	80028cc <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80025e4:	2101      	movs	r1, #1
 80025e6:	4839      	ldr	r0, [pc, #228]	; (80026cc <restore_from_eeprom+0x484>)
 80025e8:	f000 f970 	bl	80028cc <send_debug_msg>

		for(uint8_t services_index = 0; services_index < total_services; services_index++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	71bb      	strb	r3, [r7, #6]
 80025f0:	e115      	b.n	800281e <restore_from_eeprom+0x5d6>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80025f2:	2100      	movs	r1, #0
 80025f4:	4828      	ldr	r0, [pc, #160]	; (8002698 <restore_from_eeprom+0x450>)
 80025f6:	f000 f969 	bl	80028cc <send_debug_msg>
			send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 80025fa:	79bb      	ldrb	r3, [r7, #6]
 80025fc:	220a      	movs	r2, #10
 80025fe:	4927      	ldr	r1, [pc, #156]	; (800269c <restore_from_eeprom+0x454>)
 8002600:	4618      	mov	r0, r3
 8002602:	f008 fb81 	bl	800ad08 <itoa>
 8002606:	4603      	mov	r3, r0
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f95e 	bl	80028cc <send_debug_msg>
			if(services_index < 10)
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	2b09      	cmp	r3, #9
 8002614:	d803      	bhi.n	800261e <restore_from_eeprom+0x3d6>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002616:	2100      	movs	r1, #0
 8002618:	4825      	ldr	r0, [pc, #148]	; (80026b0 <restore_from_eeprom+0x468>)
 800261a:	f000 f957 	bl	80028cc <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800261e:	2100      	movs	r1, #0
 8002620:	482b      	ldr	r0, [pc, #172]	; (80026d0 <restore_from_eeprom+0x488>)
 8002622:	f000 f953 	bl	80028cc <send_debug_msg>

			//Name
			if(services_list[services_index].name[0])
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <restore_from_eeprom+0x48c>)
 800262a:	2134      	movs	r1, #52	; 0x34
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <restore_from_eeprom+0x406>
			{
				send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002638:	79bb      	ldrb	r3, [r7, #6]
 800263a:	2234      	movs	r2, #52	; 0x34
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <restore_from_eeprom+0x48c>)
 8002642:	4413      	add	r3, r2
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f940 	bl	80028cc <send_debug_msg>
 800264c:	e003      	b.n	8002656 <restore_from_eeprom+0x40e>
			}
			else
			{
				send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 800264e:	2100      	movs	r1, #0
 8002650:	4821      	ldr	r0, [pc, #132]	; (80026d8 <restore_from_eeprom+0x490>)
 8002652:	f000 f93b 	bl	80028cc <send_debug_msg>
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002656:	2100      	movs	r1, #0
 8002658:	4820      	ldr	r0, [pc, #128]	; (80026dc <restore_from_eeprom+0x494>)
 800265a:	f000 f937 	bl	80028cc <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < total_ensembles; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	717b      	strb	r3, [r7, #5]
 8002662:	e040      	b.n	80026e6 <restore_from_eeprom+0x49e>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002664:	797b      	ldrb	r3, [r7, #5]
 8002666:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <restore_from_eeprom+0x45c>)
 8002668:	015b      	lsls	r3, r3, #5
 800266a:	4413      	add	r3, r2
 800266c:	331c      	adds	r3, #28
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	4918      	ldr	r1, [pc, #96]	; (80026d4 <restore_from_eeprom+0x48c>)
 8002674:	2034      	movs	r0, #52	; 0x34
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	440b      	add	r3, r1
 800267c:	3328      	adds	r3, #40	; 0x28
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d12d      	bne.n	80026e0 <restore_from_eeprom+0x498>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002684:	797b      	ldrb	r3, [r7, #5]
 8002686:	015b      	lsls	r3, r3, #5
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <restore_from_eeprom+0x45c>)
 800268a:	4413      	add	r3, r2
 800268c:	3302      	adds	r3, #2
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f91b 	bl	80028cc <send_debug_msg>
					break;
 8002696:	e02b      	b.n	80026f0 <restore_from_eeprom+0x4a8>
 8002698:	0800b674 	.word	0x0800b674
 800269c:	200019a4 	.word	0x200019a4
 80026a0:	0800b678 	.word	0x0800b678
 80026a4:	20001ad8 	.word	0x20001ad8
 80026a8:	0800b684 	.word	0x0800b684
 80026ac:	20000008 	.word	0x20000008
 80026b0:	0800b68c 	.word	0x0800b68c
 80026b4:	0800b690 	.word	0x0800b690
 80026b8:	20003069 	.word	0x20003069
 80026bc:	0800b600 	.word	0x0800b600
 80026c0:	0800b694 	.word	0x0800b694
 80026c4:	20003068 	.word	0x20003068
 80026c8:	0800b6a8 	.word	0x0800b6a8
 80026cc:	0800b714 	.word	0x0800b714
 80026d0:	0800b780 	.word	0x0800b780
 80026d4:	20001c18 	.word	0x20001c18
 80026d8:	0800b788 	.word	0x0800b788
 80026dc:	0800b79c 	.word	0x0800b79c
			for(uint8_t i = 0; i < total_ensembles; i++)
 80026e0:	797b      	ldrb	r3, [r7, #5]
 80026e2:	3301      	adds	r3, #1
 80026e4:	717b      	strb	r3, [r7, #5]
 80026e6:	4b68      	ldr	r3, [pc, #416]	; (8002888 <restore_from_eeprom+0x640>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	797a      	ldrb	r2, [r7, #5]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3b9      	bcc.n	8002664 <restore_from_eeprom+0x41c>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80026f0:	2100      	movs	r1, #0
 80026f2:	4866      	ldr	r0, [pc, #408]	; (800288c <restore_from_eeprom+0x644>)
 80026f4:	f000 f8ea 	bl	80028cc <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	4a65      	ldr	r2, [pc, #404]	; (8002890 <restore_from_eeprom+0x648>)
 80026fc:	2134      	movs	r1, #52	; 0x34
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3324      	adds	r3, #36	; 0x24
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	220a      	movs	r2, #10
 800270a:	4962      	ldr	r1, [pc, #392]	; (8002894 <restore_from_eeprom+0x64c>)
 800270c:	4618      	mov	r0, r3
 800270e:	f008 fafb 	bl	800ad08 <itoa>
 8002712:	4603      	mov	r3, r0
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f8d8 	bl	80028cc <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800271c:	2100      	movs	r1, #0
 800271e:	485e      	ldr	r0, [pc, #376]	; (8002898 <restore_from_eeprom+0x650>)
 8002720:	f000 f8d4 	bl	80028cc <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <restore_from_eeprom+0x648>)
 8002728:	2134      	movs	r1, #52	; 0x34
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3328      	adds	r3, #40	; 0x28
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b59      	ldr	r3, [pc, #356]	; (800289c <restore_from_eeprom+0x654>)
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8c4 	bl	80028cc <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8002744:	79bb      	ldrb	r3, [r7, #6]
 8002746:	4a52      	ldr	r2, [pc, #328]	; (8002890 <restore_from_eeprom+0x648>)
 8002748:	2134      	movs	r1, #52	; 0x34
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3328      	adds	r3, #40	; 0x28
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b13      	cmp	r3, #19
 8002756:	d803      	bhi.n	8002760 <restore_from_eeprom+0x518>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002758:	2100      	movs	r1, #0
 800275a:	4851      	ldr	r0, [pc, #324]	; (80028a0 <restore_from_eeprom+0x658>)
 800275c:	f000 f8b6 	bl	80028cc <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002760:	2100      	movs	r1, #0
 8002762:	4850      	ldr	r0, [pc, #320]	; (80028a4 <restore_from_eeprom+0x65c>)
 8002764:	f000 f8b2 	bl	80028cc <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002768:	79bb      	ldrb	r3, [r7, #6]
 800276a:	4a49      	ldr	r2, [pc, #292]	; (8002890 <restore_from_eeprom+0x648>)
 800276c:	2134      	movs	r1, #52	; 0x34
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3315      	adds	r3, #21
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	220a      	movs	r2, #10
 800277a:	4946      	ldr	r1, [pc, #280]	; (8002894 <restore_from_eeprom+0x64c>)
 800277c:	4618      	mov	r0, r3
 800277e:	f008 fac3 	bl	800ad08 <itoa>
 8002782:	4603      	mov	r3, r0
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f8a0 	bl	80028cc <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	4a40      	ldr	r2, [pc, #256]	; (8002890 <restore_from_eeprom+0x648>)
 8002790:	2134      	movs	r1, #52	; 0x34
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3315      	adds	r3, #21
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d803      	bhi.n	80027a8 <restore_from_eeprom+0x560>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80027a0:	2100      	movs	r1, #0
 80027a2:	483f      	ldr	r0, [pc, #252]	; (80028a0 <restore_from_eeprom+0x658>)
 80027a4:	f000 f892 	bl	80028cc <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80027a8:	2100      	movs	r1, #0
 80027aa:	483e      	ldr	r0, [pc, #248]	; (80028a4 <restore_from_eeprom+0x65c>)
 80027ac:	f000 f88e 	bl	80028cc <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80027b0:	2100      	movs	r1, #0
 80027b2:	483d      	ldr	r0, [pc, #244]	; (80028a8 <restore_from_eeprom+0x660>)
 80027b4:	f000 f88a 	bl	80028cc <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	4a35      	ldr	r2, [pc, #212]	; (8002890 <restore_from_eeprom+0x648>)
 80027bc:	2134      	movs	r1, #52	; 0x34
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3320      	adds	r3, #32
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	4932      	ldr	r1, [pc, #200]	; (8002894 <restore_from_eeprom+0x64c>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f008 fa9b 	bl	800ad08 <itoa>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f878 	bl	80028cc <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80027dc:	2100      	movs	r1, #0
 80027de:	4833      	ldr	r0, [pc, #204]	; (80028ac <restore_from_eeprom+0x664>)
 80027e0:	f000 f874 	bl	80028cc <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80027e4:	2100      	movs	r1, #0
 80027e6:	4830      	ldr	r0, [pc, #192]	; (80028a8 <restore_from_eeprom+0x660>)
 80027e8:	f000 f870 	bl	80028cc <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	4a28      	ldr	r2, [pc, #160]	; (8002890 <restore_from_eeprom+0x648>)
 80027f0:	2134      	movs	r1, #52	; 0x34
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	332a      	adds	r3, #42	; 0x2a
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	4925      	ldr	r1, [pc, #148]	; (8002894 <restore_from_eeprom+0x64c>)
 8002800:	4618      	mov	r0, r3
 8002802:	f008 fa81 	bl	800ad08 <itoa>
 8002806:	4603      	mov	r3, r0
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f85e 	bl	80028cc <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8002810:	2101      	movs	r1, #1
 8002812:	4827      	ldr	r0, [pc, #156]	; (80028b0 <restore_from_eeprom+0x668>)
 8002814:	f000 f85a 	bl	80028cc <send_debug_msg>
		for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	3301      	adds	r3, #1
 800281c:	71bb      	strb	r3, [r7, #6]
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <restore_from_eeprom+0x66c>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	79ba      	ldrb	r2, [r7, #6]
 8002824:	429a      	cmp	r2, r3
 8002826:	f4ff aee4 	bcc.w	80025f2 <restore_from_eeprom+0x3aa>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800282a:	2101      	movs	r1, #1
 800282c:	4822      	ldr	r0, [pc, #136]	; (80028b8 <restore_from_eeprom+0x670>)
 800282e:	f000 f84d 	bl	80028cc <send_debug_msg>


		Si468x_dab_tune_freq(services_list[actual_station].freq_id, 0);
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <restore_from_eeprom+0x674>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <restore_from_eeprom+0x648>)
 800283a:	2334      	movs	r3, #52	; 0x34
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3328      	adds	r3, #40	; 0x28
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f933 	bl	8001ab4 <Si468x_dab_tune_freq>
		play_station(0);
 800284e:	2000      	movs	r0, #0
 8002850:	f7ff fc36 	bl	80020c0 <play_station>
 8002854:	e013      	b.n	800287e <restore_from_eeprom+0x636>

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 8002856:	2101      	movs	r1, #1
 8002858:	4819      	ldr	r0, [pc, #100]	; (80028c0 <restore_from_eeprom+0x678>)
 800285a:	f000 f837 	bl	80028cc <send_debug_msg>
		actual_freq = 0;
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <restore_from_eeprom+0x67c>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
		actual_freq_id = 0;
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <restore_from_eeprom+0x680>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
		total_ensembles = 0;
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <restore_from_eeprom+0x640>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
		total_services = 0;
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <restore_from_eeprom+0x66c>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
		actual_station = 0;
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <restore_from_eeprom+0x674>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20003069 	.word	0x20003069
 800288c:	0800b79c 	.word	0x0800b79c
 8002890:	20001c18 	.word	0x20001c18
 8002894:	200019a4 	.word	0x200019a4
 8002898:	0800b684 	.word	0x0800b684
 800289c:	20000008 	.word	0x20000008
 80028a0:	0800b68c 	.word	0x0800b68c
 80028a4:	0800b7a0 	.word	0x0800b7a0
 80028a8:	0800b7a8 	.word	0x0800b7a8
 80028ac:	0800b780 	.word	0x0800b780
 80028b0:	0800b7ac 	.word	0x0800b7ac
 80028b4:	20003068 	.word	0x20003068
 80028b8:	0800b6a8 	.word	0x0800b6a8
 80028bc:	20003071 	.word	0x20003071
 80028c0:	0800b9ac 	.word	0x0800b9ac
 80028c4:	2000306c 	.word	0x2000306c
 80028c8:	20003070 	.word	0x20003070

080028cc <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7fd fc75 	bl	80001c8 <strlen>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	2364      	movs	r3, #100	; 0x64
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	480a      	ldr	r0, [pc, #40]	; (8002914 <send_debug_msg+0x48>)
 80028ec:	f007 fe5b 	bl	800a5a6 <HAL_UART_Transmit>

	if(is_crlf)
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80028f6:	f640 230d 	movw	r3, #2573	; 0xa0d
 80028fa:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80028fc:	f107 010c 	add.w	r1, r7, #12
 8002900:	2364      	movs	r3, #100	; 0x64
 8002902:	2202      	movs	r2, #2
 8002904:	4803      	ldr	r0, [pc, #12]	; (8002914 <send_debug_msg+0x48>)
 8002906:	f007 fe4e 	bl	800a5a6 <HAL_UART_Transmit>
	}
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20003398 	.word	0x20003398

08002918 <Display_clear_screen>:

uint8_t display_freeze = 0;


void Display_clear_screen()
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fd ffc6 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8002924:	2311      	movs	r3, #17
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800292c:	2211      	movs	r2, #17
 800292e:	2100      	movs	r1, #0
 8002930:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002934:	f7fe f847 	bl	80009c6 <ILI9341_Draw_Line>
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <Display_booting_screen>:

void Display_booting_screen()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fd ffb2 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 800294c:	2302      	movs	r3, #2
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <Display_booting_screen+0xc4>)
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800295a:	2128      	movs	r1, #40	; 0x28
 800295c:	205f      	movs	r0, #95	; 0x5f
 800295e:	f7fe f8b3 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8002962:	2302      	movs	r3, #2
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <Display_booting_screen+0xc8>)
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002970:	213c      	movs	r1, #60	; 0x3c
 8002972:	2046      	movs	r0, #70	; 0x46
 8002974:	f7fe f8a8 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8002978:	2302      	movs	r3, #2
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <Display_booting_screen+0xcc>)
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2300      	movs	r3, #0
 8002982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002986:	2150      	movs	r1, #80	; 0x50
 8002988:	2082      	movs	r0, #130	; 0x82
 800298a:	f7fe f89d 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 800298e:	2302      	movs	r3, #2
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <Display_booting_screen+0xd0>)
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299c:	2164      	movs	r1, #100	; 0x64
 800299e:	2064      	movs	r0, #100	; 0x64
 80029a0:	f7fe f892 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 80029a4:	2302      	movs	r3, #2
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <Display_booting_screen+0xd4>)
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b2:	2178      	movs	r1, #120	; 0x78
 80029b4:	205a      	movs	r0, #90	; 0x5a
 80029b6:	f7fe f887 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 80029ba:	2302      	movs	r3, #2
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <Display_booting_screen+0xd8>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c8:	218c      	movs	r1, #140	; 0x8c
 80029ca:	2032      	movs	r0, #50	; 0x32
 80029cc:	f7fe f87c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 80029d0:	2302      	movs	r3, #2
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <Display_booting_screen+0xdc>)
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2300      	movs	r3, #0
 80029da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029de:	21a0      	movs	r1, #160	; 0xa0
 80029e0:	205a      	movs	r0, #90	; 0x5a
 80029e2:	f7fe f871 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 80029e6:	2302      	movs	r3, #2
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <Display_booting_screen+0xe0>)
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2300      	movs	r3, #0
 80029f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f4:	21b4      	movs	r1, #180	; 0xb4
 80029f6:	2078      	movs	r0, #120	; 0x78
 80029f8:	f7fe f866 	bl	8000ac8 <ILI9341_Draw_String>
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	0800ba74 	.word	0x0800ba74
 8002a08:	0800ba84 	.word	0x0800ba84
 8002a0c:	0800ba9c 	.word	0x0800ba9c
 8002a10:	0800baa4 	.word	0x0800baa4
 8002a14:	0800bab4 	.word	0x0800bab4
 8002a18:	0800bac8 	.word	0x0800bac8
 8002a1c:	0800bae4 	.word	0x0800bae4
 8002a20:	0800baf8 	.word	0x0800baf8

08002a24 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8002a2a:	f7ff ff75 	bl	8002918 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2); //Naglowek
 8002a2e:	2302      	movs	r3, #2
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <Display_main_screen_background+0x110>)
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2300      	movs	r3, #0
 8002a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	2005      	movs	r0, #5
 8002a40:	f7fe f842 	bl	8000ac8 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8002a44:	2328      	movs	r3, #40	; 0x28
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	238c      	movs	r3, #140	; 0x8c
 8002a4a:	2214      	movs	r2, #20
 8002a4c:	2105      	movs	r1, #5
 8002a4e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002a52:	f7fd ff97 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8002a56:	2341      	movs	r3, #65	; 0x41
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	238c      	movs	r3, #140	; 0x8c
 8002a5c:	222d      	movs	r2, #45	; 0x2d
 8002a5e:	2105      	movs	r1, #5
 8002a60:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002a64:	f7fd ff8e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8002a68:	235a      	movs	r3, #90	; 0x5a
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	238c      	movs	r3, #140	; 0x8c
 8002a6e:	2246      	movs	r2, #70	; 0x46
 8002a70:	2105      	movs	r1, #5
 8002a72:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002a76:	f7fd ff85 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8002a7a:	2373      	movs	r3, #115	; 0x73
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	238c      	movs	r3, #140	; 0x8c
 8002a80:	225f      	movs	r2, #95	; 0x5f
 8002a82:	2105      	movs	r1, #5
 8002a84:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002a88:	f7fd ff7c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8002a8c:	238c      	movs	r3, #140	; 0x8c
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	238c      	movs	r3, #140	; 0x8c
 8002a92:	2278      	movs	r2, #120	; 0x78
 8002a94:	2105      	movs	r1, #5
 8002a96:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002a9a:	f7fd ff73 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8002a9e:	23a5      	movs	r3, #165	; 0xa5
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	238c      	movs	r3, #140	; 0x8c
 8002aa4:	2291      	movs	r2, #145	; 0x91
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002aac:	f7fd ff6a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8002ab0:	23be      	movs	r3, #190	; 0xbe
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	238c      	movs	r3, #140	; 0x8c
 8002ab6:	22aa      	movs	r2, #170	; 0xaa
 8002ab8:	2105      	movs	r1, #5
 8002aba:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002abe:	f7fd ff61 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8002ac2:	23be      	movs	r3, #190	; 0xbe
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f240 133b 	movw	r3, #315	; 0x13b
 8002aca:	2214      	movs	r2, #20
 8002acc:	2191      	movs	r1, #145	; 0x91
 8002ace:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002ad2:	f7fd ff57 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8002ad6:	23eb      	movs	r3, #235	; 0xeb
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	239d      	movs	r3, #157	; 0x9d
 8002adc:	22c3      	movs	r2, #195	; 0xc3
 8002ade:	2105      	movs	r1, #5
 8002ae0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002ae4:	f7fd ff4e 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8002ae8:	23eb      	movs	r3, #235	; 0xeb
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f240 133b 	movw	r3, #315	; 0x13b
 8002af0:	22c3      	movs	r2, #195	; 0xc3
 8002af2:	21a3      	movs	r1, #163	; 0xa3
 8002af4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002af8:	f7fd ff44 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8002afc:	2302      	movs	r3, #2
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <Display_main_screen_background+0x114>)
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0c:	21cf      	movs	r1, #207	; 0xcf
 8002b0e:	2032      	movs	r0, #50	; 0x32
 8002b10:	f7fd ffda 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(197, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8002b14:	2302      	movs	r3, #2
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <Display_main_screen_background+0x118>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b24:	21cf      	movs	r1, #207	; 0xcf
 8002b26:	20c5      	movs	r0, #197	; 0xc5
 8002b28:	f7fd ffce 	bl	8000ac8 <ILI9341_Draw_String>
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	0800bb04 	.word	0x0800bb04
 8002b38:	0800bb14 	.word	0x0800bb14
 8002b3c:	0800bb20 	.word	0x0800bb20

08002b40 <Display_stations_list_background>:
	//Station picture background

}

void Display_stations_list_background()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8002b46:	f7ff fee7 	bl	8002918 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2); //Naglowek
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <Display_stations_list_background+0x174>)
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	f7fd ffb4 	bl	8000ac8 <ILI9341_Draw_String>

	//Station 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8002b60:	2332      	movs	r3, #50	; 0x32
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f240 131d 	movw	r3, #285	; 0x11d
 8002b68:	2214      	movs	r2, #20
 8002b6a:	2105      	movs	r1, #5
 8002b6c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002b70:	f7fd ff08 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8002b74:	2355      	movs	r3, #85	; 0x55
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	f240 131d 	movw	r3, #285	; 0x11d
 8002b7c:	2237      	movs	r2, #55	; 0x37
 8002b7e:	2105      	movs	r1, #5
 8002b80:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002b84:	f7fd fefe 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8002b88:	2378      	movs	r3, #120	; 0x78
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f240 131d 	movw	r3, #285	; 0x11d
 8002b90:	225a      	movs	r2, #90	; 0x5a
 8002b92:	2105      	movs	r1, #5
 8002b94:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002b98:	f7fd fef4 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8002b9c:	239b      	movs	r3, #155	; 0x9b
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f240 131d 	movw	r3, #285	; 0x11d
 8002ba4:	227d      	movs	r2, #125	; 0x7d
 8002ba6:	2105      	movs	r1, #5
 8002ba8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002bac:	f7fd feea 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Station 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8002bb0:	23be      	movs	r3, #190	; 0xbe
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	f240 131d 	movw	r3, #285	; 0x11d
 8002bb8:	22a0      	movs	r2, #160	; 0xa0
 8002bba:	2105      	movs	r1, #5
 8002bbc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002bc0:	f7fd fee0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>


	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8002bc4:	2366      	movs	r3, #102	; 0x66
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f240 133b 	movw	r3, #315	; 0x13b
 8002bcc:	2214      	movs	r2, #20
 8002bce:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002bd2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002bd6:	f7fd fed5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8002bda:	2302      	movs	r3, #2
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <Display_stations_list_background+0x178>)
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	2138      	movs	r1, #56	; 0x38
 8002bec:	f240 1027 	movw	r0, #295	; 0x127
 8002bf0:	f7fd ff6a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <Display_stations_list_background+0x17c>)
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c04:	2138      	movs	r1, #56	; 0x38
 8002c06:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8002c0a:	f7fd ff5d 	bl	8000ac8 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8002c0e:	23be      	movs	r3, #190	; 0xbe
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	f240 133b 	movw	r3, #315	; 0x13b
 8002c16:	226c      	movs	r2, #108	; 0x6c
 8002c18:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002c1c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002c20:	f7fd feb0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8002c24:	2302      	movs	r3, #2
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <Display_stations_list_background+0x17c>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c34:	2192      	movs	r1, #146	; 0x92
 8002c36:	f240 1027 	movw	r0, #295	; 0x127
 8002c3a:	f7fd ff45 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <Display_stations_list_background+0x178>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c4e:	2192      	movs	r1, #146	; 0x92
 8002c50:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8002c54:	f7fd ff38 	bl	8000ac8 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8002c58:	23eb      	movs	r3, #235	; 0xeb
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	239d      	movs	r3, #157	; 0x9d
 8002c5e:	22c3      	movs	r2, #195	; 0xc3
 8002c60:	2105      	movs	r1, #5
 8002c62:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002c66:	f7fd fe8d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8002c6a:	23eb      	movs	r3, #235	; 0xeb
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f240 133b 	movw	r3, #315	; 0x13b
 8002c72:	22c3      	movs	r2, #195	; 0xc3
 8002c74:	21a3      	movs	r1, #163	; 0xa3
 8002c76:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002c7a:	f7fd fe83 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8002c7e:	2302      	movs	r3, #2
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <Display_stations_list_background+0x180>)
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8e:	21cf      	movs	r1, #207	; 0xcf
 8002c90:	2023      	movs	r0, #35	; 0x23
 8002c92:	f7fd ff19 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(208, 207, WHITE, ORANGE, "SETTINGS", 2);
 8002c96:	2302      	movs	r3, #2
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <Display_stations_list_background+0x184>)
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca6:	21cf      	movs	r1, #207	; 0xcf
 8002ca8:	20d0      	movs	r0, #208	; 0xd0
 8002caa:	f7fd ff0d 	bl	8000ac8 <ILI9341_Draw_String>

}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	0800bb30 	.word	0x0800bb30
 8002cb8:	0800bb44 	.word	0x0800bb44
 8002cbc:	0800bb48 	.word	0x0800bb48
 8002cc0:	0800bb20 	.word	0x0800bb20
 8002cc4:	0800bb14 	.word	0x0800bb14

08002cc8 <Display_stations_list_data>:

void Display_stations_list_data(uint8_t start_station_index)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b093      	sub	sp, #76	; 0x4c
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
	dab_service_t temp;

	for(uint8_t i = 0; i < 5; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002cd8:	e118      	b.n	8002f0c <Display_stations_list_data+0x244>
	{
		if((i + start_station_index + 1) < 10)
 8002cda:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	dc33      	bgt.n	8002d4e <Display_stations_list_data+0x86>
		{
			ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 8002ce6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00da      	lsls	r2, r3, #3
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	331c      	adds	r3, #28
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <Display_stations_list_data+0x258>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d08:	2008      	movs	r0, #8
 8002d0a:	f7fd fedd 	bl	8000ac8 <ILI9341_Draw_String>
			ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8002d0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00da      	lsls	r2, r3, #3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	331c      	adds	r3, #28
 8002d1e:	461c      	mov	r4, r3
 8002d20:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	4413      	add	r3, r2
 8002d28:	3301      	adds	r3, #1
 8002d2a:	220a      	movs	r2, #10
 8002d2c:	497d      	ldr	r1, [pc, #500]	; (8002f24 <Display_stations_list_data+0x25c>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f007 ffea 	bl	800ad08 <itoa>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2202      	movs	r2, #2
 8002d38:	9201      	str	r2, [sp, #4]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d44:	4621      	mov	r1, r4
 8002d46:	2011      	movs	r0, #17
 8002d48:	f7fd febe 	bl	8000ac8 <ILI9341_Draw_String>
 8002d4c:	e01e      	b.n	8002d8c <Display_stations_list_data+0xc4>
		}
		else
		{
			ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8002d4e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00da      	lsls	r2, r3, #3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	331c      	adds	r3, #28
 8002d5e:	461c      	mov	r4, r3
 8002d60:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4413      	add	r3, r2
 8002d68:	3301      	adds	r3, #1
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	496d      	ldr	r1, [pc, #436]	; (8002f24 <Display_stations_list_data+0x25c>)
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f007 ffca 	bl	800ad08 <itoa>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2202      	movs	r2, #2
 8002d78:	9201      	str	r2, [sp, #4]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d84:	4621      	mov	r1, r4
 8002d86:	2008      	movs	r0, #8
 8002d88:	f7fd fe9e 	bl	8000ac8 <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8002d8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00da      	lsls	r2, r3, #3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	331c      	adds	r3, #28
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	2302      	movs	r3, #2
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <Display_stations_list_data+0x260>)
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dae:	2018      	movs	r0, #24
 8002db0:	f7fd fe8a 	bl	8000ac8 <ILI9341_Draw_String>

		eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * (i + start_station_index), &temp, sizeof(dab_service_t));
 8002db4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	4413      	add	r3, r2
 8002dbc:	330f      	adds	r3, #15
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	2234      	movs	r2, #52	; 0x34
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f000 fc59 	bl	8003680 <eeprom_read>
		ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, temp.name, 2);
 8002dce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00da      	lsls	r2, r3, #3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	331c      	adds	r3, #28
 8002dde:	4619      	mov	r1, r3
 8002de0:	2302      	movs	r3, #2
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df2:	2022      	movs	r0, #34	; 0x22
 8002df4:	f7fd fe68 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[temp.freq_id], 2);
 8002df8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00da      	lsls	r2, r3, #3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	331c      	adds	r3, #28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <Display_stations_list_data+0x264>)
 8002e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e16:	2202      	movs	r2, #2
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e24:	20ab      	movs	r0, #171	; 0xab
 8002e26:	f7fd fe4f 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(temp.freq / 1000, itoa_buffer, 10), 2);
 8002e2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00da      	lsls	r2, r3, #3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	331c      	adds	r3, #28
 8002e3a:	461c      	mov	r4, r3
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	4a3c      	ldr	r2, [pc, #240]	; (8002f30 <Display_stations_list_data+0x268>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	220a      	movs	r2, #10
 8002e48:	4936      	ldr	r1, [pc, #216]	; (8002f24 <Display_stations_list_data+0x25c>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 ff5c 	bl	800ad08 <itoa>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2202      	movs	r2, #2
 8002e54:	9201      	str	r2, [sp, #4]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e60:	4621      	mov	r1, r4
 8002e62:	20ca      	movs	r0, #202	; 0xca
 8002e64:	f7fd fe30 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8002e68:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00da      	lsls	r2, r3, #3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	331c      	adds	r3, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <Display_stations_list_data+0x260>)
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8a:	20e1      	movs	r0, #225	; 0xe1
 8002e8c:	f7fd fe1c 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(temp.freq % 1000, itoa_buffer, 10), 2);
 8002e90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00da      	lsls	r2, r3, #3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	331c      	adds	r3, #28
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <Display_stations_list_data+0x268>)
 8002ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	220a      	movs	r2, #10
 8002eb8:	491a      	ldr	r1, [pc, #104]	; (8002f24 <Display_stations_list_data+0x25c>)
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f007 ff24 	bl	800ad08 <itoa>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	20e8      	movs	r0, #232	; 0xe8
 8002ed4:	f7fd fdf8 	bl	8000ac8 <ILI9341_Draw_String>
		ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 8002ed8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00da      	lsls	r2, r3, #3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	331c      	adds	r3, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	2302      	movs	r3, #2
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <Display_stations_list_data+0x26c>)
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efa:	f240 1003 	movw	r0, #259	; 0x103
 8002efe:	f7fd fde3 	bl	8000ac8 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < 5; i++)
 8002f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f06:	3301      	adds	r3, #1
 8002f08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	f67f aee2 	bls.w	8002cda <Display_stations_list_data+0x12>
	}

}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	3744      	adds	r7, #68	; 0x44
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	0800bb4c 	.word	0x0800bb4c
 8002f24:	20003074 	.word	0x20003074
 8002f28:	0800bb50 	.word	0x0800bb50
 8002f2c:	200000ac 	.word	0x200000ac
 8002f30:	10624dd3 	.word	0x10624dd3
 8002f34:	0800bb54 	.word	0x0800bb54

08002f38 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8002f3e:	f7ff fceb 	bl	8002918 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2); //Naglowek
 8002f42:	2302      	movs	r3, #2
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <Display_scanning_screen_background+0x1a0>)
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f50:	2101      	movs	r1, #1
 8002f52:	2005      	movs	r0, #5
 8002f54:	f7fd fdb8 	bl	8000ac8 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8002f58:	2328      	movs	r3, #40	; 0x28
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	f240 133b 	movw	r3, #315	; 0x13b
 8002f60:	2214      	movs	r2, #20
 8002f62:	2105      	movs	r1, #5
 8002f64:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002f68:	f7fd fd0c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <Display_scanning_screen_background+0x1a4>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f7c:	2117      	movs	r1, #23
 8002f7e:	2050      	movs	r0, #80	; 0x50
 8002f80:	f7fd fda2 	bl	8000ac8 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8002f84:	2341      	movs	r3, #65	; 0x41
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f240 133b 	movw	r3, #315	; 0x13b
 8002f8c:	222d      	movs	r2, #45	; 0x2d
 8002f8e:	2105      	movs	r1, #5
 8002f90:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002f94:	f7fd fcf6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8002f98:	235a      	movs	r3, #90	; 0x5a
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f240 133b 	movw	r3, #315	; 0x13b
 8002fa0:	2246      	movs	r2, #70	; 0x46
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002fa8:	f7fd fcec 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8002fac:	2302      	movs	r3, #2
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <Display_scanning_screen_background+0x1a8>)
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fbc:	2149      	movs	r1, #73	; 0x49
 8002fbe:	200a      	movs	r0, #10
 8002fc0:	f7fd fd82 	bl	8000ac8 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8002fc4:	2373      	movs	r3, #115	; 0x73
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f240 133b 	movw	r3, #315	; 0x13b
 8002fcc:	225f      	movs	r2, #95	; 0x5f
 8002fce:	2105      	movs	r1, #5
 8002fd0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002fd4:	f7fd fcd6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8002fd8:	2302      	movs	r3, #2
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <Display_scanning_screen_background+0x1ac>)
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8002fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe8:	2162      	movs	r1, #98	; 0x62
 8002fea:	200a      	movs	r0, #10
 8002fec:	f7fd fd6c 	bl	8000ac8 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8002ff0:	238c      	movs	r3, #140	; 0x8c
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f240 133b 	movw	r3, #315	; 0x13b
 8002ff8:	2278      	movs	r2, #120	; 0x78
 8002ffa:	2105      	movs	r1, #5
 8002ffc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003000:	f7fd fcc0 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8003004:	2302      	movs	r3, #2
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <Display_scanning_screen_background+0x1b0>)
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003014:	217b      	movs	r1, #123	; 0x7b
 8003016:	200a      	movs	r0, #10
 8003018:	f7fd fd56 	bl	8000ac8 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 800301c:	23a5      	movs	r3, #165	; 0xa5
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f240 133b 	movw	r3, #315	; 0x13b
 8003024:	2291      	movs	r2, #145	; 0x91
 8003026:	2105      	movs	r1, #5
 8003028:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800302c:	f7fd fcaa 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8003030:	2302      	movs	r3, #2
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <Display_scanning_screen_background+0x1b4>)
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800303c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003040:	2194      	movs	r1, #148	; 0x94
 8003042:	200a      	movs	r0, #10
 8003044:	f7fd fd40 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8003048:	2302      	movs	r3, #2
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <Display_scanning_screen_background+0x1b8>)
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003058:	2194      	movs	r1, #148	; 0x94
 800305a:	2078      	movs	r0, #120	; 0x78
 800305c:	f7fd fd34 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8003060:	2302      	movs	r3, #2
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <Display_scanning_screen_background+0x1bc>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800306c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003070:	2194      	movs	r1, #148	; 0x94
 8003072:	209e      	movs	r0, #158	; 0x9e
 8003074:	f7fd fd28 	bl	8000ac8 <ILI9341_Draw_String>


	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8003078:	23be      	movs	r3, #190	; 0xbe
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f240 133b 	movw	r3, #315	; 0x13b
 8003080:	22aa      	movs	r2, #170	; 0xaa
 8003082:	2105      	movs	r1, #5
 8003084:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003088:	f7fd fc7c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 800308c:	2302      	movs	r3, #2
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <Display_scanning_screen_background+0x1c0>)
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309c:	21ad      	movs	r1, #173	; 0xad
 800309e:	200a      	movs	r0, #10
 80030a0:	f7fd fd12 	bl	8000ac8 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80030a4:	23eb      	movs	r3, #235	; 0xeb
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f240 133b 	movw	r3, #315	; 0x13b
 80030ac:	22c3      	movs	r2, #195	; 0xc3
 80030ae:	2105      	movs	r1, #5
 80030b0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80030b4:	f7fd fc66 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 80030b8:	2302      	movs	r3, #2
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <Display_scanning_screen_background+0x1c4>)
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c8:	21cf      	movs	r1, #207	; 0xcf
 80030ca:	2082      	movs	r0, #130	; 0x82
 80030cc:	f7fd fcfc 	bl	8000ac8 <ILI9341_Draw_String>

}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	0800bb58 	.word	0x0800bb58
 80030dc:	0800bb68 	.word	0x0800bb68
 80030e0:	0800bb80 	.word	0x0800bb80
 80030e4:	0800bb94 	.word	0x0800bb94
 80030e8:	0800bba4 	.word	0x0800bba4
 80030ec:	0800bbb4 	.word	0x0800bbb4
 80030f0:	0800bb50 	.word	0x0800bb50
 80030f4:	0800bb54 	.word	0x0800bb54
 80030f8:	0800bbc0 	.word	0x0800bbc0
 80030fc:	0800bbcc 	.word	0x0800bbcc

08003100 <Display_dab_digrad_status_background>:


}

void Display_dab_digrad_status_background()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003106:	f7ff fc07 	bl	8002918 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 800310a:	2302      	movs	r3, #2
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	4bb4      	ldr	r3, [pc, #720]	; (80033e0 <Display_dab_digrad_status_background+0x2e0>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003118:	2101      	movs	r1, #1
 800311a:	2005      	movs	r0, #5
 800311c:	f7fd fcd4 	bl	8000ac8 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8003120:	2328      	movs	r3, #40	; 0x28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2369      	movs	r3, #105	; 0x69
 8003126:	2214      	movs	r2, #20
 8003128:	2105      	movs	r1, #5
 800312a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800312e:	f7fd fc29 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 8003132:	2328      	movs	r3, #40	; 0x28
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	23d2      	movs	r3, #210	; 0xd2
 8003138:	2214      	movs	r2, #20
 800313a:	216e      	movs	r1, #110	; 0x6e
 800313c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003140:	f7fd fc20 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 8003144:	2328      	movs	r3, #40	; 0x28
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	f240 133b 	movw	r3, #315	; 0x13b
 800314c:	2214      	movs	r2, #20
 800314e:	21d7      	movs	r1, #215	; 0xd7
 8003150:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003154:	f7fd fc16 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8003158:	2341      	movs	r3, #65	; 0x41
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	f240 133b 	movw	r3, #315	; 0x13b
 8003160:	222d      	movs	r2, #45	; 0x2d
 8003162:	2105      	movs	r1, #5
 8003164:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003168:	f7fd fc0c 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 800316c:	2302      	movs	r3, #2
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <Display_dab_digrad_status_background+0x2e4>)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317c:	2130      	movs	r1, #48	; 0x30
 800317e:	200a      	movs	r0, #10
 8003180:	f7fd fca2 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 8003184:	2302      	movs	r3, #2
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	4b97      	ldr	r3, [pc, #604]	; (80033e8 <Display_dab_digrad_status_background+0x2e8>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003194:	2130      	movs	r1, #48	; 0x30
 8003196:	205a      	movs	r0, #90	; 0x5a
 8003198:	f7fd fc96 	bl	8000ac8 <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 800319c:	235a      	movs	r3, #90	; 0x5a
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f240 133b 	movw	r3, #315	; 0x13b
 80031a4:	2246      	movs	r2, #70	; 0x46
 80031a6:	2105      	movs	r1, #5
 80031a8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031ac:	f7fd fbea 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 80031b0:	2302      	movs	r3, #2
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <Display_dab_digrad_status_background+0x2ec>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c0:	2149      	movs	r1, #73	; 0x49
 80031c2:	200a      	movs	r0, #10
 80031c4:	f7fd fc80 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80031c8:	2302      	movs	r3, #2
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <Display_dab_digrad_status_background+0x2f0>)
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80031d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d8:	2149      	movs	r1, #73	; 0x49
 80031da:	2069      	movs	r0, #105	; 0x69
 80031dc:	f7fd fc74 	bl	8000ac8 <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80031e0:	2373      	movs	r3, #115	; 0x73
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f240 133b 	movw	r3, #315	; 0x13b
 80031e8:	225f      	movs	r2, #95	; 0x5f
 80031ea:	2105      	movs	r1, #5
 80031ec:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80031f0:	f7fd fbc8 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80031f4:	2302      	movs	r3, #2
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <Display_dab_digrad_status_background+0x2f4>)
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003204:	2162      	movs	r1, #98	; 0x62
 8003206:	200a      	movs	r0, #10
 8003208:	f7fd fc5e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 800320c:	2302      	movs	r3, #2
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <Display_dab_digrad_status_background+0x2f0>)
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321c:	2162      	movs	r1, #98	; 0x62
 800321e:	2069      	movs	r0, #105	; 0x69
 8003220:	f7fd fc52 	bl	8000ac8 <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8003224:	238c      	movs	r3, #140	; 0x8c
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f240 133b 	movw	r3, #315	; 0x13b
 800322c:	2278      	movs	r2, #120	; 0x78
 800322e:	2105      	movs	r1, #5
 8003230:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003234:	f7fd fba6 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8003238:	2302      	movs	r3, #2
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <Display_dab_digrad_status_background+0x2f8>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003248:	217b      	movs	r1, #123	; 0x7b
 800324a:	200a      	movs	r0, #10
 800324c:	f7fd fc3c 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8003250:	2302      	movs	r3, #2
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	4b69      	ldr	r3, [pc, #420]	; (80033fc <Display_dab_digrad_status_background+0x2fc>)
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003260:	217b      	movs	r1, #123	; 0x7b
 8003262:	206e      	movs	r0, #110	; 0x6e
 8003264:	f7fd fc30 	bl	8000ac8 <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8003268:	23a5      	movs	r3, #165	; 0xa5
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f240 133b 	movw	r3, #315	; 0x13b
 8003270:	2291      	movs	r2, #145	; 0x91
 8003272:	2105      	movs	r1, #5
 8003274:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003278:	f7fd fb84 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 800327c:	2302      	movs	r3, #2
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <Display_dab_digrad_status_background+0x300>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800328c:	2194      	movs	r1, #148	; 0x94
 800328e:	200a      	movs	r0, #10
 8003290:	f7fd fc1a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8003294:	2302      	movs	r3, #2
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <Display_dab_digrad_status_background+0x304>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a4:	2194      	movs	r1, #148	; 0x94
 80032a6:	2071      	movs	r0, #113	; 0x71
 80032a8:	f7fd fc0e 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 80032ac:	2302      	movs	r3, #2
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <Display_dab_digrad_status_background+0x308>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032bc:	2194      	movs	r1, #148	; 0x94
 80032be:	2094      	movs	r0, #148	; 0x94
 80032c0:	f7fd fc02 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 80032c4:	2302      	movs	r3, #2
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <Display_dab_digrad_status_background+0x30c>)
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032d4:	2194      	movs	r1, #148	; 0x94
 80032d6:	20b7      	movs	r0, #183	; 0xb7
 80032d8:	f7fd fbf6 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 80032dc:	2302      	movs	r3, #2
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	4b4b      	ldr	r3, [pc, #300]	; (8003410 <Display_dab_digrad_status_background+0x310>)
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80032e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ec:	2194      	movs	r1, #148	; 0x94
 80032ee:	20db      	movs	r0, #219	; 0xdb
 80032f0:	f7fd fbea 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 80032f4:	2302      	movs	r3, #2
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <Display_dab_digrad_status_background+0x314>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003304:	2194      	movs	r1, #148	; 0x94
 8003306:	f240 101b 	movw	r0, #283	; 0x11b
 800330a:	f7fd fbdd 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 800330e:	2302      	movs	r3, #2
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <Display_dab_digrad_status_background+0x318>)
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800331a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800331e:	2194      	movs	r1, #148	; 0x94
 8003320:	f240 1025 	movw	r0, #293	; 0x125
 8003324:	f7fd fbd0 	bl	8000ac8 <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8003328:	23be      	movs	r3, #190	; 0xbe
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	f240 133b 	movw	r3, #315	; 0x13b
 8003330:	22aa      	movs	r2, #170	; 0xaa
 8003332:	2105      	movs	r1, #5
 8003334:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003338:	f7fd fb24 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 800333c:	2302      	movs	r3, #2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <Display_dab_digrad_status_background+0x31c>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334c:	21ad      	movs	r1, #173	; 0xad
 800334e:	200a      	movs	r0, #10
 8003350:	f7fd fbba 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8003354:	2302      	movs	r3, #2
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <Display_dab_digrad_status_background+0x320>)
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003364:	21ad      	movs	r1, #173	; 0xad
 8003366:	207d      	movs	r0, #125	; 0x7d
 8003368:	f7fd fbae 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 800336c:	2302      	movs	r3, #2
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <Display_dab_digrad_status_background+0x324>)
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800337c:	21ad      	movs	r1, #173	; 0xad
 800337e:	20b4      	movs	r0, #180	; 0xb4
 8003380:	f7fd fba2 	bl	8000ac8 <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003384:	23eb      	movs	r3, #235	; 0xeb
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	239d      	movs	r3, #157	; 0x9d
 800338a:	22c3      	movs	r2, #195	; 0xc3
 800338c:	2105      	movs	r1, #5
 800338e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003392:	f7fd faf7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003396:	23eb      	movs	r3, #235	; 0xeb
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f240 133b 	movw	r3, #315	; 0x13b
 800339e:	22c3      	movs	r2, #195	; 0xc3
 80033a0:	21a3      	movs	r1, #163	; 0xa3
 80033a2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80033a6:	f7fd faed 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80033aa:	2302      	movs	r3, #2
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <Display_dab_digrad_status_background+0x328>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ba:	21cf      	movs	r1, #207	; 0xcf
 80033bc:	2025      	movs	r0, #37	; 0x25
 80033be:	f7fd fb83 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 80033c2:	2302      	movs	r3, #2
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <Display_dab_digrad_status_background+0x32c>)
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d2:	21cf      	movs	r1, #207	; 0xcf
 80033d4:	20c0      	movs	r0, #192	; 0xc0
 80033d6:	f7fd fb77 	bl	8000ac8 <ILI9341_Draw_String>
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	0800bbe8 	.word	0x0800bbe8
 80033e4:	0800bbfc 	.word	0x0800bbfc
 80033e8:	0800bc04 	.word	0x0800bc04
 80033ec:	0800bc0c 	.word	0x0800bc0c
 80033f0:	0800bc10 	.word	0x0800bc10
 80033f4:	0800bc14 	.word	0x0800bc14
 80033f8:	0800bc18 	.word	0x0800bc18
 80033fc:	0800bc20 	.word	0x0800bc20
 8003400:	0800bc24 	.word	0x0800bc24
 8003404:	0800bb50 	.word	0x0800bb50
 8003408:	0800bb54 	.word	0x0800bb54
 800340c:	0800bc30 	.word	0x0800bc30
 8003410:	0800bc38 	.word	0x0800bc38
 8003414:	0800bb44 	.word	0x0800bb44
 8003418:	0800bbdc 	.word	0x0800bbdc
 800341c:	0800bc40 	.word	0x0800bc40
 8003420:	0800bc4c 	.word	0x0800bc4c
 8003424:	0800bc50 	.word	0x0800bc50
 8003428:	0800bc54 	.word	0x0800bc54
 800342c:	0800bc60 	.word	0x0800bc60

08003430 <Display_settings_screen_background>:
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
	}
}

void Display_settings_screen_background()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003436:	f7ff fa6f 	bl	8002918 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 800343a:	2302      	movs	r3, #2
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <Display_settings_screen_background+0x1c4>)
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003448:	2101      	movs	r1, #1
 800344a:	2005      	movs	r0, #5
 800344c:	f7fd fb3c 	bl	8000ac8 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8003450:	2337      	movs	r3, #55	; 0x37
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f240 133b 	movw	r3, #315	; 0x13b
 8003458:	2214      	movs	r2, #20
 800345a:	2105      	movs	r1, #5
 800345c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003460:	f7fd fa90 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8003464:	2302      	movs	r3, #2
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <Display_settings_screen_background+0x1c8>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003474:	2116      	movs	r1, #22
 8003476:	2037      	movs	r0, #55	; 0x37
 8003478:	f7fd fb26 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 800347c:	2302      	movs	r3, #2
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <Display_settings_screen_background+0x1cc>)
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800348c:	2116      	movs	r1, #22
 800348e:	20ce      	movs	r0, #206	; 0xce
 8003490:	f7fd fb1a 	bl	8000ac8 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8003494:	2364      	movs	r3, #100	; 0x64
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	239d      	movs	r3, #157	; 0x9d
 800349a:	223c      	movs	r2, #60	; 0x3c
 800349c:	2105      	movs	r1, #5
 800349e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80034a2:	f7fd fa6f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 80034a6:	2364      	movs	r3, #100	; 0x64
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f240 133b 	movw	r3, #315	; 0x13b
 80034ae:	223c      	movs	r2, #60	; 0x3c
 80034b0:	21a3      	movs	r1, #163	; 0xa3
 80034b2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80034b6:	f7fd fa65 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 80034ba:	2302      	movs	r3, #2
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <Display_settings_screen_background+0x1d0>)
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ca:	2148      	movs	r1, #72	; 0x48
 80034cc:	2036      	movs	r0, #54	; 0x36
 80034ce:	f7fd fafb 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 80034d2:	2302      	movs	r3, #2
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <Display_settings_screen_background+0x1d4>)
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e2:	2148      	movs	r1, #72	; 0x48
 80034e4:	20d3      	movs	r0, #211	; 0xd3
 80034e6:	f7fd faef 	bl	8000ac8 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 80034ea:	2391      	movs	r3, #145	; 0x91
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	239d      	movs	r3, #157	; 0x9d
 80034f0:	2269      	movs	r2, #105	; 0x69
 80034f2:	2105      	movs	r1, #5
 80034f4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80034f8:	f7fd fa44 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 80034fc:	2391      	movs	r3, #145	; 0x91
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	f240 133b 	movw	r3, #315	; 0x13b
 8003504:	2269      	movs	r2, #105	; 0x69
 8003506:	21a3      	movs	r1, #163	; 0xa3
 8003508:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800350c:	f7fd fa3a 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8003510:	2302      	movs	r3, #2
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <Display_settings_screen_background+0x1d8>)
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800351c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003520:	2175      	movs	r1, #117	; 0x75
 8003522:	2023      	movs	r0, #35	; 0x23
 8003524:	f7fd fad0 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8003528:	2302      	movs	r3, #2
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	4b37      	ldr	r3, [pc, #220]	; (800360c <Display_settings_screen_background+0x1dc>)
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003538:	2175      	movs	r1, #117	; 0x75
 800353a:	20c1      	movs	r0, #193	; 0xc1
 800353c:	f7fd fac4 	bl	8000ac8 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8003540:	23be      	movs	r3, #190	; 0xbe
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	239d      	movs	r3, #157	; 0x9d
 8003546:	2296      	movs	r2, #150	; 0x96
 8003548:	2105      	movs	r1, #5
 800354a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800354e:	f7fd fa19 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 8003552:	23be      	movs	r3, #190	; 0xbe
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f240 133b 	movw	r3, #315	; 0x13b
 800355a:	2296      	movs	r2, #150	; 0x96
 800355c:	21a3      	movs	r1, #163	; 0xa3
 800355e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003562:	f7fd fa0f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 8003566:	2302      	movs	r3, #2
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <Display_settings_screen_background+0x1e0>)
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003576:	21a2      	movs	r1, #162	; 0xa2
 8003578:	2020      	movs	r0, #32
 800357a:	f7fd faa5 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 800357e:	2302      	movs	r3, #2
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <Display_settings_screen_background+0x1e4>)
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800358a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358e:	21a2      	movs	r1, #162	; 0xa2
 8003590:	20a8      	movs	r0, #168	; 0xa8
 8003592:	f7fd fa99 	bl	8000ac8 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003596:	23eb      	movs	r3, #235	; 0xeb
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	239d      	movs	r3, #157	; 0x9d
 800359c:	22c3      	movs	r2, #195	; 0xc3
 800359e:	2105      	movs	r1, #5
 80035a0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80035a4:	f7fd f9ee 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80035a8:	23eb      	movs	r3, #235	; 0xeb
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f240 133b 	movw	r3, #315	; 0x13b
 80035b0:	22c3      	movs	r2, #195	; 0xc3
 80035b2:	21a3      	movs	r1, #163	; 0xa3
 80035b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80035b8:	f7fd f9e4 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 80035bc:	2302      	movs	r3, #2
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <Display_settings_screen_background+0x1e8>)
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035cc:	21cf      	movs	r1, #207	; 0xcf
 80035ce:	2023      	movs	r0, #35	; 0x23
 80035d0:	f7fd fa7a 	bl	8000ac8 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80035d4:	2302      	movs	r3, #2
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <Display_settings_screen_background+0x1ec>)
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e4:	21cf      	movs	r1, #207	; 0xcf
 80035e6:	20c3      	movs	r0, #195	; 0xc3
 80035e8:	f7fd fa6e 	bl	8000ac8 <ILI9341_Draw_String>

}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	0800bca0 	.word	0x0800bca0
 80035f8:	0800bcb0 	.word	0x0800bcb0
 80035fc:	0800bcb8 	.word	0x0800bcb8
 8003600:	0800bcc4 	.word	0x0800bcc4
 8003604:	0800bcd0 	.word	0x0800bcd0
 8003608:	0800bcdc 	.word	0x0800bcdc
 800360c:	0800bce8 	.word	0x0800bce8
 8003610:	0800bcf4 	.word	0x0800bcf4
 8003614:	0800bd04 	.word	0x0800bd04
 8003618:	0800bc60 	.word	0x0800bc60
 800361c:	0800bc54 	.word	0x0800bc54

08003620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <MX_DMA_Init+0x3c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <MX_DMA_Init+0x3c>)
 8003630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <MX_DMA_Init+0x3c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	2100      	movs	r1, #0
 8003646:	200f      	movs	r0, #15
 8003648:	f001 fc67 	bl	8004f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800364c:	200f      	movs	r0, #15
 800364e:	f001 fc80 	bl	8004f52 <HAL_NVIC_EnableIRQ>

}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 8003664:	bf00      	nop
 8003666:	f001 fb4d 	bl	8004d04 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <eeprom_wait+0x1c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b14      	cmp	r3, #20
 8003674:	d9f7      	bls.n	8003666 <eeprom_wait+0x6>
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200030b4 	.word	0x200030b4

08003680 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af04      	add	r7, sp, #16
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 800368c:	f7ff ffe8 	bl	8003660 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800369c:	9102      	str	r1, [sp, #8]
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2302      	movs	r3, #2
 80036a6:	21a0      	movs	r1, #160	; 0xa0
 80036a8:	4803      	ldr	r0, [pc, #12]	; (80036b8 <eeprom_read+0x38>)
 80036aa:	f002 fb93 	bl	8005dd4 <HAL_I2C_Mem_Read>
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200030b8 	.word	0x200030b8

080036bc <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af04      	add	r7, sp, #16
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80036c8:	f7ff ffca 	bl	8003660 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036d8:	9102      	str	r1, [sp, #8]
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2302      	movs	r3, #2
 80036e2:	21a0      	movs	r1, #160	; 0xa0
 80036e4:	4807      	ldr	r0, [pc, #28]	; (8003704 <eeprom_write+0x48>)
 80036e6:	f002 fa7b 	bl	8005be0 <HAL_I2C_Mem_Write>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 80036ee:	f001 fb09 	bl	8004d04 <HAL_GetTick>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <eeprom_write+0x4c>)
 80036f6:	6013      	str	r3, [r2, #0]

    return rc;
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200030b8 	.word	0x200030b8
 8003708:	200030b4 	.word	0x200030b4

0800370c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	; 0x30
 8003710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a6b      	ldr	r2, [pc, #428]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a64      	ldr	r2, [pc, #400]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b62      	ldr	r3, [pc, #392]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	4b57      	ldr	r3, [pc, #348]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a56      	ldr	r2, [pc, #344]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a4f      	ldr	r2, [pc, #316]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 800379c:	f043 0310 	orr.w	r3, r3, #16
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	4a48      	ldr	r2, [pc, #288]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <MX_GPIO_Init+0x1cc>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2130      	movs	r1, #48	; 0x30
 80037ce:	4843      	ldr	r0, [pc, #268]	; (80038dc <MX_GPIO_Init+0x1d0>)
 80037d0:	f002 f8a8 	bl	8005924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80037d4:	2200      	movs	r2, #0
 80037d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037da:	4841      	ldr	r0, [pc, #260]	; (80038e0 <MX_GPIO_Init+0x1d4>)
 80037dc:	f002 f8a2 	bl	8005924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80037e0:	2200      	movs	r2, #0
 80037e2:	f24f 7180 	movw	r1, #63360	; 0xf780
 80037e6:	483f      	ldr	r0, [pc, #252]	; (80038e4 <MX_GPIO_Init+0x1d8>)
 80037e8:	f002 f89c 	bl	8005924 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80037ec:	2200      	movs	r2, #0
 80037ee:	2128      	movs	r1, #40	; 0x28
 80037f0:	483d      	ldr	r0, [pc, #244]	; (80038e8 <MX_GPIO_Init+0x1dc>)
 80037f2:	f002 f897 	bl	8005924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80037f6:	2310      	movs	r3, #16
 80037f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	4619      	mov	r1, r3
 8003808:	4838      	ldr	r0, [pc, #224]	; (80038ec <MX_GPIO_Init+0x1e0>)
 800380a:	f001 fed7 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 800380e:	2330      	movs	r3, #48	; 0x30
 8003810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003812:	2301      	movs	r3, #1
 8003814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800381a:	2302      	movs	r3, #2
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800381e:	f107 031c 	add.w	r3, r7, #28
 8003822:	4619      	mov	r1, r3
 8003824:	482d      	ldr	r0, [pc, #180]	; (80038dc <MX_GPIO_Init+0x1d0>)
 8003826:	f001 fec9 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 800382a:	2311      	movs	r3, #17
 800382c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	482a      	ldr	r0, [pc, #168]	; (80038e8 <MX_GPIO_Init+0x1dc>)
 800383e:	f001 febd 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8003842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003848:	2301      	movs	r3, #1
 800384a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	4619      	mov	r1, r3
 800385a:	4821      	ldr	r0, [pc, #132]	; (80038e0 <MX_GPIO_Init+0x1d4>)
 800385c:	f001 feae 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8003860:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003866:	2301      	movs	r3, #1
 8003868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386e:	2302      	movs	r3, #2
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003872:	f107 031c 	add.w	r3, r7, #28
 8003876:	4619      	mov	r1, r3
 8003878:	481a      	ldr	r0, [pc, #104]	; (80038e4 <MX_GPIO_Init+0x1d8>)
 800387a:	f001 fe9f 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800387e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003884:	2301      	movs	r3, #1
 8003886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	4619      	mov	r1, r3
 8003896:	4813      	ldr	r0, [pc, #76]	; (80038e4 <MX_GPIO_Init+0x1d8>)
 8003898:	f001 fe90 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038a0:	2300      	movs	r3, #0
 80038a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80038a8:	f107 031c 	add.w	r3, r7, #28
 80038ac:	4619      	mov	r1, r3
 80038ae:	480d      	ldr	r0, [pc, #52]	; (80038e4 <MX_GPIO_Init+0x1d8>)
 80038b0:	f001 fe84 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80038b4:	2328      	movs	r3, #40	; 0x28
 80038b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b8:	2301      	movs	r3, #1
 80038ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c0:	2302      	movs	r3, #2
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c4:	f107 031c 	add.w	r3, r7, #28
 80038c8:	4619      	mov	r1, r3
 80038ca:	4807      	ldr	r0, [pc, #28]	; (80038e8 <MX_GPIO_Init+0x1dc>)
 80038cc:	f001 fe76 	bl	80055bc <HAL_GPIO_Init>

}
 80038d0:	bf00      	nop
 80038d2:	3730      	adds	r7, #48	; 0x30
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020800 	.word	0x40020800
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40020400 	.word	0x40020400
 80038ec:	40020000 	.word	0x40020000

080038f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <MX_I2C1_Init+0x50>)
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <MX_I2C1_Init+0x54>)
 80038f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <MX_I2C1_Init+0x50>)
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <MX_I2C1_Init+0x58>)
 80038fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <MX_I2C1_Init+0x50>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <MX_I2C1_Init+0x50>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <MX_I2C1_Init+0x50>)
 800390e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <MX_I2C1_Init+0x50>)
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <MX_I2C1_Init+0x50>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <MX_I2C1_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <MX_I2C1_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800392c:	4804      	ldr	r0, [pc, #16]	; (8003940 <MX_I2C1_Init+0x50>)
 800392e:	f002 f813 	bl	8005958 <HAL_I2C_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003938:	f000 f982 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200030b8 	.word	0x200030b8
 8003944:	40005400 	.word	0x40005400
 8003948:	000186a0 	.word	0x000186a0

0800394c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <MX_I2C3_Init+0x50>)
 8003952:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <MX_I2C3_Init+0x54>)
 8003954:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <MX_I2C3_Init+0x50>)
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <MX_I2C3_Init+0x58>)
 800395a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <MX_I2C3_Init+0x50>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <MX_I2C3_Init+0x50>)
 8003964:	2200      	movs	r2, #0
 8003966:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <MX_I2C3_Init+0x50>)
 800396a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800396e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <MX_I2C3_Init+0x50>)
 8003972:	2200      	movs	r2, #0
 8003974:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <MX_I2C3_Init+0x50>)
 8003978:	2200      	movs	r2, #0
 800397a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <MX_I2C3_Init+0x50>)
 800397e:	2200      	movs	r2, #0
 8003980:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <MX_I2C3_Init+0x50>)
 8003984:	2200      	movs	r2, #0
 8003986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003988:	4804      	ldr	r0, [pc, #16]	; (800399c <MX_I2C3_Init+0x50>)
 800398a:	f001 ffe5 	bl	8005958 <HAL_I2C_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003994:	f000 f954 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000310c 	.word	0x2000310c
 80039a0:	40005c00 	.word	0x40005c00
 80039a4:	000186a0 	.word	0x000186a0

080039a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <HAL_I2C_MspInit+0x148>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d12c      	bne.n	8003a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a48      	ldr	r2, [pc, #288]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80039e6:	23c0      	movs	r3, #192	; 0xc0
 80039e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ea:	2312      	movs	r3, #18
 80039ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f2:	2303      	movs	r3, #3
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039f6:	2304      	movs	r3, #4
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fa:	f107 031c 	add.w	r3, r7, #28
 80039fe:	4619      	mov	r1, r3
 8003a00:	483d      	ldr	r0, [pc, #244]	; (8003af8 <HAL_I2C_MspInit+0x150>)
 8003a02:	f001 fddb 	bl	80055bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a39      	ldr	r2, [pc, #228]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003a22:	e060      	b.n	8003ae6 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a34      	ldr	r2, [pc, #208]	; (8003afc <HAL_I2C_MspInit+0x154>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d15b      	bne.n	8003ae6 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a28      	ldr	r2, [pc, #160]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8003a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a6c:	2312      	movs	r3, #18
 8003a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a78:	2304      	movs	r3, #4
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003a7c:	f107 031c 	add.w	r3, r7, #28
 8003a80:	4619      	mov	r1, r3
 8003a82:	481f      	ldr	r0, [pc, #124]	; (8003b00 <HAL_I2C_MspInit+0x158>)
 8003a84:	f001 fd9a 	bl	80055bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8003a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a8e:	2312      	movs	r3, #18
 8003a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8003a9e:	f107 031c 	add.w	r3, r7, #28
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4817      	ldr	r0, [pc, #92]	; (8003b04 <HAL_I2C_MspInit+0x15c>)
 8003aa6:	f001 fd89 	bl	80055bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_I2C_MspInit+0x14c>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	2048      	movs	r0, #72	; 0x48
 8003acc:	f001 fa25 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003ad0:	2048      	movs	r0, #72	; 0x48
 8003ad2:	f001 fa3e 	bl	8004f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2049      	movs	r0, #73	; 0x49
 8003adc:	f001 fa1d 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003ae0:	2049      	movs	r0, #73	; 0x49
 8003ae2:	f001 fa36 	bl	8004f52 <HAL_NVIC_EnableIRQ>
}
 8003ae6:	bf00      	nop
 8003ae8:	3730      	adds	r7, #48	; 0x30
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40005400 	.word	0x40005400
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40020400 	.word	0x40020400
 8003afc:	40005c00 	.word	0x40005c00
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020000 	.word	0x40020000

08003b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b0c:	f001 f894 	bl	8004c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b10:	f000 f82c 	bl	8003b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b14:	f7ff fdfa 	bl	800370c <MX_GPIO_Init>
  MX_DMA_Init();
 8003b18:	f7ff fd82 	bl	8003620 <MX_DMA_Init>
  MX_I2C1_Init();
 8003b1c:	f7ff fee8 	bl	80038f0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003b20:	f7ff ff14 	bl	800394c <MX_I2C3_Init>
  MX_SPI1_Init();
 8003b24:	f000 f892 	bl	8003c4c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003b28:	f000 f8c6 	bl	8003cb8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003b2c:	f000 fc0a 	bl	8004344 <MX_TIM3_Init>
  MX_UART5_Init();
 8003b30:	f000 ff64 	bl	80049fc <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003b34:	f000 ff8c 	bl	8004a50 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003b38:	f000 fc5e 	bl	80043f8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003b3c:	f000 fc80 	bl	8004440 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8003b40:	2101      	movs	r1, #1
 8003b42:	4808      	ldr	r0, [pc, #32]	; (8003b64 <main+0x5c>)
 8003b44:	f7fe fec2 	bl	80028cc <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8003b48:	4807      	ldr	r0, [pc, #28]	; (8003b68 <main+0x60>)
 8003b4a:	f005 ff4d 	bl	80099e8 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8003b4e:	f7fc fcc5 	bl	80004dc <ILI9341_Init>
  Display_booting_screen();
 8003b52:	f7fe fef5 	bl	8002940 <Display_booting_screen>

  Si468x_dab_init();
 8003b56:	f7fd fa81 	bl	800105c <Si468x_dab_init>
  restore_from_eeprom();
 8003b5a:	f7fe fb75 	bl	8002248 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8003b5e:	f000 f999 	bl	8003e94 <state_machine>
 8003b62:	e7fc      	b.n	8003b5e <main+0x56>
 8003b64:	0800bd44 	.word	0x0800bd44
 8003b68:	20003308 	.word	0x20003308

08003b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b094      	sub	sp, #80	; 0x50
 8003b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b72:	f107 0320 	add.w	r3, r7, #32
 8003b76:	2230      	movs	r2, #48	; 0x30
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f007 f8c6 	bl	800ad0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <SystemClock_Config+0xcc>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <SystemClock_Config+0xcc>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <SystemClock_Config+0xcc>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bac:	2300      	movs	r3, #0
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <SystemClock_Config+0xd0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <SystemClock_Config+0xd0>)
 8003bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <SystemClock_Config+0xd0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003bdc:	2304      	movs	r3, #4
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8003be0:	23f0      	movs	r3, #240	; 0xf0
 8003be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003be8:	2304      	movs	r3, #4
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bec:	f107 0320 	add.w	r3, r7, #32
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f004 fb4b 	bl	800828c <HAL_RCC_OscConfig>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bfc:	f000 f820 	bl	8003c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c00:	230f      	movs	r3, #15
 8003c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c04:	2302      	movs	r3, #2
 8003c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c18:	f107 030c 	add.w	r3, r7, #12
 8003c1c:	2105      	movs	r1, #5
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fdac 	bl	800877c <HAL_RCC_ClockConfig>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003c2a:	f000 f809 	bl	8003c40 <Error_Handler>
  }
}
 8003c2e:	bf00      	nop
 8003c30:	3750      	adds	r7, #80	; 0x50
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40007000 	.word	0x40007000

08003c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c44:	b672      	cpsid	i
}
 8003c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c48:	e7fe      	b.n	8003c48 <Error_Handler+0x8>
	...

08003c4c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c52:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <MX_SPI1_Init+0x68>)
 8003c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c6a:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c98:	220a      	movs	r2, #10
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c9c:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <MX_SPI1_Init+0x64>)
 8003c9e:	f004 ff8d 	bl	8008bbc <HAL_SPI_Init>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ca8:	f7ff ffca 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cac:	bf00      	nop
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20003160 	.word	0x20003160
 8003cb4:	40013000 	.word	0x40013000

08003cb8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <MX_SPI2_Init+0x68>)
 8003cc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003d04:	220a      	movs	r2, #10
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d08:	4804      	ldr	r0, [pc, #16]	; (8003d1c <MX_SPI2_Init+0x64>)
 8003d0a:	f004 ff57 	bl	8008bbc <HAL_SPI_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d14:	f7ff ff94 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200031b8 	.word	0x200031b8
 8003d20:	40003800 	.word	0x40003800

08003d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a4d      	ldr	r2, [pc, #308]	; (8003e78 <HAL_SPI_MspInit+0x154>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12c      	bne.n	8003da0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	4a4b      	ldr	r2, [pc, #300]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d54:	6453      	str	r3, [r2, #68]	; 0x44
 8003d56:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	4b45      	ldr	r3, [pc, #276]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a44      	ldr	r2, [pc, #272]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8003d7e:	23e0      	movs	r3, #224	; 0xe0
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d8e:	2305      	movs	r3, #5
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4839      	ldr	r0, [pc, #228]	; (8003e80 <HAL_SPI_MspInit+0x15c>)
 8003d9a:	f001 fc0f 	bl	80055bc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003d9e:	e066      	b.n	8003e6e <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <HAL_SPI_MspInit+0x160>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d161      	bne.n	8003e6e <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_SPI_MspInit+0x158>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8003de2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df0:	2303      	movs	r3, #3
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003df4:	2305      	movs	r3, #5
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4822      	ldr	r0, [pc, #136]	; (8003e88 <HAL_SPI_MspInit+0x164>)
 8003e00:	f001 fbdc 	bl	80055bc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e06:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <HAL_SPI_MspInit+0x16c>)
 8003e08:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e22:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003e30:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003e42:	4812      	ldr	r0, [pc, #72]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e44:	f001 f8a0 	bl	8004f88 <HAL_DMA_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8003e4e:	f7ff fef7 	bl	8003c40 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e56:	649a      	str	r2, [r3, #72]	; 0x48
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_SPI_MspInit+0x168>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2100      	movs	r1, #0
 8003e62:	2024      	movs	r0, #36	; 0x24
 8003e64:	f001 f859 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003e68:	2024      	movs	r0, #36	; 0x24
 8003e6a:	f001 f872 	bl	8004f52 <HAL_NVIC_EnableIRQ>
}
 8003e6e:	bf00      	nop
 8003e70:	3730      	adds	r7, #48	; 0x30
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40013000 	.word	0x40013000
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40003800 	.word	0x40003800
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	20003210 	.word	0x20003210
 8003e90:	40026070 	.word	0x40026070

08003e94 <state_machine>:
uint8_t srv_list_start_index = 0;

touch_coordinates_t touch_coordinates;

void state_machine()
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	touch_coordinates = Touch_read();
 8003e98:	f000 fb98 	bl	80045cc <Touch_read>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4a86      	ldr	r2, [pc, #536]	; (80040b8 <state_machine+0x224>)
 8003ea0:	6013      	str	r3, [r2, #0]

	switch(state)
 8003ea2:	4b86      	ldr	r3, [pc, #536]	; (80040bc <state_machine+0x228>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	f200 818e 	bhi.w	80041c8 <state_machine+0x334>
 8003eac:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <state_machine+0x20>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ec9 	.word	0x08003ec9
 8003eb8:	08003f47 	.word	0x08003f47
 8003ebc:	0800407f 	.word	0x0800407f
 8003ec0:	08004001 	.word	0x08004001
 8003ec4:	080040c9 	.word	0x080040c9
	{
	case main_screen:
		if(!state_change_done)
 8003ec8:	4b7d      	ldr	r3, [pc, #500]	; (80040c0 <state_machine+0x22c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <state_machine+0x4e>
		{
			Display_main_screen_background();
 8003ed0:	f7fe fda8 	bl	8002a24 <Display_main_screen_background>
			HAL_Delay(1000); //time to complete refresh display
 8003ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ed8:	f000 ff20 	bl	8004d1c <HAL_Delay>
			state_change_done = 1;
 8003edc:	4b78      	ldr	r3, [pc, #480]	; (80040c0 <state_machine+0x22c>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8003ee2:	4b75      	ldr	r3, [pc, #468]	; (80040b8 <state_machine+0x224>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d911      	bls.n	8003f0e <state_machine+0x7a>
 8003eea:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <state_machine+0x224>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	2b9c      	cmp	r3, #156	; 0x9c
 8003ef0:	d80d      	bhi.n	8003f0e <state_machine+0x7a>
 8003ef2:	4b71      	ldr	r3, [pc, #452]	; (80040b8 <state_machine+0x224>)
 8003ef4:	885b      	ldrh	r3, [r3, #2]
 8003ef6:	2bc3      	cmp	r3, #195	; 0xc3
 8003ef8:	d909      	bls.n	8003f0e <state_machine+0x7a>
 8003efa:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <state_machine+0x224>)
 8003efc:	885b      	ldrh	r3, [r3, #2]
 8003efe:	2bea      	cmp	r3, #234	; 0xea
 8003f00:	d805      	bhi.n	8003f0e <state_machine+0x7a>
		{
			state_change_done = 0;
 8003f02:	4b6f      	ldr	r3, [pc, #444]	; (80040c0 <state_machine+0x22c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
			state = settings;
 8003f08:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <state_machine+0x228>)
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <state_machine+0x224>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2ba3      	cmp	r3, #163	; 0xa3
 8003f14:	f240 815a 	bls.w	80041cc <state_machine+0x338>
 8003f18:	4b67      	ldr	r3, [pc, #412]	; (80040b8 <state_machine+0x224>)
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8003f20:	f200 8154 	bhi.w	80041cc <state_machine+0x338>
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <state_machine+0x224>)
 8003f26:	885b      	ldrh	r3, [r3, #2]
 8003f28:	2bc3      	cmp	r3, #195	; 0xc3
 8003f2a:	f240 814f 	bls.w	80041cc <state_machine+0x338>
 8003f2e:	4b62      	ldr	r3, [pc, #392]	; (80040b8 <state_machine+0x224>)
 8003f30:	885b      	ldrh	r3, [r3, #2]
 8003f32:	2bea      	cmp	r3, #234	; 0xea
 8003f34:	f200 814a 	bhi.w	80041cc <state_machine+0x338>
		{
			state_change_done = 0;
 8003f38:	4b61      	ldr	r3, [pc, #388]	; (80040c0 <state_machine+0x22c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
			state = signal_info;
 8003f3e:	4b5f      	ldr	r3, [pc, #380]	; (80040bc <state_machine+0x228>)
 8003f40:	2203      	movs	r2, #3
 8003f42:	701a      	strb	r2, [r3, #0]
		}


		break;
 8003f44:	e142      	b.n	80041cc <state_machine+0x338>

	case services_list:
		if(!state_change_done)
 8003f46:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <state_machine+0x22c>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10e      	bne.n	8003f6c <state_machine+0xd8>
		{
			srv_list_start_index = 0;
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <state_machine+0x230>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
			Display_stations_list_background();
 8003f54:	f7fe fdf4 	bl	8002b40 <Display_stations_list_background>
			Display_stations_list_data(0);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fe feb5 	bl	8002cc8 <Display_stations_list_data>
			HAL_Delay(1000); //time to complete refresh display
 8003f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f62:	f000 fedb 	bl	8004d1c <HAL_Delay>
			state_change_done = 1;
 8003f66:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <state_machine+0x22c>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (signal info)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8003f6c:	4b52      	ldr	r3, [pc, #328]	; (80040b8 <state_machine+0x224>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d911      	bls.n	8003f98 <state_machine+0x104>
 8003f74:	4b50      	ldr	r3, [pc, #320]	; (80040b8 <state_machine+0x224>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	2b9c      	cmp	r3, #156	; 0x9c
 8003f7a:	d80d      	bhi.n	8003f98 <state_machine+0x104>
 8003f7c:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <state_machine+0x224>)
 8003f7e:	885b      	ldrh	r3, [r3, #2]
 8003f80:	2bc3      	cmp	r3, #195	; 0xc3
 8003f82:	d909      	bls.n	8003f98 <state_machine+0x104>
 8003f84:	4b4c      	ldr	r3, [pc, #304]	; (80040b8 <state_machine+0x224>)
 8003f86:	885b      	ldrh	r3, [r3, #2]
 8003f88:	2bea      	cmp	r3, #234	; 0xea
 8003f8a:	d805      	bhi.n	8003f98 <state_machine+0x104>
		{
			state_change_done = 0;
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <state_machine+0x22c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
			state = signal_info;
 8003f92:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <state_machine+0x228>)
 8003f94:	2203      	movs	r2, #3
 8003f96:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8003f98:	4b47      	ldr	r3, [pc, #284]	; (80040b8 <state_machine+0x224>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2ba3      	cmp	r3, #163	; 0xa3
 8003f9e:	d912      	bls.n	8003fc6 <state_machine+0x132>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <state_machine+0x224>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8003fa8:	d80d      	bhi.n	8003fc6 <state_machine+0x132>
 8003faa:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <state_machine+0x224>)
 8003fac:	885b      	ldrh	r3, [r3, #2]
 8003fae:	2bc3      	cmp	r3, #195	; 0xc3
 8003fb0:	d909      	bls.n	8003fc6 <state_machine+0x132>
 8003fb2:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <state_machine+0x224>)
 8003fb4:	885b      	ldrh	r3, [r3, #2]
 8003fb6:	2bea      	cmp	r3, #234	; 0xea
 8003fb8:	d805      	bhi.n	8003fc6 <state_machine+0x132>
		{
			state_change_done = 0;
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <state_machine+0x22c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
			state = settings;
 8003fc0:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <state_machine+0x228>)
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <state_machine+0x224>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8003fce:	d907      	bls.n	8003fe0 <state_machine+0x14c>
 8003fd0:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <state_machine+0x224>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8003fd8:	d802      	bhi.n	8003fe0 <state_machine+0x14c>
 8003fda:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <state_machine+0x224>)
 8003fdc:	885b      	ldrh	r3, [r3, #2]
 8003fde:	2b14      	cmp	r3, #20
		{

		}

		//down button handling (signal info)
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <state_machine+0x224>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8003fe8:	f240 80f2 	bls.w	80041d0 <state_machine+0x33c>
 8003fec:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <state_machine+0x224>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8003ff4:	f200 80ec 	bhi.w	80041d0 <state_machine+0x33c>
 8003ff8:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <state_machine+0x224>)
 8003ffa:	885b      	ldrh	r3, [r3, #2]
 8003ffc:	2b6c      	cmp	r3, #108	; 0x6c
		{

		}

		break;
 8003ffe:	e0e7      	b.n	80041d0 <state_machine+0x33c>

	case signal_info:
		if(!state_change_done)
 8004000:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <state_machine+0x22c>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d108      	bne.n	800401a <state_machine+0x186>
		{
			Display_dab_digrad_status_background();
 8004008:	f7ff f87a 	bl	8003100 <Display_dab_digrad_status_background>
			HAL_Delay(1000); //time to complete refresh display
 800400c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004010:	f000 fe84 	bl	8004d1c <HAL_Delay>
			state_change_done = 1;
 8004014:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <state_machine+0x22c>)
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main screen)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800401a:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <state_machine+0x224>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2b05      	cmp	r3, #5
 8004020:	d911      	bls.n	8004046 <state_machine+0x1b2>
 8004022:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <state_machine+0x224>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	2b9c      	cmp	r3, #156	; 0x9c
 8004028:	d80d      	bhi.n	8004046 <state_machine+0x1b2>
 800402a:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <state_machine+0x224>)
 800402c:	885b      	ldrh	r3, [r3, #2]
 800402e:	2bc3      	cmp	r3, #195	; 0xc3
 8004030:	d909      	bls.n	8004046 <state_machine+0x1b2>
 8004032:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <state_machine+0x224>)
 8004034:	885b      	ldrh	r3, [r3, #2]
 8004036:	2bea      	cmp	r3, #234	; 0xea
 8004038:	d805      	bhi.n	8004046 <state_machine+0x1b2>
		{
			state_change_done = 0;
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <state_machine+0x22c>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
			state = main_screen;
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <state_machine+0x228>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (services list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <state_machine+0x224>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	2ba3      	cmp	r3, #163	; 0xa3
 800404c:	f240 80c2 	bls.w	80041d4 <state_machine+0x340>
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <state_machine+0x224>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004058:	f200 80bc 	bhi.w	80041d4 <state_machine+0x340>
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <state_machine+0x224>)
 800405e:	885b      	ldrh	r3, [r3, #2]
 8004060:	2bc3      	cmp	r3, #195	; 0xc3
 8004062:	f240 80b7 	bls.w	80041d4 <state_machine+0x340>
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <state_machine+0x224>)
 8004068:	885b      	ldrh	r3, [r3, #2]
 800406a:	2bea      	cmp	r3, #234	; 0xea
 800406c:	f200 80b2 	bhi.w	80041d4 <state_machine+0x340>
		{
			state_change_done = 0;
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <state_machine+0x22c>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
			state = services_list;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <state_machine+0x228>)
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
		}



		break;
 800407c:	e0aa      	b.n	80041d4 <state_machine+0x340>

	case scanning:
		if(!state_change_done)
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <state_machine+0x22c>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <state_machine+0x204>
		{
			Display_scanning_screen_background();
 8004086:	f7fe ff57 	bl	8002f38 <Display_scanning_screen_background>
			HAL_Delay(1000); //time to complete refresh display
 800408a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408e:	f000 fe45 	bl	8004d1c <HAL_Delay>
			state_change_done = 1;
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <state_machine+0x22c>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
		}

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <state_machine+0x224>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b05      	cmp	r3, #5
 800409e:	f240 809b 	bls.w	80041d8 <state_machine+0x344>
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <state_machine+0x224>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80040aa:	f200 8095 	bhi.w	80041d8 <state_machine+0x344>
 80040ae:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <state_machine+0x224>)
 80040b0:	885b      	ldrh	r3, [r3, #2]
 80040b2:	2bc3      	cmp	r3, #195	; 0xc3
		{

		}

		break;
 80040b4:	e090      	b.n	80041d8 <state_machine+0x344>
 80040b6:	bf00      	nop
 80040b8:	20003274 	.word	0x20003274
 80040bc:	20003270 	.word	0x20003270
 80040c0:	20003271 	.word	0x20003271
 80040c4:	20003272 	.word	0x20003272

	case settings:
		if(!state_change_done)
 80040c8:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <state_machine+0x350>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <state_machine+0x24e>
		{
			Display_settings_screen_background();
 80040d0:	f7ff f9ae 	bl	8003430 <Display_settings_screen_background>
			HAL_Delay(1000); //time to complete refresh display
 80040d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d8:	f000 fe20 	bl	8004d1c <HAL_Delay>
			state_change_done = 1;
 80040dc:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <state_machine+0x350>)
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
		}

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <state_machine+0x354>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	2ba3      	cmp	r3, #163	; 0xa3
 80040e8:	d907      	bls.n	80040fa <state_machine+0x266>
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <state_machine+0x354>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80040f2:	d802      	bhi.n	80040fa <state_machine+0x266>
 80040f4:	4b3c      	ldr	r3, [pc, #240]	; (80041e8 <state_machine+0x354>)
 80040f6:	885b      	ldrh	r3, [r3, #2]
 80040f8:	2b3c      	cmp	r3, #60	; 0x3c
		{

		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <state_machine+0x354>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d906      	bls.n	8004110 <state_machine+0x27c>
 8004102:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <state_machine+0x354>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2b9c      	cmp	r3, #156	; 0x9c
 8004108:	d802      	bhi.n	8004110 <state_machine+0x27c>
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <state_machine+0x354>)
 800410c:	885b      	ldrh	r3, [r3, #2]
 800410e:	2b3c      	cmp	r3, #60	; 0x3c
		{

		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8004110:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <state_machine+0x354>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	2ba3      	cmp	r3, #163	; 0xa3
 8004116:	d907      	bls.n	8004128 <state_machine+0x294>
 8004118:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <state_machine+0x354>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004120:	d802      	bhi.n	8004128 <state_machine+0x294>
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <state_machine+0x354>)
 8004124:	885b      	ldrh	r3, [r3, #2]
 8004126:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8004128:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <state_machine+0x354>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	2b05      	cmp	r3, #5
 800412e:	d906      	bls.n	800413e <state_machine+0x2aa>
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <state_machine+0x354>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	2b9c      	cmp	r3, #156	; 0x9c
 8004136:	d802      	bhi.n	800413e <state_machine+0x2aa>
 8004138:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <state_machine+0x354>)
 800413a:	885b      	ldrh	r3, [r3, #2]
 800413c:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <state_machine+0x354>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d906      	bls.n	8004154 <state_machine+0x2c0>
 8004146:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <state_machine+0x354>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	2b9c      	cmp	r3, #156	; 0x9c
 800414c:	d802      	bhi.n	8004154 <state_machine+0x2c0>
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <state_machine+0x354>)
 8004150:	885b      	ldrh	r3, [r3, #2]
 8004152:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <state_machine+0x354>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	2ba3      	cmp	r3, #163	; 0xa3
 800415a:	d907      	bls.n	800416c <state_machine+0x2d8>
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <state_machine+0x354>)
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004164:	d802      	bhi.n	800416c <state_machine+0x2d8>
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <state_machine+0x354>)
 8004168:	885b      	ldrh	r3, [r3, #2]
 800416a:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800416c:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <state_machine+0x354>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d911      	bls.n	8004198 <state_machine+0x304>
 8004174:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <state_machine+0x354>)
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	2b9c      	cmp	r3, #156	; 0x9c
 800417a:	d80d      	bhi.n	8004198 <state_machine+0x304>
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <state_machine+0x354>)
 800417e:	885b      	ldrh	r3, [r3, #2]
 8004180:	2bc3      	cmp	r3, #195	; 0xc3
 8004182:	d909      	bls.n	8004198 <state_machine+0x304>
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <state_machine+0x354>)
 8004186:	885b      	ldrh	r3, [r3, #2]
 8004188:	2bea      	cmp	r3, #234	; 0xea
 800418a:	d805      	bhi.n	8004198 <state_machine+0x304>
		{
			state_change_done = 0;
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <state_machine+0x350>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
			state = services_list;
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <state_machine+0x358>)
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <state_machine+0x354>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	2ba3      	cmp	r3, #163	; 0xa3
 800419e:	d91d      	bls.n	80041dc <state_machine+0x348>
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <state_machine+0x354>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80041a8:	d818      	bhi.n	80041dc <state_machine+0x348>
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <state_machine+0x354>)
 80041ac:	885b      	ldrh	r3, [r3, #2]
 80041ae:	2bc3      	cmp	r3, #195	; 0xc3
 80041b0:	d914      	bls.n	80041dc <state_machine+0x348>
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <state_machine+0x354>)
 80041b4:	885b      	ldrh	r3, [r3, #2]
 80041b6:	2bea      	cmp	r3, #234	; 0xea
 80041b8:	d810      	bhi.n	80041dc <state_machine+0x348>
		{
			state_change_done = 0;
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <state_machine+0x350>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
			state = main_screen;
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <state_machine+0x358>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
		}


		break;
 80041c6:	e009      	b.n	80041dc <state_machine+0x348>

	default:
		break;
 80041c8:	bf00      	nop
 80041ca:	e008      	b.n	80041de <state_machine+0x34a>
		break;
 80041cc:	bf00      	nop
 80041ce:	e006      	b.n	80041de <state_machine+0x34a>
		break;
 80041d0:	bf00      	nop
 80041d2:	e004      	b.n	80041de <state_machine+0x34a>
		break;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <state_machine+0x34a>
		break;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <state_machine+0x34a>
		break;
 80041dc:	bf00      	nop
	}
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20003271 	.word	0x20003271
 80041e8:	20003274 	.word	0x20003274
 80041ec:	20003270 	.word	0x20003270

080041f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_MspInit+0x4c>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	4a0f      	ldr	r2, [pc, #60]	; (800423c <HAL_MspInit+0x4c>)
 8004200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004204:	6453      	str	r3, [r2, #68]	; 0x44
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <HAL_MspInit+0x4c>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_MspInit+0x4c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_MspInit+0x4c>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_MspInit+0x4c>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <NMI_Handler+0x4>

08004246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424a:	e7fe      	b.n	800424a <HardFault_Handler+0x4>

0800424c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <MemManage_Handler+0x4>

08004252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004256:	e7fe      	b.n	8004256 <BusFault_Handler+0x4>

08004258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800425c:	e7fe      	b.n	800425c <UsageFault_Handler+0x4>

0800425e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800428c:	f000 fd26 	bl	8004cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}

08004294 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <DMA1_Stream4_IRQHandler+0x10>)
 800429a:	f000 ff45 	bl	8005128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20003210 	.word	0x20003210

080042a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80042ac:	4802      	ldr	r0, [pc, #8]	; (80042b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80042ae:	f005 fc5a 	bl	8009b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200032c0 	.word	0x200032c0

080042bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80042c2:	f005 fc50 	bl	8009b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20003308 	.word	0x20003308

080042d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <SPI2_IRQHandler+0x10>)
 80042d6:	f005 f8e9 	bl	80094ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200031b8 	.word	0x200031b8

080042e4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <I2C3_EV_IRQHandler+0x10>)
 80042ea:	f001 ff99 	bl	8006220 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000310c 	.word	0x2000310c

080042f8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <I2C3_ER_IRQHandler+0x10>)
 80042fe:	f002 f900 	bl	8006502 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000310c 	.word	0x2000310c

0800430c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <SystemInit+0x20>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	4a05      	ldr	r2, [pc, #20]	; (8004340 <SystemInit+0x20>)
 800432c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800434a:	f107 0320 	add.w	r3, r7, #32
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	615a      	str	r2, [r3, #20]
 8004364:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <MX_TIM3_Init+0xac>)
 8004368:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <MX_TIM3_Init+0xb0>)
 800436a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800436c:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <MX_TIM3_Init+0xac>)
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <MX_TIM3_Init+0xac>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <MX_TIM3_Init+0xac>)
 800437a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <MX_TIM3_Init+0xac>)
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <MX_TIM3_Init+0xac>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800438c:	4818      	ldr	r0, [pc, #96]	; (80043f0 <MX_TIM3_Init+0xac>)
 800438e:	f005 fb9b 	bl	8009ac8 <HAL_TIM_PWM_Init>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004398:	f7ff fc52 	bl	8003c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043a4:	f107 0320 	add.w	r3, r7, #32
 80043a8:	4619      	mov	r1, r3
 80043aa:	4811      	ldr	r0, [pc, #68]	; (80043f0 <MX_TIM3_Init+0xac>)
 80043ac:	f006 f81e 	bl	800a3ec <HAL_TIMEx_MasterConfigSynchronization>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80043b6:	f7ff fc43 	bl	8003c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ba:	2360      	movs	r3, #96	; 0x60
 80043bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	2208      	movs	r2, #8
 80043ce:	4619      	mov	r1, r3
 80043d0:	4807      	ldr	r0, [pc, #28]	; (80043f0 <MX_TIM3_Init+0xac>)
 80043d2:	f005 fcd1 	bl	8009d78 <HAL_TIM_PWM_ConfigChannel>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80043dc:	f7ff fc30 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043e0:	4803      	ldr	r0, [pc, #12]	; (80043f0 <MX_TIM3_Init+0xac>)
 80043e2:	f000 f8b9 	bl	8004558 <HAL_TIM_MspPostInit>

}
 80043e6:	bf00      	nop
 80043e8:	3728      	adds	r7, #40	; 0x28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20003278 	.word	0x20003278
 80043f4:	40000400 	.word	0x40000400

080043f8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <MX_TIM10_Init+0x40>)
 80043fe:	4a0f      	ldr	r2, [pc, #60]	; (800443c <MX_TIM10_Init+0x44>)
 8004400:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8004402:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <MX_TIM10_Init+0x40>)
 8004404:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004408:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <MX_TIM10_Init+0x40>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <MX_TIM10_Init+0x40>)
 8004412:	f240 2257 	movw	r2, #599	; 0x257
 8004416:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004418:	4b07      	ldr	r3, [pc, #28]	; (8004438 <MX_TIM10_Init+0x40>)
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <MX_TIM10_Init+0x40>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004424:	4804      	ldr	r0, [pc, #16]	; (8004438 <MX_TIM10_Init+0x40>)
 8004426:	f005 fa8f 	bl	8009948 <HAL_TIM_Base_Init>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004430:	f7ff fc06 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200032c0 	.word	0x200032c0
 800443c:	40014400 	.word	0x40014400

08004440 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <MX_TIM11_Init+0x40>)
 8004446:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <MX_TIM11_Init+0x44>)
 8004448:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <MX_TIM11_Init+0x40>)
 800444c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004450:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <MX_TIM11_Init+0x40>)
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <MX_TIM11_Init+0x40>)
 800445a:	f240 5213 	movw	r2, #1299	; 0x513
 800445e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <MX_TIM11_Init+0x40>)
 8004462:	2200      	movs	r2, #0
 8004464:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <MX_TIM11_Init+0x40>)
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800446c:	4804      	ldr	r0, [pc, #16]	; (8004480 <MX_TIM11_Init+0x40>)
 800446e:	f005 fa6b 	bl	8009948 <HAL_TIM_Base_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004478:	f7ff fbe2 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20003308 	.word	0x20003308
 8004484:	40014800 	.word	0x40014800

08004488 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10d      	bne.n	80044b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_TIM_PWM_MspInit+0x40>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_TIM_PWM_MspInit+0x40>)
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_TIM_PWM_MspInit+0x40>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40023800 	.word	0x40023800

080044cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	; (800454c <HAL_TIM_Base_MspInit+0x80>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d116      	bne.n	800450c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_TIM_Base_MspInit+0x84>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <HAL_TIM_Base_MspInit+0x84>)
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	6453      	str	r3, [r2, #68]	; 0x44
 80044ee:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_TIM_Base_MspInit+0x84>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	2019      	movs	r0, #25
 8004500:	f000 fd0b 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004504:	2019      	movs	r0, #25
 8004506:	f000 fd24 	bl	8004f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800450a:	e01a      	b.n	8004542 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a10      	ldr	r2, [pc, #64]	; (8004554 <HAL_TIM_Base_MspInit+0x88>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d115      	bne.n	8004542 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_TIM_Base_MspInit+0x84>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <HAL_TIM_Base_MspInit+0x84>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004524:	6453      	str	r3, [r2, #68]	; 0x44
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_TIM_Base_MspInit+0x84>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	201a      	movs	r0, #26
 8004538:	f000 fcef 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800453c:	201a      	movs	r0, #26
 800453e:	f000 fd08 	bl	8004f52 <HAL_NVIC_EnableIRQ>
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40014400 	.word	0x40014400
 8004550:	40023800 	.word	0x40023800
 8004554:	40014800 	.word	0x40014800

08004558 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_TIM_MspPostInit+0x68>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d11e      	bne.n	80045b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_TIM_MspPostInit+0x6c>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <HAL_TIM_MspPostInit+0x6c>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6313      	str	r3, [r2, #48]	; 0x30
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_TIM_MspPostInit+0x6c>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8004596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045a8:	2302      	movs	r3, #2
 80045aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	4619      	mov	r1, r3
 80045b2:	4805      	ldr	r0, [pc, #20]	; (80045c8 <HAL_TIM_MspPostInit+0x70>)
 80045b4:	f001 f802 	bl	80055bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020800 	.word	0x40020800

080045cc <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <Touch_read+0xa0>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2000      	movs	r0, #0
 80045d8:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <Touch_read+0xa0>)
 80045dc:	7c1b      	ldrb	r3, [r3, #16]
 80045de:	b25b      	sxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da32      	bge.n	800464a <Touch_read+0x7e>
	{
		xtemp = TP_Read_XOY(0xD0);
 80045e4:	20d0      	movs	r0, #208	; 0xd0
 80045e6:	f000 f8e9 	bl	80047bc <TP_Read_XOY>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <Touch_read+0xa4>)
 80045f0:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 80045f2:	2090      	movs	r0, #144	; 0x90
 80045f4:	f000 f8e2 	bl	80047bc <TP_Read_XOY>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <Touch_read+0xa8>)
 80045fe:	801a      	strh	r2, [r3, #0]

		touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
 8004600:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <Touch_read+0xa8>)
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	019b      	lsls	r3, r3, #6
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <Touch_read+0xac>)
 8004612:	fb82 1203 	smull	r1, r2, r2, r3
 8004616:	441a      	add	r2, r3
 8004618:	12d2      	asrs	r2, r2, #11
 800461a:	17db      	asrs	r3, r3, #31
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004624:	b29b      	uxth	r3, r3
 8004626:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <Touch_read+0xa4>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	3bf0      	subs	r3, #240	; 0xf0
 800462e:	22e6      	movs	r2, #230	; 0xe6
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <Touch_read+0xb0>)
 8004636:	fb82 1203 	smull	r1, r2, r2, r3
 800463a:	1252      	asrs	r2, r2, #9
 800463c:	17db      	asrs	r3, r3, #31
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	b29b      	uxth	r3, r3
 8004642:	33f0      	adds	r3, #240	; 0xf0
 8004644:	b29b      	uxth	r3, r3
 8004646:	807b      	strh	r3, [r7, #2]
 8004648:	e003      	b.n	8004652 <Touch_read+0x86>

	}

	else
	{
		touch_coordinates.x = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	2300      	movs	r3, #0
 8004658:	88ba      	ldrh	r2, [r7, #4]
 800465a:	f362 030f 	bfi	r3, r2, #0, #16
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000154 	.word	0x20000154
 8004670:	20003350 	.word	0x20003350
 8004674:	20003352 	.word	0x20003352
 8004678:	93afcf8b 	.word	0x93afcf8b
 800467c:	24b70025 	.word	0x24b70025

08004680 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e021      	b.n	80046d8 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	2b00      	cmp	r3, #0
 800469a:	da05      	bge.n	80046a8 <TP_Write_Byte+0x28>
			T_DIN_ON;
 800469c:	2201      	movs	r2, #1
 800469e:	2120      	movs	r1, #32
 80046a0:	4811      	ldr	r0, [pc, #68]	; (80046e8 <TP_Write_Byte+0x68>)
 80046a2:	f001 f93f 	bl	8005924 <HAL_GPIO_WritePin>
 80046a6:	e004      	b.n	80046b2 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 80046a8:	2200      	movs	r2, #0
 80046aa:	2120      	movs	r1, #32
 80046ac:	480e      	ldr	r0, [pc, #56]	; (80046e8 <TP_Write_Byte+0x68>)
 80046ae:	f001 f939 	bl	8005924 <HAL_GPIO_WritePin>

		num <<= 1;
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 80046b8:	2200      	movs	r2, #0
 80046ba:	2108      	movs	r1, #8
 80046bc:	480a      	ldr	r0, [pc, #40]	; (80046e8 <TP_Write_Byte+0x68>)
 80046be:	f001 f931 	bl	8005924 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80046c2:	2001      	movs	r0, #1
 80046c4:	f000 fb2a 	bl	8004d1c <HAL_Delay>
		T_CLK_ON;
 80046c8:	2201      	movs	r2, #1
 80046ca:	2108      	movs	r1, #8
 80046cc:	4806      	ldr	r0, [pc, #24]	; (80046e8 <TP_Write_Byte+0x68>)
 80046ce:	f001 f929 	bl	8005924 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	3301      	adds	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d9da      	bls.n	8004694 <TP_Write_Byte+0x14>
	}
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40020400 	.word	0x40020400

080046ec <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 80046fe:	2200      	movs	r2, #0
 8004700:	2108      	movs	r1, #8
 8004702:	482c      	ldr	r0, [pc, #176]	; (80047b4 <TP_Read_AD+0xc8>)
 8004704:	f001 f90e 	bl	8005924 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8004708:	2200      	movs	r2, #0
 800470a:	2120      	movs	r1, #32
 800470c:	4829      	ldr	r0, [pc, #164]	; (80047b4 <TP_Read_AD+0xc8>)
 800470e:	f001 f909 	bl	8005924 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8004712:	2200      	movs	r2, #0
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	4828      	ldr	r0, [pc, #160]	; (80047b8 <TP_Read_AD+0xcc>)
 8004718:	f001 f904 	bl	8005924 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ffae 	bl	8004680 <TP_Write_Byte>
	HAL_Delay(1);
 8004724:	2001      	movs	r0, #1
 8004726:	f000 faf9 	bl	8004d1c <HAL_Delay>
	T_CLK_OFF;
 800472a:	2200      	movs	r2, #0
 800472c:	2108      	movs	r1, #8
 800472e:	4821      	ldr	r0, [pc, #132]	; (80047b4 <TP_Read_AD+0xc8>)
 8004730:	f001 f8f8 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004734:	2001      	movs	r0, #1
 8004736:	f000 faf1 	bl	8004d1c <HAL_Delay>
	T_CLK_ON;
 800473a:	2201      	movs	r2, #1
 800473c:	2108      	movs	r1, #8
 800473e:	481d      	ldr	r0, [pc, #116]	; (80047b4 <TP_Read_AD+0xc8>)
 8004740:	f001 f8f0 	bl	8005924 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004744:	2001      	movs	r0, #1
 8004746:	f000 fae9 	bl	8004d1c <HAL_Delay>
	T_CLK_OFF;
 800474a:	2200      	movs	r2, #0
 800474c:	2108      	movs	r1, #8
 800474e:	4819      	ldr	r0, [pc, #100]	; (80047b4 <TP_Read_AD+0xc8>)
 8004750:	f001 f8e8 	bl	8005924 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8004754:	2300      	movs	r3, #0
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e01c      	b.n	8004794 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 800475a:	89bb      	ldrh	r3, [r7, #12]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8004760:	2200      	movs	r2, #0
 8004762:	2108      	movs	r1, #8
 8004764:	4813      	ldr	r0, [pc, #76]	; (80047b4 <TP_Read_AD+0xc8>)
 8004766:	f001 f8dd 	bl	8005924 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800476a:	2001      	movs	r0, #1
 800476c:	f000 fad6 	bl	8004d1c <HAL_Delay>
		T_CLK_ON;
 8004770:	2201      	movs	r2, #1
 8004772:	2108      	movs	r1, #8
 8004774:	480f      	ldr	r0, [pc, #60]	; (80047b4 <TP_Read_AD+0xc8>)
 8004776:	f001 f8d5 	bl	8005924 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 800477a:	2110      	movs	r1, #16
 800477c:	480d      	ldr	r0, [pc, #52]	; (80047b4 <TP_Read_AD+0xc8>)
 800477e:	f001 f8b9 	bl	80058f4 <HAL_GPIO_ReadPin>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <TP_Read_AD+0xa2>
 8004788:	89bb      	ldrh	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3301      	adds	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d9df      	bls.n	800475a <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 800479a:	89bb      	ldrh	r3, [r7, #12]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 80047a0:	2201      	movs	r2, #1
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	4804      	ldr	r0, [pc, #16]	; (80047b8 <TP_Read_AD+0xcc>)
 80047a6:	f001 f8bd 	bl	8005924 <HAL_GPIO_WritePin>
	return(Num);
 80047aa:	89bb      	ldrh	r3, [r7, #12]

}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40020400 	.word	0x40020400
 80047b8:	40020c00 	.word	0x40020c00

080047bc <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff8f 	bl	80046ec <TP_Read_AD>
}
 80047ce:	bf00      	nop
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <TP_Read_XY+0x3c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ffe8 	bl	80047bc <TP_Read_XOY>
 80047ec:	4603      	mov	r3, r0
 80047ee:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <TP_Read_XY+0x40>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff ffe1 	bl	80047bc <TP_Read_XOY>
 80047fa:	4603      	mov	r3, r0
 80047fc:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	89fa      	ldrh	r2, [r7, #14]
 8004802:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	89ba      	ldrh	r2, [r7, #12]
 8004808:	801a      	strh	r2, [r3, #0]
	return 1;
 800480a:	2301      	movs	r3, #1
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000178 	.word	0x20000178
 8004818:	20000179 	.word	0x20000179

0800481c <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8004826:	f107 0212 	add.w	r2, r7, #18
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ffd1 	bl	80047d8 <TP_Read_XY>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <TP_Read_XY2+0x28>
    	return(0);
 8004840:	2300      	movs	r3, #0
 8004842:	e049      	b.n	80048d8 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8004844:	f107 020e 	add.w	r2, r7, #14
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff ffc2 	bl	80047d8 <TP_Read_XY>
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <TP_Read_XY2+0x46>
    	return(0);
 800485e:	2300      	movs	r3, #0
 8004860:	e03a      	b.n	80048d8 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8004862:	8a3a      	ldrh	r2, [r7, #16]
 8004864:	8abb      	ldrh	r3, [r7, #20]
 8004866:	429a      	cmp	r2, r3
 8004868:	d804      	bhi.n	8004874 <TP_Read_XY2+0x58>
 800486a:	8a3b      	ldrh	r3, [r7, #16]
 800486c:	3331      	adds	r3, #49	; 0x31
 800486e:	8aba      	ldrh	r2, [r7, #20]
 8004870:	4293      	cmp	r3, r2
 8004872:	da08      	bge.n	8004886 <TP_Read_XY2+0x6a>
 8004874:	8aba      	ldrh	r2, [r7, #20]
 8004876:	8a3b      	ldrh	r3, [r7, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d82c      	bhi.n	80048d6 <TP_Read_XY2+0xba>
 800487c:	8abb      	ldrh	r3, [r7, #20]
 800487e:	3331      	adds	r3, #49	; 0x31
 8004880:	8a3a      	ldrh	r2, [r7, #16]
 8004882:	4293      	cmp	r3, r2
 8004884:	db27      	blt.n	80048d6 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8004886:	89fa      	ldrh	r2, [r7, #14]
 8004888:	8a7b      	ldrh	r3, [r7, #18]
 800488a:	429a      	cmp	r2, r3
 800488c:	d804      	bhi.n	8004898 <TP_Read_XY2+0x7c>
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	3331      	adds	r3, #49	; 0x31
 8004892:	8a7a      	ldrh	r2, [r7, #18]
 8004894:	4293      	cmp	r3, r2
 8004896:	da08      	bge.n	80048aa <TP_Read_XY2+0x8e>
 8004898:	8a7a      	ldrh	r2, [r7, #18]
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	429a      	cmp	r2, r3
 800489e:	d81a      	bhi.n	80048d6 <TP_Read_XY2+0xba>
 80048a0:	8a7b      	ldrh	r3, [r7, #18]
 80048a2:	3331      	adds	r3, #49	; 0x31
 80048a4:	89fa      	ldrh	r2, [r7, #14]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	db15      	blt.n	80048d6 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 80048aa:	8abb      	ldrh	r3, [r7, #20]
 80048ac:	461a      	mov	r2, r3
 80048ae:	8a3b      	ldrh	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	0fda      	lsrs	r2, r3, #31
 80048b4:	4413      	add	r3, r2
 80048b6:	105b      	asrs	r3, r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	461a      	mov	r2, r3
 80048c2:	89fb      	ldrh	r3, [r7, #14]
 80048c4:	4413      	add	r3, r2
 80048c6:	0fda      	lsrs	r2, r3, #31
 80048c8:	4413      	add	r3, r2
 80048ca:	105b      	asrs	r3, r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	801a      	strh	r2, [r3, #0]
        return 1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	483f      	ldr	r0, [pc, #252]	; (80049ec <TP_Scan+0x10c>)
 80048ee:	f001 f801 	bl	80058f4 <HAL_GPIO_ReadPin>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d155      	bne.n	80049a4 <TP_Scan+0xc4>
	{
		if(tp)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 80048fe:	493c      	ldr	r1, [pc, #240]	; (80049f0 <TP_Scan+0x110>)
 8004900:	483c      	ldr	r0, [pc, #240]	; (80049f4 <TP_Scan+0x114>)
 8004902:	f7ff ff8b 	bl	800481c <TP_Read_XY2>
 8004906:	e03c      	b.n	8004982 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8004908:	4939      	ldr	r1, [pc, #228]	; (80049f0 <TP_Scan+0x110>)
 800490a:	483a      	ldr	r0, [pc, #232]	; (80049f4 <TP_Scan+0x114>)
 800490c:	f7ff ff86 	bl	800481c <TP_Read_XY2>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d035      	beq.n	8004982 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8004916:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <TP_Scan+0x118>)
 8004918:	ed93 7a05 	vldr	s14, [r3, #20]
 800491c:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <TP_Scan+0x118>)
 800491e:	899b      	ldrh	r3, [r3, #12]
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800492c:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <TP_Scan+0x118>)
 800492e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 3a90 	vmov	r3, s15
 8004946:	b29a      	uxth	r2, r3
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <TP_Scan+0x118>)
 800494a:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 800494c:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <TP_Scan+0x118>)
 800494e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <TP_Scan+0x118>)
 8004954:	89db      	ldrh	r3, [r3, #14]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800495e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004962:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <TP_Scan+0x118>)
 8004964:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004978:	ee17 3a90 	vmov	r3, s15
 800497c:	b29a      	uxth	r2, r3
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <TP_Scan+0x118>)
 8004980:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8004982:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <TP_Scan+0x118>)
 8004984:	7c1b      	ldrb	r3, [r3, #16]
 8004986:	b25b      	sxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	db26      	blt.n	80049da <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <TP_Scan+0x118>)
 800498e:	22c0      	movs	r2, #192	; 0xc0
 8004990:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <TP_Scan+0x118>)
 8004994:	899a      	ldrh	r2, [r3, #12]
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <TP_Scan+0x118>)
 8004998:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <TP_Scan+0x118>)
 800499c:	89da      	ldrh	r2, [r3, #14]
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <TP_Scan+0x118>)
 80049a0:	815a      	strh	r2, [r3, #10]
 80049a2:	e01a      	b.n	80049da <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <TP_Scan+0x118>)
 80049a6:	7c1b      	ldrb	r3, [r3, #16]
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da07      	bge.n	80049be <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <TP_Scan+0x118>)
 80049b0:	7c1b      	ldrb	r3, [r3, #16]
 80049b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <TP_Scan+0x118>)
 80049ba:	741a      	strb	r2, [r3, #16]
 80049bc:	e00d      	b.n	80049da <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <TP_Scan+0x118>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <TP_Scan+0x118>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <TP_Scan+0x118>)
 80049cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049d0:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <TP_Scan+0x118>)
 80049d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049d8:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <TP_Scan+0x118>)
 80049dc:	7c1b      	ldrb	r3, [r3, #16]
 80049de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049e2:	b2db      	uxtb	r3, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	20000162 	.word	0x20000162
 80049f4:	20000160 	.word	0x20000160
 80049f8:	20000154 	.word	0x20000154

080049fc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <MX_UART5_Init+0x50>)
 8004a04:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a0c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a22:	220c      	movs	r2, #12
 8004a24:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004a32:	4805      	ldr	r0, [pc, #20]	; (8004a48 <MX_UART5_Init+0x4c>)
 8004a34:	f005 fd6a 	bl	800a50c <HAL_UART_Init>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004a3e:	f7ff f8ff 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20003354 	.word	0x20003354
 8004a4c:	40005000 	.word	0x40005000

08004a50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <MX_USART3_UART_Init+0x50>)
 8004a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a68:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a76:	220c      	movs	r2, #12
 8004a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a86:	4805      	ldr	r0, [pc, #20]	; (8004a9c <MX_USART3_UART_Init+0x4c>)
 8004a88:	f005 fd40 	bl	800a50c <HAL_UART_Init>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a92:	f7ff f8d5 	bl	8003c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20003398 	.word	0x20003398
 8004aa0:	40004800 	.word	0x40004800

08004aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aac:	f107 031c 	add.w	r3, r7, #28
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <HAL_UART_MspInit+0x128>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d14b      	bne.n	8004b5e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a39      	ldr	r2, [pc, #228]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004aec:	f043 0304 	orr.w	r3, r3, #4
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b08:	f043 0308 	orr.w	r3, r3, #8
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0e:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	2302      	movs	r3, #2
 8004b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b30:	f107 031c 	add.w	r3, r7, #28
 8004b34:	4619      	mov	r1, r3
 8004b36:	4827      	ldr	r0, [pc, #156]	; (8004bd4 <HAL_UART_MspInit+0x130>)
 8004b38:	f000 fd40 	bl	80055bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	4619      	mov	r1, r3
 8004b56:	4820      	ldr	r0, [pc, #128]	; (8004bd8 <HAL_UART_MspInit+0x134>)
 8004b58:	f000 fd30 	bl	80055bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b5c:	e031      	b.n	8004bc2 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <HAL_UART_MspInit+0x138>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d12c      	bne.n	8004bc2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b76:	6413      	str	r3, [r2, #64]	; 0x40
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b8e:	f043 0302 	orr.w	r3, r3, #2
 8004b92:	6313      	str	r3, [r2, #48]	; 0x30
 8004b94:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_UART_MspInit+0x12c>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8004ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bb2:	2307      	movs	r3, #7
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb6:	f107 031c 	add.w	r3, r7, #28
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4808      	ldr	r0, [pc, #32]	; (8004be0 <HAL_UART_MspInit+0x13c>)
 8004bbe:	f000 fcfd 	bl	80055bc <HAL_GPIO_Init>
}
 8004bc2:	bf00      	nop
 8004bc4:	3730      	adds	r7, #48	; 0x30
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40005000 	.word	0x40005000
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40020800 	.word	0x40020800
 8004bd8:	40020c00 	.word	0x40020c00
 8004bdc:	40004800 	.word	0x40004800
 8004be0:	40020400 	.word	0x40020400

08004be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004be8:	480d      	ldr	r0, [pc, #52]	; (8004c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bea:	490e      	ldr	r1, [pc, #56]	; (8004c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bec:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf0:	e002      	b.n	8004bf8 <LoopCopyDataInit>

08004bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bf6:	3304      	adds	r3, #4

08004bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bfc:	d3f9      	bcc.n	8004bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c00:	4c0b      	ldr	r4, [pc, #44]	; (8004c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c04:	e001      	b.n	8004c0a <LoopFillZerobss>

08004c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c08:	3204      	adds	r2, #4

08004c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c0c:	d3fb      	bcc.n	8004c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c0e:	f7ff fb87 	bl	8004320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c12:	f006 f83d 	bl	800ac90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c16:	f7fe ff77 	bl	8003b08 <main>
  bx  lr    
 8004c1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c24:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8004c28:	0800dd18 	.word	0x0800dd18
  ldr r2, =_sbss
 8004c2c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8004c30:	200033e0 	.word	0x200033e0

08004c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c34:	e7fe      	b.n	8004c34 <ADC_IRQHandler>
	...

08004c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_Init+0x40>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <HAL_Init+0x40>)
 8004c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_Init+0x40>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_Init+0x40>)
 8004c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_Init+0x40>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_Init+0x40>)
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c60:	2003      	movs	r0, #3
 8004c62:	f000 f94f 	bl	8004f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c66:	200f      	movs	r0, #15
 8004c68:	f000 f808 	bl	8004c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c6c:	f7ff fac0 	bl	80041f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00

08004c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_InitTick+0x54>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_InitTick+0x58>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f967 	bl	8004f6e <HAL_SYSTICK_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e00e      	b.n	8004cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0f      	cmp	r3, #15
 8004cae:	d80a      	bhi.n	8004cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	f000 f92f 	bl	8004f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cbc:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <HAL_InitTick+0x5c>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000150 	.word	0x20000150
 8004cd4:	20000180 	.word	0x20000180
 8004cd8:	2000017c 	.word	0x2000017c

08004cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_IncTick+0x20>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_IncTick+0x24>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_IncTick+0x24>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000180 	.word	0x20000180
 8004d00:	200033dc 	.word	0x200033dc

08004d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return uwTick;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_GetTick+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	200033dc 	.word	0x200033dc

08004d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d24:	f7ff ffee 	bl	8004d04 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d005      	beq.n	8004d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_Delay+0x44>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d42:	bf00      	nop
 8004d44:	f7ff ffde 	bl	8004d04 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d8f7      	bhi.n	8004d44 <HAL_Delay+0x28>
  {
  }
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000180 	.word	0x20000180

08004d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d80:	4013      	ands	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	60d3      	str	r3, [r2, #12]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000ed00 	.word	0xe000ed00

08004dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 0307 	and.w	r3, r3, #7
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	db0b      	blt.n	8004df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	f003 021f 	and.w	r2, r3, #31
 8004de0:	4907      	ldr	r1, [pc, #28]	; (8004e00 <__NVIC_EnableIRQ+0x38>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2001      	movs	r0, #1
 8004dea:	fa00 f202 	lsl.w	r2, r0, r2
 8004dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e100 	.word	0xe000e100

08004e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	db0a      	blt.n	8004e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	490c      	ldr	r1, [pc, #48]	; (8004e50 <__NVIC_SetPriority+0x4c>)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	440b      	add	r3, r1
 8004e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e2c:	e00a      	b.n	8004e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4908      	ldr	r1, [pc, #32]	; (8004e54 <__NVIC_SetPriority+0x50>)
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	0112      	lsls	r2, r2, #4
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	440b      	add	r3, r1
 8004e42:	761a      	strb	r2, [r3, #24]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f1c3 0307 	rsb	r3, r3, #7
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	bf28      	it	cs
 8004e76:	2304      	movcs	r3, #4
 8004e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d902      	bls.n	8004e88 <NVIC_EncodePriority+0x30>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3b03      	subs	r3, #3
 8004e86:	e000      	b.n	8004e8a <NVIC_EncodePriority+0x32>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	43d9      	mvns	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	4313      	orrs	r3, r2
         );
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3724      	adds	r7, #36	; 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed0:	d301      	bcc.n	8004ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e00f      	b.n	8004ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <SysTick_Config+0x40>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ede:	210f      	movs	r1, #15
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	f7ff ff8e 	bl	8004e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <SysTick_Config+0x40>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <SysTick_Config+0x40>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000e010 	.word	0xe000e010

08004f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff29 	bl	8004d64 <__NVIC_SetPriorityGrouping>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4603      	mov	r3, r0
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f2c:	f7ff ff3e 	bl	8004dac <__NVIC_GetPriorityGrouping>
 8004f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f7ff ff8e 	bl	8004e58 <NVIC_EncodePriority>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff5d 	bl	8004e04 <__NVIC_SetPriority>
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff31 	bl	8004dc8 <__NVIC_EnableIRQ>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ffa2 	bl	8004ec0 <SysTick_Config>
 8004f7c:	4603      	mov	r3, r0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f94:	f7ff feb6 	bl	8004d04 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e099      	b.n	80050d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc4:	e00f      	b.n	8004fe6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fc6:	f7ff fe9d 	bl	8004d04 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	d908      	bls.n	8004fe6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2203      	movs	r2, #3
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e078      	b.n	80050d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e8      	bne.n	8004fc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4b38      	ldr	r3, [pc, #224]	; (80050e0 <HAL_DMA_Init+0x158>)
 8005000:	4013      	ands	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2b04      	cmp	r3, #4
 800503e:	d107      	bne.n	8005050 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	4313      	orrs	r3, r2
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b04      	cmp	r3, #4
 8005078:	d117      	bne.n	80050aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa19 	bl	80054c4 <DMA_CheckFifoParam>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2240      	movs	r2, #64	; 0x40
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050a6:	2301      	movs	r3, #1
 80050a8:	e016      	b.n	80050d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9d0 	bl	8005458 <DMA_CalcBaseAndBitshift>
 80050b8:	4603      	mov	r3, r0
 80050ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	223f      	movs	r2, #63	; 0x3f
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	f010803f 	.word	0xf010803f

080050e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e00c      	b.n	800511c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2205      	movs	r2, #5
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005134:	4b8e      	ldr	r3, [pc, #568]	; (8005370 <HAL_DMA_IRQHandler+0x248>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a8e      	ldr	r2, [pc, #568]	; (8005374 <HAL_DMA_IRQHandler+0x24c>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0a9b      	lsrs	r3, r3, #10
 8005140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	2208      	movs	r2, #8
 8005154:	409a      	lsls	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01a      	beq.n	8005194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d013      	beq.n	8005194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	2208      	movs	r2, #8
 8005182:	409a      	lsls	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f043 0201 	orr.w	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	2201      	movs	r2, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	2201      	movs	r2, #1
 80051b8:	409a      	lsls	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f043 0202 	orr.w	r2, r3, #2
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	2204      	movs	r2, #4
 80051d0:	409a      	lsls	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d012      	beq.n	8005200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	2204      	movs	r2, #4
 80051ee:	409a      	lsls	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0204 	orr.w	r2, r3, #4
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	2210      	movs	r2, #16
 8005206:	409a      	lsls	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d043      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d03c      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	2210      	movs	r2, #16
 8005224:	409a      	lsls	r2, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d018      	beq.n	800526a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d024      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
 8005256:	e01f      	b.n	8005298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
 8005268:	e016      	b.n	8005298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0208 	bic.w	r2, r2, #8
 8005286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	2220      	movs	r2, #32
 800529e:	409a      	lsls	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 808f 	beq.w	80053c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8087 	beq.w	80053c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	2220      	movs	r2, #32
 80052c0:	409a      	lsls	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d136      	bne.n	8005340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0216 	bic.w	r2, r2, #22
 80052e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <HAL_DMA_IRQHandler+0x1da>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0208 	bic.w	r2, r2, #8
 8005310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005316:	223f      	movs	r2, #63	; 0x3f
 8005318:	409a      	lsls	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	2b00      	cmp	r3, #0
 8005334:	d07e      	beq.n	8005434 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
        }
        return;
 800533e:	e079      	b.n	8005434 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01d      	beq.n	800538a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	2b00      	cmp	r3, #0
 8005362:	d031      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	e02c      	b.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
 800536e:	bf00      	nop
 8005370:	20000150 	.word	0x20000150
 8005374:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d023      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
 8005388:	e01e      	b.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10f      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0210 	bic.w	r2, r2, #16
 80053a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d032      	beq.n	8005436 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d022      	beq.n	8005422 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2205      	movs	r2, #5
 80053e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d307      	bcc.n	8005410 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f2      	bne.n	80053f4 <HAL_DMA_IRQHandler+0x2cc>
 800540e:	e000      	b.n	8005412 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005410:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
 8005432:	e000      	b.n	8005436 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005434:	bf00      	nop
    }
  }
}
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800544a:	b2db      	uxtb	r3, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	3b10      	subs	r3, #16
 8005468:	4a14      	ldr	r2, [pc, #80]	; (80054bc <DMA_CalcBaseAndBitshift+0x64>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	091b      	lsrs	r3, r3, #4
 8005470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005472:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <DMA_CalcBaseAndBitshift+0x68>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d909      	bls.n	800549a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	659a      	str	r2, [r3, #88]	; 0x58
 8005498:	e007      	b.n	80054aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	aaaaaaab 	.word	0xaaaaaaab
 80054c0:	0800dcd8 	.word	0x0800dcd8

080054c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11f      	bne.n	800551e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d856      	bhi.n	8005592 <DMA_CheckFifoParam+0xce>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <DMA_CheckFifoParam+0x28>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	0800550f 	.word	0x0800550f
 80054f4:	080054fd 	.word	0x080054fd
 80054f8:	08005593 	.word	0x08005593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d046      	beq.n	8005596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550c:	e043      	b.n	8005596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005516:	d140      	bne.n	800559a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551c:	e03d      	b.n	800559a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005526:	d121      	bne.n	800556c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b03      	cmp	r3, #3
 800552c:	d837      	bhi.n	800559e <DMA_CheckFifoParam+0xda>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <DMA_CheckFifoParam+0x70>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005545 	.word	0x08005545
 8005538:	0800554b 	.word	0x0800554b
 800553c:	08005545 	.word	0x08005545
 8005540:	0800555d 	.word	0x0800555d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e030      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d025      	beq.n	80055a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555a:	e022      	b.n	80055a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005564:	d11f      	bne.n	80055a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800556a:	e01c      	b.n	80055a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d903      	bls.n	800557a <DMA_CheckFifoParam+0xb6>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d003      	beq.n	8005580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005578:	e018      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
      break;
 800557e:	e015      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	e00b      	b.n	80055aa <DMA_CheckFifoParam+0xe6>
      break;
 8005592:	bf00      	nop
 8005594:	e00a      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      break;
 8005596:	bf00      	nop
 8005598:	e008      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      break;
 800559a:	bf00      	nop
 800559c:	e006      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      break;
 800559e:	bf00      	nop
 80055a0:	e004      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      break;   
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
      break;
 80055aa:	bf00      	nop
    }
  } 
  
  return status; 
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop

080055bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	e16b      	b.n	80058b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055d8:	2201      	movs	r2, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	f040 815a 	bne.w	80058aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d005      	beq.n	800560e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560a:	2b02      	cmp	r3, #2
 800560c:	d130      	bne.n	8005670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	2203      	movs	r2, #3
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4013      	ands	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4313      	orrs	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005644:	2201      	movs	r2, #1
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 0201 	and.w	r2, r3, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4313      	orrs	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b03      	cmp	r3, #3
 800567a:	d017      	beq.n	80056ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	2203      	movs	r2, #3
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d123      	bne.n	8005700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	220f      	movs	r2, #15
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	08da      	lsrs	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3208      	adds	r2, #8
 80056fa:	69b9      	ldr	r1, [r7, #24]
 80056fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2203      	movs	r2, #3
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0203 	and.w	r2, r3, #3
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80b4 	beq.w	80058aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	4b60      	ldr	r3, [pc, #384]	; (80058c8 <HAL_GPIO_Init+0x30c>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	4a5f      	ldr	r2, [pc, #380]	; (80058c8 <HAL_GPIO_Init+0x30c>)
 800574c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005750:	6453      	str	r3, [r2, #68]	; 0x44
 8005752:	4b5d      	ldr	r3, [pc, #372]	; (80058c8 <HAL_GPIO_Init+0x30c>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800575e:	4a5b      	ldr	r2, [pc, #364]	; (80058cc <HAL_GPIO_Init+0x310>)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	3302      	adds	r3, #2
 8005766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	220f      	movs	r2, #15
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a52      	ldr	r2, [pc, #328]	; (80058d0 <HAL_GPIO_Init+0x314>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d02b      	beq.n	80057e2 <HAL_GPIO_Init+0x226>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a51      	ldr	r2, [pc, #324]	; (80058d4 <HAL_GPIO_Init+0x318>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d025      	beq.n	80057de <HAL_GPIO_Init+0x222>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a50      	ldr	r2, [pc, #320]	; (80058d8 <HAL_GPIO_Init+0x31c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01f      	beq.n	80057da <HAL_GPIO_Init+0x21e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a4f      	ldr	r2, [pc, #316]	; (80058dc <HAL_GPIO_Init+0x320>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d019      	beq.n	80057d6 <HAL_GPIO_Init+0x21a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a4e      	ldr	r2, [pc, #312]	; (80058e0 <HAL_GPIO_Init+0x324>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_GPIO_Init+0x216>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a4d      	ldr	r2, [pc, #308]	; (80058e4 <HAL_GPIO_Init+0x328>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00d      	beq.n	80057ce <HAL_GPIO_Init+0x212>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a4c      	ldr	r2, [pc, #304]	; (80058e8 <HAL_GPIO_Init+0x32c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <HAL_GPIO_Init+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a4b      	ldr	r2, [pc, #300]	; (80058ec <HAL_GPIO_Init+0x330>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d101      	bne.n	80057c6 <HAL_GPIO_Init+0x20a>
 80057c2:	2307      	movs	r3, #7
 80057c4:	e00e      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057c6:	2308      	movs	r3, #8
 80057c8:	e00c      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057ca:	2306      	movs	r3, #6
 80057cc:	e00a      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057ce:	2305      	movs	r3, #5
 80057d0:	e008      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057d2:	2304      	movs	r3, #4
 80057d4:	e006      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057d6:	2303      	movs	r3, #3
 80057d8:	e004      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057da:	2302      	movs	r3, #2
 80057dc:	e002      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <HAL_GPIO_Init+0x228>
 80057e2:	2300      	movs	r3, #0
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	f002 0203 	and.w	r2, r2, #3
 80057ea:	0092      	lsls	r2, r2, #2
 80057ec:	4093      	lsls	r3, r2
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057f4:	4935      	ldr	r1, [pc, #212]	; (80058cc <HAL_GPIO_Init+0x310>)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	089b      	lsrs	r3, r3, #2
 80057fa:	3302      	adds	r3, #2
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <HAL_GPIO_Init+0x334>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005826:	4a32      	ldr	r2, [pc, #200]	; (80058f0 <HAL_GPIO_Init+0x334>)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800582c:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <HAL_GPIO_Init+0x334>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <HAL_GPIO_Init+0x334>)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <HAL_GPIO_Init+0x334>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	43db      	mvns	r3, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4013      	ands	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <HAL_GPIO_Init+0x334>)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <HAL_GPIO_Init+0x334>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058a4:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <HAL_GPIO_Init+0x334>)
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	f67f ae90 	bls.w	80055d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	3724      	adds	r7, #36	; 0x24
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40013800 	.word	0x40013800
 80058d0:	40020000 	.word	0x40020000
 80058d4:	40020400 	.word	0x40020400
 80058d8:	40020800 	.word	0x40020800
 80058dc:	40020c00 	.word	0x40020c00
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40021400 	.word	0x40021400
 80058e8:	40021800 	.word	0x40021800
 80058ec:	40021c00 	.word	0x40021c00
 80058f0:	40013c00 	.word	0x40013c00

080058f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	887b      	ldrh	r3, [r7, #2]
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e001      	b.n	8005916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
 8005930:	4613      	mov	r3, r2
 8005932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005934:	787b      	ldrb	r3, [r7, #1]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800593a:	887a      	ldrh	r2, [r7, #2]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005940:	e003      	b.n	800594a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005942:	887b      	ldrh	r3, [r7, #2]
 8005944:	041a      	lsls	r2, r3, #16
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	619a      	str	r2, [r3, #24]
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e12b      	b.n	8005bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe f812 	bl	80039a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	; 0x24
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059bc:	f003 f8d6 	bl	8008b6c <HAL_RCC_GetPCLK1Freq>
 80059c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	4a81      	ldr	r2, [pc, #516]	; (8005bcc <HAL_I2C_Init+0x274>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d807      	bhi.n	80059dc <HAL_I2C_Init+0x84>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a80      	ldr	r2, [pc, #512]	; (8005bd0 <HAL_I2C_Init+0x278>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	bf94      	ite	ls
 80059d4:	2301      	movls	r3, #1
 80059d6:	2300      	movhi	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	e006      	b.n	80059ea <HAL_I2C_Init+0x92>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a7d      	ldr	r2, [pc, #500]	; (8005bd4 <HAL_I2C_Init+0x27c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bf94      	ite	ls
 80059e4:	2301      	movls	r3, #1
 80059e6:	2300      	movhi	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0e7      	b.n	8005bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a78      	ldr	r2, [pc, #480]	; (8005bd8 <HAL_I2C_Init+0x280>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	0c9b      	lsrs	r3, r3, #18
 80059fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4a6a      	ldr	r2, [pc, #424]	; (8005bcc <HAL_I2C_Init+0x274>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d802      	bhi.n	8005a2c <HAL_I2C_Init+0xd4>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	e009      	b.n	8005a40 <HAL_I2C_Init+0xe8>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a32:	fb02 f303 	mul.w	r3, r2, r3
 8005a36:	4a69      	ldr	r2, [pc, #420]	; (8005bdc <HAL_I2C_Init+0x284>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	099b      	lsrs	r3, r3, #6
 8005a3e:	3301      	adds	r3, #1
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	430b      	orrs	r3, r1
 8005a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	495c      	ldr	r1, [pc, #368]	; (8005bcc <HAL_I2C_Init+0x274>)
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	d819      	bhi.n	8005a94 <HAL_I2C_Init+0x13c>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1e59      	subs	r1, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a74:	400b      	ands	r3, r1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_I2C_Init+0x138>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1e59      	subs	r1, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a88:	3301      	adds	r3, #1
 8005a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8e:	e051      	b.n	8005b34 <HAL_I2C_Init+0x1dc>
 8005a90:	2304      	movs	r3, #4
 8005a92:	e04f      	b.n	8005b34 <HAL_I2C_Init+0x1dc>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d111      	bne.n	8005ac0 <HAL_I2C_Init+0x168>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1e58      	subs	r0, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	440b      	add	r3, r1
 8005aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e012      	b.n	8005ae6 <HAL_I2C_Init+0x18e>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1e58      	subs	r0, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6859      	ldr	r1, [r3, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	0099      	lsls	r1, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Init+0x196>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e022      	b.n	8005b34 <HAL_I2C_Init+0x1dc>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10e      	bne.n	8005b14 <HAL_I2C_Init+0x1bc>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1e58      	subs	r0, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	440b      	add	r3, r1
 8005b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b12:	e00f      	b.n	8005b34 <HAL_I2C_Init+0x1dc>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1e58      	subs	r0, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6859      	ldr	r1, [r3, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	0099      	lsls	r1, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	6809      	ldr	r1, [r1, #0]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6911      	ldr	r1, [r2, #16]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68d2      	ldr	r2, [r2, #12]
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	000186a0 	.word	0x000186a0
 8005bd0:	001e847f 	.word	0x001e847f
 8005bd4:	003d08ff 	.word	0x003d08ff
 8005bd8:	431bde83 	.word	0x431bde83
 8005bdc:	10624dd3 	.word	0x10624dd3

08005be0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	4608      	mov	r0, r1
 8005bea:	4611      	mov	r1, r2
 8005bec:	461a      	mov	r2, r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	817b      	strh	r3, [r7, #10]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	813b      	strh	r3, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bfa:	f7ff f883 	bl	8004d04 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	f040 80d9 	bne.w	8005dc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	2319      	movs	r3, #25
 8005c14:	2201      	movs	r2, #1
 8005c16:	496d      	ldr	r1, [pc, #436]	; (8005dcc <HAL_I2C_Mem_Write+0x1ec>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f002 f90d 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
 8005c26:	e0cc      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_I2C_Mem_Write+0x56>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e0c5      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x1e2>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d007      	beq.n	8005c5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2221      	movs	r2, #33	; 0x21
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a4d      	ldr	r2, [pc, #308]	; (8005dd0 <HAL_I2C_Mem_Write+0x1f0>)
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c9e:	88f8      	ldrh	r0, [r7, #6]
 8005ca0:	893a      	ldrh	r2, [r7, #8]
 8005ca2:	8979      	ldrh	r1, [r7, #10]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	4603      	mov	r3, r0
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f001 fe9c 	bl	80079ec <I2C_RequestMemoryWrite>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d052      	beq.n	8005d60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e081      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f002 f98e 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d107      	bne.n	8005ce6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e06b      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d11b      	bne.n	8005d60 <HAL_I2C_Mem_Write+0x180>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d017      	beq.n	8005d60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1aa      	bne.n	8005cbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f002 f97a 	bl	8008066 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d107      	bne.n	8005d90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e016      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e000      	b.n	8005dc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005dc0:	2302      	movs	r3, #2
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	00100002 	.word	0x00100002
 8005dd0:	ffff0000 	.word	0xffff0000

08005dd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	; 0x30
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	461a      	mov	r2, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	817b      	strh	r3, [r7, #10]
 8005de6:	460b      	mov	r3, r1
 8005de8:	813b      	strh	r3, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dee:	f7fe ff89 	bl	8004d04 <HAL_GetTick>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	f040 8208 	bne.w	8006212 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2319      	movs	r3, #25
 8005e08:	2201      	movs	r2, #1
 8005e0a:	497b      	ldr	r1, [pc, #492]	; (8005ff8 <HAL_I2C_Mem_Read+0x224>)
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f002 f813 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e1fb      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_I2C_Mem_Read+0x56>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e1f4      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d007      	beq.n	8005e50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2222      	movs	r2, #34	; 0x22
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2240      	movs	r2, #64	; 0x40
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a5b      	ldr	r2, [pc, #364]	; (8005ffc <HAL_I2C_Mem_Read+0x228>)
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e92:	88f8      	ldrh	r0, [r7, #6]
 8005e94:	893a      	ldrh	r2, [r7, #8]
 8005e96:	8979      	ldrh	r1, [r7, #10]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f001 fe38 	bl	8007b18 <I2C_RequestMemoryRead>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e1b0      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d113      	bne.n	8005ee2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eba:	2300      	movs	r3, #0
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	623b      	str	r3, [r7, #32]
 8005ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	e184      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d11b      	bne.n	8005f22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	61fb      	str	r3, [r7, #28]
 8005f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e164      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d11b      	bne.n	8005f62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	e144      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f78:	e138      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	f200 80f1 	bhi.w	8006166 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d123      	bne.n	8005fd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f002 f8db 	bl	800814c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e139      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fd2:	e10b      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d14e      	bne.n	800607a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4906      	ldr	r1, [pc, #24]	; (8006000 <HAL_I2C_Mem_Read+0x22c>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 ff26 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e10e      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
 8005ff6:	bf00      	nop
 8005ff8:	00100002 	.word	0x00100002
 8005ffc:	ffff0000 	.word	0xffff0000
 8006000:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006078:	e0b8      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	2200      	movs	r2, #0
 8006082:	4966      	ldr	r1, [pc, #408]	; (800621c <HAL_I2C_Mem_Read+0x448>)
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f001 fed7 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0bf      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2200      	movs	r2, #0
 80060de:	494f      	ldr	r1, [pc, #316]	; (800621c <HAL_I2C_Mem_Read+0x448>)
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 fea9 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e091      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006164:	e042      	b.n	80061ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f001 ffee 	bl	800814c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e04c      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d118      	bne.n	80061ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f aec2 	bne.w	8005f7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3728      	adds	r7, #40	; 0x28
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	00010004 	.word	0x00010004

08006220 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b10      	cmp	r3, #16
 800624e:	d003      	beq.n	8006258 <HAL_I2C_EV_IRQHandler+0x38>
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	f040 80c1 	bne.w	80063da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10d      	bne.n	800628e <HAL_I2C_EV_IRQHandler+0x6e>
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006278:	d003      	beq.n	8006282 <HAL_I2C_EV_IRQHandler+0x62>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006280:	d101      	bne.n	8006286 <HAL_I2C_EV_IRQHandler+0x66>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <HAL_I2C_EV_IRQHandler+0x68>
 8006286:	2300      	movs	r3, #0
 8006288:	2b01      	cmp	r3, #1
 800628a:	f000 8132 	beq.w	80064f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00c      	beq.n	80062b2 <HAL_I2C_EV_IRQHandler+0x92>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	0a5b      	lsrs	r3, r3, #9
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d006      	beq.n	80062b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 ffd6 	bl	8008256 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fd83 	bl	8006db6 <I2C_Master_SB>
 80062b0:	e092      	b.n	80063d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	0a5b      	lsrs	r3, r3, #9
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fdf9 	bl	8006ec2 <I2C_Master_ADD10>
 80062d0:	e082      	b.n	80063d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	0a5b      	lsrs	r3, r3, #9
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fe13 	bl	8006f16 <I2C_Master_ADDR>
 80062f0:	e072      	b.n	80063d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d03b      	beq.n	8006376 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630c:	f000 80f3 	beq.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00f      	beq.n	800633c <HAL_I2C_EV_IRQHandler+0x11c>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	0a9b      	lsrs	r3, r3, #10
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <HAL_I2C_EV_IRQHandler+0x11c>
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f9f3 	bl	8006720 <I2C_MasterTransmit_TXE>
 800633a:	e04d      	b.n	80063d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	089b      	lsrs	r3, r3, #2
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80d6 	beq.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	0a5b      	lsrs	r3, r3, #9
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80cf 	beq.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b21      	cmp	r3, #33	; 0x21
 800635c:	d103      	bne.n	8006366 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fa7a 	bl	8006858 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006364:	e0c7      	b.n	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	f040 80c4 	bne.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fae8 	bl	8006944 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006374:	e0bf      	b.n	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006384:	f000 80b7 	beq.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	099b      	lsrs	r3, r3, #6
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00f      	beq.n	80063b4 <HAL_I2C_EV_IRQHandler+0x194>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	0a9b      	lsrs	r3, r3, #10
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <HAL_I2C_EV_IRQHandler+0x194>
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	089b      	lsrs	r3, r3, #2
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fb5d 	bl	8006a6c <I2C_MasterReceive_RXNE>
 80063b2:	e011      	b.n	80063d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 809a 	beq.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	0a5b      	lsrs	r3, r3, #9
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8093 	beq.w	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fc06 	bl	8006be2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063d6:	e08e      	b.n	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80063d8:	e08d      	b.n	80064f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e007      	b.n	80063fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d012      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0x20e>
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006424:	69b9      	ldr	r1, [r7, #24]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 ffc4 	bl	80073b4 <I2C_Slave_ADDR>
 800642c:	e066      	b.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0x22e>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	0a5b      	lsrs	r3, r3, #9
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fffe 	bl	8007448 <I2C_Slave_STOPF>
 800644c:	e056      	b.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b21      	cmp	r3, #33	; 0x21
 8006452:	d002      	beq.n	800645a <HAL_I2C_EV_IRQHandler+0x23a>
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b29      	cmp	r3, #41	; 0x29
 8006458:	d125      	bne.n	80064a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	09db      	lsrs	r3, r3, #7
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <HAL_I2C_EV_IRQHandler+0x266>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	0a9b      	lsrs	r3, r3, #10
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <HAL_I2C_EV_IRQHandler+0x266>
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	089b      	lsrs	r3, r3, #2
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d103      	bne.n	8006486 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 feda 	bl	8007238 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006484:	e039      	b.n	80064fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	089b      	lsrs	r3, r3, #2
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d033      	beq.n	80064fa <HAL_I2C_EV_IRQHandler+0x2da>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	0a5b      	lsrs	r3, r3, #9
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d02d      	beq.n	80064fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 ff07 	bl	80072b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064a4:	e029      	b.n	80064fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	099b      	lsrs	r3, r3, #6
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00f      	beq.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	0a9b      	lsrs	r3, r3, #10
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	089b      	lsrs	r3, r3, #2
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 ff12 	bl	80072f4 <I2C_SlaveReceive_RXNE>
 80064d0:	e014      	b.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	089b      	lsrs	r3, r3, #2
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	0a5b      	lsrs	r3, r3, #9
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 ff40 	bl	8007370 <I2C_SlaveReceive_BTF>
 80064f0:	e004      	b.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80064f2:	bf00      	nop
 80064f4:	e002      	b.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064f6:	bf00      	nop
 80064f8:	e000      	b.n	80064fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b08a      	sub	sp, #40	; 0x28
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006524:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	0a1b      	lsrs	r3, r3, #8
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <HAL_I2C_ER_IRQHandler+0x4e>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800654e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	0a5b      	lsrs	r3, r3, #9
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <HAL_I2C_ER_IRQHandler+0x78>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006578:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	0a9b      	lsrs	r3, r3, #10
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d03f      	beq.n	8006606 <HAL_I2C_ER_IRQHandler+0x104>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d039      	beq.n	8006606 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006592:	7efb      	ldrb	r3, [r7, #27]
 8006594:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80065ac:	7ebb      	ldrb	r3, [r7, #26]
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d112      	bne.n	80065d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	2b21      	cmp	r3, #33	; 0x21
 80065bc:	d008      	beq.n	80065d0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	2b29      	cmp	r3, #41	; 0x29
 80065c2:	d005      	beq.n	80065d0 <HAL_I2C_ER_IRQHandler+0xce>
 80065c4:	7cfb      	ldrb	r3, [r7, #19]
 80065c6:	2b28      	cmp	r3, #40	; 0x28
 80065c8:	d106      	bne.n	80065d8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b21      	cmp	r3, #33	; 0x21
 80065ce:	d103      	bne.n	80065d8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f869 	bl	80076a8 <I2C_Slave_AF>
 80065d6:	e016      	b.n	8006606 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	f043 0304 	orr.w	r3, r3, #4
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065ea:	7efb      	ldrb	r3, [r7, #27]
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d002      	beq.n	80065f6 <HAL_I2C_ER_IRQHandler+0xf4>
 80065f0:	7efb      	ldrb	r3, [r7, #27]
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d107      	bne.n	8006606 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006604:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	0adb      	lsrs	r3, r3, #11
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <HAL_I2C_ER_IRQHandler+0x12e>
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	f043 0308 	orr.w	r3, r3, #8
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800662e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 f8a0 	bl	8007788 <I2C_ITError>
  }
}
 8006648:	bf00      	nop
 800664a:	3728      	adds	r7, #40	; 0x28
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
 80066ac:	4613      	mov	r3, r2
 80066ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006736:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	d150      	bne.n	80067e8 <I2C_MasterTransmit_TXE+0xc8>
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b21      	cmp	r3, #33	; 0x21
 800674a:	d14d      	bne.n	80067e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d01d      	beq.n	800678e <I2C_MasterTransmit_TXE+0x6e>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b20      	cmp	r3, #32
 8006756:	d01a      	beq.n	800678e <I2C_MasterTransmit_TXE+0x6e>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800675e:	d016      	beq.n	800678e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800676e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2211      	movs	r2, #17
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff ff62 	bl	8006650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800678c:	e060      	b.n	8006850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800679c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d107      	bne.n	80067d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff ff7d 	bl	80066d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067d6:	e03b      	b.n	8006850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff35 	bl	8006650 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067e6:	e033      	b.n	8006850 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b21      	cmp	r3, #33	; 0x21
 80067ec:	d005      	beq.n	80067fa <I2C_MasterTransmit_TXE+0xda>
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d12d      	bne.n	8006850 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b22      	cmp	r3, #34	; 0x22
 80067f8:	d12a      	bne.n	8006850 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d108      	bne.n	8006816 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006812:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006814:	e01c      	b.n	8006850 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d103      	bne.n	800682a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f88e 	bl	8006944 <I2C_MemoryTransmit_TXE_BTF>
}
 8006828:	e012      	b.n	8006850 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800684e:	e7ff      	b.n	8006850 <I2C_MasterTransmit_TXE+0x130>
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b21      	cmp	r3, #33	; 0x21
 8006870:	d164      	bne.n	800693c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d012      	beq.n	80068a2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80068a0:	e04c      	b.n	800693c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d01d      	beq.n	80068e4 <I2C_MasterTransmit_BTF+0x8c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d01a      	beq.n	80068e4 <I2C_MasterTransmit_BTF+0x8c>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068b4:	d016      	beq.n	80068e4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068c4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2211      	movs	r2, #17
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff feb7 	bl	8006650 <HAL_I2C_MasterTxCpltCallback>
}
 80068e2:	e02b      	b.n	800693c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006902:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d107      	bne.n	800692e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fed2 	bl	80066d0 <HAL_I2C_MemTxCpltCallback>
}
 800692c:	e006      	b.n	800693c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fe8a 	bl	8006650 <HAL_I2C_MasterTxCpltCallback>
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006952:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11d      	bne.n	8006998 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006960:	2b01      	cmp	r3, #1
 8006962:	d10b      	bne.n	800697c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006974:	1c9a      	adds	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800697a:	e073      	b.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006980:	b29b      	uxth	r3, r3
 8006982:	121b      	asrs	r3, r3, #8
 8006984:	b2da      	uxtb	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006996:	e065      	b.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10b      	bne.n	80069b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069b6:	e055      	b.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d151      	bne.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b22      	cmp	r3, #34	; 0x22
 80069c4:	d10d      	bne.n	80069e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069e0:	e040      	b.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b21      	cmp	r3, #33	; 0x21
 80069f0:	d112      	bne.n	8006a18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a16:	e025      	b.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d120      	bne.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b21      	cmp	r3, #33	; 0x21
 8006a26:	d11d      	bne.n	8006a64 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a36:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fe36 	bl	80066d0 <HAL_I2C_MemTxCpltCallback>
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b22      	cmp	r3, #34	; 0x22
 8006a7e:	f040 80ac 	bne.w	8006bda <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d921      	bls.n	8006ad4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	f040 808c 	bne.w	8006bda <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006ad2:	e082      	b.n	8006bda <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d075      	beq.n	8006bc8 <I2C_MasterReceive_RXNE+0x15c>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d002      	beq.n	8006ae8 <I2C_MasterReceive_RXNE+0x7c>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d16f      	bne.n	8006bc8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fafd 	bl	80080e8 <I2C_WaitOnSTOPRequestThroughIT>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d142      	bne.n	8006b7a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b02:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	d10a      	bne.n	8006b64 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff fdc1 	bl	80066e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b62:	e03a      	b.n	8006bda <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2212      	movs	r2, #18
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fd76 	bl	8006664 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b78:	e02f      	b.n	8006bda <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fd99 	bl	80066f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006bc6:	e008      	b.n	8006bda <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd6:	605a      	str	r2, [r3, #4]
}
 8006bd8:	e7ff      	b.n	8006bda <I2C_MasterReceive_RXNE+0x16e>
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d11b      	bne.n	8006c32 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c30:	e0bd      	b.n	8006dae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d129      	bne.n	8006c90 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d00a      	beq.n	8006c68 <I2C_MasterReceive_BTF+0x86>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d007      	beq.n	8006c68 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c8e:	e08e      	b.n	8006dae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d176      	bne.n	8006d88 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d002      	beq.n	8006ca6 <I2C_MasterReceive_BTF+0xc4>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d108      	bne.n	8006cb8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e019      	b.n	8006cec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d002      	beq.n	8006cc4 <I2C_MasterReceive_BTF+0xe2>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d108      	bne.n	8006cd6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e00a      	b.n	8006cec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d007      	beq.n	8006cec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d10a      	bne.n	8006d72 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fcba 	bl	80066e4 <HAL_I2C_MemRxCpltCallback>
}
 8006d70:	e01d      	b.n	8006dae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2212      	movs	r2, #18
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff fc6f 	bl	8006664 <HAL_I2C_MasterRxCpltCallback>
}
 8006d86:	e012      	b.n	8006dae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d117      	bne.n	8006dfa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006de2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006de4:	e067      	b.n	8006eb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	611a      	str	r2, [r3, #16]
}
 8006df8:	e05d      	b.n	8006eb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e02:	d133      	bne.n	8006e6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b21      	cmp	r3, #33	; 0x21
 8006e0e:	d109      	bne.n	8006e24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e20:	611a      	str	r2, [r3, #16]
 8006e22:	e008      	b.n	8006e36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <I2C_Master_SB+0x92>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d108      	bne.n	8006e5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d032      	beq.n	8006eb6 <I2C_Master_SB+0x100>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d02d      	beq.n	8006eb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e68:	605a      	str	r2, [r3, #4]
}
 8006e6a:	e024      	b.n	8006eb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10e      	bne.n	8006e92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	11db      	asrs	r3, r3, #7
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 0306 	and.w	r3, r3, #6
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f063 030f 	orn	r3, r3, #15
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	611a      	str	r2, [r3, #16]
}
 8006e90:	e011      	b.n	8006eb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d10d      	bne.n	8006eb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	11db      	asrs	r3, r3, #7
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0306 	and.w	r3, r3, #6
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f063 030e 	orn	r3, r3, #14
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	611a      	str	r2, [r3, #16]
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <I2C_Master_ADD10+0x26>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d108      	bne.n	8006efa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00c      	beq.n	8006f0a <I2C_Master_ADD10+0x48>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f08:	605a      	str	r2, [r3, #4]
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b091      	sub	sp, #68	; 0x44
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b22      	cmp	r3, #34	; 0x22
 8006f3e:	f040 8169 	bne.w	8007214 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10f      	bne.n	8006f6a <I2C_Master_ADDR+0x54>
 8006f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d10b      	bne.n	8006f6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f52:	2300      	movs	r3, #0
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	e160      	b.n	800722c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d11d      	bne.n	8006fae <I2C_Master_ADDR+0x98>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f7a:	d118      	bne.n	8006fae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	651a      	str	r2, [r3, #80]	; 0x50
 8006fac:	e13e      	b.n	800722c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d113      	bne.n	8006fe0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e115      	b.n	800720c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	f040 808a 	bne.w	8007100 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ff2:	d137      	bne.n	8007064 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007002:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800700e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007012:	d113      	bne.n	800703c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007022:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007024:	2300      	movs	r3, #0
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	e0e7      	b.n	800720c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703c:	2300      	movs	r3, #0
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e0d3      	b.n	800720c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	2b08      	cmp	r3, #8
 8007068:	d02e      	beq.n	80070c8 <I2C_Master_ADDR+0x1b2>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	2b20      	cmp	r3, #32
 800706e:	d02b      	beq.n	80070c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	2b12      	cmp	r3, #18
 8007074:	d102      	bne.n	800707c <I2C_Master_ADDR+0x166>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2b01      	cmp	r3, #1
 800707a:	d125      	bne.n	80070c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	2b04      	cmp	r3, #4
 8007080:	d00e      	beq.n	80070a0 <I2C_Master_ADDR+0x18a>
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b02      	cmp	r3, #2
 8007086:	d00b      	beq.n	80070a0 <I2C_Master_ADDR+0x18a>
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	2b10      	cmp	r3, #16
 800708c:	d008      	beq.n	80070a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e007      	b.n	80070b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	e0a1      	b.n	800720c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e085      	b.n	800720c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d14d      	bne.n	80071a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b04      	cmp	r3, #4
 800710e:	d016      	beq.n	800713e <I2C_Master_ADDR+0x228>
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	2b02      	cmp	r3, #2
 8007114:	d013      	beq.n	800713e <I2C_Master_ADDR+0x228>
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	2b10      	cmp	r3, #16
 800711a:	d010      	beq.n	800713e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800712a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	e007      	b.n	800714e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800714c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800715c:	d117      	bne.n	800718e <I2C_Master_ADDR+0x278>
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007164:	d00b      	beq.n	800717e <I2C_Master_ADDR+0x268>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	2b01      	cmp	r3, #1
 800716a:	d008      	beq.n	800717e <I2C_Master_ADDR+0x268>
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	2b08      	cmp	r3, #8
 8007170:	d005      	beq.n	800717e <I2C_Master_ADDR+0x268>
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	2b10      	cmp	r3, #16
 8007176:	d002      	beq.n	800717e <I2C_Master_ADDR+0x268>
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	2b20      	cmp	r3, #32
 800717c:	d107      	bne.n	800718e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800718c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	e032      	b.n	800720c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c4:	d117      	bne.n	80071f6 <I2C_Master_ADDR+0x2e0>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071cc:	d00b      	beq.n	80071e6 <I2C_Master_ADDR+0x2d0>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d008      	beq.n	80071e6 <I2C_Master_ADDR+0x2d0>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d005      	beq.n	80071e6 <I2C_Master_ADDR+0x2d0>
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d002      	beq.n	80071e6 <I2C_Master_ADDR+0x2d0>
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d107      	bne.n	80071f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007212:	e00b      	b.n	800722c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
}
 800722a:	e7ff      	b.n	800722c <I2C_Master_ADDR+0x316>
 800722c:	bf00      	nop
 800722e:	3744      	adds	r7, #68	; 0x44
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007246:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02b      	beq.n	80072aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d114      	bne.n	80072aa <I2C_SlaveTransmit_TXE+0x72>
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	2b29      	cmp	r3, #41	; 0x29
 8007284:	d111      	bne.n	80072aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007294:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2221      	movs	r2, #33	; 0x21
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2228      	movs	r2, #40	; 0x28
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff f9e7 	bl	8006678 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d011      	beq.n	80072e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	781a      	ldrb	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d02c      	beq.n	8007368 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d114      	bne.n	8007368 <I2C_SlaveReceive_RXNE+0x74>
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b2a      	cmp	r3, #42	; 0x2a
 8007342:	d111      	bne.n	8007368 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007352:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2222      	movs	r2, #34	; 0x22
 8007358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2228      	movs	r2, #40	; 0x28
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff f992 	bl	800668c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073ce:	2b28      	cmp	r3, #40	; 0x28
 80073d0:	d127      	bne.n	8007422 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	09db      	lsrs	r3, r3, #7
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	81bb      	strh	r3, [r7, #12]
 8007404:	e002      	b.n	800740c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007414:	89ba      	ldrh	r2, [r7, #12]
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff f940 	bl	80066a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007420:	e00e      	b.n	8007440 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007466:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007468:	2300      	movs	r3, #0
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	60bb      	str	r3, [r7, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a4:	d172      	bne.n	800758c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	2b22      	cmp	r3, #34	; 0x22
 80074aa:	d002      	beq.n	80074b2 <I2C_Slave_STOPF+0x6a>
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b2a      	cmp	r3, #42	; 0x2a
 80074b0:	d135      	bne.n	800751e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f043 0204 	orr.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fd ffa6 	bl	800543c <HAL_DMA_GetState>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d049      	beq.n	800758a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	4a69      	ldr	r2, [pc, #420]	; (80076a0 <I2C_Slave_STOPF+0x258>)
 80074fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fdee 	bl	80050e4 <HAL_DMA_Abort_IT>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03d      	beq.n	800758a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800751c:	e035      	b.n	800758a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f043 0204 	orr.w	r2, r3, #4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd ff70 	bl	800543c <HAL_DMA_GetState>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d014      	beq.n	800758c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007566:	4a4e      	ldr	r2, [pc, #312]	; (80076a0 <I2C_Slave_STOPF+0x258>)
 8007568:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	4618      	mov	r0, r3
 8007570:	f7fd fdb8 	bl	80050e4 <HAL_DMA_Abort_IT>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	e000      	b.n	800758c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800758a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d03e      	beq.n	8007614 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d112      	bne.n	80075ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d112      	bne.n	80075fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	f043 0204 	orr.w	r2, r3, #4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8b3 	bl	8007788 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007622:	e039      	b.n	8007698 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b2a      	cmp	r3, #42	; 0x2a
 8007628:	d109      	bne.n	800763e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2228      	movs	r2, #40	; 0x28
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff f827 	bl	800668c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b28      	cmp	r3, #40	; 0x28
 8007648:	d111      	bne.n	800766e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <I2C_Slave_STOPF+0x25c>)
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff f828 	bl	80066bc <HAL_I2C_ListenCpltCallback>
}
 800766c:	e014      	b.n	8007698 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	2b22      	cmp	r3, #34	; 0x22
 8007674:	d002      	beq.n	800767c <I2C_Slave_STOPF+0x234>
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b22      	cmp	r3, #34	; 0x22
 800767a:	d10d      	bne.n	8007698 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fe fffa 	bl	800668c <HAL_I2C_SlaveRxCpltCallback>
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	08007ce9 	.word	0x08007ce9
 80076a4:	ffff0000 	.word	0xffff0000

080076a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d002      	beq.n	80076ca <I2C_Slave_AF+0x22>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d129      	bne.n	800771e <I2C_Slave_AF+0x76>
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	2b28      	cmp	r3, #40	; 0x28
 80076ce:	d126      	bne.n	800771e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2c      	ldr	r2, [pc, #176]	; (8007784 <I2C_Slave_AF+0xdc>)
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fe ffd0 	bl	80066bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800771c:	e02e      	b.n	800777c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b21      	cmp	r3, #33	; 0x21
 8007722:	d126      	bne.n	8007772 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <I2C_Slave_AF+0xdc>)
 8007728:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2221      	movs	r2, #33	; 0x21
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800774e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007758:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007768:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fe ff84 	bl	8006678 <HAL_I2C_SlaveTxCpltCallback>
}
 8007770:	e004      	b.n	800777c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800777a:	615a      	str	r2, [r3, #20]
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	ffff0000 	.word	0xffff0000

08007788 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007796:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800779e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d002      	beq.n	80077ac <I2C_ITError+0x24>
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d10a      	bne.n	80077c2 <I2C_ITError+0x3a>
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b22      	cmp	r3, #34	; 0x22
 80077b0:	d107      	bne.n	80077c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077c8:	2b28      	cmp	r3, #40	; 0x28
 80077ca:	d107      	bne.n	80077dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2228      	movs	r2, #40	; 0x28
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077da:	e015      	b.n	8007808 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ea:	d00a      	beq.n	8007802 <I2C_ITError+0x7a>
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b60      	cmp	r3, #96	; 0x60
 80077f0:	d007      	beq.n	8007802 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007816:	d162      	bne.n	80078de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007826:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	d020      	beq.n	8007878 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783a:	4a6a      	ldr	r2, [pc, #424]	; (80079e4 <I2C_ITError+0x25c>)
 800783c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd fc4e 	bl	80050e4 <HAL_DMA_Abort_IT>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8089 	beq.w	8007962 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007872:	4610      	mov	r0, r2
 8007874:	4798      	blx	r3
 8007876:	e074      	b.n	8007962 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	4a59      	ldr	r2, [pc, #356]	; (80079e4 <I2C_ITError+0x25c>)
 800787e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	4618      	mov	r0, r3
 8007886:	f7fd fc2d 	bl	80050e4 <HAL_DMA_Abort_IT>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d068      	beq.n	8007962 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d10b      	bne.n	80078b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	e041      	b.n	8007962 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b60      	cmp	r3, #96	; 0x60
 80078e8:	d125      	bne.n	8007936 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d10b      	bne.n	800791e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	b2d2      	uxtb	r2, r2
 8007912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0201 	bic.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe feec 	bl	800670c <HAL_I2C_AbortCpltCallback>
 8007934:	e015      	b.n	8007962 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d10b      	bne.n	800795c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7fe fecb 	bl	80066f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10e      	bne.n	8007990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800798c:	2b00      	cmp	r3, #0
 800798e:	d007      	beq.n	80079a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800799e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d113      	bne.n	80079dc <I2C_ITError+0x254>
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b28      	cmp	r3, #40	; 0x28
 80079b8:	d110      	bne.n	80079dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a0a      	ldr	r2, [pc, #40]	; (80079e8 <I2C_ITError+0x260>)
 80079be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fe fe70 	bl	80066bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	08007ce9 	.word	0x08007ce9
 80079e8:	ffff0000 	.word	0xffff0000

080079ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	817b      	strh	r3, [r7, #10]
 80079fe:	460b      	mov	r3, r1
 8007a00:	813b      	strh	r3, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa08 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00d      	beq.n	8007a4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3c:	d103      	bne.n	8007a46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e05f      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a4a:	897b      	ldrh	r3, [r7, #10]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	6a3a      	ldr	r2, [r7, #32]
 8007a5e:	492d      	ldr	r1, [pc, #180]	; (8007b14 <I2C_RequestMemoryWrite+0x128>)
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fa40 	bl	8007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e04c      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 faaa 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d107      	bne.n	8007aae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e02b      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ab8:	893b      	ldrh	r3, [r7, #8]
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	611a      	str	r2, [r3, #16]
 8007ac2:	e021      	b.n	8007b08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad4:	6a39      	ldr	r1, [r7, #32]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fa84 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d107      	bne.n	8007afa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e005      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	00010002 	.word	0x00010002

08007b18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	4608      	mov	r0, r1
 8007b22:	4611      	mov	r1, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	817b      	strh	r3, [r7, #10]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	813b      	strh	r3, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f96a 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b78:	d103      	bne.n	8007b82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e0aa      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b86:	897b      	ldrh	r3, [r7, #10]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	6a3a      	ldr	r2, [r7, #32]
 8007b9a:	4952      	ldr	r1, [pc, #328]	; (8007ce4 <I2C_RequestMemoryRead+0x1cc>)
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f9a2 	bl	8007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e097      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bac:	2300      	movs	r3, #0
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	6a39      	ldr	r1, [r7, #32]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fa0c 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d107      	bne.n	8007bea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e076      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d105      	bne.n	8007c00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	611a      	str	r2, [r3, #16]
 8007bfe:	e021      	b.n	8007c44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c00:	893b      	ldrh	r3, [r7, #8]
 8007c02:	0a1b      	lsrs	r3, r3, #8
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c10:	6a39      	ldr	r1, [r7, #32]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f9e6 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00d      	beq.n	8007c3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d107      	bne.n	8007c36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e050      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c3a:	893b      	ldrh	r3, [r7, #8]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	6a39      	ldr	r1, [r7, #32]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f9cb 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d107      	bne.n	8007c6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e035      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f8d3 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca6:	d103      	bne.n	8007cb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e013      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cb4:	897b      	ldrh	r3, [r7, #10]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	6a3a      	ldr	r2, [r7, #32]
 8007cc8:	4906      	ldr	r1, [pc, #24]	; (8007ce4 <I2C_RequestMemoryRead+0x1cc>)
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f90b 	bl	8007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	00010002 	.word	0x00010002

08007ce8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d02:	4b4b      	ldr	r3, [pc, #300]	; (8007e30 <I2C_DMAAbort+0x148>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	4a4a      	ldr	r2, [pc, #296]	; (8007e34 <I2C_DMAAbort+0x14c>)
 8007d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0e:	0a1a      	lsrs	r2, r3, #8
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	00da      	lsls	r2, r3, #3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007d2e:	e00a      	b.n	8007d46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d44:	d0ea      	beq.n	8007d1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	2200      	movs	r2, #0
 8007d54:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	2200      	movs	r2, #0
 8007d64:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	2200      	movs	r2, #0
 8007d8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	2200      	movs	r2, #0
 8007d9a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b60      	cmp	r3, #96	; 0x60
 8007db6:	d10e      	bne.n	8007dd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dce:	6978      	ldr	r0, [r7, #20]
 8007dd0:	f7fe fc9c 	bl	800670c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007dd4:	e027      	b.n	8007e26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dd6:	7cfb      	ldrb	r3, [r7, #19]
 8007dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ddc:	2b28      	cmp	r3, #40	; 0x28
 8007dde:	d117      	bne.n	8007e10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2228      	movs	r2, #40	; 0x28
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e0e:	e007      	b.n	8007e20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007e20:	6978      	ldr	r0, [r7, #20]
 8007e22:	f7fe fc69 	bl	80066f8 <HAL_I2C_ErrorCallback>
}
 8007e26:	bf00      	nop
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000150 	.word	0x20000150
 8007e34:	14f8b589 	.word	0x14f8b589

08007e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4613      	mov	r3, r2
 8007e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e48:	e025      	b.n	8007e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d021      	beq.n	8007e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e52:	f7fc ff57 	bl	8004d04 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d116      	bne.n	8007e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f043 0220 	orr.w	r2, r3, #32
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e023      	b.n	8007ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10d      	bne.n	8007ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	43da      	mvns	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bf0c      	ite	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	2300      	movne	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	e00c      	b.n	8007ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	43da      	mvns	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d0b6      	beq.n	8007e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ef4:	e051      	b.n	8007f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f04:	d123      	bne.n	8007f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f043 0204 	orr.w	r2, r3, #4
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e046      	b.n	8007fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d021      	beq.n	8007f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f56:	f7fc fed5 	bl	8004d04 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d302      	bcc.n	8007f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d116      	bne.n	8007f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	f043 0220 	orr.w	r2, r3, #32
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e020      	b.n	8007fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d10c      	bne.n	8007fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	43da      	mvns	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e00b      	b.n	8007fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	43da      	mvns	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d18d      	bne.n	8007ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff0:	e02d      	b.n	800804e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f900 	bl	80081f8 <I2C_IsAcknowledgeFailed>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e02d      	b.n	800805e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d021      	beq.n	800804e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800a:	f7fc fe7b 	bl	8004d04 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d116      	bne.n	800804e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	f043 0220 	orr.w	r2, r3, #32
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e007      	b.n	800805e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d1ca      	bne.n	8007ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008072:	e02d      	b.n	80080d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f8bf 	bl	80081f8 <I2C_IsAcknowledgeFailed>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e02d      	b.n	80080e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d021      	beq.n	80080d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808c:	f7fc fe3a 	bl	8004d04 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	429a      	cmp	r2, r3
 800809a:	d302      	bcc.n	80080a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d116      	bne.n	80080d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e007      	b.n	80080e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d1ca      	bne.n	8008074 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	4a13      	ldr	r2, [pc, #76]	; (8008148 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	0a1a      	lsrs	r2, r3, #8
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b01      	subs	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d107      	bne.n	8008126 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e008      	b.n	8008138 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008134:	d0e9      	beq.n	800810a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20000150 	.word	0x20000150
 8008148:	14f8b589 	.word	0x14f8b589

0800814c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008158:	e042      	b.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b10      	cmp	r3, #16
 8008166:	d119      	bne.n	800819c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0210 	mvn.w	r2, #16
 8008170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e029      	b.n	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819c:	f7fc fdb2 	bl	8004d04 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d302      	bcc.n	80081b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d116      	bne.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	f043 0220 	orr.w	r2, r3, #32
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e007      	b.n	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d1b5      	bne.n	800815a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820e:	d11b      	bne.n	8008248 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008218:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	f043 0204 	orr.w	r2, r3, #4
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008266:	d103      	bne.n	8008270 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800826e:	e007      	b.n	8008280 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008278:	d102      	bne.n	8008280 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2208      	movs	r2, #8
 800827e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e267      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d075      	beq.n	8008396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082aa:	4b88      	ldr	r3, [pc, #544]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 030c 	and.w	r3, r3, #12
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d00c      	beq.n	80082d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082b6:	4b85      	ldr	r3, [pc, #532]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d112      	bne.n	80082e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082c2:	4b82      	ldr	r3, [pc, #520]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082ce:	d10b      	bne.n	80082e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082d0:	4b7e      	ldr	r3, [pc, #504]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d05b      	beq.n	8008394 <HAL_RCC_OscConfig+0x108>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d157      	bne.n	8008394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e242      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f0:	d106      	bne.n	8008300 <HAL_RCC_OscConfig+0x74>
 80082f2:	4b76      	ldr	r3, [pc, #472]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a75      	ldr	r2, [pc, #468]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80082f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	e01d      	b.n	800833c <HAL_RCC_OscConfig+0xb0>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008308:	d10c      	bne.n	8008324 <HAL_RCC_OscConfig+0x98>
 800830a:	4b70      	ldr	r3, [pc, #448]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a6f      	ldr	r2, [pc, #444]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4b6d      	ldr	r3, [pc, #436]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a6c      	ldr	r2, [pc, #432]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 800831c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	e00b      	b.n	800833c <HAL_RCC_OscConfig+0xb0>
 8008324:	4b69      	ldr	r3, [pc, #420]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a68      	ldr	r2, [pc, #416]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 800832a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4b66      	ldr	r3, [pc, #408]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a65      	ldr	r2, [pc, #404]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800833a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008344:	f7fc fcde 	bl	8004d04 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800834c:	f7fc fcda 	bl	8004d04 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e207      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800835e:	4b5b      	ldr	r3, [pc, #364]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f0      	beq.n	800834c <HAL_RCC_OscConfig+0xc0>
 800836a:	e014      	b.n	8008396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800836c:	f7fc fcca 	bl	8004d04 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008374:	f7fc fcc6 	bl	8004d04 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b64      	cmp	r3, #100	; 0x64
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e1f3      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008386:	4b51      	ldr	r3, [pc, #324]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f0      	bne.n	8008374 <HAL_RCC_OscConfig+0xe8>
 8008392:	e000      	b.n	8008396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d063      	beq.n	800846a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083a2:	4b4a      	ldr	r3, [pc, #296]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 030c 	and.w	r3, r3, #12
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083ae:	4b47      	ldr	r3, [pc, #284]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d11c      	bne.n	80083f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083ba:	4b44      	ldr	r3, [pc, #272]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d116      	bne.n	80083f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083c6:	4b41      	ldr	r3, [pc, #260]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <HAL_RCC_OscConfig+0x152>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d001      	beq.n	80083de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e1c7      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083de:	4b3b      	ldr	r3, [pc, #236]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	4937      	ldr	r1, [pc, #220]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083f2:	e03a      	b.n	800846a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d020      	beq.n	800843e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083fc:	4b34      	ldr	r3, [pc, #208]	; (80084d0 <HAL_RCC_OscConfig+0x244>)
 80083fe:	2201      	movs	r2, #1
 8008400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008402:	f7fc fc7f 	bl	8004d04 <HAL_GetTick>
 8008406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008408:	e008      	b.n	800841c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800840a:	f7fc fc7b 	bl	8004d04 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e1a8      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800841c:	4b2b      	ldr	r3, [pc, #172]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f0      	beq.n	800840a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008428:	4b28      	ldr	r3, [pc, #160]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	4925      	ldr	r1, [pc, #148]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008438:	4313      	orrs	r3, r2
 800843a:	600b      	str	r3, [r1, #0]
 800843c:	e015      	b.n	800846a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800843e:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <HAL_RCC_OscConfig+0x244>)
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fc fc5e 	bl	8004d04 <HAL_GetTick>
 8008448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800844c:	f7fc fc5a 	bl	8004d04 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e187      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800845e:	4b1b      	ldr	r3, [pc, #108]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f0      	bne.n	800844c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b00      	cmp	r3, #0
 8008474:	d036      	beq.n	80084e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d016      	beq.n	80084ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800847e:	4b15      	ldr	r3, [pc, #84]	; (80084d4 <HAL_RCC_OscConfig+0x248>)
 8008480:	2201      	movs	r2, #1
 8008482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008484:	f7fc fc3e 	bl	8004d04 <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800848c:	f7fc fc3a 	bl	8004d04 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e167      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800849e:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <HAL_RCC_OscConfig+0x240>)
 80084a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f0      	beq.n	800848c <HAL_RCC_OscConfig+0x200>
 80084aa:	e01b      	b.n	80084e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <HAL_RCC_OscConfig+0x248>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084b2:	f7fc fc27 	bl	8004d04 <HAL_GetTick>
 80084b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084b8:	e00e      	b.n	80084d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084ba:	f7fc fc23 	bl	8004d04 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d907      	bls.n	80084d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e150      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
 80084cc:	40023800 	.word	0x40023800
 80084d0:	42470000 	.word	0x42470000
 80084d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084d8:	4b88      	ldr	r3, [pc, #544]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80084da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1ea      	bne.n	80084ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8097 	beq.w	8008620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084f2:	2300      	movs	r3, #0
 80084f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084f6:	4b81      	ldr	r3, [pc, #516]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10f      	bne.n	8008522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008502:	2300      	movs	r3, #0
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	4b7d      	ldr	r3, [pc, #500]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	4a7c      	ldr	r2, [pc, #496]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800850c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008510:	6413      	str	r3, [r2, #64]	; 0x40
 8008512:	4b7a      	ldr	r3, [pc, #488]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851a:	60bb      	str	r3, [r7, #8]
 800851c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800851e:	2301      	movs	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008522:	4b77      	ldr	r3, [pc, #476]	; (8008700 <HAL_RCC_OscConfig+0x474>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d118      	bne.n	8008560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800852e:	4b74      	ldr	r3, [pc, #464]	; (8008700 <HAL_RCC_OscConfig+0x474>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a73      	ldr	r2, [pc, #460]	; (8008700 <HAL_RCC_OscConfig+0x474>)
 8008534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800853a:	f7fc fbe3 	bl	8004d04 <HAL_GetTick>
 800853e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008540:	e008      	b.n	8008554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008542:	f7fc fbdf 	bl	8004d04 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e10c      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008554:	4b6a      	ldr	r3, [pc, #424]	; (8008700 <HAL_RCC_OscConfig+0x474>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0f0      	beq.n	8008542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d106      	bne.n	8008576 <HAL_RCC_OscConfig+0x2ea>
 8008568:	4b64      	ldr	r3, [pc, #400]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800856a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856c:	4a63      	ldr	r2, [pc, #396]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	6713      	str	r3, [r2, #112]	; 0x70
 8008574:	e01c      	b.n	80085b0 <HAL_RCC_OscConfig+0x324>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b05      	cmp	r3, #5
 800857c:	d10c      	bne.n	8008598 <HAL_RCC_OscConfig+0x30c>
 800857e:	4b5f      	ldr	r3, [pc, #380]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008582:	4a5e      	ldr	r2, [pc, #376]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008584:	f043 0304 	orr.w	r3, r3, #4
 8008588:	6713      	str	r3, [r2, #112]	; 0x70
 800858a:	4b5c      	ldr	r3, [pc, #368]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	4a5b      	ldr	r2, [pc, #364]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	6713      	str	r3, [r2, #112]	; 0x70
 8008596:	e00b      	b.n	80085b0 <HAL_RCC_OscConfig+0x324>
 8008598:	4b58      	ldr	r3, [pc, #352]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800859a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859c:	4a57      	ldr	r2, [pc, #348]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800859e:	f023 0301 	bic.w	r3, r3, #1
 80085a2:	6713      	str	r3, [r2, #112]	; 0x70
 80085a4:	4b55      	ldr	r3, [pc, #340]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a8:	4a54      	ldr	r2, [pc, #336]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80085aa:	f023 0304 	bic.w	r3, r3, #4
 80085ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d015      	beq.n	80085e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b8:	f7fc fba4 	bl	8004d04 <HAL_GetTick>
 80085bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085be:	e00a      	b.n	80085d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c0:	f7fc fba0 	bl	8004d04 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e0cb      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085d6:	4b49      	ldr	r3, [pc, #292]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0ee      	beq.n	80085c0 <HAL_RCC_OscConfig+0x334>
 80085e2:	e014      	b.n	800860e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085e4:	f7fc fb8e 	bl	8004d04 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085ea:	e00a      	b.n	8008602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ec:	f7fc fb8a 	bl	8004d04 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e0b5      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008602:	4b3e      	ldr	r3, [pc, #248]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1ee      	bne.n	80085ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d105      	bne.n	8008620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008614:	4b39      	ldr	r3, [pc, #228]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	4a38      	ldr	r2, [pc, #224]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800861a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800861e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80a1 	beq.w	800876c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800862a:	4b34      	ldr	r3, [pc, #208]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 030c 	and.w	r3, r3, #12
 8008632:	2b08      	cmp	r3, #8
 8008634:	d05c      	beq.n	80086f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d141      	bne.n	80086c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800863e:	4b31      	ldr	r3, [pc, #196]	; (8008704 <HAL_RCC_OscConfig+0x478>)
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008644:	f7fc fb5e 	bl	8004d04 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800864c:	f7fc fb5a 	bl	8004d04 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e087      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800865e:	4b27      	ldr	r3, [pc, #156]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f0      	bne.n	800864c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	019b      	lsls	r3, r3, #6
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	085b      	lsrs	r3, r3, #1
 8008682:	3b01      	subs	r3, #1
 8008684:	041b      	lsls	r3, r3, #16
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	491b      	ldr	r1, [pc, #108]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 8008690:	4313      	orrs	r3, r2
 8008692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008694:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <HAL_RCC_OscConfig+0x478>)
 8008696:	2201      	movs	r2, #1
 8008698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800869a:	f7fc fb33 	bl	8004d04 <HAL_GetTick>
 800869e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086a2:	f7fc fb2f 	bl	8004d04 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e05c      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086b4:	4b11      	ldr	r3, [pc, #68]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0f0      	beq.n	80086a2 <HAL_RCC_OscConfig+0x416>
 80086c0:	e054      	b.n	800876c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086c2:	4b10      	ldr	r3, [pc, #64]	; (8008704 <HAL_RCC_OscConfig+0x478>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c8:	f7fc fb1c 	bl	8004d04 <HAL_GetTick>
 80086cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086d0:	f7fc fb18 	bl	8004d04 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e045      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086e2:	4b06      	ldr	r3, [pc, #24]	; (80086fc <HAL_RCC_OscConfig+0x470>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f0      	bne.n	80086d0 <HAL_RCC_OscConfig+0x444>
 80086ee:	e03d      	b.n	800876c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d107      	bne.n	8008708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e038      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
 80086fc:	40023800 	.word	0x40023800
 8008700:	40007000 	.word	0x40007000
 8008704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008708:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <HAL_RCC_OscConfig+0x4ec>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d028      	beq.n	8008768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d121      	bne.n	8008768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800872e:	429a      	cmp	r2, r3
 8008730:	d11a      	bne.n	8008768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008738:	4013      	ands	r3, r2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800873e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008740:	4293      	cmp	r3, r2
 8008742:	d111      	bne.n	8008768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874e:	085b      	lsrs	r3, r3, #1
 8008750:	3b01      	subs	r3, #1
 8008752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008754:	429a      	cmp	r2, r3
 8008756:	d107      	bne.n	8008768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008764:	429a      	cmp	r2, r3
 8008766:	d001      	beq.n	800876c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	40023800 	.word	0x40023800

0800877c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e0cc      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008790:	4b68      	ldr	r3, [pc, #416]	; (8008934 <HAL_RCC_ClockConfig+0x1b8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d90c      	bls.n	80087b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800879e:	4b65      	ldr	r3, [pc, #404]	; (8008934 <HAL_RCC_ClockConfig+0x1b8>)
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087a6:	4b63      	ldr	r3, [pc, #396]	; (8008934 <HAL_RCC_ClockConfig+0x1b8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d001      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e0b8      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d020      	beq.n	8008806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087d0:	4b59      	ldr	r3, [pc, #356]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	4a58      	ldr	r2, [pc, #352]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80087d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087e8:	4b53      	ldr	r3, [pc, #332]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	4a52      	ldr	r2, [pc, #328]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80087ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087f4:	4b50      	ldr	r3, [pc, #320]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	494d      	ldr	r1, [pc, #308]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	4313      	orrs	r3, r2
 8008804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d044      	beq.n	800889c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d107      	bne.n	800882a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800881a:	4b47      	ldr	r3, [pc, #284]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d119      	bne.n	800885a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e07f      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d003      	beq.n	800883a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008836:	2b03      	cmp	r3, #3
 8008838:	d107      	bne.n	800884a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800883a:	4b3f      	ldr	r3, [pc, #252]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d109      	bne.n	800885a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e06f      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800884a:	4b3b      	ldr	r3, [pc, #236]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e067      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800885a:	4b37      	ldr	r3, [pc, #220]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f023 0203 	bic.w	r2, r3, #3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4934      	ldr	r1, [pc, #208]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 8008868:	4313      	orrs	r3, r2
 800886a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800886c:	f7fc fa4a 	bl	8004d04 <HAL_GetTick>
 8008870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008872:	e00a      	b.n	800888a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008874:	f7fc fa46 	bl	8004d04 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008882:	4293      	cmp	r3, r2
 8008884:	d901      	bls.n	800888a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e04f      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800888a:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f003 020c 	and.w	r2, r3, #12
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	429a      	cmp	r2, r3
 800889a:	d1eb      	bne.n	8008874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800889c:	4b25      	ldr	r3, [pc, #148]	; (8008934 <HAL_RCC_ClockConfig+0x1b8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0307 	and.w	r3, r3, #7
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d20c      	bcs.n	80088c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088aa:	4b22      	ldr	r3, [pc, #136]	; (8008934 <HAL_RCC_ClockConfig+0x1b8>)
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	b2d2      	uxtb	r2, r2
 80088b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088b2:	4b20      	ldr	r3, [pc, #128]	; (8008934 <HAL_RCC_ClockConfig+0x1b8>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d001      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e032      	b.n	800892a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088d0:	4b19      	ldr	r3, [pc, #100]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	4916      	ldr	r1, [pc, #88]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	490e      	ldr	r1, [pc, #56]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008902:	f000 f821 	bl	8008948 <HAL_RCC_GetSysClockFreq>
 8008906:	4602      	mov	r2, r0
 8008908:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	490a      	ldr	r1, [pc, #40]	; (800893c <HAL_RCC_ClockConfig+0x1c0>)
 8008914:	5ccb      	ldrb	r3, [r1, r3]
 8008916:	fa22 f303 	lsr.w	r3, r2, r3
 800891a:	4a09      	ldr	r2, [pc, #36]	; (8008940 <HAL_RCC_ClockConfig+0x1c4>)
 800891c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <HAL_RCC_ClockConfig+0x1c8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f7fc f9aa 	bl	8004c7c <HAL_InitTick>

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	40023c00 	.word	0x40023c00
 8008938:	40023800 	.word	0x40023800
 800893c:	0800dcc0 	.word	0x0800dcc0
 8008940:	20000150 	.word	0x20000150
 8008944:	2000017c 	.word	0x2000017c

08008948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800894c:	b094      	sub	sp, #80	; 0x50
 800894e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	647b      	str	r3, [r7, #68]	; 0x44
 8008954:	2300      	movs	r3, #0
 8008956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008958:	2300      	movs	r3, #0
 800895a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008960:	4b79      	ldr	r3, [pc, #484]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 030c 	and.w	r3, r3, #12
 8008968:	2b08      	cmp	r3, #8
 800896a:	d00d      	beq.n	8008988 <HAL_RCC_GetSysClockFreq+0x40>
 800896c:	2b08      	cmp	r3, #8
 800896e:	f200 80e1 	bhi.w	8008b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_RCC_GetSysClockFreq+0x34>
 8008976:	2b04      	cmp	r3, #4
 8008978:	d003      	beq.n	8008982 <HAL_RCC_GetSysClockFreq+0x3a>
 800897a:	e0db      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800897c:	4b73      	ldr	r3, [pc, #460]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800897e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008980:	e0db      	b.n	8008b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008982:	4b73      	ldr	r3, [pc, #460]	; (8008b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8008984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008986:	e0d8      	b.n	8008b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008988:	4b6f      	ldr	r3, [pc, #444]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008992:	4b6d      	ldr	r3, [pc, #436]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d063      	beq.n	8008a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800899e:	4b6a      	ldr	r3, [pc, #424]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	099b      	lsrs	r3, r3, #6
 80089a4:	2200      	movs	r2, #0
 80089a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80089a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b0:	633b      	str	r3, [r7, #48]	; 0x30
 80089b2:	2300      	movs	r3, #0
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
 80089b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80089ba:	4622      	mov	r2, r4
 80089bc:	462b      	mov	r3, r5
 80089be:	f04f 0000 	mov.w	r0, #0
 80089c2:	f04f 0100 	mov.w	r1, #0
 80089c6:	0159      	lsls	r1, r3, #5
 80089c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089cc:	0150      	lsls	r0, r2, #5
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4621      	mov	r1, r4
 80089d4:	1a51      	subs	r1, r2, r1
 80089d6:	6139      	str	r1, [r7, #16]
 80089d8:	4629      	mov	r1, r5
 80089da:	eb63 0301 	sbc.w	r3, r3, r1
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	f04f 0300 	mov.w	r3, #0
 80089e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089ec:	4659      	mov	r1, fp
 80089ee:	018b      	lsls	r3, r1, #6
 80089f0:	4651      	mov	r1, sl
 80089f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089f6:	4651      	mov	r1, sl
 80089f8:	018a      	lsls	r2, r1, #6
 80089fa:	4651      	mov	r1, sl
 80089fc:	ebb2 0801 	subs.w	r8, r2, r1
 8008a00:	4659      	mov	r1, fp
 8008a02:	eb63 0901 	sbc.w	r9, r3, r1
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a1a:	4690      	mov	r8, r2
 8008a1c:	4699      	mov	r9, r3
 8008a1e:	4623      	mov	r3, r4
 8008a20:	eb18 0303 	adds.w	r3, r8, r3
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	462b      	mov	r3, r5
 8008a28:	eb49 0303 	adc.w	r3, r9, r3
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	024b      	lsls	r3, r1, #9
 8008a3e:	4621      	mov	r1, r4
 8008a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a44:	4621      	mov	r1, r4
 8008a46:	024a      	lsls	r2, r1, #9
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4e:	2200      	movs	r2, #0
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a58:	f7f7 fbbe 	bl	80001d8 <__aeabi_uldivmod>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4613      	mov	r3, r2
 8008a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a64:	e058      	b.n	8008b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a66:	4b38      	ldr	r3, [pc, #224]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	099b      	lsrs	r3, r3, #6
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	4611      	mov	r1, r2
 8008a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a76:	623b      	str	r3, [r7, #32]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	f04f 0000 	mov.w	r0, #0
 8008a88:	f04f 0100 	mov.w	r1, #0
 8008a8c:	0159      	lsls	r1, r3, #5
 8008a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a92:	0150      	lsls	r0, r2, #5
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4641      	mov	r1, r8
 8008a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8008abc:	eb63 050b 	sbc.w	r5, r3, fp
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	00eb      	lsls	r3, r5, #3
 8008aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ace:	00e2      	lsls	r2, r4, #3
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	4643      	mov	r3, r8
 8008ad6:	18e3      	adds	r3, r4, r3
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	464b      	mov	r3, r9
 8008adc:	eb45 0303 	adc.w	r3, r5, r3
 8008ae0:	607b      	str	r3, [r7, #4]
 8008ae2:	f04f 0200 	mov.w	r2, #0
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008aee:	4629      	mov	r1, r5
 8008af0:	028b      	lsls	r3, r1, #10
 8008af2:	4621      	mov	r1, r4
 8008af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008af8:	4621      	mov	r1, r4
 8008afa:	028a      	lsls	r2, r1, #10
 8008afc:	4610      	mov	r0, r2
 8008afe:	4619      	mov	r1, r3
 8008b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b02:	2200      	movs	r2, #0
 8008b04:	61bb      	str	r3, [r7, #24]
 8008b06:	61fa      	str	r2, [r7, #28]
 8008b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b0c:	f7f7 fb64 	bl	80001d8 <__aeabi_uldivmod>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4613      	mov	r3, r2
 8008b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b18:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	3301      	adds	r3, #1
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b32:	e002      	b.n	8008b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b34:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8008b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3750      	adds	r7, #80	; 0x50
 8008b40:	46bd      	mov	sp, r7
 8008b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b46:	bf00      	nop
 8008b48:	40023800 	.word	0x40023800
 8008b4c:	00f42400 	.word	0x00f42400
 8008b50:	007a1200 	.word	0x007a1200

08008b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b58:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	20000150 	.word	0x20000150

08008b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b70:	f7ff fff0 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 8008b74:	4602      	mov	r2, r0
 8008b76:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	0a9b      	lsrs	r3, r3, #10
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	4903      	ldr	r1, [pc, #12]	; (8008b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b82:	5ccb      	ldrb	r3, [r1, r3]
 8008b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	0800dcd0 	.word	0x0800dcd0

08008b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b98:	f7ff ffdc 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	0b5b      	lsrs	r3, r3, #13
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	4903      	ldr	r1, [pc, #12]	; (8008bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008baa:	5ccb      	ldrb	r3, [r1, r3]
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	0800dcd0 	.word	0x0800dcd0

08008bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e07b      	b.n	8008cc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d108      	bne.n	8008be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bde:	d009      	beq.n	8008bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	61da      	str	r2, [r3, #28]
 8008be6:	e005      	b.n	8008bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fb f888 	bl	8003d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	431a      	orrs	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c78:	ea42 0103 	orr.w	r1, r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	0c1b      	lsrs	r3, r3, #16
 8008c92:	f003 0104 	and.w	r1, r3, #4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	f003 0210 	and.w	r2, r3, #16
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69da      	ldr	r2, [r3, #28]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b088      	sub	sp, #32
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_SPI_Transmit+0x22>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e126      	b.n	8008f3e <HAL_SPI_Transmit+0x270>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cf8:	f7fc f804 	bl	8004d04 <HAL_GetTick>
 8008cfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d002      	beq.n	8008d14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d12:	e10b      	b.n	8008f2c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <HAL_SPI_Transmit+0x52>
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d24:	e102      	b.n	8008f2c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2203      	movs	r2, #3
 8008d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	88fa      	ldrh	r2, [r7, #6]
 8008d3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	88fa      	ldrh	r2, [r7, #6]
 8008d44:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6c:	d10f      	bne.n	8008d8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d007      	beq.n	8008dac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db4:	d14b      	bne.n	8008e4e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <HAL_SPI_Transmit+0xf6>
 8008dbe:	8afb      	ldrh	r3, [r7, #22]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d13e      	bne.n	8008e42 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	881a      	ldrh	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	1c9a      	adds	r2, r3, #2
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008de8:	e02b      	b.n	8008e42 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d112      	bne.n	8008e1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	881a      	ldrh	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	1c9a      	adds	r2, r3, #2
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e1c:	e011      	b.n	8008e42 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e1e:	f7fb ff71 	bl	8004d04 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d803      	bhi.n	8008e36 <HAL_SPI_Transmit+0x168>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d102      	bne.n	8008e3c <HAL_SPI_Transmit+0x16e>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e40:	e074      	b.n	8008f2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1ce      	bne.n	8008dea <HAL_SPI_Transmit+0x11c>
 8008e4c:	e04c      	b.n	8008ee8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <HAL_SPI_Transmit+0x18e>
 8008e56:	8afb      	ldrh	r3, [r7, #22]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d140      	bne.n	8008ede <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e82:	e02c      	b.n	8008ede <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d113      	bne.n	8008eba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	330c      	adds	r3, #12
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008eb8:	e011      	b.n	8008ede <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eba:	f7fb ff23 	bl	8004d04 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d803      	bhi.n	8008ed2 <HAL_SPI_Transmit+0x204>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed0:	d102      	bne.n	8008ed8 <HAL_SPI_Transmit+0x20a>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008edc:	e026      	b.n	8008f2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1cd      	bne.n	8008e84 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fce9 	bl	80098c4 <SPI_EndRxTxTransaction>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e000      	b.n	8008f2c <HAL_SPI_Transmit+0x25e>
  }

error:
 8008f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3720      	adds	r7, #32
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b088      	sub	sp, #32
 8008f4a:	af02      	add	r7, sp, #8
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	603b      	str	r3, [r7, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f62:	d112      	bne.n	8008f8a <HAL_SPI_Receive+0x44>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10e      	bne.n	8008f8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2204      	movs	r2, #4
 8008f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f74:	88fa      	ldrh	r2, [r7, #6]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f8f1 	bl	8009168 <HAL_SPI_TransmitReceive>
 8008f86:	4603      	mov	r3, r0
 8008f88:	e0ea      	b.n	8009160 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d101      	bne.n	8008f98 <HAL_SPI_Receive+0x52>
 8008f94:	2302      	movs	r3, #2
 8008f96:	e0e3      	b.n	8009160 <HAL_SPI_Receive+0x21a>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fa0:	f7fb feb0 	bl	8004d04 <HAL_GetTick>
 8008fa4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d002      	beq.n	8008fb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fb6:	e0ca      	b.n	800914e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_SPI_Receive+0x7e>
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d102      	bne.n	8008fca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fc8:	e0c1      	b.n	800914e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2204      	movs	r2, #4
 8008fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	88fa      	ldrh	r2, [r7, #6]
 8008fe8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009010:	d10f      	bne.n	8009032 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009020:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009030:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b40      	cmp	r3, #64	; 0x40
 800903e:	d007      	beq.n	8009050 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800904e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d162      	bne.n	800911e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009058:	e02e      	b.n	80090b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b01      	cmp	r3, #1
 8009066:	d115      	bne.n	8009094 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f103 020c 	add.w	r2, r3, #12
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009092:	e011      	b.n	80090b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009094:	f7fb fe36 	bl	8004d04 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d803      	bhi.n	80090ac <HAL_SPI_Receive+0x166>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090aa:	d102      	bne.n	80090b2 <HAL_SPI_Receive+0x16c>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090b6:	e04a      	b.n	800914e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1cb      	bne.n	800905a <HAL_SPI_Receive+0x114>
 80090c2:	e031      	b.n	8009128 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d113      	bne.n	80090fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	b292      	uxth	r2, r2
 80090de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	1c9a      	adds	r2, r3, #2
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090f8:	e011      	b.n	800911e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090fa:	f7fb fe03 	bl	8004d04 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d803      	bhi.n	8009112 <HAL_SPI_Receive+0x1cc>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d102      	bne.n	8009118 <HAL_SPI_Receive+0x1d2>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800911c:	e017      	b.n	800914e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009122:	b29b      	uxth	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1cd      	bne.n	80090c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fb63 	bl	80097f8 <SPI_EndRxTransaction>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	75fb      	strb	r3, [r7, #23]
 800914a:	e000      	b.n	800914e <HAL_SPI_Receive+0x208>
  }

error :
 800914c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800915e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08c      	sub	sp, #48	; 0x30
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009176:	2301      	movs	r3, #1
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <HAL_SPI_TransmitReceive+0x26>
 800918a:	2302      	movs	r3, #2
 800918c:	e18a      	b.n	80094a4 <HAL_SPI_TransmitReceive+0x33c>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009196:	f7fb fdb5 	bl	8004d04 <HAL_GetTick>
 800919a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80091ac:	887b      	ldrh	r3, [r7, #2]
 80091ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d00f      	beq.n	80091d8 <HAL_SPI_TransmitReceive+0x70>
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091be:	d107      	bne.n	80091d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d103      	bne.n	80091d0 <HAL_SPI_TransmitReceive+0x68>
 80091c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d003      	beq.n	80091d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80091d0:	2302      	movs	r3, #2
 80091d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091d6:	e15b      	b.n	8009490 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x82>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x82>
 80091e4:	887b      	ldrh	r3, [r7, #2]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091f0:	e14e      	b.n	8009490 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d003      	beq.n	8009206 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2205      	movs	r2, #5
 8009202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	887a      	ldrh	r2, [r7, #2]
 8009216:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	887a      	ldrh	r2, [r7, #2]
 800921c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	887a      	ldrh	r2, [r7, #2]
 8009228:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	887a      	ldrh	r2, [r7, #2]
 800922e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009246:	2b40      	cmp	r3, #64	; 0x40
 8009248:	d007      	beq.n	800925a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009262:	d178      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_SPI_TransmitReceive+0x10a>
 800926c:	8b7b      	ldrh	r3, [r7, #26]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d166      	bne.n	8009340 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	881a      	ldrh	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	1c9a      	adds	r2, r3, #2
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800928c:	b29b      	uxth	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009296:	e053      	b.n	8009340 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d11b      	bne.n	80092de <HAL_SPI_TransmitReceive+0x176>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d016      	beq.n	80092de <HAL_SPI_TransmitReceive+0x176>
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d113      	bne.n	80092de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	881a      	ldrh	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c6:	1c9a      	adds	r2, r3, #2
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d119      	bne.n	8009320 <HAL_SPI_TransmitReceive+0x1b8>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d014      	beq.n	8009320 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	b292      	uxth	r2, r2
 8009302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	1c9a      	adds	r2, r3, #2
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800931c:	2301      	movs	r3, #1
 800931e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009320:	f7fb fcf0 	bl	8004d04 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800932c:	429a      	cmp	r2, r3
 800932e:	d807      	bhi.n	8009340 <HAL_SPI_TransmitReceive+0x1d8>
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	d003      	beq.n	8009340 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800933e:	e0a7      	b.n	8009490 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009344:	b29b      	uxth	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1a6      	bne.n	8009298 <HAL_SPI_TransmitReceive+0x130>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1a1      	bne.n	8009298 <HAL_SPI_TransmitReceive+0x130>
 8009354:	e07c      	b.n	8009450 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <HAL_SPI_TransmitReceive+0x1fc>
 800935e:	8b7b      	ldrh	r3, [r7, #26]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d16b      	bne.n	800943c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	330c      	adds	r3, #12
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800938a:	e057      	b.n	800943c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b02      	cmp	r3, #2
 8009398:	d11c      	bne.n	80093d4 <HAL_SPI_TransmitReceive+0x26c>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800939e:	b29b      	uxth	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d017      	beq.n	80093d4 <HAL_SPI_TransmitReceive+0x26c>
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d114      	bne.n	80093d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	330c      	adds	r3, #12
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d119      	bne.n	8009416 <HAL_SPI_TransmitReceive+0x2ae>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d014      	beq.n	8009416 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009412:	2301      	movs	r3, #1
 8009414:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009416:	f7fb fc75 	bl	8004d04 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009422:	429a      	cmp	r2, r3
 8009424:	d803      	bhi.n	800942e <HAL_SPI_TransmitReceive+0x2c6>
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d102      	bne.n	8009434 <HAL_SPI_TransmitReceive+0x2cc>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800943a:	e029      	b.n	8009490 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009440:	b29b      	uxth	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1a2      	bne.n	800938c <HAL_SPI_TransmitReceive+0x224>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d19d      	bne.n	800938c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fa35 	bl	80098c4 <SPI_EndRxTxTransaction>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d006      	beq.n	800946e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800946c:	e010      	b.n	8009490 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009476:	2300      	movs	r3, #0
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	617b      	str	r3, [r7, #20]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	e000      	b.n	8009490 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800948e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3730      	adds	r7, #48	; 0x30
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	099b      	lsrs	r3, r3, #6
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10f      	bne.n	80094f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	099b      	lsrs	r3, r3, #6
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
    return;
 80094ee:	e0d7      	b.n	80096a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <HAL_SPI_IRQHandler+0x66>
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	09db      	lsrs	r3, r3, #7
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
    return;
 8009510:	e0c6      	b.n	80096a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10c      	bne.n	8009538 <HAL_SPI_IRQHandler+0x8c>
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	099b      	lsrs	r3, r3, #6
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	0a1b      	lsrs	r3, r3, #8
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80b4 	beq.w	80096a0 <HAL_SPI_IRQHandler+0x1f4>
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	095b      	lsrs	r3, r3, #5
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80ad 	beq.w	80096a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	099b      	lsrs	r3, r3, #6
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d023      	beq.n	800959a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b03      	cmp	r3, #3
 800955c:	d011      	beq.n	8009582 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009562:	f043 0204 	orr.w	r2, r3, #4
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	e00b      	b.n	800959a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009582:	2300      	movs	r3, #0
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	613b      	str	r3, [r7, #16]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	693b      	ldr	r3, [r7, #16]
        return;
 8009598:	e082      	b.n	80096a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	095b      	lsrs	r3, r3, #5
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d014      	beq.n	80095d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095aa:	f043 0201 	orr.w	r2, r3, #1
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00c      	beq.n	80095f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e0:	f043 0208 	orr.w	r2, r3, #8
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095e8:	2300      	movs	r3, #0
 80095ea:	60bb      	str	r3, [r7, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	60bb      	str	r3, [r7, #8]
 80095f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d04f      	beq.n	800969e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800960c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d104      	bne.n	800962a <HAL_SPI_IRQHandler+0x17e>
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d034      	beq.n	8009694 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0203 	bic.w	r2, r2, #3
 8009638:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d011      	beq.n	8009666 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009646:	4a18      	ldr	r2, [pc, #96]	; (80096a8 <HAL_SPI_IRQHandler+0x1fc>)
 8009648:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964e:	4618      	mov	r0, r3
 8009650:	f7fb fd48 	bl	80050e4 <HAL_DMA_Abort_IT>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800966a:	2b00      	cmp	r3, #0
 800966c:	d016      	beq.n	800969c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009672:	4a0d      	ldr	r2, [pc, #52]	; (80096a8 <HAL_SPI_IRQHandler+0x1fc>)
 8009674:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800967a:	4618      	mov	r0, r3
 800967c:	f7fb fd32 	bl	80050e4 <HAL_DMA_Abort_IT>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009692:	e003      	b.n	800969c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f809 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800969a:	e000      	b.n	800969e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800969c:	bf00      	nop
    return;
 800969e:	bf00      	nop
  }
}
 80096a0:	3720      	adds	r7, #32
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	080096c1 	.word	0x080096c1

080096ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff ffe6 	bl	80096ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	4613      	mov	r3, r2
 80096f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096f8:	f7fb fb04 	bl	8004d04 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	1a9b      	subs	r3, r3, r2
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	4413      	add	r3, r2
 8009706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009708:	f7fb fafc 	bl	8004d04 <HAL_GetTick>
 800970c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800970e:	4b39      	ldr	r3, [pc, #228]	; (80097f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	015b      	lsls	r3, r3, #5
 8009714:	0d1b      	lsrs	r3, r3, #20
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	fb02 f303 	mul.w	r3, r2, r3
 800971c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800971e:	e054      	b.n	80097ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d050      	beq.n	80097ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009728:	f7fb faec 	bl	8004d04 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	429a      	cmp	r2, r3
 8009736:	d902      	bls.n	800973e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d13d      	bne.n	80097ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800974c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009756:	d111      	bne.n	800977c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009760:	d004      	beq.n	800976c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800976a:	d107      	bne.n	800977c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800977a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009784:	d10f      	bne.n	80097a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e017      	b.n	80097ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4013      	ands	r3, r2
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	bf0c      	ite	eq
 80097da:	2301      	moveq	r3, #1
 80097dc:	2300      	movne	r3, #0
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d19b      	bne.n	8009720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3720      	adds	r7, #32
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000150 	.word	0x20000150

080097f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800980c:	d111      	bne.n	8009832 <SPI_EndRxTransaction+0x3a>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009816:	d004      	beq.n	8009822 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009820:	d107      	bne.n	8009832 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009830:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800983a:	d12a      	bne.n	8009892 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009844:	d012      	beq.n	800986c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2200      	movs	r2, #0
 800984e:	2180      	movs	r1, #128	; 0x80
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff ff49 	bl	80096e8 <SPI_WaitFlagStateUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d02d      	beq.n	80098b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009860:	f043 0220 	orr.w	r2, r3, #32
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e026      	b.n	80098ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2200      	movs	r2, #0
 8009874:	2101      	movs	r1, #1
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff ff36 	bl	80096e8 <SPI_WaitFlagStateUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01a      	beq.n	80098b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009886:	f043 0220 	orr.w	r2, r3, #32
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e013      	b.n	80098ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2200      	movs	r2, #0
 800989a:	2101      	movs	r1, #1
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f7ff ff23 	bl	80096e8 <SPI_WaitFlagStateUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ac:	f043 0220 	orr.w	r2, r3, #32
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e000      	b.n	80098ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098d0:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <SPI_EndRxTxTransaction+0x7c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a1b      	ldr	r2, [pc, #108]	; (8009944 <SPI_EndRxTxTransaction+0x80>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	0d5b      	lsrs	r3, r3, #21
 80098dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098e0:	fb02 f303 	mul.w	r3, r2, r3
 80098e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098ee:	d112      	bne.n	8009916 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2200      	movs	r2, #0
 80098f8:	2180      	movs	r1, #128	; 0x80
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff fef4 	bl	80096e8 <SPI_WaitFlagStateUntilTimeout>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d016      	beq.n	8009934 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990a:	f043 0220 	orr.w	r2, r3, #32
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e00f      	b.n	8009936 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	3b01      	subs	r3, #1
 8009920:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992c:	2b80      	cmp	r3, #128	; 0x80
 800992e:	d0f2      	beq.n	8009916 <SPI_EndRxTxTransaction+0x52>
 8009930:	e000      	b.n	8009934 <SPI_EndRxTxTransaction+0x70>
        break;
 8009932:	bf00      	nop
  }

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000150 	.word	0x20000150
 8009944:	165e9f81 	.word	0x165e9f81

08009948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e041      	b.n	80099de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7fa fdac 	bl	80044cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f000 fae0 	bl	8009f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d001      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e04e      	b.n	8009a9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a23      	ldr	r2, [pc, #140]	; (8009aac <HAL_TIM_Base_Start_IT+0xc4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d022      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a2a:	d01d      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a1f      	ldr	r2, [pc, #124]	; (8009ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d018      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a1e      	ldr	r2, [pc, #120]	; (8009ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d013      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a1c      	ldr	r2, [pc, #112]	; (8009ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00e      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a1b      	ldr	r2, [pc, #108]	; (8009abc <HAL_TIM_Base_Start_IT+0xd4>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d009      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a19      	ldr	r2, [pc, #100]	; (8009ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d004      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x80>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a18      	ldr	r2, [pc, #96]	; (8009ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d111      	bne.n	8009a8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b06      	cmp	r3, #6
 8009a78:	d010      	beq.n	8009a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f042 0201 	orr.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8a:	e007      	b.n	8009a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40010000 	.word	0x40010000
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	40000800 	.word	0x40000800
 8009ab8:	40000c00 	.word	0x40000c00
 8009abc:	40010400 	.word	0x40010400
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	40001800 	.word	0x40001800

08009ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e041      	b.n	8009b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7fa fcca 	bl	8004488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3304      	adds	r3, #4
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f000 fa20 	bl	8009f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d122      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d11b      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f06f 0202 	mvn.w	r2, #2
 8009b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9b1 	bl	8009f10 <HAL_TIM_IC_CaptureCallback>
 8009bae:	e005      	b.n	8009bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9a3 	bl	8009efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f9b4 	bl	8009f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d122      	bne.n	8009c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d11b      	bne.n	8009c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f06f 0204 	mvn.w	r2, #4
 8009be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f987 	bl	8009f10 <HAL_TIM_IC_CaptureCallback>
 8009c02:	e005      	b.n	8009c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f979 	bl	8009efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f98a 	bl	8009f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f003 0308 	and.w	r3, r3, #8
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	d122      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d11b      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f06f 0208 	mvn.w	r2, #8
 8009c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f95d 	bl	8009f10 <HAL_TIM_IC_CaptureCallback>
 8009c56:	e005      	b.n	8009c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f94f 	bl	8009efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f960 	bl	8009f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f003 0310 	and.w	r3, r3, #16
 8009c74:	2b10      	cmp	r3, #16
 8009c76:	d122      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d11b      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f06f 0210 	mvn.w	r2, #16
 8009c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2208      	movs	r2, #8
 8009c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f933 	bl	8009f10 <HAL_TIM_IC_CaptureCallback>
 8009caa:	e005      	b.n	8009cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f925 	bl	8009efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f936 	bl	8009f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d10e      	bne.n	8009cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d107      	bne.n	8009cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f06f 0201 	mvn.w	r2, #1
 8009ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7fa fb11 	bl	800430c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf4:	2b80      	cmp	r3, #128	; 0x80
 8009cf6:	d10e      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b80      	cmp	r3, #128	; 0x80
 8009d04:	d107      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fbf1 	bl	800a4f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b40      	cmp	r3, #64	; 0x40
 8009d22:	d10e      	bne.n	8009d42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b40      	cmp	r3, #64	; 0x40
 8009d30:	d107      	bne.n	8009d42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f8fb 	bl	8009f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d10e      	bne.n	8009d6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f003 0320 	and.w	r3, r3, #32
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	d107      	bne.n	8009d6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f06f 0220 	mvn.w	r2, #32
 8009d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fbbb 	bl	800a4e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e0ae      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b0c      	cmp	r3, #12
 8009da2:	f200 809f 	bhi.w	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009de1 	.word	0x08009de1
 8009db0:	08009ee5 	.word	0x08009ee5
 8009db4:	08009ee5 	.word	0x08009ee5
 8009db8:	08009ee5 	.word	0x08009ee5
 8009dbc:	08009e21 	.word	0x08009e21
 8009dc0:	08009ee5 	.word	0x08009ee5
 8009dc4:	08009ee5 	.word	0x08009ee5
 8009dc8:	08009ee5 	.word	0x08009ee5
 8009dcc:	08009e63 	.word	0x08009e63
 8009dd0:	08009ee5 	.word	0x08009ee5
 8009dd4:	08009ee5 	.word	0x08009ee5
 8009dd8:	08009ee5 	.word	0x08009ee5
 8009ddc:	08009ea3 	.word	0x08009ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 f950 	bl	800a08c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0208 	orr.w	r2, r2, #8
 8009dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f022 0204 	bic.w	r2, r2, #4
 8009e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6999      	ldr	r1, [r3, #24]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	691a      	ldr	r2, [r3, #16]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	619a      	str	r2, [r3, #24]
      break;
 8009e1e:	e064      	b.n	8009eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f9a0 	bl	800a16c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699a      	ldr	r2, [r3, #24]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699a      	ldr	r2, [r3, #24]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6999      	ldr	r1, [r3, #24]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	021a      	lsls	r2, r3, #8
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	619a      	str	r2, [r3, #24]
      break;
 8009e60:	e043      	b.n	8009eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f9f5 	bl	800a258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69da      	ldr	r2, [r3, #28]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f042 0208 	orr.w	r2, r2, #8
 8009e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0204 	bic.w	r2, r2, #4
 8009e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69d9      	ldr	r1, [r3, #28]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	61da      	str	r2, [r3, #28]
      break;
 8009ea0:	e023      	b.n	8009eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 fa49 	bl	800a340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69da      	ldr	r2, [r3, #28]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69d9      	ldr	r1, [r3, #28]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	021a      	lsls	r2, r3, #8
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	61da      	str	r2, [r3, #28]
      break;
 8009ee2:	e002      	b.n	8009eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a40      	ldr	r2, [pc, #256]	; (800a060 <TIM_Base_SetConfig+0x114>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d013      	beq.n	8009f8c <TIM_Base_SetConfig+0x40>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6a:	d00f      	beq.n	8009f8c <TIM_Base_SetConfig+0x40>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a3d      	ldr	r2, [pc, #244]	; (800a064 <TIM_Base_SetConfig+0x118>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00b      	beq.n	8009f8c <TIM_Base_SetConfig+0x40>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a3c      	ldr	r2, [pc, #240]	; (800a068 <TIM_Base_SetConfig+0x11c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d007      	beq.n	8009f8c <TIM_Base_SetConfig+0x40>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a3b      	ldr	r2, [pc, #236]	; (800a06c <TIM_Base_SetConfig+0x120>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d003      	beq.n	8009f8c <TIM_Base_SetConfig+0x40>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a3a      	ldr	r2, [pc, #232]	; (800a070 <TIM_Base_SetConfig+0x124>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d108      	bne.n	8009f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a2f      	ldr	r2, [pc, #188]	; (800a060 <TIM_Base_SetConfig+0x114>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d02b      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fac:	d027      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a2c      	ldr	r2, [pc, #176]	; (800a064 <TIM_Base_SetConfig+0x118>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d023      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a2b      	ldr	r2, [pc, #172]	; (800a068 <TIM_Base_SetConfig+0x11c>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d01f      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <TIM_Base_SetConfig+0x120>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d01b      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a29      	ldr	r2, [pc, #164]	; (800a070 <TIM_Base_SetConfig+0x124>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d017      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a28      	ldr	r2, [pc, #160]	; (800a074 <TIM_Base_SetConfig+0x128>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d013      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a27      	ldr	r2, [pc, #156]	; (800a078 <TIM_Base_SetConfig+0x12c>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00f      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a26      	ldr	r2, [pc, #152]	; (800a07c <TIM_Base_SetConfig+0x130>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00b      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a25      	ldr	r2, [pc, #148]	; (800a080 <TIM_Base_SetConfig+0x134>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d007      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a24      	ldr	r2, [pc, #144]	; (800a084 <TIM_Base_SetConfig+0x138>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_Base_SetConfig+0xb2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a23      	ldr	r2, [pc, #140]	; (800a088 <TIM_Base_SetConfig+0x13c>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d108      	bne.n	800a010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a0a      	ldr	r2, [pc, #40]	; (800a060 <TIM_Base_SetConfig+0x114>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d003      	beq.n	800a044 <TIM_Base_SetConfig+0xf8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a0c      	ldr	r2, [pc, #48]	; (800a070 <TIM_Base_SetConfig+0x124>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d103      	bne.n	800a04c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	615a      	str	r2, [r3, #20]
}
 800a052:	bf00      	nop
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40010000 	.word	0x40010000
 800a064:	40000400 	.word	0x40000400
 800a068:	40000800 	.word	0x40000800
 800a06c:	40000c00 	.word	0x40000c00
 800a070:	40010400 	.word	0x40010400
 800a074:	40014000 	.word	0x40014000
 800a078:	40014400 	.word	0x40014400
 800a07c:	40014800 	.word	0x40014800
 800a080:	40001800 	.word	0x40001800
 800a084:	40001c00 	.word	0x40001c00
 800a088:	40002000 	.word	0x40002000

0800a08c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0201 	bic.w	r2, r3, #1
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0303 	bic.w	r3, r3, #3
 800a0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f023 0302 	bic.w	r3, r3, #2
 800a0d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a20      	ldr	r2, [pc, #128]	; (800a164 <TIM_OC1_SetConfig+0xd8>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d003      	beq.n	800a0f0 <TIM_OC1_SetConfig+0x64>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a1f      	ldr	r2, [pc, #124]	; (800a168 <TIM_OC1_SetConfig+0xdc>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10c      	bne.n	800a10a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f023 0308 	bic.w	r3, r3, #8
 800a0f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f023 0304 	bic.w	r3, r3, #4
 800a108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a15      	ldr	r2, [pc, #84]	; (800a164 <TIM_OC1_SetConfig+0xd8>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d003      	beq.n	800a11a <TIM_OC1_SetConfig+0x8e>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a14      	ldr	r2, [pc, #80]	; (800a168 <TIM_OC1_SetConfig+0xdc>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d111      	bne.n	800a13e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4313      	orrs	r3, r2
 800a132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	621a      	str	r2, [r3, #32]
}
 800a158:	bf00      	nop
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	40010000 	.word	0x40010000
 800a168:	40010400 	.word	0x40010400

0800a16c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	f023 0210 	bic.w	r2, r3, #16
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f023 0320 	bic.w	r3, r3, #32
 800a1b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a22      	ldr	r2, [pc, #136]	; (800a250 <TIM_OC2_SetConfig+0xe4>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <TIM_OC2_SetConfig+0x68>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a21      	ldr	r2, [pc, #132]	; (800a254 <TIM_OC2_SetConfig+0xe8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d10d      	bne.n	800a1f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	; (800a250 <TIM_OC2_SetConfig+0xe4>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC2_SetConfig+0x94>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a16      	ldr	r2, [pc, #88]	; (800a254 <TIM_OC2_SetConfig+0xe8>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d113      	bne.n	800a228 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a20e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4313      	orrs	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	621a      	str	r2, [r3, #32]
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40010000 	.word	0x40010000
 800a254:	40010400 	.word	0x40010400

0800a258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0303 	bic.w	r3, r3, #3
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	021b      	lsls	r3, r3, #8
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a21      	ldr	r2, [pc, #132]	; (800a338 <TIM_OC3_SetConfig+0xe0>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_OC3_SetConfig+0x66>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a20      	ldr	r2, [pc, #128]	; (800a33c <TIM_OC3_SetConfig+0xe4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d10d      	bne.n	800a2da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a16      	ldr	r2, [pc, #88]	; (800a338 <TIM_OC3_SetConfig+0xe0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d003      	beq.n	800a2ea <TIM_OC3_SetConfig+0x92>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a15      	ldr	r2, [pc, #84]	; (800a33c <TIM_OC3_SetConfig+0xe4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d113      	bne.n	800a312 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	4313      	orrs	r3, r2
 800a310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	621a      	str	r2, [r3, #32]
}
 800a32c:	bf00      	nop
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	40010000 	.word	0x40010000
 800a33c:	40010400 	.word	0x40010400

0800a340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a38a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	031b      	lsls	r3, r3, #12
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <TIM_OC4_SetConfig+0xa4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_OC4_SetConfig+0x68>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a11      	ldr	r2, [pc, #68]	; (800a3e8 <TIM_OC4_SetConfig+0xa8>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d109      	bne.n	800a3bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	019b      	lsls	r3, r3, #6
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	621a      	str	r2, [r3, #32]
}
 800a3d6:	bf00      	nop
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40010000 	.word	0x40010000
 800a3e8:	40010400 	.word	0x40010400

0800a3ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d101      	bne.n	800a404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a400:	2302      	movs	r3, #2
 800a402:	e05a      	b.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a42a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4313      	orrs	r3, r2
 800a434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a21      	ldr	r2, [pc, #132]	; (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d022      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a450:	d01d      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a1d      	ldr	r2, [pc, #116]	; (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d018      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1b      	ldr	r2, [pc, #108]	; (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d013      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1a      	ldr	r2, [pc, #104]	; (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00e      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a18      	ldr	r2, [pc, #96]	; (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d009      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a17      	ldr	r2, [pc, #92]	; (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d004      	beq.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a15      	ldr	r2, [pc, #84]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d10c      	bne.n	800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	40010000 	.word	0x40010000
 800a4cc:	40000400 	.word	0x40000400
 800a4d0:	40000800 	.word	0x40000800
 800a4d4:	40000c00 	.word	0x40000c00
 800a4d8:	40010400 	.word	0x40010400
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	40001800 	.word	0x40001800

0800a4e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e03f      	b.n	800a59e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7fa fab6 	bl	8004aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2224      	movs	r2, #36	; 0x24
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a54e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f929 	bl	800a7a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695a      	ldr	r2, [r3, #20]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b08a      	sub	sp, #40	; 0x28
 800a5aa:	af02      	add	r7, sp, #8
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	603b      	str	r3, [r7, #0]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b20      	cmp	r3, #32
 800a5c4:	d17c      	bne.n	800a6c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <HAL_UART_Transmit+0x2c>
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e075      	b.n	800a6c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d101      	bne.n	800a5e4 <HAL_UART_Transmit+0x3e>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e06e      	b.n	800a6c2 <HAL_UART_Transmit+0x11c>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2221      	movs	r2, #33	; 0x21
 800a5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5fa:	f7fa fb83 	bl	8004d04 <HAL_GetTick>
 800a5fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	88fa      	ldrh	r2, [r7, #6]
 800a604:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	88fa      	ldrh	r2, [r7, #6]
 800a60a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a614:	d108      	bne.n	800a628 <HAL_UART_Transmit+0x82>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d104      	bne.n	800a628 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	e003      	b.n	800a630 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a638:	e02a      	b.n	800a690 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2200      	movs	r2, #0
 800a642:	2180      	movs	r1, #128	; 0x80
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f840 	bl	800a6ca <UART_WaitOnFlagUntilTimeout>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e036      	b.n	800a6c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a668:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	3302      	adds	r3, #2
 800a66e:	61bb      	str	r3, [r7, #24]
 800a670:	e007      	b.n	800a682 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	3301      	adds	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a686:	b29b      	uxth	r3, r3
 800a688:	3b01      	subs	r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a694:	b29b      	uxth	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1cf      	bne.n	800a63a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2140      	movs	r1, #64	; 0x40
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f810 	bl	800a6ca <UART_WaitOnFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e006      	b.n	800a6c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e000      	b.n	800a6c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a6c0:	2302      	movs	r3, #2
  }
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b090      	sub	sp, #64	; 0x40
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	603b      	str	r3, [r7, #0]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6da:	e050      	b.n	800a77e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d04c      	beq.n	800a77e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d007      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x30>
 800a6ea:	f7fa fb0b 	bl	8004d04 <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d241      	bcs.n	800a77e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	330c      	adds	r3, #12
 800a700:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a710:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	330c      	adds	r3, #12
 800a718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a71a:	637a      	str	r2, [r7, #52]	; 0x34
 800a71c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e5      	bne.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3314      	adds	r3, #20
 800a734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	613b      	str	r3, [r7, #16]
   return(result);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f023 0301 	bic.w	r3, r3, #1
 800a744:	63bb      	str	r3, [r7, #56]	; 0x38
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3314      	adds	r3, #20
 800a74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a74e:	623a      	str	r2, [r7, #32]
 800a750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	69f9      	ldr	r1, [r7, #28]
 800a754:	6a3a      	ldr	r2, [r7, #32]
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e5      	bne.n	800a72e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2220      	movs	r2, #32
 800a766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e00f      	b.n	800a79e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4013      	ands	r3, r2
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	bf0c      	ite	eq
 800a78e:	2301      	moveq	r3, #1
 800a790:	2300      	movne	r3, #0
 800a792:	b2db      	uxtb	r3, r3
 800a794:	461a      	mov	r2, r3
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d09f      	beq.n	800a6dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3740      	adds	r7, #64	; 0x40
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7ac:	b0c0      	sub	sp, #256	; 0x100
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c4:	68d9      	ldr	r1, [r3, #12]
 800a7c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	ea40 0301 	orr.w	r3, r0, r1
 800a7d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a800:	f021 010c 	bic.w	r1, r1, #12
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a80e:	430b      	orrs	r3, r1
 800a810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a822:	6999      	ldr	r1, [r3, #24]
 800a824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	ea40 0301 	orr.w	r3, r0, r1
 800a82e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	4b8f      	ldr	r3, [pc, #572]	; (800aa74 <UART_SetConfig+0x2cc>)
 800a838:	429a      	cmp	r2, r3
 800a83a:	d005      	beq.n	800a848 <UART_SetConfig+0xa0>
 800a83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b8d      	ldr	r3, [pc, #564]	; (800aa78 <UART_SetConfig+0x2d0>)
 800a844:	429a      	cmp	r2, r3
 800a846:	d104      	bne.n	800a852 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a848:	f7fe f9a4 	bl	8008b94 <HAL_RCC_GetPCLK2Freq>
 800a84c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a850:	e003      	b.n	800a85a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a852:	f7fe f98b 	bl	8008b6c <HAL_RCC_GetPCLK1Freq>
 800a856:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a85a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a864:	f040 810c 	bne.w	800aa80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a87a:	4622      	mov	r2, r4
 800a87c:	462b      	mov	r3, r5
 800a87e:	1891      	adds	r1, r2, r2
 800a880:	65b9      	str	r1, [r7, #88]	; 0x58
 800a882:	415b      	adcs	r3, r3
 800a884:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a88a:	4621      	mov	r1, r4
 800a88c:	eb12 0801 	adds.w	r8, r2, r1
 800a890:	4629      	mov	r1, r5
 800a892:	eb43 0901 	adc.w	r9, r3, r1
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8aa:	4690      	mov	r8, r2
 800a8ac:	4699      	mov	r9, r3
 800a8ae:	4623      	mov	r3, r4
 800a8b0:	eb18 0303 	adds.w	r3, r8, r3
 800a8b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	eb49 0303 	adc.w	r3, r9, r3
 800a8be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	18db      	adds	r3, r3, r3
 800a8da:	653b      	str	r3, [r7, #80]	; 0x50
 800a8dc:	4613      	mov	r3, r2
 800a8de:	eb42 0303 	adc.w	r3, r2, r3
 800a8e2:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8ec:	f7f5 fc74 	bl	80001d8 <__aeabi_uldivmod>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4b61      	ldr	r3, [pc, #388]	; (800aa7c <UART_SetConfig+0x2d4>)
 800a8f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a8fa:	095b      	lsrs	r3, r3, #5
 800a8fc:	011c      	lsls	r4, r3, #4
 800a8fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a902:	2200      	movs	r2, #0
 800a904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a908:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a90c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a910:	4642      	mov	r2, r8
 800a912:	464b      	mov	r3, r9
 800a914:	1891      	adds	r1, r2, r2
 800a916:	64b9      	str	r1, [r7, #72]	; 0x48
 800a918:	415b      	adcs	r3, r3
 800a91a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a91c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a920:	4641      	mov	r1, r8
 800a922:	eb12 0a01 	adds.w	sl, r2, r1
 800a926:	4649      	mov	r1, r9
 800a928:	eb43 0b01 	adc.w	fp, r3, r1
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a93c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a940:	4692      	mov	sl, r2
 800a942:	469b      	mov	fp, r3
 800a944:	4643      	mov	r3, r8
 800a946:	eb1a 0303 	adds.w	r3, sl, r3
 800a94a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a94e:	464b      	mov	r3, r9
 800a950:	eb4b 0303 	adc.w	r3, fp, r3
 800a954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a964:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a968:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a96c:	460b      	mov	r3, r1
 800a96e:	18db      	adds	r3, r3, r3
 800a970:	643b      	str	r3, [r7, #64]	; 0x40
 800a972:	4613      	mov	r3, r2
 800a974:	eb42 0303 	adc.w	r3, r2, r3
 800a978:	647b      	str	r3, [r7, #68]	; 0x44
 800a97a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a97e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a982:	f7f5 fc29 	bl	80001d8 <__aeabi_uldivmod>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	4b3b      	ldr	r3, [pc, #236]	; (800aa7c <UART_SetConfig+0x2d4>)
 800a98e:	fba3 2301 	umull	r2, r3, r3, r1
 800a992:	095b      	lsrs	r3, r3, #5
 800a994:	2264      	movs	r2, #100	; 0x64
 800a996:	fb02 f303 	mul.w	r3, r2, r3
 800a99a:	1acb      	subs	r3, r1, r3
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a9a2:	4b36      	ldr	r3, [pc, #216]	; (800aa7c <UART_SetConfig+0x2d4>)
 800a9a4:	fba3 2302 	umull	r2, r3, r3, r2
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9b0:	441c      	add	r4, r3
 800a9b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a9c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	1891      	adds	r1, r2, r2
 800a9ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9cc:	415b      	adcs	r3, r3
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9d4:	4641      	mov	r1, r8
 800a9d6:	1851      	adds	r1, r2, r1
 800a9d8:	6339      	str	r1, [r7, #48]	; 0x30
 800a9da:	4649      	mov	r1, r9
 800a9dc:	414b      	adcs	r3, r1
 800a9de:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e0:	f04f 0200 	mov.w	r2, #0
 800a9e4:	f04f 0300 	mov.w	r3, #0
 800a9e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	00cb      	lsls	r3, r1, #3
 800a9f0:	4651      	mov	r1, sl
 800a9f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9f6:	4651      	mov	r1, sl
 800a9f8:	00ca      	lsls	r2, r1, #3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4603      	mov	r3, r0
 800aa00:	4642      	mov	r2, r8
 800aa02:	189b      	adds	r3, r3, r2
 800aa04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa08:	464b      	mov	r3, r9
 800aa0a:	460a      	mov	r2, r1
 800aa0c:	eb42 0303 	adc.w	r3, r2, r3
 800aa10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa28:	460b      	mov	r3, r1
 800aa2a:	18db      	adds	r3, r3, r3
 800aa2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa2e:	4613      	mov	r3, r2
 800aa30:	eb42 0303 	adc.w	r3, r2, r3
 800aa34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa3e:	f7f5 fbcb 	bl	80001d8 <__aeabi_uldivmod>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	4b0d      	ldr	r3, [pc, #52]	; (800aa7c <UART_SetConfig+0x2d4>)
 800aa48:	fba3 1302 	umull	r1, r3, r3, r2
 800aa4c:	095b      	lsrs	r3, r3, #5
 800aa4e:	2164      	movs	r1, #100	; 0x64
 800aa50:	fb01 f303 	mul.w	r3, r1, r3
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	3332      	adds	r3, #50	; 0x32
 800aa5a:	4a08      	ldr	r2, [pc, #32]	; (800aa7c <UART_SetConfig+0x2d4>)
 800aa5c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa60:	095b      	lsrs	r3, r3, #5
 800aa62:	f003 0207 	and.w	r2, r3, #7
 800aa66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4422      	add	r2, r4
 800aa6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa70:	e105      	b.n	800ac7e <UART_SetConfig+0x4d6>
 800aa72:	bf00      	nop
 800aa74:	40011000 	.word	0x40011000
 800aa78:	40011400 	.word	0x40011400
 800aa7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa92:	4642      	mov	r2, r8
 800aa94:	464b      	mov	r3, r9
 800aa96:	1891      	adds	r1, r2, r2
 800aa98:	6239      	str	r1, [r7, #32]
 800aa9a:	415b      	adcs	r3, r3
 800aa9c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aaa2:	4641      	mov	r1, r8
 800aaa4:	1854      	adds	r4, r2, r1
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	eb43 0501 	adc.w	r5, r3, r1
 800aaac:	f04f 0200 	mov.w	r2, #0
 800aab0:	f04f 0300 	mov.w	r3, #0
 800aab4:	00eb      	lsls	r3, r5, #3
 800aab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aaba:	00e2      	lsls	r2, r4, #3
 800aabc:	4614      	mov	r4, r2
 800aabe:	461d      	mov	r5, r3
 800aac0:	4643      	mov	r3, r8
 800aac2:	18e3      	adds	r3, r4, r3
 800aac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aac8:	464b      	mov	r3, r9
 800aaca:	eb45 0303 	adc.w	r3, r5, r3
 800aace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aaee:	4629      	mov	r1, r5
 800aaf0:	008b      	lsls	r3, r1, #2
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaf8:	4621      	mov	r1, r4
 800aafa:	008a      	lsls	r2, r1, #2
 800aafc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab00:	f7f5 fb6a 	bl	80001d8 <__aeabi_uldivmod>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4b60      	ldr	r3, [pc, #384]	; (800ac8c <UART_SetConfig+0x4e4>)
 800ab0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab0e:	095b      	lsrs	r3, r3, #5
 800ab10:	011c      	lsls	r4, r3, #4
 800ab12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab24:	4642      	mov	r2, r8
 800ab26:	464b      	mov	r3, r9
 800ab28:	1891      	adds	r1, r2, r2
 800ab2a:	61b9      	str	r1, [r7, #24]
 800ab2c:	415b      	adcs	r3, r3
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab34:	4641      	mov	r1, r8
 800ab36:	1851      	adds	r1, r2, r1
 800ab38:	6139      	str	r1, [r7, #16]
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	414b      	adcs	r3, r1
 800ab3e:	617b      	str	r3, [r7, #20]
 800ab40:	f04f 0200 	mov.w	r2, #0
 800ab44:	f04f 0300 	mov.w	r3, #0
 800ab48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab4c:	4659      	mov	r1, fp
 800ab4e:	00cb      	lsls	r3, r1, #3
 800ab50:	4651      	mov	r1, sl
 800ab52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab56:	4651      	mov	r1, sl
 800ab58:	00ca      	lsls	r2, r1, #3
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4642      	mov	r2, r8
 800ab62:	189b      	adds	r3, r3, r2
 800ab64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab68:	464b      	mov	r3, r9
 800ab6a:	460a      	mov	r2, r1
 800ab6c:	eb42 0303 	adc.w	r3, r2, r3
 800ab70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	f04f 0300 	mov.w	r3, #0
 800ab88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	008b      	lsls	r3, r1, #2
 800ab90:	4641      	mov	r1, r8
 800ab92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab96:	4641      	mov	r1, r8
 800ab98:	008a      	lsls	r2, r1, #2
 800ab9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab9e:	f7f5 fb1b 	bl	80001d8 <__aeabi_uldivmod>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4b39      	ldr	r3, [pc, #228]	; (800ac8c <UART_SetConfig+0x4e4>)
 800aba8:	fba3 1302 	umull	r1, r3, r3, r2
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	2164      	movs	r1, #100	; 0x64
 800abb0:	fb01 f303 	mul.w	r3, r1, r3
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	3332      	adds	r3, #50	; 0x32
 800abba:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <UART_SetConfig+0x4e4>)
 800abbc:	fba2 2303 	umull	r2, r3, r2, r3
 800abc0:	095b      	lsrs	r3, r3, #5
 800abc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abc6:	441c      	add	r4, r3
 800abc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abcc:	2200      	movs	r2, #0
 800abce:	673b      	str	r3, [r7, #112]	; 0x70
 800abd0:	677a      	str	r2, [r7, #116]	; 0x74
 800abd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800abd6:	4642      	mov	r2, r8
 800abd8:	464b      	mov	r3, r9
 800abda:	1891      	adds	r1, r2, r2
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	415b      	adcs	r3, r3
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abe6:	4641      	mov	r1, r8
 800abe8:	1851      	adds	r1, r2, r1
 800abea:	6039      	str	r1, [r7, #0]
 800abec:	4649      	mov	r1, r9
 800abee:	414b      	adcs	r3, r1
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	f04f 0200 	mov.w	r2, #0
 800abf6:	f04f 0300 	mov.w	r3, #0
 800abfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abfe:	4659      	mov	r1, fp
 800ac00:	00cb      	lsls	r3, r1, #3
 800ac02:	4651      	mov	r1, sl
 800ac04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac08:	4651      	mov	r1, sl
 800ac0a:	00ca      	lsls	r2, r1, #3
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	4642      	mov	r2, r8
 800ac14:	189b      	adds	r3, r3, r2
 800ac16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac18:	464b      	mov	r3, r9
 800ac1a:	460a      	mov	r2, r1
 800ac1c:	eb42 0303 	adc.w	r3, r2, r3
 800ac20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	663b      	str	r3, [r7, #96]	; 0x60
 800ac2c:	667a      	str	r2, [r7, #100]	; 0x64
 800ac2e:	f04f 0200 	mov.w	r2, #0
 800ac32:	f04f 0300 	mov.w	r3, #0
 800ac36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	008b      	lsls	r3, r1, #2
 800ac3e:	4641      	mov	r1, r8
 800ac40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac44:	4641      	mov	r1, r8
 800ac46:	008a      	lsls	r2, r1, #2
 800ac48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac4c:	f7f5 fac4 	bl	80001d8 <__aeabi_uldivmod>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <UART_SetConfig+0x4e4>)
 800ac56:	fba3 1302 	umull	r1, r3, r3, r2
 800ac5a:	095b      	lsrs	r3, r3, #5
 800ac5c:	2164      	movs	r1, #100	; 0x64
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	3332      	adds	r3, #50	; 0x32
 800ac68:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <UART_SetConfig+0x4e4>)
 800ac6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6e:	095b      	lsrs	r3, r3, #5
 800ac70:	f003 020f 	and.w	r2, r3, #15
 800ac74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4422      	add	r2, r4
 800ac7c:	609a      	str	r2, [r3, #8]
}
 800ac7e:	bf00      	nop
 800ac80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac84:	46bd      	mov	sp, r7
 800ac86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac8a:	bf00      	nop
 800ac8c:	51eb851f 	.word	0x51eb851f

0800ac90 <__libc_init_array>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4d0d      	ldr	r5, [pc, #52]	; (800acc8 <__libc_init_array+0x38>)
 800ac94:	4c0d      	ldr	r4, [pc, #52]	; (800accc <__libc_init_array+0x3c>)
 800ac96:	1b64      	subs	r4, r4, r5
 800ac98:	10a4      	asrs	r4, r4, #2
 800ac9a:	2600      	movs	r6, #0
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	d109      	bne.n	800acb4 <__libc_init_array+0x24>
 800aca0:	4d0b      	ldr	r5, [pc, #44]	; (800acd0 <__libc_init_array+0x40>)
 800aca2:	4c0c      	ldr	r4, [pc, #48]	; (800acd4 <__libc_init_array+0x44>)
 800aca4:	f000 f87c 	bl	800ada0 <_init>
 800aca8:	1b64      	subs	r4, r4, r5
 800acaa:	10a4      	asrs	r4, r4, #2
 800acac:	2600      	movs	r6, #0
 800acae:	42a6      	cmp	r6, r4
 800acb0:	d105      	bne.n	800acbe <__libc_init_array+0x2e>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb8:	4798      	blx	r3
 800acba:	3601      	adds	r6, #1
 800acbc:	e7ee      	b.n	800ac9c <__libc_init_array+0xc>
 800acbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc2:	4798      	blx	r3
 800acc4:	3601      	adds	r6, #1
 800acc6:	e7f2      	b.n	800acae <__libc_init_array+0x1e>
 800acc8:	0800dd10 	.word	0x0800dd10
 800accc:	0800dd10 	.word	0x0800dd10
 800acd0:	0800dd10 	.word	0x0800dd10
 800acd4:	0800dd14 	.word	0x0800dd14

0800acd8 <__itoa>:
 800acd8:	1e93      	subs	r3, r2, #2
 800acda:	2b22      	cmp	r3, #34	; 0x22
 800acdc:	b510      	push	{r4, lr}
 800acde:	460c      	mov	r4, r1
 800ace0:	d904      	bls.n	800acec <__itoa+0x14>
 800ace2:	2300      	movs	r3, #0
 800ace4:	700b      	strb	r3, [r1, #0]
 800ace6:	461c      	mov	r4, r3
 800ace8:	4620      	mov	r0, r4
 800acea:	bd10      	pop	{r4, pc}
 800acec:	2a0a      	cmp	r2, #10
 800acee:	d109      	bne.n	800ad04 <__itoa+0x2c>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	da07      	bge.n	800ad04 <__itoa+0x2c>
 800acf4:	232d      	movs	r3, #45	; 0x2d
 800acf6:	700b      	strb	r3, [r1, #0]
 800acf8:	4240      	negs	r0, r0
 800acfa:	2101      	movs	r1, #1
 800acfc:	4421      	add	r1, r4
 800acfe:	f000 f80d 	bl	800ad1c <__utoa>
 800ad02:	e7f1      	b.n	800ace8 <__itoa+0x10>
 800ad04:	2100      	movs	r1, #0
 800ad06:	e7f9      	b.n	800acfc <__itoa+0x24>

0800ad08 <itoa>:
 800ad08:	f7ff bfe6 	b.w	800acd8 <__itoa>

0800ad0c <memset>:
 800ad0c:	4402      	add	r2, r0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d100      	bne.n	800ad16 <memset+0xa>
 800ad14:	4770      	bx	lr
 800ad16:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1a:	e7f9      	b.n	800ad10 <memset+0x4>

0800ad1c <__utoa>:
 800ad1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1e:	4c1f      	ldr	r4, [pc, #124]	; (800ad9c <__utoa+0x80>)
 800ad20:	b08b      	sub	sp, #44	; 0x2c
 800ad22:	4605      	mov	r5, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	466e      	mov	r6, sp
 800ad28:	f104 0c20 	add.w	ip, r4, #32
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	6861      	ldr	r1, [r4, #4]
 800ad30:	4637      	mov	r7, r6
 800ad32:	c703      	stmia	r7!, {r0, r1}
 800ad34:	3408      	adds	r4, #8
 800ad36:	4564      	cmp	r4, ip
 800ad38:	463e      	mov	r6, r7
 800ad3a:	d1f7      	bne.n	800ad2c <__utoa+0x10>
 800ad3c:	7921      	ldrb	r1, [r4, #4]
 800ad3e:	7139      	strb	r1, [r7, #4]
 800ad40:	1e91      	subs	r1, r2, #2
 800ad42:	6820      	ldr	r0, [r4, #0]
 800ad44:	6038      	str	r0, [r7, #0]
 800ad46:	2922      	cmp	r1, #34	; 0x22
 800ad48:	f04f 0100 	mov.w	r1, #0
 800ad4c:	d904      	bls.n	800ad58 <__utoa+0x3c>
 800ad4e:	7019      	strb	r1, [r3, #0]
 800ad50:	460b      	mov	r3, r1
 800ad52:	4618      	mov	r0, r3
 800ad54:	b00b      	add	sp, #44	; 0x2c
 800ad56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad58:	1e58      	subs	r0, r3, #1
 800ad5a:	4684      	mov	ip, r0
 800ad5c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ad60:	fb02 5617 	mls	r6, r2, r7, r5
 800ad64:	3628      	adds	r6, #40	; 0x28
 800ad66:	446e      	add	r6, sp
 800ad68:	460c      	mov	r4, r1
 800ad6a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ad6e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ad72:	462e      	mov	r6, r5
 800ad74:	42b2      	cmp	r2, r6
 800ad76:	f101 0101 	add.w	r1, r1, #1
 800ad7a:	463d      	mov	r5, r7
 800ad7c:	d9ee      	bls.n	800ad5c <__utoa+0x40>
 800ad7e:	2200      	movs	r2, #0
 800ad80:	545a      	strb	r2, [r3, r1]
 800ad82:	1919      	adds	r1, r3, r4
 800ad84:	1aa5      	subs	r5, r4, r2
 800ad86:	42aa      	cmp	r2, r5
 800ad88:	dae3      	bge.n	800ad52 <__utoa+0x36>
 800ad8a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ad8e:	780e      	ldrb	r6, [r1, #0]
 800ad90:	7006      	strb	r6, [r0, #0]
 800ad92:	3201      	adds	r2, #1
 800ad94:	f801 5901 	strb.w	r5, [r1], #-1
 800ad98:	e7f4      	b.n	800ad84 <__utoa+0x68>
 800ad9a:	bf00      	nop
 800ad9c:	0800dce0 	.word	0x0800dce0

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr
