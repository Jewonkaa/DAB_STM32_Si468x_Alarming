
DAB_Radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d9c  08005d9c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da4  08005da4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000364  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000037c  2000037c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ed4  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e09  00000000  00000000  00034f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  00038fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b2b  00000000  00000000  0003a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e21  00000000  00000000  0005cc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced16  00000000  00000000  00074a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014377a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004db4  00000000  00000000  001437cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005418 	.word	0x08005418

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005418 	.word	0x08005418

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004d0:	f000 f914 	bl	80006fc <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 fbc3 	bl	8000c60 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004da:	20cb      	movs	r0, #203	; 0xcb
 80004dc:	f000 fbc0 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004e0:	2039      	movs	r0, #57	; 0x39
 80004e2:	f000 fbcc 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004e6:	202c      	movs	r0, #44	; 0x2c
 80004e8:	f000 fbc9 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fbc6 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80004f2:	2034      	movs	r0, #52	; 0x34
 80004f4:	f000 fbc3 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fbc0 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 80004fe:	20cf      	movs	r0, #207	; 0xcf
 8000500:	f000 fbae 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fbba 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800050a:	20c1      	movs	r0, #193	; 0xc1
 800050c:	f000 fbb7 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000510:	2030      	movs	r0, #48	; 0x30
 8000512:	f000 fbb4 	bl	8000c7e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000516:	20e8      	movs	r0, #232	; 0xe8
 8000518:	f000 fba2 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800051c:	2085      	movs	r0, #133	; 0x85
 800051e:	f000 fbae 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fbab 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000528:	2078      	movs	r0, #120	; 0x78
 800052a:	f000 fba8 	bl	8000c7e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800052e:	20ea      	movs	r0, #234	; 0xea
 8000530:	f000 fb96 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fba2 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fb9f 	bl	8000c7e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000540:	20ed      	movs	r0, #237	; 0xed
 8000542:	f000 fb8d 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f000 fb99 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 fb96 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000552:	2012      	movs	r0, #18
 8000554:	f000 fb93 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000558:	2081      	movs	r0, #129	; 0x81
 800055a:	f000 fb90 	bl	8000c7e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800055e:	20f7      	movs	r0, #247	; 0xf7
 8000560:	f000 fb7e 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000564:	2020      	movs	r0, #32
 8000566:	f000 fb8a 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800056a:	20c0      	movs	r0, #192	; 0xc0
 800056c:	f000 fb78 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000570:	2010      	movs	r0, #16
 8000572:	f000 fb84 	bl	8000c7e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000576:	20c1      	movs	r0, #193	; 0xc1
 8000578:	f000 fb72 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800057c:	2010      	movs	r0, #16
 800057e:	f000 fb7e 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000582:	20c5      	movs	r0, #197	; 0xc5
 8000584:	f000 fb6c 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000588:	203e      	movs	r0, #62	; 0x3e
 800058a:	f000 fb78 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800058e:	2028      	movs	r0, #40	; 0x28
 8000590:	f000 fb75 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8000594:	20c7      	movs	r0, #199	; 0xc7
 8000596:	f000 fb63 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800059a:	2086      	movs	r0, #134	; 0x86
 800059c:	f000 fb6f 	bl	8000c7e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005a0:	2036      	movs	r0, #54	; 0x36
 80005a2:	f000 fb5d 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005a6:	2048      	movs	r0, #72	; 0x48
 80005a8:	f000 fb69 	bl	8000c7e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f000 fb57 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005b2:	2055      	movs	r0, #85	; 0x55
 80005b4:	f000 fb63 	bl	8000c7e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005b8:	20b1      	movs	r0, #177	; 0xb1
 80005ba:	f000 fb51 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fb5d 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005c4:	2018      	movs	r0, #24
 80005c6:	f000 fb5a 	bl	8000c7e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005ca:	20b6      	movs	r0, #182	; 0xb6
 80005cc:	f000 fb48 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005d0:	2008      	movs	r0, #8
 80005d2:	f000 fb54 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005d6:	2082      	movs	r0, #130	; 0x82
 80005d8:	f000 fb51 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005dc:	2027      	movs	r0, #39	; 0x27
 80005de:	f000 fb4e 	bl	8000c7e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005e2:	20f2      	movs	r0, #242	; 0xf2
 80005e4:	f000 fb3c 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fb48 	bl	8000c7e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005ee:	2026      	movs	r0, #38	; 0x26
 80005f0:	f000 fb36 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fb42 	bl	8000c7e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 80005fa:	20e0      	movs	r0, #224	; 0xe0
 80005fc:	f000 fb30 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000600:	200f      	movs	r0, #15
 8000602:	f000 fb3c 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000606:	2031      	movs	r0, #49	; 0x31
 8000608:	f000 fb39 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800060c:	202b      	movs	r0, #43	; 0x2b
 800060e:	f000 fb36 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000612:	200c      	movs	r0, #12
 8000614:	f000 fb33 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000618:	200e      	movs	r0, #14
 800061a:	f000 fb30 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800061e:	2008      	movs	r0, #8
 8000620:	f000 fb2d 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000624:	204e      	movs	r0, #78	; 0x4e
 8000626:	f000 fb2a 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800062a:	20f1      	movs	r0, #241	; 0xf1
 800062c:	f000 fb27 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000630:	2037      	movs	r0, #55	; 0x37
 8000632:	f000 fb24 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000636:	2007      	movs	r0, #7
 8000638:	f000 fb21 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800063c:	2010      	movs	r0, #16
 800063e:	f000 fb1e 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 fb1b 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000648:	200e      	movs	r0, #14
 800064a:	f000 fb18 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800064e:	2009      	movs	r0, #9
 8000650:	f000 fb15 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fb12 	bl	8000c7e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800065a:	20e1      	movs	r0, #225	; 0xe1
 800065c:	f000 fb00 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fb0c 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000666:	200e      	movs	r0, #14
 8000668:	f000 fb09 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800066c:	2014      	movs	r0, #20
 800066e:	f000 fb06 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 fb03 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000678:	2011      	movs	r0, #17
 800067a:	f000 fb00 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800067e:	2007      	movs	r0, #7
 8000680:	f000 fafd 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000684:	2031      	movs	r0, #49	; 0x31
 8000686:	f000 fafa 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800068a:	20c1      	movs	r0, #193	; 0xc1
 800068c:	f000 faf7 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8000690:	2048      	movs	r0, #72	; 0x48
 8000692:	f000 faf4 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000696:	2008      	movs	r0, #8
 8000698:	f000 faf1 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800069c:	200f      	movs	r0, #15
 800069e:	f000 faee 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006a2:	200c      	movs	r0, #12
 80006a4:	f000 faeb 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 fae8 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006ae:	2036      	movs	r0, #54	; 0x36
 80006b0:	f000 fae5 	bl	8000c7e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006b4:	200f      	movs	r0, #15
 80006b6:	f000 fae2 	bl	8000c7e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ba:	2011      	movs	r0, #17
 80006bc:	f000 fad0 	bl	8000c60 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006c0:	2029      	movs	r0, #41	; 0x29
 80006c2:	f000 facd 	bl	8000c60 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006c6:	202c      	movs	r0, #44	; 0x2c
 80006c8:	f000 fad9 	bl	8000c7e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f83d 	bl	800074c <ILI9341_Set_Rotation>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006e2:	1df9      	adds	r1, r7, #7
 80006e4:	2301      	movs	r3, #1
 80006e6:	2201      	movs	r2, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <ILI9341_SPI_Send+0x20>)
 80006ea:	f003 fa44 	bl	8003b76 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000015c 	.word	0x2000015c

080006fc <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	RESET_ON;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <ILI9341_Reset+0x4c>)
 8000708:	f002 fbb6 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f001 fdd5 	bl	80022bc <HAL_Delay>
	RESET_OFF;
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <ILI9341_Reset+0x4c>)
 800071a:	f002 fbad 	bl	8002e78 <HAL_GPIO_WritePin>
	CS_ON;
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <ILI9341_Reset+0x4c>)
 8000726:	f002 fba7 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f001 fdc6 	bl	80022bc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fa95 	bl	8000c60 <ILI9341_Send_Command>
	CS_OFF;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <ILI9341_Reset+0x4c>)
 800073e:	f002 fb9b 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020c00 	.word	0x40020c00

0800074c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000756:	2036      	movs	r0, #54	; 0x36
 8000758:	f000 fa82 	bl	8000c60 <ILI9341_Send_Command>
	switch (rotation) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d836      	bhi.n	80007d0 <ILI9341_Set_Rotation+0x84>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <ILI9341_Set_Rotation+0x1c>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000779 	.word	0x08000779
 800076c:	0800078f 	.word	0x0800078f
 8000770:	080007a5 	.word	0x080007a5
 8000774:	080007bb 	.word	0x080007bb
	case 0:
		ILI9341_Send_Data(0x48);
 8000778:	2048      	movs	r0, #72	; 0x48
 800077a:	f000 fa80 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 240;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 8000780:	22f0      	movs	r2, #240	; 0xf0
 8000782:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 8000786:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e020      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f000 fa75 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 320;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 800079e:	22f0      	movs	r2, #240	; 0xf0
 80007a0:	601a      	str	r2, [r3, #0]
		break;
 80007a2:	e015      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007a4:	2088      	movs	r0, #136	; 0x88
 80007a6:	f000 fa6a 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 80007ac:	22f0      	movs	r2, #240	; 0xf0
 80007ae:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 80007b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007b6:	601a      	str	r2, [r3, #0]
		break;
 80007b8:	e00a      	b.n	80007d0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ba:	20e8      	movs	r0, #232	; 0xe8
 80007bc:	f000 fa5f 	bl	8000c7e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <ILI9341_Set_Rotation+0x8c>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <ILI9341_Set_Rotation+0x90>)
 80007ca:	22f0      	movs	r2, #240	; 0xf0
 80007cc:	601a      	str	r2, [r3, #0]
		break;
 80007ce:	bf00      	nop
	}
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000004 	.word	0x20000004

080007e0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 80007f4:	f002 fb40 	bl	8002e78 <HAL_GPIO_WritePin>
	DC_COMMAND;
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 8000800:	f002 fb3a 	bl	8002e78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff66 	bl	80006d8 <ILI9341_SPI_Send>

	DC_DATA;
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <ILI9341_SPI_Send_32+0x70>)
 8000814:	f002 fb30 	bl	8002e78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	0e1b      	lsrs	r3, r3, #24
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff5a 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff54 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff4e 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff49 	bl	80006d8 <ILI9341_SPI_Send>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000874:	6979      	ldr	r1, [r7, #20]
 8000876:	202a      	movs	r0, #42	; 0x2a
 8000878:	f7ff ffb2 	bl	80007e0 <ILI9341_SPI_Send_32>
	t = y1;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4313      	orrs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800088e:	6979      	ldr	r1, [r7, #20]
 8000890:	202b      	movs	r0, #43	; 0x2b
 8000892:	f7ff ffa5 	bl	80007e0 <ILI9341_SPI_Send_32>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <ILI9341_Fill_Screen+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <ILI9341_Fill_Screen+0x44>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	2100      	movs	r1, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ffcc 	bl	8000854 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <ILI9341_Fill_Screen+0x40>)
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <ILI9341_Fill_Screen+0x44>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	fb01 f202 	mul.w	r2, r1, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f9e3 	bl	8000c9c <ILI9341_Send_Burst>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004

080008e8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db31      	blt.n	800095e <ILI9341_Draw_Pixel+0x76>
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db2e      	blt.n	800095e <ILI9341_Draw_Pixel+0x76>
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <ILI9341_Draw_Pixel+0x80>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d229      	bcs.n	800095e <ILI9341_Draw_Pixel+0x76>
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <ILI9341_Draw_Pixel+0x84>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d224      	bcs.n	800095e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <ILI9341_Draw_Pixel+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <ILI9341_Draw_Pixel+0x84>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	f7ff ff96 	bl	8000854 <ILI9341_Set_Address>
	DC_COMMAND;
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	4810      	ldr	r0, [pc, #64]	; (8000970 <ILI9341_Draw_Pixel+0x88>)
 8000930:	f002 faa2 	bl	8002e78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff fecf 	bl	80006d8 <ILI9341_SPI_Send>
	DC_DATA;
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <ILI9341_Draw_Pixel+0x88>)
 8000942:	f002 fa99 	bl	8002e78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fec3 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff febe 	bl	80006d8 <ILI9341_SPI_Send>
 800095c:	e000      	b.n	8000960 <ILI9341_Draw_Pixel+0x78>
		return;
 800095e:	bf00      	nop
}
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	20000004 	.word	0x20000004
 8000970:	40020c00 	.word	0x40020c00

08000974 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f7ff ff63 	bl	8000854 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	b298      	uxth	r0, r3
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	3301      	adds	r3, #1
 800099a:	4619      	mov	r1, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	fb01 f303 	mul.w	r3, r1, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	f000 f977 	bl	8000c9c <ILI9341_Send_Burst>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af02      	add	r7, sp, #8
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f81c 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f814 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f80c 	bl	8000a0c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f804 	bl	8000a0c <ILI9341_Draw_Line>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1acb      	subs	r3, r1, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	429a      	cmp	r2, r3
 8000a36:	bfcc      	ite	gt
 8000a38:	2301      	movgt	r3, #1
 8000a3a:	2300      	movle	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00d      	beq.n	8000a62 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a52:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	843b      	strh	r3, [r7, #32]
 8000a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d90d      	bls.n	8000a86 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	83fb      	strh	r3, [r7, #30]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a76:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	83bb      	strh	r3, [r7, #28]
 8000a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	0fda      	lsrs	r2, r3, #31
 8000aa0:	4413      	add	r3, r2
 8000aa2:	105b      	asrs	r3, r3, #1
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d202      	bcs.n	8000ab4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab2:	e023      	b.n	8000afc <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aba:	e01f      	b.n	8000afc <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff0d 	bl	80008e8 <ILI9341_Draw_Pixel>
 8000ace:	e005      	b.n	8000adc <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff06 	bl	80008e8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da05      	bge.n	8000af6 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	607b      	str	r3, [r7, #4]
			err = dx;
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d9db      	bls.n	8000abc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b1e:	7f3b      	ldrb	r3, [r7, #28]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d061      	beq.n	8000be8 <ILI9341_Draw_String+0xd8>
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	f300 8092 	bgt.w	8000c4e <ILI9341_Draw_String+0x13e>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d028      	beq.n	8000b80 <ILI9341_Draw_String+0x70>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d02b      	beq.n	8000b8a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b32:	e08c      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b34:	7f3b      	ldrb	r3, [r7, #28]
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d907      	bls.n	8000b56 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	7f3a      	ldrb	r2, [r7, #28]
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	f000 f95a 	bl	8000e20 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b6c:	7f3b      	ldrb	r3, [r7, #28]
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	3b02      	subs	r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1d5      	bne.n	8000b34 <ILI9341_Draw_String+0x24>
	break;
 8000b88:	e061      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b90:	e025      	b.n	8000bde <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b92:	7f3b      	ldrb	r3, [r7, #28]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d907      	bls.n	8000bb4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000ba8:	7f3b      	ldrb	r3, [r7, #28]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	461a      	mov	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	7f3a      	ldrb	r2, [r7, #28]
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	f000 f92b 	bl	8000e20 <ILI9341_Draw_Char>
			x += hh*8;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1d5      	bne.n	8000b92 <ILI9341_Draw_String+0x82>
	break;
 8000be6:	e032      	b.n	8000c4e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bee:	e029      	b.n	8000c44 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bf0:	7f3b      	ldrb	r3, [r7, #28]
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	441a      	add	r2, r3
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <ILI9341_Draw_String+0x148>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d907      	bls.n	8000c12 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c06:	7f3b      	ldrb	r3, [r7, #28]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	7f3a      	ldrb	r2, [r7, #28]
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	f000 f8fc 	bl	8000e20 <ILI9341_Draw_Char>
			x += hh*10;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <ILI9341_Draw_String+0x14c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1d1      	bne.n	8000bf0 <ILI9341_Draw_String+0xe0>
	break;
 8000c4c:	bf00      	nop
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000034 	.word	0x20000034

08000c60 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c6a:	f000 fa09 	bl	8001080 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fd31 	bl	80006d8 <ILI9341_SPI_Send>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c88:	f000 f9e8 	bl	800105c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd22 	bl	80006d8 <ILI9341_SPI_Send>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	733b      	strb	r3, [r7, #12]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	4858      	ldr	r0, [pc, #352]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cbc:	f002 f8dc 	bl	8002e78 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc6:	4855      	ldr	r0, [pc, #340]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cc8:	f002 f8d6 	bl	8002e78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000ccc:	202c      	movs	r0, #44	; 0x2c
 8000cce:	f7ff fd03 	bl	80006d8 <ILI9341_SPI_Send>
	DC_DATA;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	4850      	ldr	r0, [pc, #320]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000cda:	f002 f8cd 	bl	8002e78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cde:	7b3b      	ldrb	r3, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fcf9 	bl	80006d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcf5 	bl	80006d8 <ILI9341_SPI_Send>
	len--;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	099b      	lsrs	r3, r3, #6
 8000cf8:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cfa:	7b3a      	ldrb	r2, [r7, #12]
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d169      	bne.n	8000dd6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d02:	e027      	b.n	8000d54 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fce4 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fce0 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcdc 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcd8 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcd4 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd0 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fccc 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcc8 	bl	80006d8 <ILI9341_SPI_Send>
			} while (--i);
 8000d48:	7b7b      	ldrb	r3, [r7, #13]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	737b      	strb	r3, [r7, #13]
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1d9      	bne.n	8000d08 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	81fa      	strh	r2, [r7, #14]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1d2      	bne.n	8000d04 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d66:	737b      	strb	r3, [r7, #13]
 8000d68:	e007      	b.n	8000d7a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fcb3 	bl	80006d8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcaf 	bl	80006d8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	737a      	strb	r2, [r7, #13]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f2      	bne.n	8000d6a <ILI9341_Send_Burst+0xce>
 8000d84:	e03f      	b.n	8000e06 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d86:	2310      	movs	r3, #16
 8000d88:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fca3 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc9f 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fc9b 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc97 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc93 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc8f 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc8b 	bl	80006d8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc87 	bl	80006d8 <ILI9341_SPI_Send>
			} while (--i);
 8000dca:	7b7b      	ldrb	r3, [r7, #13]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	737b      	strb	r3, [r7, #13]
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1d9      	bne.n	8000d8a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	81fa      	strh	r2, [r7, #14]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1d2      	bne.n	8000d86 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000de8:	737b      	strb	r3, [r7, #13]
 8000dea:	e007      	b.n	8000dfc <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dec:	7b3b      	ldrb	r3, [r7, #12]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fc72 	bl	80006d8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fc6e 	bl	80006d8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	737a      	strb	r2, [r7, #13]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f2      	bne.n	8000dec <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <ILI9341_Send_Burst+0x180>)
 8000e0e:	f002 f833 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	f000 80b2 	beq.w	8000f9c <ILI9341_Draw_Char+0x17c>
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	f300 8104 	bgt.w	8001046 <ILI9341_Draw_Char+0x226>
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d002      	beq.n	8000e48 <ILI9341_Draw_Char+0x28>
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d055      	beq.n	8000ef2 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e46:	e0fe      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3305      	adds	r3, #5
 8000e50:	461a      	mov	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3308      	adds	r3, #8
 8000e56:	f7ff fcfd 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	487b      	ldr	r0, [pc, #492]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000e62:	f002 f809 	bl	8002e78 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e66:	202c      	movs	r0, #44	; 0x2c
 8000e68:	f7ff fc36 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	4877      	ldr	r0, [pc, #476]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000e74:	f002 f800 	bl	8002e78 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e035      	b.n	8000eea <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e7e:	2302      	movs	r3, #2
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e02c      	b.n	8000ede <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e88:	3b20      	subs	r3, #32
 8000e8a:	4a72      	ldr	r2, [pc, #456]	; (8001054 <ILI9341_Draw_Char+0x234>)
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	441a      	add	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	fa42 f303 	asr.w	r3, r2, r3
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc11 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc0c 	bl	80006d8 <ILI9341_SPI_Send>
 8000ec0:	e00a      	b.n	8000ed8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc05 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc00 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddcf      	ble.n	8000e84 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	ddc6      	ble.n	8000e7e <ILI9341_Draw_Char+0x5e>
			break;
 8000ef0:	e0a9      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3307      	adds	r3, #7
 8000efa:	461a      	mov	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3310      	adds	r3, #16
 8000f00:	f7ff fca8 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	4851      	ldr	r0, [pc, #324]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000f0c:	f001 ffb4 	bl	8002e78 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f10:	202c      	movs	r0, #44	; 0x2c
 8000f12:	f7ff fbe1 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	484c      	ldr	r0, [pc, #304]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000f1e:	f001 ffab 	bl	8002e78 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e035      	b.n	8000f94 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e02c      	b.n	8000f88 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f32:	3b20      	subs	r3, #32
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <ILI9341_Draw_Char+0x238>)
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	441a      	add	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f1c3 0307 	rsb	r3, r3, #7
 8000f48:	fa42 f303 	asr.w	r3, r2, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbbc 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbb7 	bl	80006d8 <ILI9341_SPI_Send>
 8000f6a:	e00a      	b.n	8000f82 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fbb0 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbab 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	ddcf      	ble.n	8000f2e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3301      	adds	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	ddc6      	ble.n	8000f28 <ILI9341_Draw_Char+0x108>
		break;
 8000f9a:	e054      	b.n	8001046 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3309      	adds	r3, #9
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3310      	adds	r3, #16
 8000faa:	f7ff fc53 	bl	8000854 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	4826      	ldr	r0, [pc, #152]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000fb6:	f001 ff5f 	bl	8002e78 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fba:	202c      	movs	r0, #44	; 0x2c
 8000fbc:	f7ff fb8c 	bl	80006d8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <ILI9341_Draw_Char+0x230>)
 8000fc8:	f001 ff56 	bl	8002e78 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e035      	b.n	800103e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e02c      	b.n	8001032 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <ILI9341_Draw_Char+0x238>)
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	441a      	add	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	fa42 f303 	asr.w	r3, r2, r3
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fb67 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb62 	bl	80006d8 <ILI9341_SPI_Send>
 8001014:	e00a      	b.n	800102c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fb5b 	bl	80006d8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb56 	bl	80006d8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b07      	cmp	r3, #7
 8001036:	ddcf      	ble.n	8000fd8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3301      	adds	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b1d      	cmp	r3, #29
 8001042:	ddc6      	ble.n	8000fd2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001044:	bf00      	nop
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020c00 	.word	0x40020c00
 8001054:	0800548c 	.word	0x0800548c
 8001058:	08005764 	.word	0x08005764

0800105c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <Before_Sending_Data+0x20>)
 8001068:	f001 ff06 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <Before_Sending_Data+0x20>)
 8001074:	f001 ff00 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020c00 	.word	0x40020c00

08001080 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <Before_Sending_Command+0x20>)
 800108c:	f001 fef4 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <Before_Sending_Command+0x20>)
 8001098:	f001 feee 	bl	8002e78 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020c00 	.word	0x40020c00

080010a4 <DisplayMainScreen>:

char char_buffer[32];
int test_cnt = 0;

void DisplayMainScreen()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fbf8 	bl	80008a0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 80010b0:	23eb      	movs	r3, #235	; 0xeb
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	f240 133b 	movw	r3, #315	; 0x13b
 80010b8:	2219      	movs	r2, #25
 80010ba:	2105      	movs	r1, #5
 80010bc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80010c0:	f7ff fc79 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 80010c4:	2302      	movs	r3, #2
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <DisplayMainScreen+0x24c>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	2105      	movs	r1, #5
 80010d4:	2041      	movs	r0, #65	; 0x41
 80010d6:	f7ff fd1b 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 80010da:	233c      	movs	r3, #60	; 0x3c
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	f240 1331 	movw	r3, #305	; 0x131
 80010e2:	2223      	movs	r2, #35	; 0x23
 80010e4:	210f      	movs	r1, #15
 80010e6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80010ea:	f7ff fc64 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
 80010ee:	235f      	movs	r3, #95	; 0x5f
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2369      	movs	r3, #105	; 0x69
 80010f4:	2246      	movs	r2, #70	; 0x46
 80010f6:	210f      	movs	r1, #15
 80010f8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80010fc:	f7ff fc5b 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 70, 185, 95); //Napis bufor
 8001100:	235f      	movs	r3, #95	; 0x5f
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	23b9      	movs	r3, #185	; 0xb9
 8001106:	2246      	movs	r2, #70	; 0x46
 8001108:	2173      	movs	r1, #115	; 0x73
 800110a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800110e:	f7ff fc52 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora
 8001112:	235f      	movs	r3, #95	; 0x5f
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	f240 1331 	movw	r3, #305	; 0x131
 800111a:	2246      	movs	r2, #70	; 0x46
 800111c:	21b9      	movs	r1, #185	; 0xb9
 800111e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001122:	f7ff fc48 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2369      	movs	r3, #105	; 0x69
 800112c:	226e      	movs	r2, #110	; 0x6e
 800112e:	210f      	movs	r1, #15
 8001130:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001134:	f7ff fc3f 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8001138:	239f      	movs	r3, #159	; 0x9f
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2368      	movs	r3, #104	; 0x68
 800113e:	226f      	movs	r2, #111	; 0x6f
 8001140:	2110      	movs	r1, #16
 8001142:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001146:	f7ff fc15 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 800114a:	2302      	movs	r3, #2
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <DisplayMainScreen+0x250>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115a:	217f      	movs	r1, #127	; 0x7f
 800115c:	2023      	movs	r0, #35	; 0x23
 800115e:	f7ff fcd7 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 8001162:	23a0      	movs	r3, #160	; 0xa0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	23cd      	movs	r3, #205	; 0xcd
 8001168:	226e      	movs	r2, #110	; 0x6e
 800116a:	2173      	movs	r1, #115	; 0x73
 800116c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001170:	f7ff fc21 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8001174:	239f      	movs	r3, #159	; 0x9f
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	23cc      	movs	r3, #204	; 0xcc
 800117a:	226f      	movs	r2, #111	; 0x6f
 800117c:	2174      	movs	r1, #116	; 0x74
 800117e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001182:	f7ff fbf7 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 8001186:	2302      	movs	r3, #2
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <DisplayMainScreen+0x254>)
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001196:	217f      	movs	r1, #127	; 0x7f
 8001198:	2090      	movs	r0, #144	; 0x90
 800119a:	f7ff fcb9 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	f240 1331 	movw	r3, #305	; 0x131
 80011a6:	226e      	movs	r2, #110	; 0x6e
 80011a8:	21d7      	movs	r1, #215	; 0xd7
 80011aa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80011ae:	f7ff fc02 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 80011b2:	239f      	movs	r3, #159	; 0x9f
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	f44f 7398 	mov.w	r3, #304	; 0x130
 80011ba:	226f      	movs	r2, #111	; 0x6f
 80011bc:	21d8      	movs	r1, #216	; 0xd8
 80011be:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80011c2:	f7ff fbd7 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 80011c6:	2302      	movs	r3, #2
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <DisplayMainScreen+0x258>)
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	217f      	movs	r1, #127	; 0x7f
 80011d8:	20ea      	movs	r0, #234	; 0xea
 80011da:	f7ff fc99 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 80011de:	23dc      	movs	r3, #220	; 0xdc
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2369      	movs	r3, #105	; 0x69
 80011e4:	22aa      	movs	r2, #170	; 0xaa
 80011e6:	210f      	movs	r1, #15
 80011e8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80011ec:	f7ff fbe3 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 80011f0:	23db      	movs	r3, #219	; 0xdb
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2368      	movs	r3, #104	; 0x68
 80011f6:	22ab      	movs	r2, #171	; 0xab
 80011f8:	2110      	movs	r1, #16
 80011fa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80011fe:	f7ff fbb9 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 8001202:	2302      	movs	r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <DisplayMainScreen+0x25c>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001212:	21bb      	movs	r1, #187	; 0xbb
 8001214:	202d      	movs	r0, #45	; 0x2d
 8001216:	f7ff fc7b 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 800121a:	23dc      	movs	r3, #220	; 0xdc
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	23cd      	movs	r3, #205	; 0xcd
 8001220:	22aa      	movs	r2, #170	; 0xaa
 8001222:	2173      	movs	r1, #115	; 0x73
 8001224:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001228:	f7ff fbc5 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 800122c:	23db      	movs	r3, #219	; 0xdb
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	23cc      	movs	r3, #204	; 0xcc
 8001232:	22ab      	movs	r2, #171	; 0xab
 8001234:	2174      	movs	r1, #116	; 0x74
 8001236:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800123a:	f7ff fb9b 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 800123e:	2302      	movs	r3, #2
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <DisplayMainScreen+0x260>)
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800124a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124e:	21b4      	movs	r1, #180	; 0xb4
 8001250:	2081      	movs	r0, #129	; 0x81
 8001252:	f7ff fc5d 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 8001256:	2302      	movs	r3, #2
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <DisplayMainScreen+0x264>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	21c3      	movs	r1, #195	; 0xc3
 8001268:	2084      	movs	r0, #132	; 0x84
 800126a:	f7ff fc51 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 800126e:	23dc      	movs	r3, #220	; 0xdc
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	f240 1331 	movw	r3, #305	; 0x131
 8001276:	22aa      	movs	r2, #170	; 0xaa
 8001278:	21d7      	movs	r1, #215	; 0xd7
 800127a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800127e:	f7ff fb9a 	bl	80009b6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 8001282:	23db      	movs	r3, #219	; 0xdb
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	f44f 7398 	mov.w	r3, #304	; 0x130
 800128a:	22ab      	movs	r2, #171	; 0xab
 800128c:	21d8      	movs	r1, #216	; 0xd8
 800128e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001292:	f7ff fb6f 	bl	8000974 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT",2);//Wyswietl stringa
 8001296:	2302      	movs	r3, #2
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <DisplayMainScreen+0x268>)
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a6:	21b4      	movs	r1, #180	; 0xb4
 80012a8:	20f5      	movs	r0, #245	; 0xf5
 80012aa:	f7ff fc31 	bl	8000b10 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 80012ae:	2302      	movs	r3, #2
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <DisplayMainScreen+0x264>)
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012be:	21c3      	movs	r1, #195	; 0xc3
 80012c0:	20e8      	movs	r0, #232	; 0xe8
 80012c2:	f7ff fc25 	bl	8000b10 <ILI9341_Draw_String>

	ILI9341_Draw_String(120, 75, WHITE, BLACK, "Buffer: " , 2);
 80012c6:	2302      	movs	r3, #2
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <DisplayMainScreen+0x26c>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d4:	214b      	movs	r1, #75	; 0x4b
 80012d6:	2078      	movs	r0, #120	; 0x78
 80012d8:	f7ff fc1a 	bl	8000b10 <ILI9341_Draw_String>

	CS_OFF;
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <DisplayMainScreen+0x270>)
 80012e4:	f001 fdc8 	bl	8002e78 <HAL_GPIO_WritePin>
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08005430 	.word	0x08005430
 80012f4:	08005444 	.word	0x08005444
 80012f8:	0800544c 	.word	0x0800544c
 80012fc:	08005454 	.word	0x08005454
 8001300:	0800545c 	.word	0x0800545c
 8001304:	08005464 	.word	0x08005464
 8001308:	08005470 	.word	0x08005470
 800130c:	08005478 	.word	0x08005478
 8001310:	08005480 	.word	0x08005480
 8001314:	40020c00 	.word	0x40020c00

08001318 <DisplayTest>:

void DisplayTest()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af02      	add	r7, sp, #8
	test_cnt++;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <DisplayTest+0x3c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <DisplayTest+0x3c>)
 8001326:	6013      	str	r3, [r2, #0]
	//itoa(100, temp_char, 10);
	ILI9341_Draw_String(20, 40, WHITE, BLACK, itoa(test_cnt, char_buffer, 10), 2);
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <DisplayTest+0x3c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	220a      	movs	r2, #10
 800132e:	490a      	ldr	r1, [pc, #40]	; (8001358 <DisplayTest+0x40>)
 8001330:	4618      	mov	r0, r3
 8001332:	f004 f825 	bl	8005380 <itoa>
 8001336:	4603      	mov	r3, r0
 8001338:	2202      	movs	r2, #2
 800133a:	9201      	str	r2, [sp, #4]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	2128      	movs	r1, #40	; 0x28
 8001346:	2014      	movs	r0, #20
 8001348:	f7ff fbe2 	bl	8000b10 <ILI9341_Draw_String>
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000058 	.word	0x20000058
 8001358:	20000038 	.word	0x20000038

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_DMA_Init+0x3c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <MX_DMA_Init+0x3c>)
 800136c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_DMA_Init+0x3c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	200f      	movs	r0, #15
 8001384:	f001 f899 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001388:	200f      	movs	r0, #15
 800138a:	f001 f8b2 	bl	80024f2 <HAL_NVIC_EnableIRQ>

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b57      	ldr	r3, [pc, #348]	; (8001514 <MX_GPIO_Init+0x178>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a56      	ldr	r2, [pc, #344]	; (8001514 <MX_GPIO_Init+0x178>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b54      	ldr	r3, [pc, #336]	; (8001514 <MX_GPIO_Init+0x178>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b50      	ldr	r3, [pc, #320]	; (8001514 <MX_GPIO_Init+0x178>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <MX_GPIO_Init+0x178>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <MX_GPIO_Init+0x178>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <MX_GPIO_Init+0x178>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a48      	ldr	r2, [pc, #288]	; (8001514 <MX_GPIO_Init+0x178>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <MX_GPIO_Init+0x178>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MX_GPIO_Init+0x178>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a41      	ldr	r2, [pc, #260]	; (8001514 <MX_GPIO_Init+0x178>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <MX_GPIO_Init+0x178>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <MX_GPIO_Init+0x178>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <MX_GPIO_Init+0x178>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <MX_GPIO_Init+0x178>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAB_INTB_GPIO_Port, DAB_INTB_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2110      	movs	r1, #16
 8001442:	4835      	ldr	r0, [pc, #212]	; (8001518 <MX_GPIO_Init+0x17c>)
 8001444:	f001 fd18 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_CS_Pin|DAB_RESET_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2130      	movs	r1, #48	; 0x30
 800144c:	4833      	ldr	r0, [pc, #204]	; (800151c <MX_GPIO_Init+0x180>)
 800144e:	f001 fd13 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8001452:	2200      	movs	r2, #0
 8001454:	f24f 7180 	movw	r1, #63360	; 0xf780
 8001458:	4831      	ldr	r0, [pc, #196]	; (8001520 <MX_GPIO_Init+0x184>)
 800145a:	f001 fd0d 	bl	8002e78 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2128      	movs	r1, #40	; 0x28
 8001462:	4830      	ldr	r0, [pc, #192]	; (8001524 <MX_GPIO_Init+0x188>)
 8001464:	f001 fd08 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_INTB_Pin;
 8001468:	2310      	movs	r3, #16
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAB_INTB_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4826      	ldr	r0, [pc, #152]	; (8001518 <MX_GPIO_Init+0x17c>)
 8001480:	f001 fb5e 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_CS_Pin|DAB_RESET_Pin;
 8001484:	2330      	movs	r3, #48	; 0x30
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4820      	ldr	r0, [pc, #128]	; (800151c <MX_GPIO_Init+0x180>)
 800149c:	f001 fb50 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 80014a0:	2311      	movs	r3, #17
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_GPIO_Init+0x188>)
 80014b4:	f001 fb44 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80014b8:	f24f 7380 	movw	r3, #63360	; 0xf780
 80014bc:	617b      	str	r3, [r7, #20]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_GPIO_Init+0x184>)
 80014d2:	f001 fb35 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80014d6:	2340      	movs	r3, #64	; 0x40
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_GPIO_Init+0x184>)
 80014ea:	f001 fb29 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80014ee:	2328      	movs	r3, #40	; 0x28
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_GPIO_Init+0x188>)
 8001506:	f001 fb1b 	bl	8002b40 <HAL_GPIO_Init>

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40020400 	.word	0x40020400

08001528 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_I2C1_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C1_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_I2C1_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_I2C1_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_I2C1_Init+0x50>)
 8001566:	f001 fca1 	bl	8002eac <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 f9f8 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000005c 	.word	0x2000005c
 800157c:	40005400 	.word	0x40005400
 8001580:	000186a0 	.word	0x000186a0

08001584 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C3_Init+0x50>)
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <MX_I2C3_Init+0x54>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_I2C3_Init+0x50>)
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_I2C3_Init+0x58>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_I2C3_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_I2C3_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_I2C3_Init+0x50>)
 80015a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_I2C3_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_I2C3_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_I2C3_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_I2C3_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_I2C3_Init+0x50>)
 80015c2:	f001 fc73 	bl	8002eac <HAL_I2C_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015cc:	f000 f9ca 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000b0 	.word	0x200000b0
 80015d8:	40005c00 	.word	0x40005c00
 80015dc:	000186a0 	.word	0x000186a0

080015e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a42      	ldr	r2, [pc, #264]	; (8001708 <HAL_I2C_MspInit+0x128>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12c      	bne.n	800165c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a40      	ldr	r2, [pc, #256]	; (800170c <HAL_I2C_MspInit+0x12c>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162e:	2304      	movs	r3, #4
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4835      	ldr	r0, [pc, #212]	; (8001710 <HAL_I2C_MspInit+0x130>)
 800163a:	f001 fa81 	bl	8002b40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a31      	ldr	r2, [pc, #196]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800165a:	e050      	b.n	80016fe <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <HAL_I2C_MspInit+0x134>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d14b      	bne.n	80016fe <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_I2C_MspInit+0x12c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a27      	ldr	r2, [pc, #156]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_I2C_MspInit+0x12c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_I2C_MspInit+0x12c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_SDA_Pin;
 800169e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016b0:	2304      	movs	r3, #4
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_SDA_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4817      	ldr	r0, [pc, #92]	; (8001718 <HAL_I2C_MspInit+0x138>)
 80016bc:	f001 fa40 	bl	8002b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_SCL_Pin;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016d2:	2304      	movs	r3, #4
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_SCL_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	480f      	ldr	r0, [pc, #60]	; (800171c <HAL_I2C_MspInit+0x13c>)
 80016de:	f001 fa2f 	bl	8002b40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_I2C_MspInit+0x12c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_I2C_MspInit+0x12c>)
 80016ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_I2C_MspInit+0x12c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005400 	.word	0x40005400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400
 8001714:	40005c00 	.word	0x40005c00
 8001718:	40020800 	.word	0x40020800
 800171c:	40020000 	.word	0x40020000

08001720 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	led_number++;
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <Leds_Control_Blink+0x110>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b40      	ldr	r3, [pc, #256]	; (8001830 <Leds_Control_Blink+0x110>)
 800172e:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8001730:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <Leds_Control_Blink+0x110>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d102      	bne.n	800173e <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8001738:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <Leds_Control_Blink+0x110>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <Leds_Control_Blink+0x110>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	2b03      	cmp	r3, #3
 8001746:	d86f      	bhi.n	8001828 <Leds_Control_Blink+0x108>
 8001748:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <Leds_Control_Blink+0x30>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001761 	.word	0x08001761
 8001754:	08001793 	.word	0x08001793
 8001758:	080017c5 	.word	0x080017c5
 800175c:	080017f7 	.word	0x080017f7
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001766:	4833      	ldr	r0, [pc, #204]	; (8001834 <Leds_Control_Blink+0x114>)
 8001768:	f001 fb86 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001772:	4830      	ldr	r0, [pc, #192]	; (8001834 <Leds_Control_Blink+0x114>)
 8001774:	f001 fb80 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177e:	482d      	ldr	r0, [pc, #180]	; (8001834 <Leds_Control_Blink+0x114>)
 8001780:	f001 fb7a 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178a:	482a      	ldr	r0, [pc, #168]	; (8001834 <Leds_Control_Blink+0x114>)
 800178c:	f001 fb74 	bl	8002e78 <HAL_GPIO_WritePin>
		break;
 8001790:	e04b      	b.n	800182a <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <Leds_Control_Blink+0x114>)
 800179a:	f001 fb6d 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4823      	ldr	r0, [pc, #140]	; (8001834 <Leds_Control_Blink+0x114>)
 80017a6:	f001 fb67 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b0:	4820      	ldr	r0, [pc, #128]	; (8001834 <Leds_Control_Blink+0x114>)
 80017b2:	f001 fb61 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017bc:	481d      	ldr	r0, [pc, #116]	; (8001834 <Leds_Control_Blink+0x114>)
 80017be:	f001 fb5b 	bl	8002e78 <HAL_GPIO_WritePin>
		break;
 80017c2:	e032      	b.n	800182a <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	481a      	ldr	r0, [pc, #104]	; (8001834 <Leds_Control_Blink+0x114>)
 80017cc:	f001 fb54 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	4817      	ldr	r0, [pc, #92]	; (8001834 <Leds_Control_Blink+0x114>)
 80017d8:	f001 fb4e 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <Leds_Control_Blink+0x114>)
 80017e4:	f001 fb48 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <Leds_Control_Blink+0x114>)
 80017f0:	f001 fb42 	bl	8002e78 <HAL_GPIO_WritePin>
		break;
 80017f4:	e019      	b.n	800182a <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <Leds_Control_Blink+0x114>)
 80017fe:	f001 fb3b 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001808:	480a      	ldr	r0, [pc, #40]	; (8001834 <Leds_Control_Blink+0x114>)
 800180a:	f001 fb35 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <Leds_Control_Blink+0x114>)
 8001816:	f001 fb2f 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <Leds_Control_Blink+0x114>)
 8001822:	f001 fb29 	bl	8002e78 <HAL_GPIO_WritePin>
		break;
 8001826:	e000      	b.n	800182a <Leds_Control_Blink+0x10a>
	default:

		break;
 8001828:	bf00      	nop
	}
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	40020c00 	.word	0x40020c00

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183c:	f000 fccc 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001840:	f000 f826 	bl	8001890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001844:	f7ff fdaa 	bl	800139c <MX_GPIO_Init>
  MX_DMA_Init();
 8001848:	f7ff fd88 	bl	800135c <MX_DMA_Init>
  MX_I2C1_Init();
 800184c:	f7ff fe6c 	bl	8001528 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001850:	f7ff fe98 	bl	8001584 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001854:	f000 f88c 	bl	8001970 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001858:	f000 f8c0 	bl	80019dc <MX_SPI2_Init>
  MX_TIM3_Init();
 800185c:	f000 fa5a 	bl	8001d14 <MX_TIM3_Init>
  MX_UART5_Init();
 8001860:	f000 fb9c 	bl	8001f9c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001864:	f000 fbc4 	bl	8001ff0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001868:	f000 faae 	bl	8001dc8 <MX_TIM10_Init>
  MX_TIM11_Init();
 800186c:	f000 fad0 	bl	8001e10 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 8001870:	f7fe fe2c 	bl	80004cc <ILI9341_Init>

  DisplayMainScreen();
 8001874:	f7ff fc16 	bl	80010a4 <DisplayMainScreen>
  HAL_TIM_Base_Start_IT(&htim10);
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <main+0x50>)
 800187a:	f002 fcf1 	bl	8004260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <main+0x54>)
 8001880:	f002 fcee 	bl	8004260 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001884:	e7fe      	b.n	8001884 <main+0x4c>
 8001886:	bf00      	nop
 8001888:	20000260 	.word	0x20000260
 800188c:	200002a8 	.word	0x200002a8

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	; 0x50
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2230      	movs	r2, #48	; 0x30
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fd70 	bl	8005384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <SystemClock_Config+0xcc>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <SystemClock_Config+0xcc>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <SystemClock_Config+0xcc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <SystemClock_Config+0xd0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <SystemClock_Config+0xd0>)
 80018da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <SystemClock_Config+0xd0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001904:	23a0      	movs	r3, #160	; 0xa0
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001908:	2302      	movs	r3, #2
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800190c:	2304      	movs	r3, #4
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fc0d 	bl	8003134 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001920:	f000 f820 	bl	8001964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2105      	movs	r1, #5
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fe6e 	bl	8003624 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800194e:	f000 f809 	bl	8001964 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	; 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x8>
	...

08001970 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_SPI1_Init+0x64>)
 8001976:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <MX_SPI1_Init+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_SPI1_Init+0x64>)
 800197c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_SPI1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_SPI1_Init+0x64>)
 800199c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_SPI1_Init+0x64>)
 80019a4:	2210      	movs	r2, #16
 80019a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_SPI1_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_SPI1_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_SPI1_Init+0x64>)
 80019bc:	220a      	movs	r2, #10
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_SPI1_Init+0x64>)
 80019c2:	f002 f84f 	bl	8003a64 <HAL_SPI_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019cc:	f7ff ffca 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000104 	.word	0x20000104
 80019d8:	40013000 	.word	0x40013000

080019dc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_SPI2_Init+0x64>)
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <MX_SPI2_Init+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_SPI2_Init+0x64>)
 80019e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_SPI2_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_SPI2_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_SPI2_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a28:	220a      	movs	r2, #10
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_SPI2_Init+0x64>)
 8001a2e:	f002 f819 	bl	8003a64 <HAL_SPI_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a38:	f7ff ff94 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000015c 	.word	0x2000015c
 8001a44:	40003800 	.word	0x40003800

08001a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_SPI_MspInit+0x154>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12c      	bne.n	8001ac4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_SCK_Pin|DAB_MISO_Pin|DAB_MOSI_Pin;
 8001aa2:	23e0      	movs	r3, #224	; 0xe0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4839      	ldr	r0, [pc, #228]	; (8001ba4 <HAL_SPI_MspInit+0x15c>)
 8001abe:	f001 f83f 	bl	8002b40 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ac2:	e066      	b.n	8001b92 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <HAL_SPI_MspInit+0x160>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d161      	bne.n	8001b92 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_SPI_MspInit+0x158>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8001b06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4822      	ldr	r0, [pc, #136]	; (8001bac <HAL_SPI_MspInit+0x164>)
 8001b24:	f001 f80c 	bl	8002b40 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b2a:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_SPI_MspInit+0x16c>)
 8001b2c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b46:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b66:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b68:	f000 fcde 	bl	8002528 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8001b72:	f7ff fef7 	bl	8001964 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b7a:	649a      	str	r2, [r3, #72]	; 0x48
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_SPI_MspInit+0x168>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2024      	movs	r0, #36	; 0x24
 8001b88:	f000 fc97 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b8c:	2024      	movs	r0, #36	; 0x24
 8001b8e:	f000 fcb0 	bl	80024f2 <HAL_NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3730      	adds	r7, #48	; 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40013000 	.word	0x40013000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40003800 	.word	0x40003800
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	200001b4 	.word	0x200001b4
 8001bb4:	40026070 	.word	0x40026070

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_MspInit+0x4c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_MspInit+0x4c>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	systick_ticks++;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SysTick_Handler+0x18>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <SysTick_Handler+0x18>)
 8001c5e:	801a      	strh	r2, [r3, #0]
//		DisplayTestCounter(systick_ticks);
//
//	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 fb0c 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000214 	.word	0x20000214

08001c6c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <DMA1_Stream4_IRQHandler+0x10>)
 8001c72:	f000 fd29 	bl	80026c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200001b4 	.word	0x200001b4

08001c80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c86:	f002 fbaa 	bl	80043de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000260 	.word	0x20000260

08001c94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c9a:	f002 fba0 	bl	80043de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200002a8 	.word	0x200002a8

08001ca8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <SPI2_IRQHandler+0x10>)
 8001cae:	f002 f89f 	bl	8003df0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000015c 	.word	0x2000015c

08001cbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		DisplayTest();
 8001cce:	f7ff fb23 	bl	8001318 <DisplayTest>
	}

	if(htim->Instance==TIM11)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		Leds_Control_Blink();
 8001cdc:	f7ff fd20 	bl	8001720 <Leds_Control_Blink>
//		DisplayTestCounter(systick_ticks);

	}
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40014800 	.word	0x40014800

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <MX_TIM3_Init+0xb0>)
 8001d3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d5c:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d5e:	f002 faef 	bl	8004340 <HAL_TIM_PWM_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d68:	f7ff fdfc 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001d7c:	f002 ff72 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d86:	f7ff fded 	bl	8001964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8a:	2360      	movs	r3, #96	; 0x60
 8001d8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001da2:	f002 fc25 	bl	80045f0 <HAL_TIM_PWM_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001dac:	f7ff fdda 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <MX_TIM3_Init+0xac>)
 8001db2:	f000 f8b9 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000218 	.word	0x20000218
 8001dc4:	40000400 	.word	0x40000400

08001dc8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <MX_TIM10_Init+0x44>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001dd4:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001dd8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001de2:	f240 2257 	movw	r2, #599	; 0x257
 8001de6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_TIM10_Init+0x40>)
 8001df6:	f002 f9e3 	bl	80041c0 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001e00:	f7ff fdb0 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000260 	.word	0x20000260
 8001e0c:	40014400 	.word	0x40014400

08001e10 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <MX_TIM11_Init+0x44>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e1c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001e20:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1199;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e2a:	f240 42af 	movw	r2, #1199	; 0x4af
 8001e2e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_TIM11_Init+0x40>)
 8001e3e:	f002 f9bf 	bl	80041c0 <HAL_TIM_Base_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001e48:	f7ff fd8c 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200002a8 	.word	0x200002a8
 8001e54:	40014800 	.word	0x40014800

08001e58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10d      	bne.n	8001e86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_TIM_PWM_MspInit+0x40>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_TIM_PWM_MspInit+0x40>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_TIM_PWM_MspInit+0x40>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40023800 	.word	0x40023800

08001e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_TIM_Base_MspInit+0x80>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d116      	bne.n	8001edc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2019      	movs	r0, #25
 8001ed0:	f000 faf3 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ed4:	2019      	movs	r0, #25
 8001ed6:	f000 fb0c 	bl	80024f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001eda:	e01a      	b.n	8001f12 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_TIM_Base_MspInit+0x88>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d115      	bne.n	8001f12 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	201a      	movs	r0, #26
 8001f08:	f000 fad7 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f0c:	201a      	movs	r0, #26
 8001f0e:	f000 faf0 	bl	80024f2 <HAL_NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40014400 	.word	0x40014400
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40014800 	.word	0x40014800

08001f28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_TIM_MspPostInit+0x68>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11e      	bne.n	8001f88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_TIM_MspPostInit+0x6c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_TIM_MspPostInit+0x6c>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_TIM_MspPostInit+0x6c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8001f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <HAL_TIM_MspPostInit+0x70>)
 8001f84:	f000 fddc 	bl	8002b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020800 	.word	0x40020800

08001f9c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_UART5_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_UART5_Init+0x4c>)
 8001fd4:	f002 fed6 	bl	8004d84 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001fde:	f7ff fcc1 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200002f0 	.word	0x200002f0
 8001fec:	40005000 	.word	0x40005000

08001ff0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_USART3_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_USART3_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <MX_USART3_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002028:	f002 feac 	bl	8004d84 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002032:	f7ff fc97 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000334 	.word	0x20000334
 8002040:	40004800 	.word	0x40004800

08002044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a42      	ldr	r2, [pc, #264]	; (800216c <HAL_UART_MspInit+0x128>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d14b      	bne.n	80020fe <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_UART_MspInit+0x12c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a40      	ldr	r2, [pc, #256]	; (8002170 <HAL_UART_MspInit+0x12c>)
 8002070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_UART_MspInit+0x12c>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_UART_MspInit+0x12c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a39      	ldr	r2, [pc, #228]	; (8002170 <HAL_UART_MspInit+0x12c>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_UART_MspInit+0x12c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_UART_MspInit+0x12c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a32      	ldr	r2, [pc, #200]	; (8002170 <HAL_UART_MspInit+0x12c>)
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_UART_MspInit+0x12c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020cc:	2308      	movs	r3, #8
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	4827      	ldr	r0, [pc, #156]	; (8002174 <HAL_UART_MspInit+0x130>)
 80020d8:	f000 fd32 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020dc:	2304      	movs	r3, #4
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020ec:	2308      	movs	r3, #8
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4820      	ldr	r0, [pc, #128]	; (8002178 <HAL_UART_MspInit+0x134>)
 80020f8:	f000 fd22 	bl	8002b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020fc:	e031      	b.n	8002162 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_UART_MspInit+0x138>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d12c      	bne.n	8002162 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_UART_MspInit+0x12c>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_UART_MspInit+0x12c>)
 8002112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_UART_MspInit+0x12c>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_UART_MspInit+0x12c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_UART_MspInit+0x12c>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_UART_MspInit+0x12c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8002140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002152:	2307      	movs	r3, #7
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <HAL_UART_MspInit+0x13c>)
 800215e:	f000 fcef 	bl	8002b40 <HAL_GPIO_Init>
}
 8002162:	bf00      	nop
 8002164:	3730      	adds	r7, #48	; 0x30
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40005000 	.word	0x40005000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40004800 	.word	0x40004800
 8002180:	40020400 	.word	0x40020400

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218a:	490e      	ldr	r1, [pc, #56]	; (80021c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a0:	4c0b      	ldr	r4, [pc, #44]	; (80021d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ae:	f7ff fd9f 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b2:	f003 f8a9 	bl	8005308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7ff fb3f 	bl	8001838 <main>
  bx  lr    
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80021c8:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 80021cc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80021d0:	2000037c 	.word	0x2000037c

080021d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC_IRQHandler>
	...

080021d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <HAL_Init+0x40>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <HAL_Init+0x40>)
 80021ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a07      	ldr	r2, [pc, #28]	; (8002218 <HAL_Init+0x40>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002200:	2003      	movs	r0, #3
 8002202:	f000 f94f 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002206:	200f      	movs	r0, #15
 8002208:	f000 f808 	bl	800221c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220c:	f7ff fcd4 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x54>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_InitTick+0x58>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002232:	fbb3 f3f1 	udiv	r3, r3, r1
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f967 	bl	800250e <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e00e      	b.n	8002268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d80a      	bhi.n	8002266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f000 f92f 	bl	80024ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_InitTick+0x5c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000000c 	.word	0x2000000c
 8002274:	20000014 	.word	0x20000014
 8002278:	20000010 	.word	0x20000010

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000014 	.word	0x20000014
 80022a0:	20000378 	.word	0x20000378

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000378 	.word	0x20000378

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000014 	.word	0x20000014

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff29 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff3e 	bl	800234c <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff8e 	bl	80023f8 <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5d 	bl	80023a4 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff31 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffa2 	bl	8002460 <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff feb6 	bl	80022a4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e099      	b.n	8002678 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002564:	e00f      	b.n	8002586 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002566:	f7ff fe9d 	bl	80022a4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b05      	cmp	r3, #5
 8002572:	d908      	bls.n	8002586 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2203      	movs	r2, #3
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e078      	b.n	8002678 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e8      	bne.n	8002566 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_DMA_Init+0x158>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d107      	bne.n	80025f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4313      	orrs	r3, r2
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f023 0307 	bic.w	r3, r3, #7
 8002606:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b04      	cmp	r3, #4
 8002618:	d117      	bne.n	800264a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00e      	beq.n	800264a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa0b 	bl	8002a48 <DMA_CheckFifoParam>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002646:	2301      	movs	r3, #1
 8002648:	e016      	b.n	8002678 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9c2 	bl	80029dc <DMA_CalcBaseAndBitshift>
 8002658:	4603      	mov	r3, r0
 800265a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	223f      	movs	r2, #63	; 0x3f
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	f010803f 	.word	0xf010803f

08002684 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d004      	beq.n	80026a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00c      	b.n	80026bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2205      	movs	r2, #5
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d4:	4b8e      	ldr	r3, [pc, #568]	; (8002910 <HAL_DMA_IRQHandler+0x248>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a8e      	ldr	r2, [pc, #568]	; (8002914 <HAL_DMA_IRQHandler+0x24c>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2208      	movs	r2, #8
 80026f4:	409a      	lsls	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01a      	beq.n	8002734 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0204 	bic.w	r2, r2, #4
 800271a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2208      	movs	r2, #8
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2201      	movs	r2, #1
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d012      	beq.n	800276a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2201      	movs	r2, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f043 0202 	orr.w	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	2204      	movs	r2, #4
 8002770:	409a      	lsls	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d012      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2204      	movs	r2, #4
 800278e:	409a      	lsls	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2210      	movs	r2, #16
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d043      	beq.n	8002838 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03c      	beq.n	8002838 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	2210      	movs	r2, #16
 80027c4:	409a      	lsls	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d018      	beq.n	800280a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d108      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d024      	beq.n	8002838 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
 80027f6:	e01f      	b.n	8002838 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01b      	beq.n	8002838 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
 8002808:	e016      	b.n	8002838 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0208 	bic.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2220      	movs	r2, #32
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 808f 	beq.w	8002968 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8087 	beq.w	8002968 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2220      	movs	r2, #32
 8002860:	409a      	lsls	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b05      	cmp	r3, #5
 8002870:	d136      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0216 	bic.w	r2, r2, #22
 8002880:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002890:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x1da>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0208 	bic.w	r2, r2, #8
 80028b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	223f      	movs	r2, #63	; 0x3f
 80028b8:	409a      	lsls	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d07e      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
        }
        return;
 80028de:	e079      	b.n	80029d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01d      	beq.n	800292a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	2b00      	cmp	r3, #0
 8002902:	d031      	beq.n	8002968 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
 800290c:	e02c      	b.n	8002968 <HAL_DMA_IRQHandler+0x2a0>
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c
 8002914:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	e01e      	b.n	8002968 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0210 	bic.w	r2, r2, #16
 8002946:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	2b00      	cmp	r3, #0
 800296e:	d032      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d022      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2205      	movs	r2, #5
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3301      	adds	r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	d307      	bcc.n	80029b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f2      	bne.n	8002994 <HAL_DMA_IRQHandler+0x2cc>
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e000      	b.n	80029d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029d4:	bf00      	nop
    }
  }
}
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	3b10      	subs	r3, #16
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <DMA_CalcBaseAndBitshift+0x64>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <DMA_CalcBaseAndBitshift+0x68>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d909      	bls.n	8002a1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a1c:	e007      	b.n	8002a2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	aaaaaaab 	.word	0xaaaaaaab
 8002a44:	08005d6c 	.word	0x08005d6c

08002a48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11f      	bne.n	8002aa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d856      	bhi.n	8002b16 <DMA_CheckFifoParam+0xce>
 8002a68:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <DMA_CheckFifoParam+0x28>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a93 	.word	0x08002a93
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002b17 	.word	0x08002b17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d046      	beq.n	8002b1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e043      	b.n	8002b1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a9a:	d140      	bne.n	8002b1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa0:	e03d      	b.n	8002b1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	d121      	bne.n	8002af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d837      	bhi.n	8002b22 <DMA_CheckFifoParam+0xda>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <DMA_CheckFifoParam+0x70>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002acf 	.word	0x08002acf
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002ae1 	.word	0x08002ae1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e030      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d025      	beq.n	8002b26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ade:	e022      	b.n	8002b26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae8:	d11f      	bne.n	8002b2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aee:	e01c      	b.n	8002b2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d903      	bls.n	8002afe <DMA_CheckFifoParam+0xb6>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d003      	beq.n	8002b04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002afc:	e018      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      break;
 8002b02:	e015      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00e      	beq.n	8002b2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e00b      	b.n	8002b2e <DMA_CheckFifoParam+0xe6>
      break;
 8002b16:	bf00      	nop
 8002b18:	e00a      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e008      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e006      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b22:	bf00      	nop
 8002b24:	e004      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
 8002b28:	e002      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	e16b      	b.n	8002e34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	f040 815a 	bne.w	8002e2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d005      	beq.n	8002b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d130      	bne.n	8002bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d017      	beq.n	8002c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d123      	bne.n	8002c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	08da      	lsrs	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3208      	adds	r2, #8
 8002c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	08da      	lsrs	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3208      	adds	r2, #8
 8002c7e:	69b9      	ldr	r1, [r7, #24]
 8002c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b4 	beq.w	8002e2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <HAL_GPIO_Init+0x30c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4a5f      	ldr	r2, [pc, #380]	; (8002e4c <HAL_GPIO_Init+0x30c>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	4b5d      	ldr	r3, [pc, #372]	; (8002e4c <HAL_GPIO_Init+0x30c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce2:	4a5b      	ldr	r2, [pc, #364]	; (8002e50 <HAL_GPIO_Init+0x310>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_GPIO_Init+0x314>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02b      	beq.n	8002d66 <HAL_GPIO_Init+0x226>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a51      	ldr	r2, [pc, #324]	; (8002e58 <HAL_GPIO_Init+0x318>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d025      	beq.n	8002d62 <HAL_GPIO_Init+0x222>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a50      	ldr	r2, [pc, #320]	; (8002e5c <HAL_GPIO_Init+0x31c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <HAL_GPIO_Init+0x21e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4f      	ldr	r2, [pc, #316]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x21a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4e      	ldr	r2, [pc, #312]	; (8002e64 <HAL_GPIO_Init+0x324>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x216>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4d      	ldr	r2, [pc, #308]	; (8002e68 <HAL_GPIO_Init+0x328>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <HAL_GPIO_Init+0x32c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x20e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_GPIO_Init+0x330>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x20a>
 8002d46:	2307      	movs	r3, #7
 8002d48:	e00e      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	e00c      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d4e:	2306      	movs	r3, #6
 8002d50:	e00a      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d52:	2305      	movs	r3, #5
 8002d54:	e008      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e004      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d66:	2300      	movs	r3, #0
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4093      	lsls	r3, r2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d78:	4935      	ldr	r1, [pc, #212]	; (8002e50 <HAL_GPIO_Init+0x310>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002daa:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd4:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e28:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	f67f ae90 	bls.w	8002b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40021400 	.word	0x40021400
 8002e6c:	40021800 	.word	0x40021800
 8002e70:	40021c00 	.word	0x40021c00
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e12b      	b.n	8003116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fb84 	bl	80015e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	; 0x24
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f10:	f000 fd80 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a81      	ldr	r2, [pc, #516]	; (8003120 <HAL_I2C_Init+0x274>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d807      	bhi.n	8002f30 <HAL_I2C_Init+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a80      	ldr	r2, [pc, #512]	; (8003124 <HAL_I2C_Init+0x278>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e006      	b.n	8002f3e <HAL_I2C_Init+0x92>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a7d      	ldr	r2, [pc, #500]	; (8003128 <HAL_I2C_Init+0x27c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0e7      	b.n	8003116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a78      	ldr	r2, [pc, #480]	; (800312c <HAL_I2C_Init+0x280>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_I2C_Init+0x274>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d802      	bhi.n	8002f80 <HAL_I2C_Init+0xd4>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	e009      	b.n	8002f94 <HAL_I2C_Init+0xe8>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	4a69      	ldr	r2, [pc, #420]	; (8003130 <HAL_I2C_Init+0x284>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	3301      	adds	r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	495c      	ldr	r1, [pc, #368]	; (8003120 <HAL_I2C_Init+0x274>)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d819      	bhi.n	8002fe8 <HAL_I2C_Init+0x13c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1e59      	subs	r1, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fc8:	400b      	ands	r3, r1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_I2C_Init+0x138>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e59      	subs	r1, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe2:	e051      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e04f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_I2C_Init+0x168>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_I2C_Init+0x18e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x196>
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_I2C_Init+0x1bc>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e58      	subs	r0, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	fbb0 f3f3 	udiv	r3, r0, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6809      	ldr	r1, [r1, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6911      	ldr	r1, [r2, #16]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	000186a0 	.word	0x000186a0
 8003124:	001e847f 	.word	0x001e847f
 8003128:	003d08ff 	.word	0x003d08ff
 800312c:	431bde83 	.word	0x431bde83
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e267      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003152:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d00c      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b85      	ldr	r3, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	2b08      	cmp	r3, #8
 8003168:	d112      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b82      	ldr	r3, [pc, #520]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e242      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b70      	ldr	r3, [pc, #448]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6f      	ldr	r2, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6c      	ldr	r2, [pc, #432]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b69      	ldr	r3, [pc, #420]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a68      	ldr	r2, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff f85a 	bl	80022a4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7ff f856 	bl	80022a4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e207      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7ff f846 	bl	80022a4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff f842 	bl	80022a4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1f3      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324a:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1c7      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b34      	ldr	r3, [pc, #208]	; (8003378 <HAL_RCC_OscConfig+0x244>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fffb 	bl	80022a4 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe fff7 	bl	80022a4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1a8      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4925      	ldr	r1, [pc, #148]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x244>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe ffda 	bl	80022a4 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fe ffd6 	bl	80022a4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e187      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d036      	beq.n	800338c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_RCC_OscConfig+0x248>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe ffba 	bl	80022a4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe ffb6 	bl	80022a4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e167      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
 8003352:	e01b      	b.n	800338c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_OscConfig+0x248>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7fe ffa3 	bl	80022a4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e00e      	b.n	8003380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003362:	f7fe ff9f 	bl	80022a4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d907      	bls.n	8003380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e150      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ea      	bne.n	8003362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8097 	beq.w	80034c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b7d      	ldr	r3, [pc, #500]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a7c      	ldr	r2, [pc, #496]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b7a      	ldr	r3, [pc, #488]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b74      	ldr	r3, [pc, #464]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a73      	ldr	r2, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe ff5f 	bl	80022a4 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe ff5b 	bl	80022a4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e10c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x2ea>
 8003410:	4b64      	ldr	r3, [pc, #400]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a63      	ldr	r2, [pc, #396]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	e01c      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x30c>
 8003426:	4b5f      	ldr	r3, [pc, #380]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5e      	ldr	r2, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b5c      	ldr	r3, [pc, #368]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 8003440:	4b58      	ldr	r3, [pc, #352]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	; 0x70
 800344c:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a54      	ldr	r2, [pc, #336]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe ff20 	bl	80022a4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fe ff1c 	bl	80022a4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0cb      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCC_OscConfig+0x334>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fe ff0a 	bl	80022a4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe ff06 	bl	80022a4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0b5      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a1 	beq.w	8003614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d05c      	beq.n	8003598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d141      	bne.n	800356a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe feda 	bl	80022a4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fed6 	bl	80022a4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e087      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x478>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe feaf 	bl	80022a4 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe feab 	bl	80022a4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e05c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x416>
 8003568:	e054      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCC_OscConfig+0x478>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fe98 	bl	80022a4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fe94 	bl	80022a4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e045      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
 8003596:	e03d      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e038      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x4ec>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d028      	beq.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d121      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cc      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d90c      	bls.n	8003660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a58      	ldr	r2, [pc, #352]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d044      	beq.n	8003744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d119      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e067      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4934      	ldr	r1, [pc, #208]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003714:	f7fe fdc6 	bl	80022a4 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fdc2 	bl	80022a4 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e04f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d20c      	bcs.n	800376c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f821 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fd26 	bl	800221c <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08005d54 	.word	0x08005d54
 80037e8:	2000000c 	.word	0x2000000c
 80037ec:	20000010 	.word	0x20000010

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b094      	sub	sp, #80	; 0x50
 80037f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	647b      	str	r3, [r7, #68]	; 0x44
 80037fc:	2300      	movs	r3, #0
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003800:	2300      	movs	r3, #0
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003808:	4b79      	ldr	r3, [pc, #484]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d00d      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x40>
 8003814:	2b08      	cmp	r3, #8
 8003816:	f200 80e1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x34>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x3a>
 8003822:	e0db      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003826:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003828:	e0db      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382a:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800382e:	e0d8      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003830:	4b6f      	ldr	r3, [pc, #444]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003838:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383a:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d063      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003850:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
 800385e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	0159      	lsls	r1, r3, #5
 8003870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003874:	0150      	lsls	r0, r2, #5
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4621      	mov	r1, r4
 800387c:	1a51      	subs	r1, r2, r1
 800387e:	6139      	str	r1, [r7, #16]
 8003880:	4629      	mov	r1, r5
 8003882:	eb63 0301 	sbc.w	r3, r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	018b      	lsls	r3, r1, #6
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389e:	4651      	mov	r1, sl
 80038a0:	018a      	lsls	r2, r1, #6
 80038a2:	4651      	mov	r1, sl
 80038a4:	ebb2 0801 	subs.w	r8, r2, r1
 80038a8:	4659      	mov	r1, fp
 80038aa:	eb63 0901 	sbc.w	r9, r3, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c2:	4690      	mov	r8, r2
 80038c4:	4699      	mov	r9, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	eb18 0303 	adds.w	r3, r8, r3
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	462b      	mov	r3, r5
 80038d0:	eb49 0303 	adc.w	r3, r9, r3
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038e2:	4629      	mov	r1, r5
 80038e4:	024b      	lsls	r3, r1, #9
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038ec:	4621      	mov	r1, r4
 80038ee:	024a      	lsls	r2, r1, #9
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f6:	2200      	movs	r2, #0
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003900:	f7fc fc62 	bl	80001c8 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800390c:	e058      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	4618      	mov	r0, r3
 8003918:	4611      	mov	r1, r2
 800391a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	0159      	lsls	r1, r3, #5
 8003936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393a:	0150      	lsls	r0, r2, #5
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4641      	mov	r1, r8
 8003942:	ebb2 0a01 	subs.w	sl, r2, r1
 8003946:	4649      	mov	r1, r9
 8003948:	eb63 0b01 	sbc.w	fp, r3, r1
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800395c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003960:	ebb2 040a 	subs.w	r4, r2, sl
 8003964:	eb63 050b 	sbc.w	r5, r3, fp
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	00eb      	lsls	r3, r5, #3
 8003972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	4643      	mov	r3, r8
 800397e:	18e3      	adds	r3, r4, r3
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	464b      	mov	r3, r9
 8003984:	eb45 0303 	adc.w	r3, r5, r3
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003996:	4629      	mov	r1, r5
 8003998:	028b      	lsls	r3, r1, #10
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a0:	4621      	mov	r1, r4
 80039a2:	028a      	lsls	r2, r1, #10
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039aa:	2200      	movs	r2, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	61fa      	str	r2, [r7, #28]
 80039b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b4:	f7fc fc08 	bl	80001c8 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3750      	adds	r7, #80	; 0x50
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000000c 	.word	0x2000000c

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	08005d64 	.word	0x08005d64

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a40:	f7ff ffdc 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0b5b      	lsrs	r3, r3, #13
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4903      	ldr	r1, [pc, #12]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	08005d64 	.word	0x08005d64

08003a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07b      	b.n	8003b6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a86:	d009      	beq.n	8003a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
 8003a8e:	e005      	b.n	8003a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd ffc6 	bl	8001a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0104 	and.w	r1, r3, #4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0210 	and.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b088      	sub	sp, #32
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_SPI_Transmit+0x22>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e126      	b.n	8003de6 <HAL_SPI_Transmit+0x270>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba0:	f7fe fb80 	bl	80022a4 <HAL_GetTick>
 8003ba4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d002      	beq.n	8003bbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bba:	e10b      	b.n	8003dd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Transmit+0x52>
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bcc:	e102      	b.n	8003dd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c14:	d10f      	bne.n	8003c36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d007      	beq.n	8003c54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d14b      	bne.n	8003cf6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Transmit+0xf6>
 8003c66:	8afb      	ldrh	r3, [r7, #22]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d13e      	bne.n	8003cea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c90:	e02b      	b.n	8003cea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d112      	bne.n	8003cc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cc4:	e011      	b.n	8003cea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc6:	f7fe faed 	bl	80022a4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d803      	bhi.n	8003cde <HAL_SPI_Transmit+0x168>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Transmit+0x16e>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce8:	e074      	b.n	8003dd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ce      	bne.n	8003c92 <HAL_SPI_Transmit+0x11c>
 8003cf4:	e04c      	b.n	8003d90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_Transmit+0x18e>
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d140      	bne.n	8003d86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	7812      	ldrb	r2, [r2, #0]
 8003d10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d2a:	e02c      	b.n	8003d86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d113      	bne.n	8003d62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d60:	e011      	b.n	8003d86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d62:	f7fe fa9f 	bl	80022a4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d803      	bhi.n	8003d7a <HAL_SPI_Transmit+0x204>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d102      	bne.n	8003d80 <HAL_SPI_Transmit+0x20a>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d84:	e026      	b.n	8003dd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1cd      	bne.n	8003d2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	6839      	ldr	r1, [r7, #0]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f9d1 	bl	800413c <SPI_EndRxTxTransaction>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e000      	b.n	8003dd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003dd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
    return;
 8003e32:	e0d7      	b.n	8003fe4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_SPI_IRQHandler+0x66>
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	09db      	lsrs	r3, r3, #7
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
    return;
 8003e54:	e0c6      	b.n	8003fe4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <HAL_SPI_IRQHandler+0x8c>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80b4 	beq.w	8003fe4 <HAL_SPI_IRQHandler+0x1f4>
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80ad 	beq.w	8003fe4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d023      	beq.n	8003ede <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d011      	beq.n	8003ec6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 0204 	orr.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	e00b      	b.n	8003ede <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	693b      	ldr	r3, [r7, #16]
        return;
 8003edc:	e082      	b.n	8003fe4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00c      	beq.n	8003f3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0208 	orr.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04f      	beq.n	8003fe2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <HAL_SPI_IRQHandler+0x17e>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d034      	beq.n	8003fd8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0203 	bic.w	r2, r2, #3
 8003f7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d011      	beq.n	8003faa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_SPI_IRQHandler+0x1fc>)
 8003f8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fb76 	bl	8002684 <HAL_DMA_Abort_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <HAL_SPI_IRQHandler+0x1fc>)
 8003fb8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fb60 	bl	8002684 <HAL_DMA_Abort_IT>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003fd6:	e003      	b.n	8003fe0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f809 	bl	8003ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003fde:	e000      	b.n	8003fe2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003fe0:	bf00      	nop
    return;
 8003fe2:	bf00      	nop
  }
}
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	08004005 	.word	0x08004005

08003ff0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ffe6 	bl	8003ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800403c:	f7fe f932 	bl	80022a4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4413      	add	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800404c:	f7fe f92a 	bl	80022a4 <HAL_GetTick>
 8004050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004052:	4b39      	ldr	r3, [pc, #228]	; (8004138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	015b      	lsls	r3, r3, #5
 8004058:	0d1b      	lsrs	r3, r3, #20
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004062:	e054      	b.n	800410e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d050      	beq.n	800410e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406c:	f7fe f91a 	bl	80022a4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	429a      	cmp	r2, r3
 800407a:	d902      	bls.n	8004082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d13d      	bne.n	80040fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d111      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a4:	d004      	beq.n	80040b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d107      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c8:	d10f      	bne.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e017      	b.n	800412e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3b01      	subs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d19b      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c

0800413c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <SPI_EndRxTxTransaction+0x7c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <SPI_EndRxTxTransaction+0x80>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0d5b      	lsrs	r3, r3, #21
 8004154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004166:	d112      	bne.n	800418e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff5a 	bl	800402c <SPI_WaitFlagStateUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d016      	beq.n	80041ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e00f      	b.n	80041ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3b01      	subs	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d0f2      	beq.n	800418e <SPI_EndRxTxTransaction+0x52>
 80041a8:	e000      	b.n	80041ac <SPI_EndRxTxTransaction+0x70>
        break;
 80041aa:	bf00      	nop
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c
 80041bc:	165e9f81 	.word	0x165e9f81

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e041      	b.n	8004256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd fe58 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 fae0 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e04e      	b.n	8004316 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <HAL_TIM_Base_Start_IT+0xc4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d01d      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_TIM_Base_Start_IT+0xc8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_TIM_Base_Start_IT+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_TIM_Base_Start_IT+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_TIM_Base_Start_IT+0xd4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_TIM_Base_Start_IT+0xd8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x80>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_TIM_Base_Start_IT+0xdc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d111      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d010      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e007      	b.n	8004314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40010400 	.word	0x40010400
 8004338:	40014000 	.word	0x40014000
 800433c:	40001800 	.word	0x40001800

08004340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e041      	b.n	80043d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd fd76 	bl	8001e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 fa20 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d122      	bne.n	800443a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d11b      	bne.n	800443a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0202 	mvn.w	r2, #2
 800440a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f9b1 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004426:	e005      	b.n	8004434 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f9a3 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9b4 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d122      	bne.n	800448e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d11b      	bne.n	800448e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0204 	mvn.w	r2, #4
 800445e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f987 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 800447a:	e005      	b.n	8004488 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f979 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f98a 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b08      	cmp	r3, #8
 800449a:	d122      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d11b      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0208 	mvn.w	r2, #8
 80044b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2204      	movs	r2, #4
 80044b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f95d 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80044ce:	e005      	b.n	80044dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f94f 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f960 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d122      	bne.n	8004536 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d11b      	bne.n	8004536 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0210 	mvn.w	r2, #16
 8004506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2208      	movs	r2, #8
 800450c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f933 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004522:	e005      	b.n	8004530 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f925 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f936 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d10e      	bne.n	8004562 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0201 	mvn.w	r2, #1
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fd fbad 	bl	8001cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d10e      	bne.n	800458e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d107      	bne.n	800458e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fbf1 	bl	8004d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d10e      	bne.n	80045ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d107      	bne.n	80045ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8fb 	bl	80047b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d10e      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d107      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0220 	mvn.w	r2, #32
 80045de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fbbb 	bl	8004d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800460a:	2302      	movs	r3, #2
 800460c:	e0ae      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	f200 809f 	bhi.w	800475c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004659 	.word	0x08004659
 8004628:	0800475d 	.word	0x0800475d
 800462c:	0800475d 	.word	0x0800475d
 8004630:	0800475d 	.word	0x0800475d
 8004634:	08004699 	.word	0x08004699
 8004638:	0800475d 	.word	0x0800475d
 800463c:	0800475d 	.word	0x0800475d
 8004640:	0800475d 	.word	0x0800475d
 8004644:	080046db 	.word	0x080046db
 8004648:	0800475d 	.word	0x0800475d
 800464c:	0800475d 	.word	0x0800475d
 8004650:	0800475d 	.word	0x0800475d
 8004654:	0800471b 	.word	0x0800471b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f950 	bl	8004904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0208 	orr.w	r2, r2, #8
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0204 	bic.w	r2, r2, #4
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	619a      	str	r2, [r3, #24]
      break;
 8004696:	e064      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f9a0 	bl	80049e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	619a      	str	r2, [r3, #24]
      break;
 80046d8:	e043      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f9f5 	bl	8004ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0208 	orr.w	r2, r2, #8
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0204 	bic.w	r2, r2, #4
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	61da      	str	r2, [r3, #28]
      break;
 8004718:	e023      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fa49 	bl	8004bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69d9      	ldr	r1, [r3, #28]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	021a      	lsls	r2, r3, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	61da      	str	r2, [r3, #28]
      break;
 800475a:	e002      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
      break;
 8004760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3d      	ldr	r2, [pc, #244]	; (80048dc <TIM_Base_SetConfig+0x118>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3b      	ldr	r2, [pc, #236]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d027      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <TIM_Base_SetConfig+0x118>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d023      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <TIM_Base_SetConfig+0x128>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <TIM_Base_SetConfig+0x12c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <TIM_Base_SetConfig+0x130>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x134>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <TIM_Base_SetConfig+0x138>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	; (8004900 <TIM_Base_SetConfig+0x13c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	40001800 	.word	0x40001800
 80048fc:	40001c00 	.word	0x40001c00
 8004900:	40002000 	.word	0x40002000

08004904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <TIM_OC1_SetConfig+0xd8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_OC1_SetConfig+0x64>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <TIM_OC1_SetConfig+0xdc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0308 	bic.w	r3, r3, #8
 800496e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <TIM_OC1_SetConfig+0xd8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC1_SetConfig+0x8e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <TIM_OC1_SetConfig+0xdc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d111      	bne.n	80049b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400

080049e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0320 	bic.w	r3, r3, #32
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <TIM_OC2_SetConfig+0xe4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC2_SetConfig+0x68>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a21      	ldr	r2, [pc, #132]	; (8004acc <TIM_OC2_SetConfig+0xe8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d10d      	bne.n	8004a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC2_SetConfig+0xe4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC2_SetConfig+0x94>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <TIM_OC2_SetConfig+0xe8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d113      	bne.n	8004aa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400

08004ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <TIM_OC3_SetConfig+0xe0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC3_SetConfig+0x66>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <TIM_OC3_SetConfig+0xe4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10d      	bne.n	8004b52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <TIM_OC3_SetConfig+0xe0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC3_SetConfig+0x92>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <TIM_OC3_SetConfig+0xe4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d113      	bne.n	8004b8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <TIM_OC4_SetConfig+0xa4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC4_SetConfig+0x68>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <TIM_OC4_SetConfig+0xa8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40010400 	.word	0x40010400

08004c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e05a      	b.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d01d      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10c      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40001800 	.word	0x40001800

08004d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e03f      	b.n	8004e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fd f94a 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f829 	bl	8004e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e24:	b0c0      	sub	sp, #256	; 0x100
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	ea40 0301 	orr.w	r3, r0, r1
 8004e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e78:	f021 010c 	bic.w	r1, r1, #12
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e86:	430b      	orrs	r3, r1
 8004e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	6999      	ldr	r1, [r3, #24]
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	ea40 0301 	orr.w	r3, r0, r1
 8004ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b8f      	ldr	r3, [pc, #572]	; (80050ec <UART_SetConfig+0x2cc>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d005      	beq.n	8004ec0 <UART_SetConfig+0xa0>
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b8d      	ldr	r3, [pc, #564]	; (80050f0 <UART_SetConfig+0x2d0>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d104      	bne.n	8004eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7fe fdbc 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ec8:	e003      	b.n	8004ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eca:	f7fe fda3 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8004ece:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004edc:	f040 810c 	bne.w	80050f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004eea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004efa:	415b      	adcs	r3, r3
 8004efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f02:	4621      	mov	r1, r4
 8004f04:	eb12 0801 	adds.w	r8, r2, r1
 8004f08:	4629      	mov	r1, r5
 8004f0a:	eb43 0901 	adc.w	r9, r3, r1
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f22:	4690      	mov	r8, r2
 8004f24:	4699      	mov	r9, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	eb18 0303 	adds.w	r3, r8, r3
 8004f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f30:	462b      	mov	r3, r5
 8004f32:	eb49 0303 	adc.w	r3, r9, r3
 8004f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f4e:	460b      	mov	r3, r1
 8004f50:	18db      	adds	r3, r3, r3
 8004f52:	653b      	str	r3, [r7, #80]	; 0x50
 8004f54:	4613      	mov	r3, r2
 8004f56:	eb42 0303 	adc.w	r3, r2, r3
 8004f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f64:	f7fb f930 	bl	80001c8 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <UART_SetConfig+0x2d4>)
 8004f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	011c      	lsls	r4, r3, #4
 8004f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f90:	415b      	adcs	r3, r3
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f98:	4641      	mov	r1, r8
 8004f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb8:	4692      	mov	sl, r2
 8004fba:	469b      	mov	fp, r3
 8004fbc:	4643      	mov	r3, r8
 8004fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	18db      	adds	r3, r3, r3
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fea:	4613      	mov	r3, r2
 8004fec:	eb42 0303 	adc.w	r3, r2, r3
 8004ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ffa:	f7fb f8e5 	bl	80001c8 <__aeabi_uldivmod>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4611      	mov	r1, r2
 8005004:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <UART_SetConfig+0x2d4>)
 8005006:	fba3 2301 	umull	r2, r3, r3, r1
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2264      	movs	r2, #100	; 0x64
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	1acb      	subs	r3, r1, r3
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <UART_SetConfig+0x2d4>)
 800501c:	fba3 2302 	umull	r2, r3, r3, r2
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005028:	441c      	add	r4, r3
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005034:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	1891      	adds	r1, r2, r2
 8005042:	63b9      	str	r1, [r7, #56]	; 0x38
 8005044:	415b      	adcs	r3, r3
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800504c:	4641      	mov	r1, r8
 800504e:	1851      	adds	r1, r2, r1
 8005050:	6339      	str	r1, [r7, #48]	; 0x30
 8005052:	4649      	mov	r1, r9
 8005054:	414b      	adcs	r3, r1
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005064:	4659      	mov	r1, fp
 8005066:	00cb      	lsls	r3, r1, #3
 8005068:	4651      	mov	r1, sl
 800506a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506e:	4651      	mov	r1, sl
 8005070:	00ca      	lsls	r2, r1, #3
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	4603      	mov	r3, r0
 8005078:	4642      	mov	r2, r8
 800507a:	189b      	adds	r3, r3, r2
 800507c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005080:	464b      	mov	r3, r9
 8005082:	460a      	mov	r2, r1
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005098:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800509c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050a0:	460b      	mov	r3, r1
 80050a2:	18db      	adds	r3, r3, r3
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	4613      	mov	r3, r2
 80050a8:	eb42 0303 	adc.w	r3, r2, r3
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050b6:	f7fb f887 	bl	80001c8 <__aeabi_uldivmod>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <UART_SetConfig+0x2d4>)
 80050c0:	fba3 1302 	umull	r1, r3, r3, r2
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	2164      	movs	r1, #100	; 0x64
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	3332      	adds	r3, #50	; 0x32
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <UART_SetConfig+0x2d4>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	f003 0207 	and.w	r2, r3, #7
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4422      	add	r2, r4
 80050e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e8:	e105      	b.n	80052f6 <UART_SetConfig+0x4d6>
 80050ea:	bf00      	nop
 80050ec:	40011000 	.word	0x40011000
 80050f0:	40011400 	.word	0x40011400
 80050f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005102:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800510a:	4642      	mov	r2, r8
 800510c:	464b      	mov	r3, r9
 800510e:	1891      	adds	r1, r2, r2
 8005110:	6239      	str	r1, [r7, #32]
 8005112:	415b      	adcs	r3, r3
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
 8005116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800511a:	4641      	mov	r1, r8
 800511c:	1854      	adds	r4, r2, r1
 800511e:	4649      	mov	r1, r9
 8005120:	eb43 0501 	adc.w	r5, r3, r1
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	00eb      	lsls	r3, r5, #3
 800512e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005132:	00e2      	lsls	r2, r4, #3
 8005134:	4614      	mov	r4, r2
 8005136:	461d      	mov	r5, r3
 8005138:	4643      	mov	r3, r8
 800513a:	18e3      	adds	r3, r4, r3
 800513c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005140:	464b      	mov	r3, r9
 8005142:	eb45 0303 	adc.w	r3, r5, r3
 8005146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005166:	4629      	mov	r1, r5
 8005168:	008b      	lsls	r3, r1, #2
 800516a:	4621      	mov	r1, r4
 800516c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005170:	4621      	mov	r1, r4
 8005172:	008a      	lsls	r2, r1, #2
 8005174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005178:	f7fb f826 	bl	80001c8 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4b60      	ldr	r3, [pc, #384]	; (8005304 <UART_SetConfig+0x4e4>)
 8005182:	fba3 2302 	umull	r2, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	011c      	lsls	r4, r3, #4
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005194:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	61b9      	str	r1, [r7, #24]
 80051a4:	415b      	adcs	r3, r3
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ac:	4641      	mov	r1, r8
 80051ae:	1851      	adds	r1, r2, r1
 80051b0:	6139      	str	r1, [r7, #16]
 80051b2:	4649      	mov	r1, r9
 80051b4:	414b      	adcs	r3, r1
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c4:	4659      	mov	r1, fp
 80051c6:	00cb      	lsls	r3, r1, #3
 80051c8:	4651      	mov	r1, sl
 80051ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ce:	4651      	mov	r1, sl
 80051d0:	00ca      	lsls	r2, r1, #3
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	4642      	mov	r2, r8
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e0:	464b      	mov	r3, r9
 80051e2:	460a      	mov	r2, r1
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005204:	4649      	mov	r1, r9
 8005206:	008b      	lsls	r3, r1, #2
 8005208:	4641      	mov	r1, r8
 800520a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520e:	4641      	mov	r1, r8
 8005210:	008a      	lsls	r2, r1, #2
 8005212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005216:	f7fa ffd7 	bl	80001c8 <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4b39      	ldr	r3, [pc, #228]	; (8005304 <UART_SetConfig+0x4e4>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	3332      	adds	r3, #50	; 0x32
 8005232:	4a34      	ldr	r2, [pc, #208]	; (8005304 <UART_SetConfig+0x4e4>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523e:	441c      	add	r4, r3
 8005240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005244:	2200      	movs	r2, #0
 8005246:	673b      	str	r3, [r7, #112]	; 0x70
 8005248:	677a      	str	r2, [r7, #116]	; 0x74
 800524a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800524e:	4642      	mov	r2, r8
 8005250:	464b      	mov	r3, r9
 8005252:	1891      	adds	r1, r2, r2
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	415b      	adcs	r3, r3
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525e:	4641      	mov	r1, r8
 8005260:	1851      	adds	r1, r2, r1
 8005262:	6039      	str	r1, [r7, #0]
 8005264:	4649      	mov	r1, r9
 8005266:	414b      	adcs	r3, r1
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005276:	4659      	mov	r1, fp
 8005278:	00cb      	lsls	r3, r1, #3
 800527a:	4651      	mov	r1, sl
 800527c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005280:	4651      	mov	r1, sl
 8005282:	00ca      	lsls	r2, r1, #3
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	4603      	mov	r3, r0
 800528a:	4642      	mov	r2, r8
 800528c:	189b      	adds	r3, r3, r2
 800528e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005290:	464b      	mov	r3, r9
 8005292:	460a      	mov	r2, r1
 8005294:	eb42 0303 	adc.w	r3, r2, r3
 8005298:	66fb      	str	r3, [r7, #108]	; 0x6c
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	663b      	str	r3, [r7, #96]	; 0x60
 80052a4:	667a      	str	r2, [r7, #100]	; 0x64
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052b2:	4649      	mov	r1, r9
 80052b4:	008b      	lsls	r3, r1, #2
 80052b6:	4641      	mov	r1, r8
 80052b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052bc:	4641      	mov	r1, r8
 80052be:	008a      	lsls	r2, r1, #2
 80052c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052c4:	f7fa ff80 	bl	80001c8 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <UART_SetConfig+0x4e4>)
 80052ce:	fba3 1302 	umull	r1, r3, r3, r2
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	2164      	movs	r1, #100	; 0x64
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	3332      	adds	r3, #50	; 0x32
 80052e0:	4a08      	ldr	r2, [pc, #32]	; (8005304 <UART_SetConfig+0x4e4>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4422      	add	r2, r4
 80052f4:	609a      	str	r2, [r3, #8]
}
 80052f6:	bf00      	nop
 80052f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005302:	bf00      	nop
 8005304:	51eb851f 	.word	0x51eb851f

08005308 <__libc_init_array>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	4d0d      	ldr	r5, [pc, #52]	; (8005340 <__libc_init_array+0x38>)
 800530c:	4c0d      	ldr	r4, [pc, #52]	; (8005344 <__libc_init_array+0x3c>)
 800530e:	1b64      	subs	r4, r4, r5
 8005310:	10a4      	asrs	r4, r4, #2
 8005312:	2600      	movs	r6, #0
 8005314:	42a6      	cmp	r6, r4
 8005316:	d109      	bne.n	800532c <__libc_init_array+0x24>
 8005318:	4d0b      	ldr	r5, [pc, #44]	; (8005348 <__libc_init_array+0x40>)
 800531a:	4c0c      	ldr	r4, [pc, #48]	; (800534c <__libc_init_array+0x44>)
 800531c:	f000 f87c 	bl	8005418 <_init>
 8005320:	1b64      	subs	r4, r4, r5
 8005322:	10a4      	asrs	r4, r4, #2
 8005324:	2600      	movs	r6, #0
 8005326:	42a6      	cmp	r6, r4
 8005328:	d105      	bne.n	8005336 <__libc_init_array+0x2e>
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005330:	4798      	blx	r3
 8005332:	3601      	adds	r6, #1
 8005334:	e7ee      	b.n	8005314 <__libc_init_array+0xc>
 8005336:	f855 3b04 	ldr.w	r3, [r5], #4
 800533a:	4798      	blx	r3
 800533c:	3601      	adds	r6, #1
 800533e:	e7f2      	b.n	8005326 <__libc_init_array+0x1e>
 8005340:	08005da4 	.word	0x08005da4
 8005344:	08005da4 	.word	0x08005da4
 8005348:	08005da4 	.word	0x08005da4
 800534c:	08005da8 	.word	0x08005da8

08005350 <__itoa>:
 8005350:	1e93      	subs	r3, r2, #2
 8005352:	2b22      	cmp	r3, #34	; 0x22
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	d904      	bls.n	8005364 <__itoa+0x14>
 800535a:	2300      	movs	r3, #0
 800535c:	700b      	strb	r3, [r1, #0]
 800535e:	461c      	mov	r4, r3
 8005360:	4620      	mov	r0, r4
 8005362:	bd10      	pop	{r4, pc}
 8005364:	2a0a      	cmp	r2, #10
 8005366:	d109      	bne.n	800537c <__itoa+0x2c>
 8005368:	2800      	cmp	r0, #0
 800536a:	da07      	bge.n	800537c <__itoa+0x2c>
 800536c:	232d      	movs	r3, #45	; 0x2d
 800536e:	700b      	strb	r3, [r1, #0]
 8005370:	4240      	negs	r0, r0
 8005372:	2101      	movs	r1, #1
 8005374:	4421      	add	r1, r4
 8005376:	f000 f80d 	bl	8005394 <__utoa>
 800537a:	e7f1      	b.n	8005360 <__itoa+0x10>
 800537c:	2100      	movs	r1, #0
 800537e:	e7f9      	b.n	8005374 <__itoa+0x24>

08005380 <itoa>:
 8005380:	f7ff bfe6 	b.w	8005350 <__itoa>

08005384 <memset>:
 8005384:	4402      	add	r2, r0
 8005386:	4603      	mov	r3, r0
 8005388:	4293      	cmp	r3, r2
 800538a:	d100      	bne.n	800538e <memset+0xa>
 800538c:	4770      	bx	lr
 800538e:	f803 1b01 	strb.w	r1, [r3], #1
 8005392:	e7f9      	b.n	8005388 <memset+0x4>

08005394 <__utoa>:
 8005394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005396:	4c1f      	ldr	r4, [pc, #124]	; (8005414 <__utoa+0x80>)
 8005398:	b08b      	sub	sp, #44	; 0x2c
 800539a:	4605      	mov	r5, r0
 800539c:	460b      	mov	r3, r1
 800539e:	466e      	mov	r6, sp
 80053a0:	f104 0c20 	add.w	ip, r4, #32
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	6861      	ldr	r1, [r4, #4]
 80053a8:	4637      	mov	r7, r6
 80053aa:	c703      	stmia	r7!, {r0, r1}
 80053ac:	3408      	adds	r4, #8
 80053ae:	4564      	cmp	r4, ip
 80053b0:	463e      	mov	r6, r7
 80053b2:	d1f7      	bne.n	80053a4 <__utoa+0x10>
 80053b4:	7921      	ldrb	r1, [r4, #4]
 80053b6:	7139      	strb	r1, [r7, #4]
 80053b8:	1e91      	subs	r1, r2, #2
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	6038      	str	r0, [r7, #0]
 80053be:	2922      	cmp	r1, #34	; 0x22
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	d904      	bls.n	80053d0 <__utoa+0x3c>
 80053c6:	7019      	strb	r1, [r3, #0]
 80053c8:	460b      	mov	r3, r1
 80053ca:	4618      	mov	r0, r3
 80053cc:	b00b      	add	sp, #44	; 0x2c
 80053ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d0:	1e58      	subs	r0, r3, #1
 80053d2:	4684      	mov	ip, r0
 80053d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80053d8:	fb02 5617 	mls	r6, r2, r7, r5
 80053dc:	3628      	adds	r6, #40	; 0x28
 80053de:	446e      	add	r6, sp
 80053e0:	460c      	mov	r4, r1
 80053e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80053e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80053ea:	462e      	mov	r6, r5
 80053ec:	42b2      	cmp	r2, r6
 80053ee:	f101 0101 	add.w	r1, r1, #1
 80053f2:	463d      	mov	r5, r7
 80053f4:	d9ee      	bls.n	80053d4 <__utoa+0x40>
 80053f6:	2200      	movs	r2, #0
 80053f8:	545a      	strb	r2, [r3, r1]
 80053fa:	1919      	adds	r1, r3, r4
 80053fc:	1aa5      	subs	r5, r4, r2
 80053fe:	42aa      	cmp	r2, r5
 8005400:	dae3      	bge.n	80053ca <__utoa+0x36>
 8005402:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005406:	780e      	ldrb	r6, [r1, #0]
 8005408:	7006      	strb	r6, [r0, #0]
 800540a:	3201      	adds	r2, #1
 800540c:	f801 5901 	strb.w	r5, [r1], #-1
 8005410:	e7f4      	b.n	80053fc <__utoa+0x68>
 8005412:	bf00      	nop
 8005414:	08005d74 	.word	0x08005d74

08005418 <_init>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr

08005424 <_fini>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr
